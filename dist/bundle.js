(()=>{var e={82:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){return'<div class="game-arena">\r\n    <div class="first-player-arena"></div>\r\n    <div class="middle-bisector">\r\n        <div class="rounds-container">\r\n            <p>Round <span class="round-num">1</span></p>\r\n        </div>\r\n    </div>\r\n    <div class="second-player-arena"></div>\r\n</div>'},useData:!0})},134:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({1:function(e,t,r,n,i){return'    <div class="board-block"></div>\r\n'},compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){var s,a=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return null!=(s=a(r,"each").call(null!=t?t:e.nullContext||{},null!=t?a(t,"blocks"):t,{name:"each",hash:{},fn:e.program(1,i,0),inverse:e.noop,data:i,loc:{start:{line:1,column:0},end:{line:3,column:9}}}))?s:""},useData:!0})},661:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){return'<div class="modal-container">\r\n    <div class="game-type-modal">\r\n        <div class="modal-header">\r\n            <h2>Game Type</h2>\r\n        </div>\r\n        <div class="modal-body">\r\n            <section class="section-type-options">\r\n                <form id="form-game-type">\r\n                    <label for="single-player">\r\n                        <input\r\n                            type="radio"\r\n                            id="single-player"\r\n                            name="game-type"\r\n                            value="1"\r\n                            checked\r\n                        />\r\n                        <span>Single Player</span>\r\n                    </label>\r\n\r\n                    <label for="multiplayer">\r\n                        <input\r\n                            type="radio"\r\n                            id="multiplayer"\r\n                            name="game-type"\r\n                            value="2"\r\n                        />\r\n                        <span>Multiplayer</span>\r\n                    </label>\r\n                </form>\r\n            </section>\r\n        </div>\r\n        <hr class="icy-hr" />\r\n        <div class="modal-options">\r\n            <button class="btn-play">Play</button>\r\n        </div>\r\n    </div>\r\n</div>'},useData:!0})},508:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){return'<div class="modal-container">\r\n    <div class="grid-size-modal">\r\n        <div class="modal-header">\r\n            <h2>Options</h2>\r\n        </div>\r\n        <div class="modal-body">\r\n            <section class="section-grid-size">\r\n                <header>\r\n                    <h3>Grid Size</h3>\r\n                </header>\r\n                <span class="width-label">Width</span>\r\n                <div class="width-counter">\r\n                    <span class="minus">\r\n                        <svg\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-dash-lg"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                fill-rule="evenodd"\r\n                                d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8Z"\r\n                            ></path>\r\n                        </svg>\r\n                    </span>\r\n                    <span class="number"></span>\r\n                    <span class="plus"><svg\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-plus-lg"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                fill-rule="evenodd"\r\n                                d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z"\r\n                            ></path>\r\n                        </svg></span>\r\n                </div>\r\n                <span class="height-label">Height</span>\r\n                <div class="height-counter">\r\n                    <span class="minus"><svg\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-dash-lg"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                fill-rule="evenodd"\r\n                                d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8Z"\r\n                            ></path>\r\n                        </svg></span>\r\n                    <span class="number">1</span>\r\n                    <span class="plus"><svg\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-plus-lg"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                fill-rule="evenodd"\r\n                                d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z"\r\n                            ></path>\r\n                        </svg></span>\r\n                </div>\r\n                <div class="board"></div>\r\n            </section>\r\n        </div>\r\n        <hr class="icy-hr" />\r\n        <div class="modal-options">\r\n            <button class="btn-next">Next</button>\r\n        </div>\r\n        <div class="modal-spacer"></div>\r\n    </div>\r\n</div>'},useData:!0})},129:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){return'<div class="modal-container">\r\n    <div class="rules-modal">\r\n        <div class="modal-header">\r\n            <h2>Rules</h2>\r\n        </div>\r\n        <div class="modal-body">\r\n            <section class="section-overview">\r\n                <header>\r\n                    <h3>Overview</h3>\r\n                </header>\r\n                <p>\r\n                    Battleship is a war-themed board game for two players in which the opponents try\r\n                    to guess the location of their opponent\'s warships and sink them.\r\n                </p>\r\n            </section>\r\n            <section class="section-gameplay">\r\n                <header>\r\n                    <h3>Gameplay</h3>\r\n                </header>\r\n                <ol>\r\n                    <li>Both players agree on the size of their boards.</li>\r\n                    <li>Both players agree on the number of the ships and their length which will be\r\n                        placed on the boards.</li>\r\n                    <li>\r\n                        Each player hides their ships in their board. Note: Make sure that the other\r\n                        player can not see the screen while your are placing the ships.\r\n                    </li>\r\n                    <li>\r\n                        When the game starts players take turns attacking their enemy board, this is\r\n                        done by choosing a cell on the board.\r\n                        <ul>\r\n                            <li>\r\n                                If there is a part of the ship under the attacked cell then the\r\n                                attack succeded and the player continue to attack another cell.\r\n                            </li>\r\n                            <li>\r\n                                Otherwise the attack failed and the other player starts his turn.\r\n                            </li>\r\n                        </ul>\r\n                    </li>\r\n                    <li>\r\n                        The winner is the first to reveal all the hidden ships in their enemy\'s\r\n                        board.\r\n                    </li>\r\n                </ol>\r\n            </section>\r\n        </div>\r\n        <hr class="icy-hr" />\r\n        <div class="modal-options">\r\n            <button class="btn-start">Start</button>\r\n        </div>\r\n        <div class="modal-spacer"></div>\r\n    </div>\r\n</div>'},useData:!0})},569:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){return'<div class="modal-container">\r\n    <div class="ships-choosing-modal">\r\n        <div class="modal-header">\r\n            <h2>Options</h2>\r\n        </div>\r\n        <div class="modal-body">\r\n            <section class="section-choose-ships">\r\n                <header>\r\n                    <h3>Choose Ships</h3>\r\n                </header>\r\n                <div class="ships">\r\n                    <div class="pages-container"></div>\r\n                </div>\r\n                <div class="pagination">\r\n                    <div class="arrow-container arrow-container-button">\r\n                        <svg\r\n                            class="left-arrow"\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-caret-left-fill"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z"\r\n                            ></path>\r\n                        </svg>\r\n                    </div>\r\n                    <p><span class="current-page">1</span>\r\n                        /\r\n                        <span class="pages-num"></span></p>\r\n                    <div class="arrow-container arrow-container-button">\r\n                        <svg\r\n                            class="right-arrow"\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-caret-right-fill"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"\r\n                            ></path>\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n        <hr class="icy-hr" />\r\n        <div class="modal-options">\r\n            <button class="btn-back">Back</button>\r\n            <button class="btn-submit">Next</button>\r\n        </div>\r\n        <div class="modal-spacer"></div>\r\n    </div>\r\n</div>'},useData:!0})},257:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){var s,a=null!=t?t:e.nullContext||{},o=e.hooks.helperMissing,l="function",h=e.escapeExpression,c=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'<div class="ship-container" data-length="'+h(typeof(s=null!=(s=c(r,"shipLength")||(null!=t?c(t,"shipLength"):t))?s:o)===l?s.call(a,{name:"shipLength",hash:{},data:i,loc:{start:{line:1,column:41},end:{line:1,column:55}}}):s)+'">\r\n    <div class="ship active">\r\n        <div class="ship-block"></div>\r\n    </div>\r\n    <div class="count">\r\n        x\r\n        <span class="number">'+h(typeof(s=null!=(s=c(r,"shipCount")||(null!=t?c(t,"shipCount"):t))?s:o)===l?s.call(a,{name:"shipCount",hash:{},data:i,loc:{start:{line:7,column:29},end:{line:7,column:42}}}):s)+"</span>\r\n    </div>\r\n</div>"},useData:!0})},460:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){var s,a=null!=t?t:e.nullContext||{},o=e.hooks.helperMissing,l="function",h=e.escapeExpression,c=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'<div class="ship-container" data-length="'+h(typeof(s=null!=(s=c(r,"shipLength")||(null!=t?c(t,"shipLength"):t))?s:o)===l?s.call(a,{name:"shipLength",hash:{},data:i,loc:{start:{line:1,column:41},end:{line:1,column:55}}}):s)+'">\r\n    <div class="counter">\r\n        <span class="minus">\r\n            <svg\r\n                xmlns="http://www.w3.org/2000/svg"\r\n                width="16"\r\n                height="16"\r\n                fill="currentColor"\r\n                class="bi bi-dash-lg"\r\n                viewBox="0 0 16 16"\r\n            >\r\n                <path\r\n                    fill-rule="evenodd"\r\n                    d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8Z"\r\n                ></path>\r\n            </svg>\r\n        </span>\r\n        <div class="ship">\r\n            \r\n        </div>\r\n        <span class="plus"><svg\r\n                xmlns="http://www.w3.org/2000/svg"\r\n                width="16"\r\n                height="16"\r\n                fill="currentColor"\r\n                class="bi bi-plus-lg"\r\n                viewBox="0 0 16 16"\r\n            >\r\n                <path\r\n                    fill-rule="evenodd"\r\n                    d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z"\r\n                ></path>\r\n            </svg></span>\r\n    </div>\r\n    <div class="count">\r\n        x\r\n        <span class="number">'+h(typeof(s=null!=(s=c(r,"shipCount")||(null!=t?c(t,"shipCount"):t))?s:o)===l?s.call(a,{name:"shipCount",hash:{},data:i,loc:{start:{line:37,column:29},end:{line:37,column:42}}}):s)+"</span>\r\n    </div>\r\n</div>"},useData:!0})},72:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){var s,a=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'<div class="modal-container">\r\n        <div class="ships-placing-modal">\r\n            <div class="modal-header">\r\n                <h2>'+e.escapeExpression("function"==typeof(s=null!=(s=a(r,"playerLabel")||(null!=t?a(t,"playerLabel"):t))?s:e.hooks.helperMissing)?s.call(null!=t?t:e.nullContext||{},{name:"playerLabel",hash:{},data:i,loc:{start:{line:4,column:20},end:{line:4,column:35}}}):s)+'</h2>\r\n            </div>\r\n            <div class="modal-body">\r\n                <section class="section-player-name">\r\n                    <header>\r\n                        <h3>Player Name</h3>\r\n                    </header>\r\n                    <form class="form-player-name">\r\n                        <div class="floating-label-input">\r\n                            <input\r\n                                type="text"\r\n                                name="name"\r\n                                id="name"\r\n                                placeholder=" "\r\n                                autocomplete="off"\r\n                            />\r\n                            <label for="name">\r\n                            </label>\r\n                        </div>\r\n                    </form>\r\n                </section>\r\n                <hr class="icy-hr" />\r\n                <section class="place-ships">\r\n                    <header>\r\n                        <h3>Place Ships</h3>\r\n                    </header>\r\n                    <div class="ships">\r\n                        <div class="pages-container">\r\n\r\n                        </div>\r\n                        <div class="pagination">\r\n                            <div class="arrow-container arrow-container-button">\r\n                                <svg\r\n                                    class="left-arrow"\r\n                                    xmlns="http://www.w3.org/2000/svg"\r\n                                    width="16"\r\n                                    height="16"\r\n                                    fill="currentColor"\r\n                                    class="bi bi-caret-left-fill"\r\n                                    viewBox="0 0 16 16"\r\n                                >\r\n                                    <path\r\n                                        d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z"\r\n                                    ></path>\r\n                                </svg>\r\n                            </div>\r\n                            <p><span class="current-page">1</span>\r\n                                /\r\n                                <span class="pages-num"></span></p>\r\n                            <div class="arrow-container arrow-container-button">\r\n                                <svg\r\n                                    class="right-arrow"\r\n                                    xmlns="http://www.w3.org/2000/svg"\r\n                                    width="16"\r\n                                    height="16"\r\n                                    fill="currentColor"\r\n                                    class="bi bi-caret-right-fill"\r\n                                    viewBox="0 0 16 16"\r\n                                >\r\n                                    <path\r\n                                        d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"\r\n                                    ></path>\r\n                                </svg>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class="board-container">\r\n                        <div class="board"></div>\r\n                        <div class="place-options">\r\n                            <button class="btn-h active">H</button>\r\n                            <button class="btn-v">V</button>\r\n                            <button class="btn-remove">\r\n                                <svg\r\n                                    xmlns="http://www.w3.org/2000/svg"\r\n                                    width="20"\r\n                                    height="20"\r\n                                    fill="white"\r\n                                    class="bi bi-trash-fill"\r\n                                    viewBox="0 0 16 16"\r\n                                >\r\n                                    <path\r\n                                        d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z"\r\n                                    ></path>\r\n                                </svg>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div class="auto-place-container">\r\n                        <button class="btn-auto-place">Random Placing</button>\r\n                        <p class="text-error d-none">*Couldn\'t place ships</p>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n            <hr class="icy-hr" />\r\n            <div class="modal-options">\r\n                <button class="btn-back">Back</button>\r\n                <button class="btn-submit">Next</button>\r\n            </div>\r\n            <div class="modal-spacer"></div>\r\n    </div>\r\n</div>'},useData:!0})},344:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){return'<div class="turn-row">\r\n    <div class="turn-container">\r\n        <p>Your Turn</p>\r\n    </div>\r\n</div>\r\n\r\n<div class="board">\r\n\r\n</div>\r\n\r\n<div class="ships-remained-container-responsive">\r\n    <div class="ships">\r\n\r\n    </div>\r\n    <div class="pagination">\r\n        <div class="arrow-container">\r\n            <svg\r\n                class="left-arrow"\r\n                xmlns="http://www.w3.org/2000/svg"\r\n                width="16"\r\n                height="16"\r\n                fill="currentColor"\r\n                class="bi bi-caret-left-fill"\r\n                viewBox="0 0 16 16"\r\n            >\r\n                <path\r\n                    d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z"\r\n                ></path>\r\n            </svg>\r\n        </div>\r\n        <div class="arrow-container">\r\n            <svg\r\n                class="right-arrow"\r\n                xmlns="http://www.w3.org/2000/svg"\r\n                width="16"\r\n                height="16"\r\n                fill="currentColor"\r\n                class="bi bi-caret-right-fill"\r\n                viewBox="0 0 16 16"\r\n            >\r\n                <path\r\n                    d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"\r\n                ></path>\r\n            </svg>\r\n        </div>\r\n    </div>\r\n    <div class="info">\r\n        <img src="./assets/img/info-circle-fill.svg" alt="" />\r\n    </div>\r\n</div>\r\n\r\n<div class="score-container">\r\n    <p class="name"></p>\r\n    <p>Wins: <span class="wins">0</span></p>\r\n    <p>Losses: <span class="losses">0</span></p>\r\n</div>\r\n\r\n<div class="darkening"></div>'},useData:!0})},834:(e,t,r)=>{"use strict";function n(e){return e&&e.__esModule?e:{default:e}}function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}t.__esModule=!0;var s=i(r(67)),a=n(r(558)),o=n(r(728)),l=i(r(392)),h=i(r(628)),c=n(r(982));function d(){var e=new s.HandlebarsEnvironment;return l.extend(e,s),e.SafeString=a.default,e.Exception=o.default,e.Utils=l,e.escapeExpression=l.escapeExpression,e.VM=h,e.template=function(t){return h.template(t,e)},e}var u=d();u.create=d,c.default(u),u.default=u,t.default=u,e.exports=t.default},67:(e,t,r)=>{"use strict";function n(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.HandlebarsEnvironment=d;var i=r(392),s=n(r(728)),a=r(638),o=r(881),l=n(r(37)),h=r(293);t.VERSION="4.7.7",t.COMPILER_REVISION=8,t.LAST_COMPATIBLE_COMPILER_REVISION=7,t.REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0 <4.3.0",8:">= 4.3.0"};var c="[object Object]";function d(e,t,r){this.helpers=e||{},this.partials=t||{},this.decorators=r||{},a.registerDefaultHelpers(this),o.registerDefaultDecorators(this)}d.prototype={constructor:d,logger:l.default,log:l.default.log,registerHelper:function(e,t){if(i.toString.call(e)===c){if(t)throw new s.default("Arg not supported with multiple helpers");i.extend(this.helpers,e)}else this.helpers[e]=t},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,t){if(i.toString.call(e)===c)i.extend(this.partials,e);else{if(void 0===t)throw new s.default('Attempting to register a partial called "'+e+'" as undefined');this.partials[e]=t}},unregisterPartial:function(e){delete this.partials[e]},registerDecorator:function(e,t){if(i.toString.call(e)===c){if(t)throw new s.default("Arg not supported with multiple decorators");i.extend(this.decorators,e)}else this.decorators[e]=t},unregisterDecorator:function(e){delete this.decorators[e]},resetLoggedPropertyAccesses:function(){h.resetLoggedProperties()}};var u=l.default.log;t.log=u,t.createFrame=i.createFrame,t.logger=l.default},881:(e,t,r)=>{"use strict";t.__esModule=!0,t.registerDefaultDecorators=function(e){i.default(e)};var n,i=(n=r(670))&&n.__esModule?n:{default:n}},670:(e,t,r)=>{"use strict";t.__esModule=!0;var n=r(392);t.default=function(e){e.registerDecorator("inline",(function(e,t,r,i){var s=e;return t.partials||(t.partials={},s=function(i,s){var a=r.partials;r.partials=n.extend({},a,t.partials);var o=e(i,s);return r.partials=a,o}),t.partials[i.args[0]]=i.fn,s}))},e.exports=t.default},728:(e,t)=>{"use strict";t.__esModule=!0;var r=["description","fileName","lineNumber","endLineNumber","message","name","number","stack"];function n(e,t){var i=t&&t.loc,s=void 0,a=void 0,o=void 0,l=void 0;i&&(s=i.start.line,a=i.end.line,o=i.start.column,l=i.end.column,e+=" - "+s+":"+o);for(var h=Error.prototype.constructor.call(this,e),c=0;c<r.length;c++)this[r[c]]=h[r[c]];Error.captureStackTrace&&Error.captureStackTrace(this,n);try{i&&(this.lineNumber=s,this.endLineNumber=a,Object.defineProperty?(Object.defineProperty(this,"column",{value:o,enumerable:!0}),Object.defineProperty(this,"endColumn",{value:l,enumerable:!0})):(this.column=o,this.endColumn=l))}catch(e){}}n.prototype=new Error,t.default=n,e.exports=t.default},638:(e,t,r)=>{"use strict";function n(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.registerDefaultHelpers=function(e){i.default(e),s.default(e),a.default(e),o.default(e),l.default(e),h.default(e),c.default(e)},t.moveHelperToHooks=function(e,t,r){e.helpers[t]&&(e.hooks[t]=e.helpers[t],r||delete e.helpers[t])};var i=n(r(342)),s=n(r(822)),a=n(r(905)),o=n(r(405)),l=n(r(702)),h=n(r(593)),c=n(r(978))},342:(e,t,r)=>{"use strict";t.__esModule=!0;var n=r(392);t.default=function(e){e.registerHelper("blockHelperMissing",(function(t,r){var i=r.inverse,s=r.fn;if(!0===t)return s(this);if(!1===t||null==t)return i(this);if(n.isArray(t))return t.length>0?(r.ids&&(r.ids=[r.name]),e.helpers.each(t,r)):i(this);if(r.data&&r.ids){var a=n.createFrame(r.data);a.contextPath=n.appendContextPath(r.data.contextPath,r.name),r={data:a}}return s(t,r)}))},e.exports=t.default},822:(e,t,r)=>{"use strict";t.__esModule=!0;var n,i=r(392),s=(n=r(728))&&n.__esModule?n:{default:n};t.default=function(e){e.registerHelper("each",(function(e,t){if(!t)throw new s.default("Must pass iterator to #each");var n,a=t.fn,o=t.inverse,l=0,h="",c=void 0,d=void 0;function u(t,r,n){c&&(c.key=t,c.index=r,c.first=0===r,c.last=!!n,d&&(c.contextPath=d+t)),h+=a(e[t],{data:c,blockParams:i.blockParams([e[t],t],[d+t,null])})}if(t.data&&t.ids&&(d=i.appendContextPath(t.data.contextPath,t.ids[0])+"."),i.isFunction(e)&&(e=e.call(this)),t.data&&(c=i.createFrame(t.data)),e&&"object"==typeof e)if(i.isArray(e))for(var p=e.length;l<p;l++)l in e&&u(l,l,l===e.length-1);else if(r.g.Symbol&&e[r.g.Symbol.iterator]){for(var m=[],g=e[r.g.Symbol.iterator](),f=g.next();!f.done;f=g.next())m.push(f.value);for(p=(e=m).length;l<p;l++)u(l,l,l===e.length-1)}else n=void 0,Object.keys(e).forEach((function(e){void 0!==n&&u(n,l-1),n=e,l++})),void 0!==n&&u(n,l-1,!0);return 0===l&&(h=o(this)),h}))},e.exports=t.default},905:(e,t,r)=>{"use strict";t.__esModule=!0;var n,i=(n=r(728))&&n.__esModule?n:{default:n};t.default=function(e){e.registerHelper("helperMissing",(function(){if(1!==arguments.length)throw new i.default('Missing helper: "'+arguments[arguments.length-1].name+'"')}))},e.exports=t.default},405:(e,t,r)=>{"use strict";t.__esModule=!0;var n,i=r(392),s=(n=r(728))&&n.__esModule?n:{default:n};t.default=function(e){e.registerHelper("if",(function(e,t){if(2!=arguments.length)throw new s.default("#if requires exactly one argument");return i.isFunction(e)&&(e=e.call(this)),!t.hash.includeZero&&!e||i.isEmpty(e)?t.inverse(this):t.fn(this)})),e.registerHelper("unless",(function(t,r){if(2!=arguments.length)throw new s.default("#unless requires exactly one argument");return e.helpers.if.call(this,t,{fn:r.inverse,inverse:r.fn,hash:r.hash})}))},e.exports=t.default},702:(e,t)=>{"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("log",(function(){for(var t=[void 0],r=arguments[arguments.length-1],n=0;n<arguments.length-1;n++)t.push(arguments[n]);var i=1;null!=r.hash.level?i=r.hash.level:r.data&&null!=r.data.level&&(i=r.data.level),t[0]=i,e.log.apply(e,t)}))},e.exports=t.default},593:(e,t)=>{"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("lookup",(function(e,t,r){return e?r.lookupProperty(e,t):e}))},e.exports=t.default},978:(e,t,r)=>{"use strict";t.__esModule=!0;var n,i=r(392),s=(n=r(728))&&n.__esModule?n:{default:n};t.default=function(e){e.registerHelper("with",(function(e,t){if(2!=arguments.length)throw new s.default("#with requires exactly one argument");i.isFunction(e)&&(e=e.call(this));var r=t.fn;if(i.isEmpty(e))return t.inverse(this);var n=t.data;return t.data&&t.ids&&((n=i.createFrame(t.data)).contextPath=i.appendContextPath(t.data.contextPath,t.ids[0])),r(e,{data:n,blockParams:i.blockParams([e],[n&&n.contextPath])})}))},e.exports=t.default},572:(e,t,r)=>{"use strict";t.__esModule=!0,t.createNewLookupObject=function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];return n.extend.apply(void 0,[Object.create(null)].concat(t))};var n=r(392)},293:(e,t,r)=>{"use strict";t.__esModule=!0,t.createProtoAccessControl=function(e){var t=Object.create(null);t.constructor=!1,t.__defineGetter__=!1,t.__defineSetter__=!1,t.__lookupGetter__=!1;var r=Object.create(null);return r.__proto__=!1,{properties:{whitelist:n.createNewLookupObject(r,e.allowedProtoProperties),defaultValue:e.allowProtoPropertiesByDefault},methods:{whitelist:n.createNewLookupObject(t,e.allowedProtoMethods),defaultValue:e.allowProtoMethodsByDefault}}},t.resultIsAllowed=function(e,t,r){return function(e,t){return void 0!==e.whitelist[t]?!0===e.whitelist[t]:void 0!==e.defaultValue?e.defaultValue:(function(e){!0!==s[e]&&(s[e]=!0,i.log("error",'Handlebars: Access has been denied to resolve the property "'+e+'" because it is not an "own property" of its parent.\nYou can add a runtime option to disable the check or this warning:\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details'))}(t),!1)}("function"==typeof e?t.methods:t.properties,r)},t.resetLoggedProperties=function(){Object.keys(s).forEach((function(e){delete s[e]}))};var n=r(572),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(r(37)),s=Object.create(null)},5:(e,t)=>{"use strict";t.__esModule=!0,t.wrapHelper=function(e,t){return"function"!=typeof e?e:function(){return arguments[arguments.length-1]=t(arguments[arguments.length-1]),e.apply(this,arguments)}}},37:(e,t,r)=>{"use strict";t.__esModule=!0;var n=r(392),i={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(e){if("string"==typeof e){var t=n.indexOf(i.methodMap,e.toLowerCase());e=t>=0?t:parseInt(e,10)}return e},log:function(e){if(e=i.lookupLevel(e),"undefined"!=typeof console&&i.lookupLevel(i.level)<=e){var t=i.methodMap[e];console[t]||(t="log");for(var r=arguments.length,n=Array(r>1?r-1:0),s=1;s<r;s++)n[s-1]=arguments[s];console[t].apply(console,n)}}};t.default=i,e.exports=t.default},982:(e,t,r)=>{"use strict";t.__esModule=!0,t.default=function(e){var t=void 0!==r.g?r.g:window,n=t.Handlebars;e.noConflict=function(){return t.Handlebars===e&&(t.Handlebars=n),e}},e.exports=t.default},628:(e,t,r)=>{"use strict";t.__esModule=!0,t.checkRevision=function(e){var t=e&&e[0]||1,r=a.COMPILER_REVISION;if(!(t>=a.LAST_COMPATIBLE_COMPILER_REVISION&&t<=a.COMPILER_REVISION)){if(t<a.LAST_COMPATIBLE_COMPILER_REVISION){var n=a.REVISION_CHANGES[r],i=a.REVISION_CHANGES[t];throw new s.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+n+") or downgrade your runtime to an older version ("+i+").")}throw new s.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")}},t.template=function(e,t){if(!t)throw new s.default("No environment passed to template");if(!e||!e.main)throw new s.default("Unknown template object: "+typeof e);e.main.decorator=e.main_d,t.VM.checkRevision(e.compiler);var r=e.compiler&&7===e.compiler[0],n={strict:function(e,t,r){if(!e||!(t in e))throw new s.default('"'+t+'" not defined in '+e,{loc:r});return n.lookupProperty(e,t)},lookupProperty:function(e,t){var r=e[t];return null==r||Object.prototype.hasOwnProperty.call(e,t)||h.resultIsAllowed(r,n.protoAccessControl,t)?r:void 0},lookup:function(e,t){for(var r=e.length,i=0;i<r;i++)if(null!=(e[i]&&n.lookupProperty(e[i],t)))return e[i][t]},lambda:function(e,t){return"function"==typeof e?e.call(t):e},escapeExpression:i.escapeExpression,invokePartial:function(r,n,a){a.hash&&(n=i.extend({},n,a.hash),a.ids&&(a.ids[0]=!0)),r=t.VM.resolvePartial.call(this,r,n,a);var o=i.extend({},a,{hooks:this.hooks,protoAccessControl:this.protoAccessControl}),l=t.VM.invokePartial.call(this,r,n,o);if(null==l&&t.compile&&(a.partials[a.name]=t.compile(r,e.compilerOptions,t),l=a.partials[a.name](n,o)),null!=l){if(a.indent){for(var h=l.split("\n"),c=0,d=h.length;c<d&&(h[c]||c+1!==d);c++)h[c]=a.indent+h[c];l=h.join("\n")}return l}throw new s.default("The partial "+a.name+" could not be compiled when running in runtime-only mode")},fn:function(t){var r=e[t];return r.decorator=e[t+"_d"],r},programs:[],program:function(e,t,r,n,i){var s=this.programs[e],a=this.fn(e);return t||i||n||r?s=c(this,e,a,t,r,n,i):s||(s=this.programs[e]=c(this,e,a)),s},data:function(e,t){for(;e&&t--;)e=e._parent;return e},mergeIfNeeded:function(e,t){var r=e||t;return e&&t&&e!==t&&(r=i.extend({},t,e)),r},nullContext:Object.seal({}),noop:t.VM.noop,compilerInfo:e.compiler};function a(t){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],i=r.data;a._setup(r),!r.partial&&e.useData&&(i=u(t,i));var s=void 0,o=e.useBlockParams?[]:void 0;function l(t){return""+e.main(n,t,n.helpers,n.partials,i,o,s)}return e.useDepths&&(s=r.depths?t!=r.depths[0]?[t].concat(r.depths):r.depths:[t]),(l=p(e.main,l,n,r.depths||[],i,o))(t,r)}return a.isTop=!0,a._setup=function(s){if(s.partial)n.protoAccessControl=s.protoAccessControl,n.helpers=s.helpers,n.partials=s.partials,n.decorators=s.decorators,n.hooks=s.hooks;else{var a=i.extend({},t.helpers,s.helpers);!function(e,t){Object.keys(e).forEach((function(r){var n=e[r];e[r]=function(e,t){var r=t.lookupProperty;return l.wrapHelper(e,(function(e){return i.extend({lookupProperty:r},e)}))}(n,t)}))}(a,n),n.helpers=a,e.usePartial&&(n.partials=n.mergeIfNeeded(s.partials,t.partials)),(e.usePartial||e.useDecorators)&&(n.decorators=i.extend({},t.decorators,s.decorators)),n.hooks={},n.protoAccessControl=h.createProtoAccessControl(s);var c=s.allowCallsToHelperMissing||r;o.moveHelperToHooks(n,"helperMissing",c),o.moveHelperToHooks(n,"blockHelperMissing",c)}},a._child=function(t,r,i,a){if(e.useBlockParams&&!i)throw new s.default("must pass block params");if(e.useDepths&&!a)throw new s.default("must pass parent depths");return c(n,t,e[t],r,0,i,a)},a},t.wrapProgram=c,t.resolvePartial=function(e,t,r){return e?e.call||r.name||(r.name=e,e=r.partials[e]):e="@partial-block"===r.name?r.data["partial-block"]:r.partials[r.name],e},t.invokePartial=function(e,t,r){var n=r.data&&r.data["partial-block"];r.partial=!0,r.ids&&(r.data.contextPath=r.ids[0]||r.data.contextPath);var o=void 0;if(r.fn&&r.fn!==d&&function(){r.data=a.createFrame(r.data);var e=r.fn;o=r.data["partial-block"]=function(t){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return r.data=a.createFrame(r.data),r.data["partial-block"]=n,e(t,r)},e.partials&&(r.partials=i.extend({},r.partials,e.partials))}(),void 0===e&&o&&(e=o),void 0===e)throw new s.default("The partial "+r.name+" could not be found");if(e instanceof Function)return e(t,r)},t.noop=d;var n,i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(r(392)),s=(n=r(728))&&n.__esModule?n:{default:n},a=r(67),o=r(638),l=r(5),h=r(293);function c(e,t,r,n,i,s,a){function o(t){var i=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],o=a;return!a||t==a[0]||t===e.nullContext&&null===a[0]||(o=[t].concat(a)),r(e,t,e.helpers,e.partials,i.data||n,s&&[i.blockParams].concat(s),o)}return(o=p(r,o,e,a,n,s)).program=t,o.depth=a?a.length:0,o.blockParams=i||0,o}function d(){return""}function u(e,t){return t&&"root"in t||((t=t?a.createFrame(t):{}).root=e),t}function p(e,t,r,n,s,a){if(e.decorator){var o={};t=e.decorator(t,o,r,n&&n[0],s,a,n),i.extend(t,o)}return t}},558:(e,t)=>{"use strict";function r(e){this.string=e}t.__esModule=!0,r.prototype.toString=r.prototype.toHTML=function(){return""+this.string},t.default=r,e.exports=t.default},392:(e,t)=>{"use strict";t.__esModule=!0,t.extend=a,t.indexOf=function(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1},t.escapeExpression=function(e){if("string"!=typeof e){if(e&&e.toHTML)return e.toHTML();if(null==e)return"";if(!e)return e+"";e=""+e}return i.test(e)?e.replace(n,s):e},t.isEmpty=function(e){return!e&&0!==e||!(!h(e)||0!==e.length)},t.createFrame=function(e){var t=a({},e);return t._parent=e,t},t.blockParams=function(e,t){return e.path=t,e},t.appendContextPath=function(e,t){return(e?e+".":"")+t};var r={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},n=/[&<>"'`=]/g,i=/[&<>"'`=]/;function s(e){return r[e]}function a(e){for(var t=1;t<arguments.length;t++)for(var r in arguments[t])Object.prototype.hasOwnProperty.call(arguments[t],r)&&(e[r]=arguments[t][r]);return e}var o=Object.prototype.toString;t.toString=o;var l=function(e){return"function"==typeof e};l(/x/)&&(t.isFunction=l=function(e){return"function"==typeof e&&"[object Function]"===o.call(e)}),t.isFunction=l;var h=Array.isArray||function(e){return!(!e||"object"!=typeof e)&&"[object Array]"===o.call(e)};t.isArray=h},202:(e,t,r)=>{e.exports=r(834).default},798:function(e,t,r){e=r.nmd(e),function(r,n){"use strict";var i={};r.PubSub?(i=r.PubSub,console.warn("PubSub already loaded, using existing version")):(r.PubSub=i,function(e){var t={},r=-1;function n(e,t,r){try{e(t,r)}catch(e){setTimeout(function(e){return function(){throw e}}(e),0)}}function i(e,t,r){e(t,r)}function s(e,r,s,a){var o,l=t[r],h=a?i:n;if(Object.prototype.hasOwnProperty.call(t,r))for(o in l)Object.prototype.hasOwnProperty.call(l,o)&&h(l[o],e,s)}function a(e){var r=String(e);return Boolean(Object.prototype.hasOwnProperty.call(t,r)&&function(e){var t;for(t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!0;return!1}(t[r]))}function o(e,t,r,n){var i=function(e,t,r){return function(){var n=String(e),i=n.lastIndexOf(".");for(s(e,e,t,r);-1!==i;)i=(n=n.substr(0,i)).lastIndexOf("."),s(e,n,t,r);s(e,"*",t,r)}}(e="symbol"==typeof e?e.toString():e,t,n);return!!function(e){for(var t=String(e),r=a(t)||a("*"),n=t.lastIndexOf(".");!r&&-1!==n;)n=(t=t.substr(0,n)).lastIndexOf("."),r=a(t);return r}(e)&&(!0===r?i():setTimeout(i,0),!0)}e.publish=function(t,r){return o(t,r,!1,e.immediateExceptions)},e.publishSync=function(t,r){return o(t,r,!0,e.immediateExceptions)},e.subscribe=function(e,n){if("function"!=typeof n)return!1;e="symbol"==typeof e?e.toString():e,Object.prototype.hasOwnProperty.call(t,e)||(t[e]={});var i="uid_"+String(++r);return t[e][i]=n,i},e.subscribeAll=function(t){return e.subscribe("*",t)},e.subscribeOnce=function(t,r){var n=e.subscribe(t,(function(){e.unsubscribe(n),r.apply(this,arguments)}));return e},e.clearAllSubscriptions=function(){t={}},e.clearSubscriptions=function(e){var r;for(r in t)Object.prototype.hasOwnProperty.call(t,r)&&0===r.indexOf(e)&&delete t[r]},e.countSubscriptions=function(e){var r,n,i=0;for(r in t)if(Object.prototype.hasOwnProperty.call(t,r)&&0===r.indexOf(e)){for(n in t[r])i++;break}return i},e.getSubscriptions=function(e){var r,n=[];for(r in t)Object.prototype.hasOwnProperty.call(t,r)&&0===r.indexOf(e)&&n.push(r);return n},e.unsubscribe=function(r){var n,i,s,a="string"==typeof r&&(Object.prototype.hasOwnProperty.call(t,r)||function(e){var r;for(r in t)if(Object.prototype.hasOwnProperty.call(t,r)&&0===r.indexOf(e))return!0;return!1}(r)),o=!a&&"string"==typeof r,l="function"==typeof r,h=!1;if(!a){for(n in t)if(Object.prototype.hasOwnProperty.call(t,n)){if(i=t[n],o&&i[r]){delete i[r],h=r;break}if(l)for(s in i)Object.prototype.hasOwnProperty.call(i,s)&&i[s]===r&&(delete i[s],h=!0)}return h}e.clearSubscriptions(r)}}(i)),void 0!==e&&e.exports&&(t=e.exports=i),t.PubSub=i,e.exports=t=i}("object"==typeof window&&window||this)}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var s=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.loaded=!0,s.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e=r(798),t=r.n(e);const n=function(e){let t,r=e.length;for(;0!==r;)t=Math.floor(Math.random()*r),r--,[e[r],e[t]]=[e[t],e[r]];return e},i={maxHorizontalLengthCanBeOccupied:function(e){let t=0;const r=e.getShipsBoard();for(let n=0;n<e.getHeight();n++)for(let i=0;i<e.getWidth();i++)if(-1===r[n][i]){let s=1;for(;;){if(i+1===e.getWidth()||-1!==r[n][i+1]){t=Math.max(t,s);break}++s,++i}}return t},maxVerticalLengthCanBeOccupied:function(e){let t=0;const r=e.getShipsBoard();for(let n=0;n<e.getWidth();n++)for(let i=0;i<e.getHeight();i++)if(-1===r[i][n]){let s=1;for(;;){if(i+1===e.getHeight()||-1!==r[i+1][n]){t=Math.max(t,s);break}++s,++i}}return t}},s=i,a=(()=>{function e(e){return"number"==typeof e&&Number.isInteger(e)&&e>=0}return{checkIfWholeNumber:e,checkIfPositiveNumber:function(t){return e(t)&&t>0}}})(),o=(()=>{function e(e,t,r){return t<0||t>=e.getHeight()||r<0||r>=e.getWidth()}return{canAddShip:function(e,t){if(!a.checkIfPositiveNumber(t))throw new Error("Illegal Argument Exception");if(t>Math.max(s.maxHorizontalLengthCanBeOccupied(e),s.maxVerticalLengthCanBeOccupied(e)))return!1;let r=0;return e.getShips().forEach((e=>{void 0===e.row&&void 0===e.col&&(r+=e.ship.getLength())})),!(e.getBlockNotOccupied()-r-t<0)},isOutsideBoard:e,canPlaceShip:function(t,r,n,i,s){if(!a.checkIfWholeNumber(r)||!a.checkIfWholeNumber(n)||!a.checkIfWholeNumber(i)||"boolean"!=typeof s)throw new Error("Illegal Argument Exception");if(e(t,n,i))throw new Error("Illegal Argument Exception");if(r>=t.getShips().length)throw new Error("Illegal Argument Exception");const o=t.getShip(r);if(s&&n+o.getLength()-1>=t.getHeight())return!1;if(!s&&i+o.getLength()-1>=t.getWidth())return!1;const l=t.getShipsBoard();for(let e=0;e<o.getLength();e++){if(s&&-1!==l[n+e][i])return!1;if(!s&&-1!==l[n][i+e])return!1}return!0},isHit:function(t,r,n){if(!a.checkIfWholeNumber(r)||!a.checkIfWholeNumber(n))throw new Error("Illegal Argument Exception");if(e(t,r,n))throw new Error("Illegal Argument Exception");return 0!==t.getHitsBoard()[r][n]},areAllShipsSunk:function(e){return 0===e.getShipsAlive()},checkIfAllShipsPlaced:function(e){const t=e.getShips();for(let e=0;e<t.length;e++)if(void 0===t[e].row||void 0===t[e].col)return!1;return!0},checkIfNonOfShipsPlaced:function(e){const t=e.getShips();for(let e=0;e<t.length;e++)if(void 0!==t[e].row||void 0!==t[e].col)return!1;return!0}}})(),l=o,h=(()=>{function e(e,t,r,n,i){if(!l.canPlaceShip(e,t,r,n,i))return!1;const s=e.getShip(t);e.setShipOrientation(t,i),e.setShipStartPoint(t,r,n);for(let a=0;a<s.getLength();a++)i?e.setShipBoardCell(r+a,n,t):e.setShipBoardCell(r,n+a,t);return e.decreaseBlockNotOccupied(s.getLength()),!0}function r(e,t){const r=e.getShips();if(void 0===r[t].row||void 0===r[t].col||void 0===r[t].isVertical)throw new Error("Ship is not placed");const n=e.getShip(t);n.isSunk()||e.decreaseShipsAlive(),e.removeFromHitsBoard(r[t].row,r[t].col,n.getLength(),r[t].isVertical),e.removeFromShipsBoard(r[t].row,r[t].col,n.getLength(),r[t].isVertical),e.increaseBlockNotOccupied(n.getLength()),delete r[t].row,delete r[t].col,delete r[t].isVertical}function i(t,s,a,o,h){if((s=s??0)===t.getShipsCount())return!0;if((Date.now()-o)/1e3>h)throw new Error("Time limit exceeded");const c=`${function(e){const t=[];for(let r=0;r<e.length;r++)t.push(e[r].map((e=>-1!==e?1:0)));return t}(t.getShipsBoard())} ,${s}`;if(a.has(c))return!1;const d=[];for(let e=0;e<t.getHeight();e++)for(let r=0;r<t.getWidth();r++){let n=!1;l.canPlaceShip(t,s,e,r,n)&&d.push({row:e,col:r,isVertical:n}),n=!0,l.canPlaceShip(t,s,e,r,n)&&d.push({row:e,col:r,isVertical:n})}n(d);for(let n=0;n<d.length;n++){if(e(t,s,d[n].row,d[n].col,d[n].isVertical),i(t,s+1,a,o,h))return!0;r(t,s)}return a.add(c),!1}function s(e){const t=[];for(let r=0;r<e.getHeight();r++)for(let n=0;n<e.getWidth();n++)l.isHit(e,r,n)||t.push({row:r,col:n});return t}function a(e,t,r){const n=[],i=function(e){const t=[];for(let r=0;r<e.getHeight();r++)for(let n=0;n<e.getWidth();n++)l.isHit(e,r,n)&&t.push({row:r,col:n});return t}(e);return i.forEach((i=>{const s=e.getShipIndexFromCoordinate(i.row,i.col);if(-1!==s){const a=e.getShip(s);!a.isSunk()&&a.getHPDamaged()>=t&&a.getHPDamaged()<=r&&n.push({row:i.row,col:i.col,isShipVertical:e.isVerticalShip(s)})}})),n}function o(e,t,r){r.forEach((r=>{l.isOutsideBoard(e,r.row,r.col)||l.isHit(e,r.row,r.col)||t.push(r)}))}function h(e){let t=null;for(let r=0;r<e.getShipsCount();r++){const n=e.getShip(r);0===n.getHPDamaged()&&(t=null===t?n.getLength():Math.min(t,n.getLength()))}return t}return{addShip:function(e,t){if(!l.canAddShip(e,t))throw new Error("Illegal Argument Exception");return e.pushShip(t),e.getShipsCount()-1},placeShip:e,unplaceShip:r,receiveAttack:function(e,r,n,i){if(l.isHit(e,r,n))throw new Error("Illegal Argument Exception");e.hitBoardCell(r,n);const s=e.getShipsBoard();if(-1===s[r][n])return!1;const a=s[r][n],o=e.isVerticalShip(a)?r-e.getShipStartPoint(a).row:n-e.getShipStartPoint(a).col,h=e.getShip(a);return h.hit(o),h.isSunk()&&(e.decreaseShipsAlive(),i&&t().publish("ShipSunk",{playerView:i.playerView,shipLength:h.getLength()})),!0},autoPlaceShips:function(e,t){const r=new Set;e.sortShipsByLengthDesc();try{return i(e,t,r,Date.now(),5),!0}catch(e){return!1}},unplaceAllShips:function(e){for(let t=0;t<e.getShipsCount();t++)r(e,t)},removeAllShips:function(e){for(let t=e.getShipsCount()-1;t>=0;t--)r(e,t),e.removeShip(t)},getNotDamagedCells:s,getDamagedCellsOfAliveDamagedShips:a,getSmartTargets:function(e){const t=[];let r=a(e,2,10);return r.length>0?(r.forEach((r=>{r.isShipVertical?o(e,t,[{row:r.row-1,col:r.col},{row:r.row+1,col:r.col}]):o(e,t,[{row:r.row,col:r.col-1},{row:r.row,col:r.col+1}])})),t):(r=a(e,1,1),r.forEach((r=>{o(e,t,[{row:r.row-1,col:r.col},{row:r.row+1,col:r.col},{row:r.row,col:r.col-1},{row:r.row,col:r.col+1}])})),t)},getMinNotDamagedShipLength:h,getNotDamagedSmartTargets:function(e){const t=[],r=s(e),n=h(e);return r.forEach((r=>{(function(e,t,r){let n=1;for(let i=r+1;i<e.getWidth()&&!l.isHit(e,t,i);i++)++n;for(let i=r-1;i>=0&&!l.isHit(e,t,i);i--)++n;return n}(e,r.row,r.col)>=n||function(e,t,r){let n=1;for(let i=t+1;i<e.getHeight()&&!l.isHit(e,i,r);i++)++n;for(let i=t-1;i>=0&&!l.isHit(e,i,r);i--)++n;return n}(e,r.row,r.col)>=n)&&t.push(r)})),t}}})(),c=h;var d=r(569),u=r.n(d),p=r(460),m=r.n(p);class g{#e;#t;#r;#n;#i;#s;constructor(e,t,r,n){this.#e=t,this.#t=r,this.#n=e.querySelector(".minus"),this.#i=e.querySelector(".plus"),this.#s=e.querySelector(".number"),this.#r=n,this.updateCounter(),this.#n.addEventListener("click",(()=>{--this.#r,this.updateCounter()})),this.#i.addEventListener("click",(()=>{++this.#r,this.updateCounter()}))}updateIfLimitReached(){this.#r===this.#e?this.#n.classList.add("disabled"):this.#n.classList.remove("disabled"),this.#r===this.#t?this.#i.classList.add("disabled"):this.#i.classList.remove("disabled")}updateCounter(){this.#s.textContent=this.#r,this.updateIfLimitReached()}get currentNumber(){return this.#r}updateMax(e){this.#t=e,this.updateIfLimitReached()}}const f=(()=>{function e(e,t){const r=document.createElement("div");if(e<t){r.classList.add("ship");for(let t=0;t<e;t++){const e=document.createElement("div");e.classList.add("ship-block"),r.append(e)}}else{r.classList.add("ship-compressed");const t=document.createElement("span");t.classList.add("parenthesis"),t.textContent="(",r.append(t),r.append(document.createTextNode(`${e}${String.fromCharCode(160)}`));const n=document.createElement("div");n.classList.add("ship-block"),r.append(n);const i=document.createElement("span");i.classList.add("parenthesis"),i.textContent=")",r.append(i)}return r}return{createShipContainerElement:function(t,r){const n=document.createElement("div");n.classList.add("ship-container"),n.append(e(t,4));const i=document.createElement("p");i.innerText="x";const s=document.createElement("span");return s.classList.add("count"),s.innerText=r,i.append(s),n.append(i),n.dataset.length=t,n},createShipElement:e}})(),v=function(e){e.removeAttribute("disabled")},b=function(e){e.setAttribute("disabled","")};class E{#a;#o;#l;#h;#c;#d;#u;#p;#m;#g;#f;#v;#b;#E;constructor(e,t){this.cacheDOM(),b(this.#E),this.#p=e,this.#m=t,this.#g={},this.createShipsPages(),this.initPagination(),this.updateMaxShipsChoosingNumber(),this.bindEvents()}cacheDOM(){this.#a=(new DOMParser).parseFromString(u()(),"text/html").body.firstElementChild,this.#o=this.#a.firstElementChild,this.#l=this.#o.querySelector(".ships"),this.#h=this.#l.querySelector(".pages-container"),this.#c=this.#o.querySelector(".current-page"),this.#d=this.#o.querySelector(".left-arrow"),this.#u=this.#o.querySelector(".right-arrow"),this.#E=this.#a.querySelector(".btn-submit")}bindEvents(){[...this.#o.querySelectorAll(".minus"),...this.#o.querySelectorAll(".plus")].forEach((e=>{e.addEventListener("click",(()=>{this.updateMaxShipsChoosingNumber()}))})),this.bindPaginationEvents()}initPagination(){this.#v=1,this.#b=this.#h.children.length,this.#o.querySelector(".pages-num").textContent=this.#b,this.#f="100%",this.updatePaginationStyle()}bindPaginationEvents(){this.#o.querySelectorAll(".arrow-container").forEach((e=>{e.addEventListener("click",(()=>{e.contains(this.#d)?this.paginateLeft():e.contains(this.#u)&&this.paginateRight()}))}))}paginateLeft(){if(1===this.#v)throw new Error("Illegal Argument Exception");--this.#v,this.updatePaginationStyle()}paginateRight(){if(this.#v===this.#b)throw new Error("Illegal Argument Exception");++this.#v,this.updatePaginationStyle()}updatePaginationStyle(){this.#h.style.right=`calc(${this.#v-1} * ${this.#f})`,1===this.#v?this.#d.closest(".arrow-container").classList.add("disabled"):this.#d.closest(".arrow-container").classList.remove("disabled"),this.#v===this.#b?this.#u.closest(".arrow-container").classList.add("disabled"):this.#u.closest(".arrow-container").classList.remove("disabled"),this.#c.textContent=this.#v}createShipsPages(){for(let e=1;e<=this.getMaxShipLength();e+=4)this.#h.append(this.createPage(e,4))}createPage(e,t){const r=document.createElement("div");r.classList.add("page");for(let n=0;n<t;n++){const t=e+n;if(t>this.getMaxShipLength())break;r.append(this.createShipContainer(t))}return r}createShipContainer(e){const t=(new DOMParser).parseFromString(m()({shipLength:e,shipCount:0}),"text/html").body.firstElementChild,r=f.createShipElement(e,5);return t.querySelector(".ship").replaceWith(r),this.#g[e]=new g(t,0,0,0),t}get modalContainerElement(){return this.#a}get modalElement(){return this.#o}getWidth(){return this.#p}getHeight(){return this.#m}getMaxShipLength(){return Math.max(this.#p,this.#m)}getShipsList(){const e={};return this.#l.querySelectorAll(".ship-container").forEach((t=>{const r=t.dataset.length,n=parseInt(t.querySelector(".number").textContent,10);n>0&&(e[r]=n)})),e}updateMaxShipsChoosingNumber(){const e=this.#p*this.#m;let t=0;Array.from(Object.keys(this.#g)).forEach((e=>{t+=this.#g[e].currentNumber*e})),t>0?v(this.#E):b(this.#E),Array.from(Object.keys(this.#g)).forEach((r=>{this.#g[r].updateMax(this.#g[r].currentNumber+Math.floor((e-t)/r))}))}}var w=r(129),y=r.n(w);class S{#a;#o;constructor(){this.cacheDOM()}cacheDOM(){this.#a=(new DOMParser).parseFromString(y()(),"text/html").body.firstElementChild,this.#o=this.#a.firstElementChild}get modalContainerElement(){return this.#a}get modalElement(){return this.#o}}var P=r(661),x=r.n(P);class C{#a;#o;#w;#y;constructor(){this.cacheDOM(),this.setHumanNumber(),this.bindEvents()}cacheDOM(){this.#a=(new DOMParser).parseFromString(x()(),"text/html").body.firstElementChild,this.#o=this.#a.firstElementChild,this.#w=this.#o.querySelector("#form-game-type")}bindEvents(){this.#w.addEventListener("change",this.setHumanNumber.bind(this))}get modalContainerElement(){return this.#a}get modalElement(){return this.#o}gethumanNumber(){return this.#y}setHumanNumber(){this.#y=parseInt(this.#w["game-type"].value,10)}}var L=r(508),k=r.n(L);class A{#a;#o;#S;#P;#x;#p;#m;constructor(e,t){this.cacheDOM(),this.#p=e,this.#m=t,new g(this.#o.querySelector(".width-counter"),1,10,this.#p),new g(this.#o.querySelector(".height-counter"),1,10,this.#m),this.renderBoard(),this.bindEvents()}cacheDOM(){this.#a=(new DOMParser).parseFromString(k()(),"text/html").body.firstElementChild,this.#o=this.#a.firstElementChild,this.#P=this.#o.querySelector(".width-counter .number"),this.#x=this.#o.querySelector(".height-counter .number"),this.#S=this.#a.querySelector(".board")}bindEvents(){[...this.#o.querySelectorAll(".minus"),...this.#o.querySelectorAll(".plus")].forEach((e=>{e.addEventListener("click",(()=>{this.#p=parseInt(this.#P.textContent,10),this.#m=parseInt(this.#x.textContent,10),this.renderBoard()}))}))}renderBoard(){this.#S.innerHTML="",this.#S.style.setProperty("--board-horizontal-cells",this.#p);for(let e=0;e<this.#p*this.#m;e++){const e=document.createElement("div");e.classList.add("board-block"),this.#S.append(e)}}get modalContainerElement(){return this.#a}get modalElement(){return this.#o}getWidth(){return this.#p}getHeight(){return this.#m}}function O(e){let t=e;const r=[];for(let t=0;t<e;t++)r[t]=0;const n={hit(n){if("number"!=typeof n||!Number.isInteger(n))throw new Error("Illegal Argument Exception");if(n<0||n>=e)throw new Error("Illegal Argument Exception");0===r[n]&&(--t,r[n]=1)},isSunk:()=>0===t,getHPRemained:()=>t,getHitpoints:()=>[...r],getHPDamaged:()=>e-t,getLength:()=>e};return Object.create(n)}function M(e,t){const r=[],n=[],i=[];let s=0,a=e*t;for(let r=0;r<t;r++){n.push([]),i.push([]);for(let t=0;t<e;t++)n[r][t]=0,i[r][t]=-1}const o={getWidth:()=>e,getHeight:()=>t,getShips:()=>[...r],getShip:e=>r[e].ship,getShipFromCoordinate(e,t){return this.getShip(this.getShipIndexFromCoordinate(e,t))},getShipIndexFromCoordinate:(e,t)=>i[e][t],pushShip(e){r.push({ship:new O(e)}),++s},removeShip(e){const t=this.getShip(e);t.isSunk()||--s,this.removeFromHitsBoard(r[e].row,r[e].col,t.getLength(),r[e].isVertical),this.removeFromShipsBoard(r[e].row,r[e].col,t.getLength(),r[e].isVertical),void 0!==r[e].row&&void 0!==r[e].col&&this.increaseBlockNotOccupied(t.getLength()),r.splice(e,1)},removeShipByCoordinates(e,t){for(let n=0;n<r.length;n++)if(r[n].row===e&&r[n].col===t){this.removeShip(n);break}},removeFromHitsBoard(e,t,r,i){if(i)for(let i=e;i<e+r;i++)n[i][t]=0;else for(let i=t;i<t+r;i++)n[e][i]=0},removeFromShipsBoard(e,t,r,n){if(n)for(let n=e;n<e+r;n++)this.setShipBoardCell(n,t,-1);else for(let n=t;n<t+r;n++)this.setShipBoardCell(e,n,-1)},isVerticalShip:e=>r[e].isVertical,setShipOrientation(e,t){r[e].isVertical=t},getShipStartPoint:e=>({row:r[e].row,col:r[e].col}),setShipStartPoint(e,t,n){r[e].row=t,r[e].col=n},getShipsCount:()=>r.length,getShipsBoard(){const e=[];return i.forEach((t=>{e.push([...t])})),e},setShipBoardCell(e,t,r){i[e][t]=r},getHitsBoard(){const e=[];return n.forEach((t=>{e.push([...t])})),e},hitBoardCell(e,t){++n[e][t]},getBlockNotOccupied:()=>a,decreaseBlockNotOccupied(e){a-=e},increaseBlockNotOccupied(e){a+=e},getShipsAlive:()=>s,decreaseShipsAlive(){--s},getShipsList(){const e={};return r.forEach((t=>{const r=e[t.ship.getLength()]??0;e[t.ship.getLength()]=r+1})),e},sortShipsByLengthDesc(){r.sort(((e,t)=>t.ship.getLength()-e.ship.getLength()))}};return Object.create(o)}var I=r(72),B=r.n(I),N=r(257),V=r.n(N);const H={getBlockIndexFromCoordinates:function(e,t,r){return e*r+t},getCoordinatesFromBlockIndex:function(e,t){return[Math.floor(e/t),e%t]},getBlockIndexFromBlockElement:function(e,t){return Array.from(e.children).indexOf(t)},getBlockTopOffset:function(e,t){return Array.from(e.children)[t].offsetTop},getBlockLeftOffset:function(e,t){return Array.from(e.children)[t].offsetLeft},createShipElement:function(e,t){const r=document.createElement("div");r.classList.add("ship");for(let t=0;t<e;t++){const e=document.createElement("div");e.classList.add("ship-block"),r.append(e)}return r.classList.add(t?"vertical":"horizontal"),r},createShipOnBoard:function(e,t,r,n,i,s,a,o){void 0===o&&((o=H.createShipElement(i,s)).dataset.id=a);const l=H.getBlockIndexFromCoordinates(r,n,t);o.style.top=`${H.getBlockTopOffset(e,l)}px`,o.style.left=`${H.getBlockLeftOffset(e,l)}px`,o.style["flex-direction"]=s?"column":"row",e.append(o)}},R=H;class T{#a;#o;#C;#L;#k;#E;#A;#p;#m;#O;#M;#I;constructor(e,t,r,n,i,s,a){this.#p=n,this.#m=i,this.#I=t;let o=s?"Player":a;s&&1===t&&e>1&&(o="First Player"),s&&2===t&&(o="Second Player"),this.#B=0,this.#A=1,this.#M=r,this.#O={},this.cacheDOM(o),this.initPlayerArea(s,a),this.initShipsArea(r),this.initPagination(),this.initBoardArea(),b(this.#E),this.bindEvents()}cacheDOM(e){this.#a=(new DOMParser).parseFromString(B()({playerLabel:e}),"text/html").body.firstElementChild,this.#o=this.#a.firstElementChild,this.#C=document.querySelector(".pause-container"),this.#L=this.#o.querySelector(".btn-auto-place"),this.#k=this.#L.nextElementSibling,this.#E=this.#o.querySelector(".btn-submit"),this.cachePlayerAreaDOM(),this.cacheShipsAreaDOM(),this.cachePaginationDOM(),this.cacheBoardAreaDOM()}bindEvents(){this.bindPlayerAreaEvents(),this.bindShipsAreaEvents(),this.bindPaginationEvents(),this.bindBoardAreaEvents()}#N;#V;initPlayerArea(e,t){if(!e){const e=this.#N.nextElementSibling;this.#V.value=t,this.#N.remove(),e.remove()}}cachePlayerAreaDOM(){this.#N=this.#o.querySelector(".section-player-name"),this.#V=this.#N.querySelector("input[name]")}bindPlayerAreaEvents(){this.#V.addEventListener("keypress",this.onKeyPressPlayerName.bind(this))}onKeyPressPlayerName(e){this.checkIfMaxPlayerNameReached()&&e.preventDefault()}checkIfMaxPlayerNameReached(){return 15===this.#V.value.length}getPlayerName(){const e=this.#V.value;return""===e?`Player${this.#I}`:e}#H;#R;#T;#_;#D;#W;initShipsArea(e){this.#H={},this.#R={},this.createShipsPages(e),this.#D=0,Object.keys(this.#R).forEach((e=>{this.#D+=parseInt(this.#R[e].textContent,10)})),this.setActiveShip(this.#o.querySelector(".ship-compressed")),this.createTempShip(this.#_)}bindShipsAreaEvents(){this.#o.querySelectorAll(".page .ship-block").forEach((e=>{e.addEventListener("click",(()=>{this.setActiveShip(e.closest(".ship-compressed")),null===this.#q&&this.setPlaceOptionActive("h")}))}))}cacheShipsAreaDOM(){this.#h=this.#o.querySelector(".pages-container")}increaseShipCount(e){const t=parseInt(this.#R[e].textContent,10);this.#R[e].textContent=t+1}decreaseShipCount(e){const t=parseInt(this.#R[e].textContent,10);if(0===t)throw new Error;this.#R[e].textContent=t-1}resetAllShipsCount(){Object.keys(this.#R).forEach((e=>{this.#R[e].textContent=0}))}setActiveShip(e){if(e===this.#T)return;this.#T&&this.#T.classList.remove("active"),this.#T=e.closest(".ship-compressed"),this.#T.classList.add("active");const t=this.#T.closest(".ship-container"),r=parseInt(t.dataset.length,10);this.#_=r,0!==parseInt(this.#R[r].textContent,10)&&this.createTempShip(this.#_)}createShipsPages(e){const t=Object.keys(e).sort(((e,t)=>e-t));for(let r=0;r<t.length;r+=4)this.#h.append(this.createPage(r,4,t,e))}createPage(e,t,r,n){const i=document.createElement("div");i.classList.add("page");for(let s=0;s<t&&e+s<r.length;s++){const t=r[e+s],a=n[t],o=this.createShipContainer(t,a);i.append(o),this.#H[t]=o,this.#R[t]=o.querySelector(".number")}return i}createShipContainer(e,t){const r=(new DOMParser).parseFromString(V()({shipLength:e,shipCount:t}),"text/html").body.firstElementChild,n=f.createShipElement(e,1);return r.querySelector(".ship").replaceWith(n),r}createTempShip(e){this.#W=R.createShipElement(e),this.#W.classList.add("temp-ship")}#B;bindPlaceShipsEvents(){this.#S.addEventListener("click",(e=>{e.target.classList.contains("board-block")&&this.onClickPlaceShipOnBoard(e)})),this.#S.querySelectorAll(".board-block").forEach((e=>{e.addEventListener("mouseenter",this.OnMouseEnterBoardBlock.bind(this)),e.addEventListener("mouseleave",this.onMouseLeaveBoardBlock.bind(this))})),this.#L.addEventListener("click",(()=>{this.#C.classList.add("active","front"),this.#C.addEventListener("transitionend",(()=>{this.autoPlaceShips.call(this)?this.#k.classList.add("d-none"):this.#k.classList.remove("d-none"),this.#C.classList.remove("active","front")}),{once:!0})}))}placeShipOnBoard(e,t,r,n){if(!this.canPlaceShip(r,e,t,n))throw new Error;const i=this.#A++;this.#O[i]={row:e,col:t,length:r,isVertical:n},R.createShipOnBoard(this.#S,this.#p,e,t,r,n,i),this.decreaseShipCount(r),this.setEmptyCells(e,t,r,n,!1),++this.#B,this.#B===this.#D&&v(this.#E)}onClickPlaceShipOnBoard(e){if(null===this.#q)return;const t=e.target,r=R.getBlockIndexFromBlockElement(this.#S,t),n=this.#q,[i,s]=R.getCoordinatesFromBlockIndex(r,this.#p);this.canPlaceShip(this.#_,i,s,n)&&this.placeShipOnBoard(i,s,this.#_,n)}OnMouseEnterBoardBlock(e){if(null===this.#q)return;const t=e.target,r=R.getBlockIndexFromBlockElement(this.#S,t),n=this.#q,[i,s]=R.getCoordinatesFromBlockIndex(r,this.#p);this.canPlaceShip(this.#_,i,s,n)&&R.createShipOnBoard(this.#S,this.#p,i,s,this.#_,n,void 0,this.#W)}onMouseLeaveBoardBlock(){null!==this.#q&&null!==this.#W&&this.#W.remove()}canPlaceShip(e,t,r,n){if(0===parseInt(this.#R[e].textContent,10))return!1;if(n&&t+e-1>=this.#m)return!1;if(!n&&r+e-1>=this.#p)return!1;for(let i=0;i<e;i++){if(n&&!0!==this.#j[t+i][r])return!1;if(!n&&!0!==this.#j[t][r+i])return!1}return!0}autoPlaceShips(){this.removeAllShipsFromBoard();const e=M(this.#p,this.#m);Object.keys(this.#M).forEach((t=>{for(let r=0;r<this.#M[t];r++)c.addShip(e,parseInt(t,10))}));const t=c.autoPlaceShips(e);return t&&e.getShips().forEach(((t,r)=>{this.placeShipOnBoard(t.row,t.col,e.getShip(r).getLength(),t.isVertical)})),t}setEmptyCells(e,t,r,n,i){for(let s=0;s<r;s++)n?this.#j[e+s][t]=i:this.#j[e][t+s]=i}bindRemoveShipsEvents(){this.#S.addEventListener("click",(e=>{e.target.classList.contains("ship-block")&&this.onClickRemoveShipFromBoard(e)}))}removeShipFromBoardById(e){this.#S.querySelector(`.ship[data-id='${e}']`).remove(),this.increaseShipCount(this.#O[e].length),this.setEmptyCells(this.#O[e].row,this.#O[e].col,this.#O[e].length,this.#O[e].isVertical,!0),delete this.#O[e],--this.#B,b(this.#E)}removeAllShipsFromBoard(){Object.keys(this.#O).forEach((e=>{this.removeShipFromBoardById(e)}))}onClickRemoveShipFromBoard(e){if(null!==this.#q)return;const t=e.target.closest(".ship");this.removeShipFromBoardById(t.dataset.id)}#S;#j;#F;#G;#z;#$;#q;initBoardArea(){this.#q=!1,this.renderBoard(),this.#j=[];for(let e=0;e<this.#m;e++){this.#j.push([]);for(let t=0;t<this.#p;t++)this.#j[e].push(!0)}}cacheBoardAreaDOM(){this.#S=this.#o.querySelector(".board"),this.#F=this.#o.querySelector(".place-options"),this.#z=this.#F.querySelector(".btn-h"),this.#G=this.#F.querySelector(".btn-v"),this.#$=this.#F.querySelector(".btn-remove")}bindBoardAreaEvents(){this.#z.addEventListener("click",this.onClickSetPlaceOptionActive.bind(this)),this.#G.addEventListener("click",this.onClickSetPlaceOptionActive.bind(this)),this.#$.addEventListener("click",this.onClickSetPlaceOptionActive.bind(this)),this.bindPlaceShipsEvents(),this.bindRemoveShipsEvents()}onClickSetPlaceOptionActive(e){const t=e.target.closest("button");t===this.#z?this.setPlaceOptionActive("h"):t===this.#G?this.setPlaceOptionActive("v"):t===this.#$&&this.setPlaceOptionActive("x")}setPlaceOptionActive(e){let t;this.#z.classList.remove("active"),this.#G.classList.remove("active"),this.#$.classList.remove("active"),"h"===e?(this.#q=!1,t=this.#z):"v"===e?(this.#q=!0,t=this.#G):"x"===e&&(this.#q=null,t=this.#$),t.classList.add("active")}renderBoard(){this.#S.style.setProperty("--board-horizontal-cells",this.#p);for(let e=0;e<this.#p*this.#m;e++){const e=document.createElement("div");e.classList.add("board-block"),this.#S.append(e)}}#h;#c;#d;#u;#v;#b;#f;initPagination(){this.#v=1,this.#b=this.#h.children.length,this.#o.querySelector(".pages-num").textContent=this.#b,this.#f="100%",this.updatePaginationStyle()}cachePaginationDOM(){this.#c=this.modalElement.querySelector(".current-page"),this.#d=this.#o.querySelector(".left-arrow"),this.#u=this.#o.querySelector(".right-arrow")}bindPaginationEvents(){this.#o.querySelectorAll(".arrow-container").forEach((e=>{e.addEventListener("click",(()=>{e.contains(this.#d)?this.paginateLeft():e.contains(this.#u)&&this.paginateRight()}))}))}paginateLeft(){if(1===this.#v)throw new Error("Illegal Argument Exception");--this.#v,this.updatePaginationStyle()}paginateRight(){if(this.#v===this.#b)throw new Error("Illegal Argument Exception");++this.#v,this.updatePaginationStyle()}updatePaginationStyle(){this.#h.style.right=`calc(${this.#v-1} * ${this.#f})`,1===this.#v?this.#d.closest(".arrow-container").classList.add("disabled"):this.#d.closest(".arrow-container").classList.remove("disabled"),this.#v===this.#b?this.#u.closest(".arrow-container").classList.add("disabled"):this.#u.closest(".arrow-container").classList.remove("disabled"),this.#c.textContent=this.#v}get modalContainerElement(){return this.#a}get modalElement(){return this.#o}getShipsList(){return this.#O}}var _=r(82),D=r.n(_),W=r(134),q=r.n(W);class j{#Z;#Y;#S;#K;#U;#J;#O;#Q;constructor(e,t,r,n){this.#Z=e,this.#Y=t,this.#K=r,this.#O=n,this.#U=new Audio("./assets/sounds/splash.wav"),this.#J=new Audio("./assets/sounds/explode-cut.wav"),this.#Q=[];for(let e=0;e<this.#Y;e++){this.#Q.push([]);for(let t=0;t<this.#Z;t++)this.#Q[e].push(null)}this.render(),this.bindEvents()}getBoardElement(){return this.#S}get playerView(){return this.#K}render(){const e=[];for(let t=0;t<this.#Y;t++)for(let t=0;t<this.#Z;t++)e.push(null);this.#S=document.createElement("div"),this.#S.classList.add("board"),this.#S.style.setProperty("--board-horizontal-cells",this.#Z),this.#S.innerHTML=q()({blocks:e}),setTimeout((()=>{this.addShipsToBoard()}),200)}addShipsToBoard(){Object.keys(this.#O).forEach((e=>{const t=this.#O[e].length,r=this.#O[e].row,n=this.#O[e].col,i=this.#O[e].isVertical,s=R.createShipElement(t,i);Array.from(s.children).forEach((e=>{e.classList.add("hidden")})),s.classList.add("hidden"),this.setShipsBlocksBoard(r,n,t,i,s),R.createShipOnBoard(this.#S,this.#Z,r,n,t,i,void 0,s)}))}setShipsBlocksBoard(e,t,r,n,i){for(let s=0;s<r;s++)n?this.#Q[e+s][t]=i.children[s]:this.#Q[e][t+s]=i.children[s]}bindEvents(){this.#S.addEventListener("click",this.receiveAttack.bind(this))}receiveAttack(e){if(e.target.classList.contains("board-block")){const r=Array.from(this.#S.children).indexOf(e.target);t().publish("AttackReceived",{row:Math.floor(r/this.#Z),col:r%this.#Z,boardView:this})}}attackFailed(e,t){this.playSound(this.#U);const r=R.getBlockIndexFromCoordinates(e,t,this.#Z);this.#S.children[r].classList.add("disabled","incorrect")}attackSucceded(e,t,r){this.playSound(this.#J);const n=R.getBlockIndexFromCoordinates(e,t,this.#Z);this.#S.children[n].classList.add("disabled");const i=this.#Q[e][t];i.classList.remove("hidden"),r&&(i.closest(".ship").classList.remove("hidden"),i.closest(".ship").classList.add("destroyed"))}playSound(e){e.pause(),e.currentTime=0,e.play()}disableBoard(){this.#S.classList.add("disabled")}enableBoard(){this.#S.classList.remove("disabled")}}var F=r(344),G=r.n(F);class z{#X;#ee;#te;#re;constructor(e,t,r,n,i){this.#ee=e,this.#re=i,this.render(t),this.cacheDOM(),this.createBoard(r,n,t),this.initShipsRemained(t),this.initScore(),this.bindEvents()}cacheDOM(){this.cacheTurnDOM(),this.cacheShipsRemainedDOM(),this.cacheScoreDOM(),this.cacheDarkeningDOM()}render(){this.#X=document.createElement("div"),this.#X.classList.add("player-area"),this.#X.innerHTML=G()({})}createBoard(e,t,r){this.#te=new j(e,t,this,r),this.#X.querySelector(".board").replaceWith(this.#te.getBoardElement())}bindEvents(){this.bindShipsRemainedEvents()}#ne;#l;initShipsRemained(e){this.addShipsToshipsRemainedElement(e),this.initShipsRemainedPagination()}cacheShipsRemainedDOM(){this.#ne=this.#X.querySelector(".ships-remained-container-responsive"),this.#l=this.#ne.querySelector(".ships"),this.cacheShipsRemainedPaginationDOM()}bindShipsRemainedEvents(){this.#ie.addEventListener("mouseenter",this.mouseEnterInfo.bind(this)),this.#ie.addEventListener("mouseleave",this.mouseLeaveInfo.bind(this)),this.bindShipsRemainedPaginationEvents()}addShipsToshipsRemainedElement(e){const t={};Object.keys(e).forEach((r=>{const n=e[r].length;t[n]||(t[n]=0),++t[n]})),Object.keys(t).sort(((e,t)=>e-t)).forEach((e=>{this.#l.append(f.createShipContainerElement(e,t[e]))}))}sinkShip(e){const t=this.#ne.querySelector(`[data-length="${e}"]`),r=t.querySelector(".count"),n=parseInt(r.textContent,10)-1;0===n?t.remove():r.textContent=n}mouseEnterInfo(){this.#ne.classList.add("help")}mouseLeaveInfo(){this.#ne.classList.remove("help")}#se;#ie;#ae;#d;#oe;#u;initShipsRemainedPagination(){requestAnimationFrame((()=>{this.toggleArrowsState(),this.toggleArrowsState()}))}cacheShipsRemainedPaginationDOM(){this.#ie=this.#ne.querySelector(".info"),this.#d=this.#ne.querySelector(".left-arrow"),this.#ae=this.#d.parentElement,this.#u=this.#ne.querySelector(".right-arrow"),this.#oe=this.#u.parentElement}bindShipsRemainedPaginationEvents(){this.#ae.addEventListener("pointerdown",(()=>{this.scroll(-180)})),this.#oe.addEventListener("pointerdown",(()=>{this.scroll(180)})),this.#ae.addEventListener("pointerup",(()=>{this.stopScrolling()})),this.#oe.addEventListener("pointerup",(()=>{this.stopScrolling()}))}scroll(e){const t=this.getResponsiveScroll()+e,r=e>0?"right":"left";this.#se=!1,this.checkIfScreenSmall()?this.#l.scrollTop+=e:this.#l.scrollLeft+=e,new Promise(((e,n)=>{this.keepScrolling(e,n,t,r)})).then((()=>{this.scroll(e)})).catch((()=>{})).finally((()=>{this.toggleArrowsState()}))}keepScrolling(e,t,r,n){this.getResponsiveScroll()!==r?this.#se||"left"===n&&this.checkIfLeftMostReached()||"right"===n&&this.checkIfRightMostReached()?t():requestAnimationFrame((()=>{this.keepScrolling(e,t,r,n)})):e()}checkIfLeftMostReached(){return 0===this.getResponsiveScroll()}checkIfRightMostReached(){return this.checkIfScreenSmall()?this.#l.scrollHeight-this.#l.clientHeight===this.#l.scrollTop:this.#l.scrollWidth-this.#l.clientWidth===this.#l.scrollLeft}toggleArrowsState(){this.checkIfLeftMostReached()?this.#ae.classList.add("disabled"):this.#ae.classList.remove("disabled"),this.checkIfRightMostReached()?this.#oe.classList.add("disabled"):this.#oe.classList.remove("disabled")}stopScrolling(){this.#se=!0}getResponsiveScroll(){return this.checkIfScreenSmall()?this.#l.scrollTop:this.#l.scrollLeft}checkIfScreenSmall(){return"none"!==getComputedStyle(this.#ae).transform}#le;cacheTurnDOM(){this.#le=this.#X.querySelector(".turn-container")}setTurn(){this.showTurnLabel(),this.darken()}unsetTurn(){this.hideTurnLabel(),this.removeDarkening()}showTurnLabel(){this.#le.classList.add("active")}hideTurnLabel(){this.#le.classList.remove("active")}#he;#V;#ce;#de;initScore(){this.setPlayerName(this.#re)}cacheScoreDOM(){this.#he=this.#X.querySelector(".score-container"),this.#V=this.#he.querySelector(".name"),this.#ce=this.#he.querySelector(".wins"),this.#de=this.#he.querySelector(".losses")}setPlayerName(e){this.#V.textContent=e}setWins(e){this.#ce.textContent=e}increaseWins(){this.#ce.textContent=parseInt(this.#ce.textContent,10)+1}setLosses(e){this.#de.textContent=e}increaseLosses(){this.#de.textContent=parseInt(this.#de.textContent,10)+1}showScore(){this.#he.classList.add("active")}hideScore(){this.#he.classList.remove("active")}get gameView(){return this.#ee}get boardView(){return this.#te}getPlayerAreaElement(){return this.#X}#ue;cacheDarkeningDOM(){this.#ue=this.#X.querySelector(".darkening")}darken(){this.#ue.classList.add("active")}removeDarkening(){this.#ue.classList.remove("active")}showWinLabel(){this.#le.firstElementChild.innerText="You Won",this.showTurnLabel()}showLoseLabel(){this.#le.firstElementChild.innerText="You Lost",this.showTurnLabel()}disableBoard(){this.#te.disableBoard()}enableBoard(){this.#te.enableBoard()}}const $=function(e){return new Promise((t=>{e.classList.remove("active"),e.addEventListener("transitionend",(r=>{"bottom"===r.propertyName&&(e.remove(),t())}))}))},Z=function(e,t){e.append(t),setTimeout((()=>{t.classList.add("active")}),25)},Y=function(){const e=document.createElement("div");return e.classList.add("pause-container"),e};class K{#pe;#me;#ge;#fe;#ve;#be;#C;#Ee;#we;#y;#p;#m;#O;#ye;#Se;constructor(e,t,r){this.#pe=e,this.#Ee=r,this.createRootElement(this.#Ee),this.createPauseContainer(),t.append(this.#me)}createRootElement(){this.#me=document.createElement("div"),this.#me.classList.add("game-container"),this.#me.dataset.gameId=this.#Ee}createPauseContainer(){this.#C=Y(),this.#me.append(this.#C)}get game(){return this.#pe}createGameArena(){this.cacheGameArenaDOM(),this.createPlayersViews(),this.#Pe.append(this.getPlayerView(0).getPlayerAreaElement()),this.#xe.append(this.getPlayerView(1).getPlayerAreaElement()),this.#me.append(this.#ge),this.createStartGameLabel()}cacheGameArenaDOM(){this.#ge=(new DOMParser).parseFromString(D()(),"text/html").body.firstElementChild,this.#fe=this.#ge.querySelector(".rounds-container"),this.#ve=this.#fe.querySelector("p"),this.#be=this.#ve.querySelector(".round-num"),this.cachePlayersAreasDOM()}endGame(e){setTimeout((()=>{for(let t=0;t<this.#we.length;t++)this.#we[t].hideTurnLabel(),this.#we[t].disableBoard(),this.#we[t].removeDarkening(),t===e?(this.#we[t].showWinLabel(),this.#we[t].increaseWins()):(this.#we[t].showLoseLabel(),this.#we[t].increaseLosses());this.createNextGameLabel(),this.#C.classList.add("semi-active")}),300)}#Ce;createNextGameLabel(){this.#Ce=document.createElement("div"),this.#Ce.classList.add("next-game-container");const e=document.createElement("button");e.textContent="Next Game",this.#Ce.append(e),this.#me.append(this.#Ce),this.bindNextGameButtonEvents(e),Z(this.#me,this.#Ce)}bindNextGameButtonEvents(e){e.addEventListener("click",this.NextGameButtonClick.bind(this)),e.addEventListener("mouseenter",this.displayScores.bind(this)),e.addEventListener("mouseleave",this.hideScores.bind(this))}async NextGameButtonClick(){await $(this.#Ce),X.generateNextRound(this.#pe,this)}#Le;createStartGameLabel(){this.#Le=document.createElement("div"),this.#Le.classList.add("start-game-container");const e=document.createElement("button");e.textContent="Start Game",this.#Le.append(e),this.#me.append(this.#Le),this.bindStartGameButtonEvents(e),Z(this.#me,this.#Le),this.displayScores()}bindStartGameButtonEvents(e){e.addEventListener("click",this.startGameButtonClick.bind(this))}async startGameButtonClick(){this.hideScores(),await $(this.#Le),this.scrollToEnemyArea(this.#pe.currentEnemyIndex),X.startGame(this.#pe,this)}#Pe;#xe;cachePlayersAreasDOM(){this.#Pe=this.#ge.querySelector(".first-player-arena"),this.#xe=this.#ge.querySelector(".second-player-arena")}createPlayersViews(){this.#we=[];for(let e=0;e<this.#ye.length;e++){const t=new z(this,this.#ye[e].ships,this.#p,this.#m,this.#ye[e].name);this.#we.push(t)}}addPlayerView(e){this.#we.push(e)}displayScores(){this.#C.classList.add("active"),this.#C.addEventListener("transitionend",(()=>{for(let e=0;e<this.#ye.length;e++)this.#we[e].showScore()}),{once:!0})}hideScores(){this.#C.classList.remove("active");for(let e=0;e<this.#ye.length;e++)this.#we[e].hideScore()}updateScores(e){for(let t=0;t<this.#we.length;t++)this.#we[t].setWins(e[t].wins),this.#we[t].setLosses(e[t].losses)}get playersViews(){return[...this.#we]}getPlayerView(e){return this.#we[e]}scrollToEnemyArea(e){0===e?this.#Pe.scrollIntoView():this.#xe.scrollIntoView()}changeTurn(e,t){this.#be.innerText=e,"0deg"===getComputedStyle(this.#fe).getPropertyValue("--angle").trim()?(this.#fe.style.setProperty("--angle","180deg"),this.#ve.style.setProperty("--angle","180deg")):(this.#fe.style.setProperty("--angle","0deg"),this.#ve.style.setProperty("--angle","0deg")),this.scrollToEnemyArea(t)}async newGame(e=!0,t=[]){this.#ye=[],this.#we=[],this.#Se=0,e?(await this.createRulesModal(),await this.createGameTypeModal()):(this.#ge.remove(),this.#C.classList.remove("semi-active"));const r=[this.createGridSizeModal,this.createShipsChoosingModal];for(let n=1;n<=this.#y;n++)r.push(this.createShipsPlacingModal.bind(this,n,e,t));for(;this.#Se<r.length;)await r[this.#Se++].call(this);return 1===this.#y&&this.#ye.push(X.generateComputerPlayer(this.#p,this.#m,this.#O)),this.createGameArena(),{humanNumber:this.#y,boardWidth:this.#p,boardHeight:this.#m,players:this.#ye}}async createRulesModal(){const e=new S;this.displayModal(e),await this.rulesModalSubmit(e),await this.removeModal(e)}rulesModalSubmit(e){return new Promise((t=>{e.modalElement.querySelector(".btn-start").addEventListener("click",(()=>{t()}))}))}async createGameTypeModal(){const e=new C;this.displayModal(e),await this.gameTypeModalSubmit(e),await this.removeModal(e)}gameTypeModalSubmit(e){return new Promise((t=>{e.modalElement.querySelector(".btn-play").addEventListener("click",(()=>{this.#y=e.gethumanNumber(),t()}))}))}async createGridSizeModal(){const e=new A(this.#p??10,this.#m??10);this.displayModal(e),await this.gridSizeModalSubmit(e),await this.removeModal(e)}gridSizeModalSubmit(e){return new Promise((t=>{e.modalElement.querySelector(".btn-next").addEventListener("click",(()=>{this.#p=e.getWidth(),this.#m=e.getHeight(),t()}))}))}async createShipsChoosingModal(){const e=new E(this.#p,this.#m);this.displayModal(e),await this.shipsChoosingModalSubmit(e),await this.removeModal(e)}shipsChoosingModalSubmit(e){return new Promise((t=>{const r=e.modalElement.querySelector(".btn-back");e.modalElement.querySelector(".btn-submit").addEventListener("click",(()=>{this.#O=e.getShipsList(),t()})),r.addEventListener("click",(()=>{this.#Se-=2,t()}))}))}async createShipsPlacingModal(e,t,r){const n=new T(this.#y,e,this.#O,this.#p,this.#m,t,r[e-1]);this.displayModal(n),await this.shipsPlacingModalSubmit(n,e),await this.removeModal(n)}shipsPlacingModalSubmit(e,t){return new Promise((r=>{const n=e.modalElement.querySelector(".btn-back");e.modalElement.querySelector(".btn-submit").addEventListener("click",(()=>{this.#ye.push({name:e.getPlayerName(),ships:e.getShipsList(),isBot:!1}),r()})),n.addEventListener("click",(()=>{this.#Se-=2,t>1&&this.#ye.pop(),r()}))}))}displayModal(e){if(!e.modalContainerElement)throw new Error("Modal instance does not have modal container element property");if(!e.modalElement)throw new Error("Modal instance does not have modal element property");this.#me.append(e.modalContainerElement),setTimeout((()=>{e.modalContainerElement.classList.add("active"),e.modalElement.classList.add("active")}),0)}removeModal(e){if(!e.modalContainerElement)throw new Error("Modal instance does not have modal container element property");if(!e.modalElement)throw new Error("Modal instance does not have modal element property");return new Promise((t=>{e.modalContainerElement.classList.remove("active"),e.modalElement.classList.remove("active"),e.modalElement.addEventListener("transitionend",(r=>{"bottom"===r.propertyName&&(e.modalContainerElement.remove(),t())}))}))}}class U{#ke;#ye;#Ae;#Oe;#Me;#Ie;#Be;constructor(){this.running=!1,this.#ye=[],this.#Ae=0,this.#Oe=0,this.#Me=-1,this.#Be=[]}set running(e){this.#ke=e}get running(){return this.#ke}addPlayer(e){this.#ye.push(e)}getPlayer(e){return this.#ye[e]}getPlayers(){return[...this.#ye]}getPlayersCount(){return this.#ye.length}increaseCurrentRound(){++this.#Ae}get currentRound(){return this.#Ae}set currentPlayerIndex(e){this.#Me=e}get currentPlayerIndex(){return this.#Me}set currentEnemyIndex(e){this.#Ie=e}get currentEnemyIndex(){return this.#Ie}getCurrentPlayer(){return this.#ye[this.#Me]}getCurrentEnemy(){return this.#ye[this.#Ie]}addWinner(e){this.#Be.push(e)}get winners(){return[...this.#Be]}getLastWinner(){return this.#Be[this.#Be.length-1]}increaseCurrentTurn(){++this.#Oe}resetCurrentTurn(){this.#Oe=0}get currentTurn(){return this.#Oe}}class J{#Ne;#Ve;#He;#Re;#Te;constructor(e,t){this.name=e,this.#Te=t,this.#He=0,this.#Re=0}set name(e){this.#Ne=e}get name(){return this.#Ne}get isBot(){return this.#Te}createBoard(e,t){this.#Ve=M(e,t)}get board(){return this.#Ve}increasePlayerRounds(){++this.#Re}get playedRounds(){return this.#Re}increaseWinRounds(){++this.#He}get winRounds(){return this.#He}}const Q=(()=>{function e(e){!1!==e.running&&(e.running=!1,e.getCurrentPlayer().increaseWinRounds(),e.getPlayers().forEach((e=>{e.increasePlayerRounds()})),e.addWinner(e.currentPlayerIndex),e.resetCurrentTurn())}function r(e,t){e.getCurrentPlayer().isBot&&(t.playersViews.forEach((e=>{e.disableBoard()})),n(e.getCurrentEnemy().board,t.getPlayerView(e.currentEnemyIndex).boardView))}function n(e,r){let n=c.getSmartTargets(e);const i={};if(0===n.length){n=c.getNotDamagedSmartTargets(e);const t=Math.floor(Math.random()*n.length);i.row=n[t].row,i.col=n[t].col}else i.row=n[0].row,i.col=n[0].col;setTimeout((()=>{t().publish("AttackReceived",{row:i.row,col:i.col,boardView:r})}),1e3)}return{generateGame:function(e,t){const r=new U;Q.createGameView(r,e,t).newGame().then((e=>{for(let t=0;t<e.players.length;t++){const n=e.players[t],i=new J(n.name,e.players[t].isBot);i.createBoard(e.boardWidth,e.boardHeight),Object.keys(n.ships).forEach((e=>{const t=n.ships[e],r=c.addShip(i.board,t.length);c.placeShip(i.board,r,t.row,t.col,t.isVertical)})),r.addPlayer(i)}}))},startGame:function(e,r){if(!0!==e.running){if(e.getPlayersCount()<2)throw new Error("Too few players");e.running=!0,e.increaseCurrentRound(),function(e){let t;t=1===e.currentRound?function(e){return Math.floor(Math.random()*e.getPlayersCount())}(e):e.getLastWinner(),e.currentPlayerIndex=t}(e),e.currentEnemyIndex=(e.currentPlayerIndex+1)%e.getPlayersCount(),e.increaseCurrentTurn(),r&&t().publish("SwitchPlayerTurn",{game:e,gameView:r,firstTurn:!0})}},attack:function(n,i,s,a){n.running&&(c.receiveAttack(n.getCurrentEnemy().board,i,s,a)?(a&&t().publish("AttackSucceded",{boardView:a,row:i,col:s,isSunk:n.getCurrentEnemy().board.getShipFromCoordinate(i,s).isSunk()}),l.areAllShipsSunk(n.getCurrentEnemy().board)?(e(n),a&&t().publish("GameEnded",{gameView:a.playerView.gameView,winnerIndex:n.currentPlayerIndex})):a&&r(n,a.playerView.gameView)):(a&&t().publish("AttackFailed",{boardView:a,row:i,col:s}),function(e,r){e.currentPlayerIndex=(e.currentPlayerIndex+1)%e.getPlayersCount(),e.currentEnemyIndex=(e.currentEnemyIndex+1)%e.getPlayersCount(),e.increaseCurrentTurn(),r&&(t().publish("SwitchPlayerTurn",{game:e,gameView:r,firstTurn:!1}),t().publish("TurnIncreased",{newTurn:e.currentTurn,currentEnemyIndex:e.currentEnemyIndex,gameView:r}))}(n,void 0!==a?a.playerView.gameView:void 0)))},endGame:e,createGameView:function(e,t,r){return new K(e,t,r)},generateNextRound:function(e,t){const r=[],n=[];e.getPlayers().forEach((e=>{n.push(e.name)})),t.newGame(!1,n).then((n=>{for(let t=0;t<n.players.length;t++){const i=n.players[t],s=e.getPlayer(t);s.createBoard(n.boardWidth,n.boardHeight),Object.keys(i.ships).forEach((e=>{const t=i.ships[e],r=c.addShip(s.board,t.length);c.placeShip(s.board,r,t.row,t.col,t.isVertical)})),r.push({wins:s.winRounds,losses:s.playedRounds-s.winRounds})}t.updateScores(r)}))},generateComputerPlayer:function(e,t,r){const n={name:"Computer",isBot:!0},i=M(e,t);Object.keys(r).forEach((e=>{const t=parseInt(e,10),n=r[t];for(let e=0;e<n;e++)c.addShip(i,t)})),c.autoPlaceShips(i),n.ships={};const s=i.getShips();return Object.keys(s).forEach((e=>{n.ships[e]={},n.ships[e].length=i.getShip(e).getLength(),n.ships[e].row=s[e].row,n.ships[e].col=s[e].col,n.ships[e].isVertical=s[e].isVertical})),n},startMove:r,computerAttack:n}})(),X=Q,ee=(t().subscribe("AttackReceived",(function(e,t){X.attack(t.boardView.playerView.gameView.game,t.row,t.col,t.boardView)})),t().subscribe("AttackFailed",(function(e,t){t.boardView.attackFailed(t.row,t.col)})),t().subscribe("AttackSucceded",(function(e,t){t.boardView.attackSucceded(t.row,t.col,t.isSunk)})),t().subscribe("SwitchPlayerTurn",(function(e,t){const r=t.gameView.getPlayerView(t.game.currentPlayerIndex);if(r.setTurn(),r.disableBoard(),!t.firstTurn){const e=t.gameView.getPlayerView(t.game.currentEnemyIndex);e.unsetTurn(),e.enableBoard()}X.startMove(t.game,t.gameView)})),t().subscribe("GameEnded",(function(e,t){t.gameView.endGame(t.winnerIndex)})),t().subscribe("TurnIncreased",(function(e,t){t.gameView.changeTurn(t.newTurn,t.currentEnemyIndex)})),t().subscribe("ShipSunk",(function(e,t){t.playerView.sinkShip(t.shipLength)})),document.getElementById("games"));X.generateGame(ee,1)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,