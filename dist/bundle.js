(()=>{var e={82:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){return'<div class="game-arena">\r\n    <div class="first-player-arena"></div>\r\n    <div class="middle-bisector">\r\n        <div class="rounds-container">\r\n            <p>Round <span class="round-num">1</span></p>\r\n        </div>\r\n    </div>\r\n    <div class="second-player-arena"></div>\r\n</div>'},useData:!0})},134:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({1:function(e,t,r,n,i){return'    <div class="board-block"></div>\r\n'},compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){var s,a=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return null!=(s=a(r,"each").call(null!=t?t:e.nullContext||{},null!=t?a(t,"blocks"):t,{name:"each",hash:{},fn:e.program(1,i,0),inverse:e.noop,data:i,loc:{start:{line:1,column:0},end:{line:3,column:9}}}))?s:""},useData:!0})},661:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){return'<div class="modal-container">\r\n    <div class="game-type-modal">\r\n        <div class="modal-header">\r\n            <h2>Game Type</h2>\r\n        </div>\r\n        <div class="modal-body">\r\n            <section class="section-type-options">\r\n                <form id="form-game-type">\r\n                    <label for="single-player">\r\n                        <input\r\n                            type="radio"\r\n                            id="single-player"\r\n                            name="game-type"\r\n                            value="1"\r\n                            checked\r\n                        />\r\n                        <span>Single Player</span>\r\n                    </label>\r\n\r\n                    <label for="multiplayer">\r\n                        <input\r\n                            type="radio"\r\n                            id="multiplayer"\r\n                            name="game-type"\r\n                            value="2"\r\n                        />\r\n                        <span>Multiplayer</span>\r\n                    </label>\r\n                </form>\r\n            </section>\r\n        </div>\r\n        <hr class="icy-hr" />\r\n        <div class="modal-options">\r\n            <button class="btn-play">Play</button>\r\n        </div>\r\n    </div>\r\n</div>'},useData:!0})},508:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){return'<div class="modal-container">\r\n    <div class="grid-size-modal">\r\n        <div class="modal-header">\r\n            <h2>Options</h2>\r\n        </div>\r\n        <div class="modal-body">\r\n            <section class="section-grid-size">\r\n                <header>\r\n                    <h3>Grid Size</h3>\r\n                </header>\r\n                <span class="width-label">Width</span>\r\n                <div class="width-counter">\r\n                    <span class="minus">\r\n                        <svg\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-dash-lg"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                fill-rule="evenodd"\r\n                                d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8Z"\r\n                            ></path>\r\n                        </svg>\r\n                    </span>\r\n                    <span class="number"></span>\r\n                    <span class="plus"><svg\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-plus-lg"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                fill-rule="evenodd"\r\n                                d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z"\r\n                            ></path>\r\n                        </svg></span>\r\n                </div>\r\n                <span class="height-label">Height</span>\r\n                <div class="height-counter">\r\n                    <span class="minus"><svg\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-dash-lg"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                fill-rule="evenodd"\r\n                                d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8Z"\r\n                            ></path>\r\n                        </svg></span>\r\n                    <span class="number">1</span>\r\n                    <span class="plus"><svg\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-plus-lg"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                fill-rule="evenodd"\r\n                                d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z"\r\n                            ></path>\r\n                        </svg></span>\r\n                </div>\r\n                <div class="board"></div>\r\n            </section>\r\n        </div>\r\n        <hr class="icy-hr" />\r\n        <div class="modal-options">\r\n            <button class="btn-next">Next</button>\r\n        </div>\r\n        <div class="modal-spacer"></div>\r\n    </div>\r\n</div>'},useData:!0})},129:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){return'<div class="modal-container">\r\n    <div class="rules-modal">\r\n        <div class="modal-header">\r\n            <h2>Rules</h2>\r\n        </div>\r\n        <div class="modal-body">\r\n            <section class="section-overview">\r\n                <header>\r\n                    <h3>Overview</h3>\r\n                </header>\r\n                <p>\r\n                    Battleship is a war-themed board game for two players in which the opponents try\r\n                    to guess the location of their opponent\'s warships and sink them.\r\n                </p>\r\n            </section>\r\n            <section class="section-gameplay">\r\n                <header>\r\n                    <h3>Gameplay</h3>\r\n                </header>\r\n                <ol>\r\n                    <li>Both players agree on the size of their boards.</li>\r\n                    <li>Both players agree on the number of the ships and their length which will be\r\n                        placed on the boards.</li>\r\n                    <li>\r\n                        Each player hides their ships in their board. Note: Make sure that the other\r\n                        player can not see the screen while your are placing the ships.\r\n                    </li>\r\n                    <li>\r\n                        When the game starts players take turns attacking their enemy board, this is\r\n                        done by choosing a cell on the board.\r\n                        <ul>\r\n                            <li>\r\n                                If there is a part of the ship under the attacked cell then the\r\n                                attack succeded and the player continue to attack another cell.\r\n                            </li>\r\n                            <li>\r\n                                Otherwise the attack failed and the other player starts his turn.\r\n                            </li>\r\n                        </ul>\r\n                    </li>\r\n                    <li>\r\n                        The winner is the first to reveal all the hidden ships in their enemy\'s\r\n                        board.\r\n                    </li>\r\n                </ol>\r\n            </section>\r\n        </div>\r\n        <hr class="icy-hr" />\r\n        <div class="modal-options">\r\n            <button class="btn-start">Start</button>\r\n        </div>\r\n        <div class="modal-spacer"></div>\r\n    </div>\r\n</div>'},useData:!0})},569:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){return'<div class="modal-container">\r\n    <div class="ships-choosing-modal">\r\n        <div class="modal-header">\r\n            <h2>Options</h2>\r\n        </div>\r\n        <div class="modal-body">\r\n            <section class="section-choose-ships">\r\n                <header>\r\n                    <h3>Choose Ships</h3>\r\n                </header>\r\n                <div class="ships">\r\n                    <div class="pages-container"></div>\r\n                </div>\r\n                <div class="pagination">\r\n                    <div class="arrow-container arrow-container-button">\r\n                        <svg\r\n                            class="left-arrow"\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-caret-left-fill"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z"\r\n                            ></path>\r\n                        </svg>\r\n                    </div>\r\n                    <p><span class="current-page">1</span>\r\n                        /\r\n                        <span class="pages-num"></span></p>\r\n                    <div class="arrow-container arrow-container-button">\r\n                        <svg\r\n                            class="right-arrow"\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-caret-right-fill"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"\r\n                            ></path>\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n        <hr class="icy-hr" />\r\n        <div class="modal-options">\r\n            <button class="btn-back">Back</button>\r\n            <button class="btn-submit">Next</button>\r\n        </div>\r\n        <div class="modal-spacer"></div>\r\n    </div>\r\n</div>'},useData:!0})},257:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){var s,a=null!=t?t:e.nullContext||{},o=e.hooks.helperMissing,l="function",h=e.escapeExpression,c=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'<div class="ship-container" data-length="'+h(typeof(s=null!=(s=c(r,"shipLength")||(null!=t?c(t,"shipLength"):t))?s:o)===l?s.call(a,{name:"shipLength",hash:{},data:i,loc:{start:{line:1,column:41},end:{line:1,column:55}}}):s)+'">\r\n    <div class="ship active">\r\n        <div class="ship-block"></div>\r\n    </div>\r\n    <div class="count">\r\n        x\r\n        <span class="number">'+h(typeof(s=null!=(s=c(r,"shipCount")||(null!=t?c(t,"shipCount"):t))?s:o)===l?s.call(a,{name:"shipCount",hash:{},data:i,loc:{start:{line:7,column:29},end:{line:7,column:42}}}):s)+"</span>\r\n    </div>\r\n</div>"},useData:!0})},460:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){var s,a=null!=t?t:e.nullContext||{},o=e.hooks.helperMissing,l="function",h=e.escapeExpression,c=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'<div class="ship-container" data-length="'+h(typeof(s=null!=(s=c(r,"shipLength")||(null!=t?c(t,"shipLength"):t))?s:o)===l?s.call(a,{name:"shipLength",hash:{},data:i,loc:{start:{line:1,column:41},end:{line:1,column:55}}}):s)+'">\r\n    <div class="counter">\r\n        <span class="minus">\r\n            <svg\r\n                xmlns="http://www.w3.org/2000/svg"\r\n                width="16"\r\n                height="16"\r\n                fill="currentColor"\r\n                class="bi bi-dash-lg"\r\n                viewBox="0 0 16 16"\r\n            >\r\n                <path\r\n                    fill-rule="evenodd"\r\n                    d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8Z"\r\n                ></path>\r\n            </svg>\r\n        </span>\r\n        <div class="ship">\r\n            \r\n        </div>\r\n        <span class="plus"><svg\r\n                xmlns="http://www.w3.org/2000/svg"\r\n                width="16"\r\n                height="16"\r\n                fill="currentColor"\r\n                class="bi bi-plus-lg"\r\n                viewBox="0 0 16 16"\r\n            >\r\n                <path\r\n                    fill-rule="evenodd"\r\n                    d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z"\r\n                ></path>\r\n            </svg></span>\r\n    </div>\r\n    <div class="count">\r\n        x\r\n        <span class="number">'+h(typeof(s=null!=(s=c(r,"shipCount")||(null!=t?c(t,"shipCount"):t))?s:o)===l?s.call(a,{name:"shipCount",hash:{},data:i,loc:{start:{line:37,column:29},end:{line:37,column:42}}}):s)+"</span>\r\n    </div>\r\n</div>"},useData:!0})},72:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){var s,a=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'<div class="modal-container">\r\n        <div class="ships-placing-modal">\r\n            <div class="modal-header">\r\n                <h2>'+e.escapeExpression("function"==typeof(s=null!=(s=a(r,"playerLabel")||(null!=t?a(t,"playerLabel"):t))?s:e.hooks.helperMissing)?s.call(null!=t?t:e.nullContext||{},{name:"playerLabel",hash:{},data:i,loc:{start:{line:4,column:20},end:{line:4,column:35}}}):s)+'</h2>\r\n            </div>\r\n            <div class="modal-body">\r\n                <section class="section-player-name">\r\n                    <header>\r\n                        <h3>Player Name</h3>\r\n                    </header>\r\n                    <form class="form-player-name">\r\n                        <div class="floating-label-input">\r\n                            <input\r\n                                type="text"\r\n                                name="name"\r\n                                id="name"\r\n                                placeholder=" "\r\n                                autocomplete="off"\r\n                            />\r\n                            <label for="name">\r\n                            </label>\r\n                        </div>\r\n                    </form>\r\n                </section>\r\n                <hr class="icy-hr" />\r\n                <section class="place-ships">\r\n                    <header>\r\n                        <h3>Place Ships</h3>\r\n                    </header>\r\n                    <div class="ships">\r\n                        <div class="pages-container">\r\n\r\n                        </div>\r\n                        <div class="pagination">\r\n                            <div class="arrow-container arrow-container-button">\r\n                                <svg\r\n                                    class="left-arrow"\r\n                                    xmlns="http://www.w3.org/2000/svg"\r\n                                    width="16"\r\n                                    height="16"\r\n                                    fill="currentColor"\r\n                                    class="bi bi-caret-left-fill"\r\n                                    viewBox="0 0 16 16"\r\n                                >\r\n                                    <path\r\n                                        d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z"\r\n                                    ></path>\r\n                                </svg>\r\n                            </div>\r\n                            <p><span class="current-page">1</span>\r\n                                /\r\n                                <span class="pages-num"></span></p>\r\n                            <div class="arrow-container arrow-container-button">\r\n                                <svg\r\n                                    class="right-arrow"\r\n                                    xmlns="http://www.w3.org/2000/svg"\r\n                                    width="16"\r\n                                    height="16"\r\n                                    fill="currentColor"\r\n                                    class="bi bi-caret-right-fill"\r\n                                    viewBox="0 0 16 16"\r\n                                >\r\n                                    <path\r\n                                        d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"\r\n                                    ></path>\r\n                                </svg>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class="board-container">\r\n                        <div class="board"></div>\r\n                        <div class="place-options">\r\n                            <button class="btn-h active">H</button>\r\n                            <button class="btn-v">V</button>\r\n                            <button class="btn-remove">\r\n                                <svg\r\n                                    xmlns="http://www.w3.org/2000/svg"\r\n                                    width="20"\r\n                                    height="20"\r\n                                    fill="white"\r\n                                    class="bi bi-trash-fill"\r\n                                    viewBox="0 0 16 16"\r\n                                >\r\n                                    <path\r\n                                        d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z"\r\n                                    ></path>\r\n                                </svg>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div class="auto-place-container">\r\n                        <button class="btn-auto-place">Random Placing</button>\r\n                        <p class="text-error d-none">*Couldn\'t place ships</p>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n            <hr class="icy-hr" />\r\n            <div class="modal-options">\r\n                <button class="btn-back">Back</button>\r\n                <button class="btn-submit">Next</button>\r\n            </div>\r\n            <div class="modal-spacer"></div>\r\n    </div>\r\n</div>'},useData:!0})},344:(e,t,r)=>{var n=r(202);e.exports=(n.default||n).template({compiler:[8,">= 4.3.0"],main:function(e,t,r,n,i){return'<div class="turn-row">\r\n    <div class="turn-container">\r\n        <p>Your Turn</p>\r\n    </div>\r\n</div>\r\n\r\n<div class="board">\r\n\r\n</div>\r\n\r\n<div class="ships-remained-container-responsive">\r\n    <div class="ships">\r\n\r\n    </div>\r\n    <div class="pagination">\r\n        <div class="arrow-container">\r\n            <svg\r\n                class="left-arrow"\r\n                xmlns="http://www.w3.org/2000/svg"\r\n                width="16"\r\n                height="16"\r\n                fill="currentColor"\r\n                class="bi bi-caret-left-fill"\r\n                viewBox="0 0 16 16"\r\n            >\r\n                <path\r\n                    d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z"\r\n                ></path>\r\n            </svg>\r\n        </div>\r\n        <div class="arrow-container">\r\n            <svg\r\n                class="right-arrow"\r\n                xmlns="http://www.w3.org/2000/svg"\r\n                width="16"\r\n                height="16"\r\n                fill="currentColor"\r\n                class="bi bi-caret-right-fill"\r\n                viewBox="0 0 16 16"\r\n            >\r\n                <path\r\n                    d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"\r\n                ></path>\r\n            </svg>\r\n        </div>\r\n    </div>\r\n    <div class="info">\r\n        <img src="./assets/img/info-circle-fill.svg" alt="" />\r\n    </div>\r\n</div>\r\n\r\n<div class="score-container">\r\n    <p class="name"></p>\r\n    <p>Wins: <span class="wins">0</span></p>\r\n    <p>Losses: <span class="losses">0</span></p>\r\n</div>\r\n\r\n<div class="darkening"></div>'},useData:!0})},834:(e,t,r)=>{"use strict";function n(e){return e&&e.__esModule?e:{default:e}}function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}t.__esModule=!0;var s=i(r(67)),a=n(r(558)),o=n(r(728)),l=i(r(392)),h=i(r(628)),c=n(r(982));function d(){var e=new s.HandlebarsEnvironment;return l.extend(e,s),e.SafeString=a.default,e.Exception=o.default,e.Utils=l,e.escapeExpression=l.escapeExpression,e.VM=h,e.template=function(t){return h.template(t,e)},e}var u=d();u.create=d,c.default(u),u.default=u,t.default=u,e.exports=t.default},67:(e,t,r)=>{"use strict";function n(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.HandlebarsEnvironment=d;var i=r(392),s=n(r(728)),a=r(638),o=r(881),l=n(r(37)),h=r(293);t.VERSION="4.7.7",t.COMPILER_REVISION=8,t.LAST_COMPATIBLE_COMPILER_REVISION=7,t.REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0 <4.3.0",8:">= 4.3.0"};var c="[object Object]";function d(e,t,r){this.helpers=e||{},this.partials=t||{},this.decorators=r||{},a.registerDefaultHelpers(this),o.registerDefaultDecorators(this)}d.prototype={constructor:d,logger:l.default,log:l.default.log,registerHelper:function(e,t){if(i.toString.call(e)===c){if(t)throw new s.default("Arg not supported with multiple helpers");i.extend(this.helpers,e)}else this.helpers[e]=t},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,t){if(i.toString.call(e)===c)i.extend(this.partials,e);else{if(void 0===t)throw new s.default('Attempting to register a partial called "'+e+'" as undefined');this.partials[e]=t}},unregisterPartial:function(e){delete this.partials[e]},registerDecorator:function(e,t){if(i.toString.call(e)===c){if(t)throw new s.default("Arg not supported with multiple decorators");i.extend(this.decorators,e)}else this.decorators[e]=t},unregisterDecorator:function(e){delete this.decorators[e]},resetLoggedPropertyAccesses:function(){h.resetLoggedProperties()}};var u=l.default.log;t.log=u,t.createFrame=i.createFrame,t.logger=l.default},881:(e,t,r)=>{"use strict";t.__esModule=!0,t.registerDefaultDecorators=function(e){i.default(e)};var n,i=(n=r(670))&&n.__esModule?n:{default:n}},670:(e,t,r)=>{"use strict";t.__esModule=!0;var n=r(392);t.default=function(e){e.registerDecorator("inline",(function(e,t,r,i){var s=e;return t.partials||(t.partials={},s=function(i,s){var a=r.partials;r.partials=n.extend({},a,t.partials);var o=e(i,s);return r.partials=a,o}),t.partials[i.args[0]]=i.fn,s}))},e.exports=t.default},728:(e,t)=>{"use strict";t.__esModule=!0;var r=["description","fileName","lineNumber","endLineNumber","message","name","number","stack"];function n(e,t){var i=t&&t.loc,s=void 0,a=void 0,o=void 0,l=void 0;i&&(s=i.start.line,a=i.end.line,o=i.start.column,l=i.end.column,e+=" - "+s+":"+o);for(var h=Error.prototype.constructor.call(this,e),c=0;c<r.length;c++)this[r[c]]=h[r[c]];Error.captureStackTrace&&Error.captureStackTrace(this,n);try{i&&(this.lineNumber=s,this.endLineNumber=a,Object.defineProperty?(Object.defineProperty(this,"column",{value:o,enumerable:!0}),Object.defineProperty(this,"endColumn",{value:l,enumerable:!0})):(this.column=o,this.endColumn=l))}catch(e){}}n.prototype=new Error,t.default=n,e.exports=t.default},638:(e,t,r)=>{"use strict";function n(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.registerDefaultHelpers=function(e){i.default(e),s.default(e),a.default(e),o.default(e),l.default(e),h.default(e),c.default(e)},t.moveHelperToHooks=function(e,t,r){e.helpers[t]&&(e.hooks[t]=e.helpers[t],r||delete e.helpers[t])};var i=n(r(342)),s=n(r(822)),a=n(r(905)),o=n(r(405)),l=n(r(702)),h=n(r(593)),c=n(r(978))},342:(e,t,r)=>{"use strict";t.__esModule=!0;var n=r(392);t.default=function(e){e.registerHelper("blockHelperMissing",(function(t,r){var i=r.inverse,s=r.fn;if(!0===t)return s(this);if(!1===t||null==t)return i(this);if(n.isArray(t))return t.length>0?(r.ids&&(r.ids=[r.name]),e.helpers.each(t,r)):i(this);if(r.data&&r.ids){var a=n.createFrame(r.data);a.contextPath=n.appendContextPath(r.data.contextPath,r.name),r={data:a}}return s(t,r)}))},e.exports=t.default},822:(e,t,r)=>{"use strict";t.__esModule=!0;var n,i=r(392),s=(n=r(728))&&n.__esModule?n:{default:n};t.default=function(e){e.registerHelper("each",(function(e,t){if(!t)throw new s.default("Must pass iterator to #each");var n,a=t.fn,o=t.inverse,l=0,h="",c=void 0,d=void 0;function u(t,r,n){c&&(c.key=t,c.index=r,c.first=0===r,c.last=!!n,d&&(c.contextPath=d+t)),h+=a(e[t],{data:c,blockParams:i.blockParams([e[t],t],[d+t,null])})}if(t.data&&t.ids&&(d=i.appendContextPath(t.data.contextPath,t.ids[0])+"."),i.isFunction(e)&&(e=e.call(this)),t.data&&(c=i.createFrame(t.data)),e&&"object"==typeof e)if(i.isArray(e))for(var p=e.length;l<p;l++)l in e&&u(l,l,l===e.length-1);else if(r.g.Symbol&&e[r.g.Symbol.iterator]){for(var m=[],g=e[r.g.Symbol.iterator](),f=g.next();!f.done;f=g.next())m.push(f.value);for(p=(e=m).length;l<p;l++)u(l,l,l===e.length-1)}else n=void 0,Object.keys(e).forEach((function(e){void 0!==n&&u(n,l-1),n=e,l++})),void 0!==n&&u(n,l-1,!0);return 0===l&&(h=o(this)),h}))},e.exports=t.default},905:(e,t,r)=>{"use strict";t.__esModule=!0;var n,i=(n=r(728))&&n.__esModule?n:{default:n};t.default=function(e){e.registerHelper("helperMissing",(function(){if(1!==arguments.length)throw new i.default('Missing helper: "'+arguments[arguments.length-1].name+'"')}))},e.exports=t.default},405:(e,t,r)=>{"use strict";t.__esModule=!0;var n,i=r(392),s=(n=r(728))&&n.__esModule?n:{default:n};t.default=function(e){e.registerHelper("if",(function(e,t){if(2!=arguments.length)throw new s.default("#if requires exactly one argument");return i.isFunction(e)&&(e=e.call(this)),!t.hash.includeZero&&!e||i.isEmpty(e)?t.inverse(this):t.fn(this)})),e.registerHelper("unless",(function(t,r){if(2!=arguments.length)throw new s.default("#unless requires exactly one argument");return e.helpers.if.call(this,t,{fn:r.inverse,inverse:r.fn,hash:r.hash})}))},e.exports=t.default},702:(e,t)=>{"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("log",(function(){for(var t=[void 0],r=arguments[arguments.length-1],n=0;n<arguments.length-1;n++)t.push(arguments[n]);var i=1;null!=r.hash.level?i=r.hash.level:r.data&&null!=r.data.level&&(i=r.data.level),t[0]=i,e.log.apply(e,t)}))},e.exports=t.default},593:(e,t)=>{"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("lookup",(function(e,t,r){return e?r.lookupProperty(e,t):e}))},e.exports=t.default},978:(e,t,r)=>{"use strict";t.__esModule=!0;var n,i=r(392),s=(n=r(728))&&n.__esModule?n:{default:n};t.default=function(e){e.registerHelper("with",(function(e,t){if(2!=arguments.length)throw new s.default("#with requires exactly one argument");i.isFunction(e)&&(e=e.call(this));var r=t.fn;if(i.isEmpty(e))return t.inverse(this);var n=t.data;return t.data&&t.ids&&((n=i.createFrame(t.data)).contextPath=i.appendContextPath(t.data.contextPath,t.ids[0])),r(e,{data:n,blockParams:i.blockParams([e],[n&&n.contextPath])})}))},e.exports=t.default},572:(e,t,r)=>{"use strict";t.__esModule=!0,t.createNewLookupObject=function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];return n.extend.apply(void 0,[Object.create(null)].concat(t))};var n=r(392)},293:(e,t,r)=>{"use strict";t.__esModule=!0,t.createProtoAccessControl=function(e){var t=Object.create(null);t.constructor=!1,t.__defineGetter__=!1,t.__defineSetter__=!1,t.__lookupGetter__=!1;var r=Object.create(null);return r.__proto__=!1,{properties:{whitelist:n.createNewLookupObject(r,e.allowedProtoProperties),defaultValue:e.allowProtoPropertiesByDefault},methods:{whitelist:n.createNewLookupObject(t,e.allowedProtoMethods),defaultValue:e.allowProtoMethodsByDefault}}},t.resultIsAllowed=function(e,t,r){return function(e,t){return void 0!==e.whitelist[t]?!0===e.whitelist[t]:void 0!==e.defaultValue?e.defaultValue:(function(e){!0!==s[e]&&(s[e]=!0,i.log("error",'Handlebars: Access has been denied to resolve the property "'+e+'" because it is not an "own property" of its parent.\nYou can add a runtime option to disable the check or this warning:\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details'))}(t),!1)}("function"==typeof e?t.methods:t.properties,r)},t.resetLoggedProperties=function(){Object.keys(s).forEach((function(e){delete s[e]}))};var n=r(572),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(r(37)),s=Object.create(null)},5:(e,t)=>{"use strict";t.__esModule=!0,t.wrapHelper=function(e,t){return"function"!=typeof e?e:function(){return arguments[arguments.length-1]=t(arguments[arguments.length-1]),e.apply(this,arguments)}}},37:(e,t,r)=>{"use strict";t.__esModule=!0;var n=r(392),i={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(e){if("string"==typeof e){var t=n.indexOf(i.methodMap,e.toLowerCase());e=t>=0?t:parseInt(e,10)}return e},log:function(e){if(e=i.lookupLevel(e),"undefined"!=typeof console&&i.lookupLevel(i.level)<=e){var t=i.methodMap[e];console[t]||(t="log");for(var r=arguments.length,n=Array(r>1?r-1:0),s=1;s<r;s++)n[s-1]=arguments[s];console[t].apply(console,n)}}};t.default=i,e.exports=t.default},982:(e,t,r)=>{"use strict";t.__esModule=!0,t.default=function(e){var t=void 0!==r.g?r.g:window,n=t.Handlebars;e.noConflict=function(){return t.Handlebars===e&&(t.Handlebars=n),e}},e.exports=t.default},628:(e,t,r)=>{"use strict";t.__esModule=!0,t.checkRevision=function(e){var t=e&&e[0]||1,r=a.COMPILER_REVISION;if(!(t>=a.LAST_COMPATIBLE_COMPILER_REVISION&&t<=a.COMPILER_REVISION)){if(t<a.LAST_COMPATIBLE_COMPILER_REVISION){var n=a.REVISION_CHANGES[r],i=a.REVISION_CHANGES[t];throw new s.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+n+") or downgrade your runtime to an older version ("+i+").")}throw new s.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")}},t.template=function(e,t){if(!t)throw new s.default("No environment passed to template");if(!e||!e.main)throw new s.default("Unknown template object: "+typeof e);e.main.decorator=e.main_d,t.VM.checkRevision(e.compiler);var r=e.compiler&&7===e.compiler[0],n={strict:function(e,t,r){if(!e||!(t in e))throw new s.default('"'+t+'" not defined in '+e,{loc:r});return n.lookupProperty(e,t)},lookupProperty:function(e,t){var r=e[t];return null==r||Object.prototype.hasOwnProperty.call(e,t)||h.resultIsAllowed(r,n.protoAccessControl,t)?r:void 0},lookup:function(e,t){for(var r=e.length,i=0;i<r;i++)if(null!=(e[i]&&n.lookupProperty(e[i],t)))return e[i][t]},lambda:function(e,t){return"function"==typeof e?e.call(t):e},escapeExpression:i.escapeExpression,invokePartial:function(r,n,a){a.hash&&(n=i.extend({},n,a.hash),a.ids&&(a.ids[0]=!0)),r=t.VM.resolvePartial.call(this,r,n,a);var o=i.extend({},a,{hooks:this.hooks,protoAccessControl:this.protoAccessControl}),l=t.VM.invokePartial.call(this,r,n,o);if(null==l&&t.compile&&(a.partials[a.name]=t.compile(r,e.compilerOptions,t),l=a.partials[a.name](n,o)),null!=l){if(a.indent){for(var h=l.split("\n"),c=0,d=h.length;c<d&&(h[c]||c+1!==d);c++)h[c]=a.indent+h[c];l=h.join("\n")}return l}throw new s.default("The partial "+a.name+" could not be compiled when running in runtime-only mode")},fn:function(t){var r=e[t];return r.decorator=e[t+"_d"],r},programs:[],program:function(e,t,r,n,i){var s=this.programs[e],a=this.fn(e);return t||i||n||r?s=c(this,e,a,t,r,n,i):s||(s=this.programs[e]=c(this,e,a)),s},data:function(e,t){for(;e&&t--;)e=e._parent;return e},mergeIfNeeded:function(e,t){var r=e||t;return e&&t&&e!==t&&(r=i.extend({},t,e)),r},nullContext:Object.seal({}),noop:t.VM.noop,compilerInfo:e.compiler};function a(t){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],i=r.data;a._setup(r),!r.partial&&e.useData&&(i=u(t,i));var s=void 0,o=e.useBlockParams?[]:void 0;function l(t){return""+e.main(n,t,n.helpers,n.partials,i,o,s)}return e.useDepths&&(s=r.depths?t!=r.depths[0]?[t].concat(r.depths):r.depths:[t]),(l=p(e.main,l,n,r.depths||[],i,o))(t,r)}return a.isTop=!0,a._setup=function(s){if(s.partial)n.protoAccessControl=s.protoAccessControl,n.helpers=s.helpers,n.partials=s.partials,n.decorators=s.decorators,n.hooks=s.hooks;else{var a=i.extend({},t.helpers,s.helpers);!function(e,t){Object.keys(e).forEach((function(r){var n=e[r];e[r]=function(e,t){var r=t.lookupProperty;return l.wrapHelper(e,(function(e){return i.extend({lookupProperty:r},e)}))}(n,t)}))}(a,n),n.helpers=a,e.usePartial&&(n.partials=n.mergeIfNeeded(s.partials,t.partials)),(e.usePartial||e.useDecorators)&&(n.decorators=i.extend({},t.decorators,s.decorators)),n.hooks={},n.protoAccessControl=h.createProtoAccessControl(s);var c=s.allowCallsToHelperMissing||r;o.moveHelperToHooks(n,"helperMissing",c),o.moveHelperToHooks(n,"blockHelperMissing",c)}},a._child=function(t,r,i,a){if(e.useBlockParams&&!i)throw new s.default("must pass block params");if(e.useDepths&&!a)throw new s.default("must pass parent depths");return c(n,t,e[t],r,0,i,a)},a},t.wrapProgram=c,t.resolvePartial=function(e,t,r){return e?e.call||r.name||(r.name=e,e=r.partials[e]):e="@partial-block"===r.name?r.data["partial-block"]:r.partials[r.name],e},t.invokePartial=function(e,t,r){var n=r.data&&r.data["partial-block"];r.partial=!0,r.ids&&(r.data.contextPath=r.ids[0]||r.data.contextPath);var o=void 0;if(r.fn&&r.fn!==d&&function(){r.data=a.createFrame(r.data);var e=r.fn;o=r.data["partial-block"]=function(t){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return r.data=a.createFrame(r.data),r.data["partial-block"]=n,e(t,r)},e.partials&&(r.partials=i.extend({},r.partials,e.partials))}(),void 0===e&&o&&(e=o),void 0===e)throw new s.default("The partial "+r.name+" could not be found");if(e instanceof Function)return e(t,r)},t.noop=d;var n,i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(r(392)),s=(n=r(728))&&n.__esModule?n:{default:n},a=r(67),o=r(638),l=r(5),h=r(293);function c(e,t,r,n,i,s,a){function o(t){var i=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],o=a;return!a||t==a[0]||t===e.nullContext&&null===a[0]||(o=[t].concat(a)),r(e,t,e.helpers,e.partials,i.data||n,s&&[i.blockParams].concat(s),o)}return(o=p(r,o,e,a,n,s)).program=t,o.depth=a?a.length:0,o.blockParams=i||0,o}function d(){return""}function u(e,t){return t&&"root"in t||((t=t?a.createFrame(t):{}).root=e),t}function p(e,t,r,n,s,a){if(e.decorator){var o={};t=e.decorator(t,o,r,n&&n[0],s,a,n),i.extend(t,o)}return t}},558:(e,t)=>{"use strict";function r(e){this.string=e}t.__esModule=!0,r.prototype.toString=r.prototype.toHTML=function(){return""+this.string},t.default=r,e.exports=t.default},392:(e,t)=>{"use strict";t.__esModule=!0,t.extend=a,t.indexOf=function(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1},t.escapeExpression=function(e){if("string"!=typeof e){if(e&&e.toHTML)return e.toHTML();if(null==e)return"";if(!e)return e+"";e=""+e}return i.test(e)?e.replace(n,s):e},t.isEmpty=function(e){return!e&&0!==e||!(!h(e)||0!==e.length)},t.createFrame=function(e){var t=a({},e);return t._parent=e,t},t.blockParams=function(e,t){return e.path=t,e},t.appendContextPath=function(e,t){return(e?e+".":"")+t};var r={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},n=/[&<>"'`=]/g,i=/[&<>"'`=]/;function s(e){return r[e]}function a(e){for(var t=1;t<arguments.length;t++)for(var r in arguments[t])Object.prototype.hasOwnProperty.call(arguments[t],r)&&(e[r]=arguments[t][r]);return e}var o=Object.prototype.toString;t.toString=o;var l=function(e){return"function"==typeof e};l(/x/)&&(t.isFunction=l=function(e){return"function"==typeof e&&"[object Function]"===o.call(e)}),t.isFunction=l;var h=Array.isArray||function(e){return!(!e||"object"!=typeof e)&&"[object Array]"===o.call(e)};t.isArray=h},202:(e,t,r)=>{e.exports=r(834).default},798:function(e,t,r){e=r.nmd(e),function(r,n){"use strict";var i={};r.PubSub?(i=r.PubSub,console.warn("PubSub already loaded, using existing version")):(r.PubSub=i,function(e){var t={},r=-1;function n(e,t,r){try{e(t,r)}catch(e){setTimeout(function(e){return function(){throw e}}(e),0)}}function i(e,t,r){e(t,r)}function s(e,r,s,a){var o,l=t[r],h=a?i:n;if(Object.prototype.hasOwnProperty.call(t,r))for(o in l)Object.prototype.hasOwnProperty.call(l,o)&&h(l[o],e,s)}function a(e){var r=String(e);return Boolean(Object.prototype.hasOwnProperty.call(t,r)&&function(e){var t;for(t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!0;return!1}(t[r]))}function o(e,t,r,n){var i=function(e,t,r){return function(){var n=String(e),i=n.lastIndexOf(".");for(s(e,e,t,r);-1!==i;)i=(n=n.substr(0,i)).lastIndexOf("."),s(e,n,t,r);s(e,"*",t,r)}}(e="symbol"==typeof e?e.toString():e,t,n);return!!function(e){for(var t=String(e),r=a(t)||a("*"),n=t.lastIndexOf(".");!r&&-1!==n;)n=(t=t.substr(0,n)).lastIndexOf("."),r=a(t);return r}(e)&&(!0===r?i():setTimeout(i,0),!0)}e.publish=function(t,r){return o(t,r,!1,e.immediateExceptions)},e.publishSync=function(t,r){return o(t,r,!0,e.immediateExceptions)},e.subscribe=function(e,n){if("function"!=typeof n)return!1;e="symbol"==typeof e?e.toString():e,Object.prototype.hasOwnProperty.call(t,e)||(t[e]={});var i="uid_"+String(++r);return t[e][i]=n,i},e.subscribeAll=function(t){return e.subscribe("*",t)},e.subscribeOnce=function(t,r){var n=e.subscribe(t,(function(){e.unsubscribe(n),r.apply(this,arguments)}));return e},e.clearAllSubscriptions=function(){t={}},e.clearSubscriptions=function(e){var r;for(r in t)Object.prototype.hasOwnProperty.call(t,r)&&0===r.indexOf(e)&&delete t[r]},e.countSubscriptions=function(e){var r,n,i=0;for(r in t)if(Object.prototype.hasOwnProperty.call(t,r)&&0===r.indexOf(e)){for(n in t[r])i++;break}return i},e.getSubscriptions=function(e){var r,n=[];for(r in t)Object.prototype.hasOwnProperty.call(t,r)&&0===r.indexOf(e)&&n.push(r);return n},e.unsubscribe=function(r){var n,i,s,a="string"==typeof r&&(Object.prototype.hasOwnProperty.call(t,r)||function(e){var r;for(r in t)if(Object.prototype.hasOwnProperty.call(t,r)&&0===r.indexOf(e))return!0;return!1}(r)),o=!a&&"string"==typeof r,l="function"==typeof r,h=!1;if(!a){for(n in t)if(Object.prototype.hasOwnProperty.call(t,n)){if(i=t[n],o&&i[r]){delete i[r],h=r;break}if(l)for(s in i)Object.prototype.hasOwnProperty.call(i,s)&&i[s]===r&&(delete i[s],h=!0)}return h}e.clearSubscriptions(r)}}(i)),void 0!==e&&e.exports&&(t=e.exports=i),t.PubSub=i,e.exports=t=i}("object"==typeof window&&window||this)}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var s=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(s.exports,s,s.exports,r),s.loaded=!0,s.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e=r(798),t=r.n(e);const n=function(e){let t,r=e.length;for(;0!==r;)t=Math.floor(Math.random()*r),r--,[e[r],e[t]]=[e[t],e[r]];return e},i={maxHorizontalLengthCanBeOccupied:function(e){let t=0;const r=e.getShipsBoard();for(let n=0;n<e.getHeight();n++)for(let i=0;i<e.getWidth();i++)if(-1===r[n][i]){let s=1;for(;;){if(i+1===e.getWidth()||-1!==r[n][i+1]){t=Math.max(t,s);break}++s,++i}}return t},maxVerticalLengthCanBeOccupied:function(e){let t=0;const r=e.getShipsBoard();for(let n=0;n<e.getWidth();n++)for(let i=0;i<e.getHeight();i++)if(-1===r[i][n]){let s=1;for(;;){if(i+1===e.getHeight()||-1!==r[i+1][n]){t=Math.max(t,s);break}++s,++i}}return t}},s=i,a=(()=>{function e(e){return"number"==typeof e&&Number.isInteger(e)&&e>=0}return{checkIfWholeNumber:e,checkIfPositiveNumber:function(t){return e(t)&&t>0}}})(),o=(()=>{function e(e,t,r){return t<0||t>=e.getHeight()||r<0||r>=e.getWidth()}return{canAddShip:function(e,t){if(!a.checkIfPositiveNumber(t))throw new Error("Illegal Argument Exception");if(t>Math.max(s.maxHorizontalLengthCanBeOccupied(e),s.maxVerticalLengthCanBeOccupied(e)))return!1;let r=0;return e.getShips().forEach((e=>{void 0===e.row&&void 0===e.col&&(r+=e.ship.getLength())})),!(e.getBlockNotOccupied()-r-t<0)},isOutsideBoard:e,canPlaceShip:function(t,r,n,i,s){if(!a.checkIfWholeNumber(r)||!a.checkIfWholeNumber(n)||!a.checkIfWholeNumber(i)||"boolean"!=typeof s)throw new Error("Illegal Argument Exception");if(e(t,n,i))throw new Error("Illegal Argument Exception");if(r>=t.getShips().length)throw new Error("Illegal Argument Exception");const o=t.getShip(r);if(s&&n+o.getLength()-1>=t.getHeight())return!1;if(!s&&i+o.getLength()-1>=t.getWidth())return!1;const l=t.getShipsBoard();for(let e=0;e<o.getLength();e++){if(s&&-1!==l[n+e][i])return!1;if(!s&&-1!==l[n][i+e])return!1}return!0},isHit:function(t,r,n){if(!a.checkIfWholeNumber(r)||!a.checkIfWholeNumber(n))throw new Error("Illegal Argument Exception");if(e(t,r,n))throw new Error("Illegal Argument Exception");return 0!==t.getHitsBoard()[r][n]},areAllShipsSunk:function(e){return 0===e.getShipsAlive()},checkIfAllShipsPlaced:function(e){const t=e.getShips();for(let e=0;e<t.length;e++)if(void 0===t[e].row||void 0===t[e].col)return!1;return!0},checkIfNonOfShipsPlaced:function(e){const t=e.getShips();for(let e=0;e<t.length;e++)if(void 0!==t[e].row||void 0!==t[e].col)return!1;return!0}}})(),l=o,h=(()=>{function e(e,t,r,n,i){if(!l.canPlaceShip(e,t,r,n,i))return!1;const s=e.getShip(t);e.setShipOrientation(t,i),e.setShipStartPoint(t,r,n);for(let a=0;a<s.getLength();a++)i?e.setShipBoardCell(r+a,n,t):e.setShipBoardCell(r,n+a,t);return e.decreaseBlockNotOccupied(s.getLength()),!0}function r(e,t){const r=e.getShips();if(void 0===r[t].row||void 0===r[t].col||void 0===r[t].isVertical)throw new Error("Ship is not placed");const n=e.getShip(t);n.isSunk()||e.decreaseShipsAlive(),e.removeFromHitsBoard(r[t].row,r[t].col,n.getLength(),r[t].isVertical),e.removeFromShipsBoard(r[t].row,r[t].col,n.getLength(),r[t].isVertical),e.increaseBlockNotOccupied(n.getLength()),delete r[t].row,delete r[t].col,delete r[t].isVertical}function i(t,s,a,o,h){if((s=s??0)===t.getShipsCount())return!0;if((Date.now()-o)/1e3>h)throw new Error("Time limit exceeded");const c=`${function(e){const t=[];for(let r=0;r<e.length;r++)t.push(e[r].map((e=>-1!==e?1:0)));return t}(t.getShipsBoard())} ,${s}`;if(a.has(c))return!1;const d=[];for(let e=0;e<t.getHeight();e++)for(let r=0;r<t.getWidth();r++){let n=!1;l.canPlaceShip(t,s,e,r,n)&&d.push({row:e,col:r,isVertical:n}),n=!0,l.canPlaceShip(t,s,e,r,n)&&d.push({row:e,col:r,isVertical:n})}n(d);for(let n=0;n<d.length;n++){if(e(t,s,d[n].row,d[n].col,d[n].isVertical),i(t,s+1,a,o,h))return!0;r(t,s)}return a.add(c),!1}function s(e){const t=[];for(let r=0;r<e.getHeight();r++)for(let n=0;n<e.getWidth();n++)l.isHit(e,r,n)||t.push({row:r,col:n});return t}function a(e,t,r){const n=[],i=function(e){const t=[];for(let r=0;r<e.getHeight();r++)for(let n=0;n<e.getWidth();n++)l.isHit(e,r,n)&&t.push({row:r,col:n});return t}(e);return i.forEach((i=>{const s=e.getShipIndexFromCoordinate(i.row,i.col);if(-1!==s){const a=e.getShip(s);!a.isSunk()&&a.getHPDamaged()>=t&&a.getHPDamaged()<=r&&n.push({row:i.row,col:i.col,isShipVertical:e.isVerticalShip(s)})}})),n}function o(e,t,r){r.forEach((r=>{l.isOutsideBoard(e,r.row,r.col)||l.isHit(e,r.row,r.col)||t.push(r)}))}function h(e){let t=null;for(let r=0;r<e.getShipsCount();r++){const n=e.getShip(r);0===n.getHPDamaged()&&(t=null===t?n.getLength():Math.min(t,n.getLength()))}return t}return{addShip:function(e,t){if(!l.canAddShip(e,t))throw new Error("Illegal Argument Exception");return e.pushShip(t),e.getShipsCount()-1},placeShip:e,unplaceShip:r,receiveAttack:function(e,r,n,i){if(l.isHit(e,r,n))throw new Error("Illegal Argument Exception");e.hitBoardCell(r,n);const s=e.getShipsBoard();if(-1===s[r][n])return!1;const a=s[r][n],o=e.isVerticalShip(a)?r-e.getShipStartPoint(a).row:n-e.getShipStartPoint(a).col,h=e.getShip(a);return h.hit(o),h.isSunk()&&(e.decreaseShipsAlive(),i&&t().publish("ShipSunk",{playerView:i.playerView,shipLength:h.getLength()})),!0},autoPlaceShips:function(e,t){const r=new Set;e.sortShipsByLengthDesc();try{return i(e,t,r,Date.now(),5),!0}catch(e){return!1}},unplaceAllShips:function(e){for(let t=0;t<e.getShipsCount();t++)r(e,t)},removeAllShips:function(e){for(let t=e.getShipsCount()-1;t>=0;t--)r(e,t),e.removeShip(t)},getNotDamagedCells:s,getDamagedCellsOfAliveDamagedShips:a,getSmartTargets:function(e){const t=[];let r=a(e,2,10);return r.length>0?(r.forEach((r=>{r.isShipVertical?o(e,t,[{row:r.row-1,col:r.col},{row:r.row+1,col:r.col}]):o(e,t,[{row:r.row,col:r.col-1},{row:r.row,col:r.col+1}])})),t):(r=a(e,1,1),r.forEach((r=>{o(e,t,[{row:r.row-1,col:r.col},{row:r.row+1,col:r.col},{row:r.row,col:r.col-1},{row:r.row,col:r.col+1}])})),t)},getMinNotDamagedShipLength:h,getNotDamagedSmartTargets:function(e){const t=[],r=s(e),n=h(e);return r.forEach((r=>{(function(e,t,r){let n=1;for(let i=r+1;i<e.getWidth()&&!l.isHit(e,t,i);i++)++n;for(let i=r-1;i>=0&&!l.isHit(e,t,i);i--)++n;return n}(e,r.row,r.col)>=n||function(e,t,r){let n=1;for(let i=t+1;i<e.getHeight()&&!l.isHit(e,i,r);i++)++n;for(let i=t-1;i>=0&&!l.isHit(e,i,r);i--)++n;return n}(e,r.row,r.col)>=n)&&t.push(r)})),t}}})(),c=h;var d=r(569),u=r.n(d),p=r(460),m=r.n(p);class g{#e;#t;#r;#n;#i;#s;constructor(e,t,r,n){this.#e=t,this.#t=r,this.#n=e.querySelector(".minus"),this.#i=e.querySelector(".plus"),this.#s=e.querySelector(".number"),this.#r=n,this.updateCounter(),this.#n.addEventListener("click",(()=>{--this.#r,this.updateCounter()})),this.#i.addEventListener("click",(()=>{++this.#r,this.updateCounter()}))}updateIfLimitReached(){this.#r===this.#e?this.#n.classList.add("disabled"):this.#n.classList.remove("disabled"),this.#r===this.#t?this.#i.classList.add("disabled"):this.#i.classList.remove("disabled")}updateCounter(){this.#s.textContent=this.#r,this.updateIfLimitReached()}get currentNumber(){return this.#r}updateMax(e){this.#t=e,this.updateIfLimitReached()}}const f=(()=>{function e(e,t){const r=document.createElement("div");if(e<t){r.classList.add("ship");for(let t=0;t<e;t++){const e=document.createElement("div");e.classList.add("ship-block"),r.append(e)}}else{r.classList.add("ship-compressed");const t=document.createElement("span");t.classList.add("parenthesis"),t.textContent="(",r.append(t),r.append(document.createTextNode(`${e}${String.fromCharCode(160)}`));const n=document.createElement("div");n.classList.add("ship-block"),r.append(n);const i=document.createElement("span");i.classList.add("parenthesis"),i.textContent=")",r.append(i)}return r}return{createShipContainerElement:function(t,r){const n=document.createElement("div");n.classList.add("ship-container"),n.append(e(t,4));const i=document.createElement("p");i.innerText="x";const s=document.createElement("span");return s.classList.add("count"),s.innerText=r,i.append(s),n.append(i),n.dataset.length=t,n},createShipElement:e}})(),v=function(e){e.removeAttribute("disabled")},b=function(e){e.setAttribute("disabled","")};class E{#a;#o;#l;#h;#c;#d;#u;#p;#m;#g;#f;#v;#b;#E;constructor(e,t){this.cacheDOM(),b(this.#E),this.#p=e,this.#m=t,this.#g={},this.createShipsPages(),this.initPagination(),this.updateMaxShipsChoosingNumber(),this.bindEvents()}cacheDOM(){this.#a=(new DOMParser).parseFromString(u()(),"text/html").body.firstElementChild,this.#o=this.#a.firstElementChild,this.#l=this.#o.querySelector(".ships"),this.#h=this.#l.querySelector(".pages-container"),this.#c=this.#o.querySelector(".current-page"),this.#d=this.#o.querySelector(".left-arrow"),this.#u=this.#o.querySelector(".right-arrow"),this.#E=this.#a.querySelector(".btn-submit")}bindEvents(){[...this.#o.querySelectorAll(".minus"),...this.#o.querySelectorAll(".plus")].forEach((e=>{e.addEventListener("click",(()=>{this.updateMaxShipsChoosingNumber()}))})),this.bindPaginationEvents()}initPagination(){this.#v=1,this.#b=this.#h.children.length,this.#o.querySelector(".pages-num").textContent=this.#b,this.#f="100%",this.updatePaginationStyle()}bindPaginationEvents(){this.#o.querySelectorAll(".arrow-container").forEach((e=>{e.addEventListener("click",(()=>{e.contains(this.#d)?this.paginateLeft():e.contains(this.#u)&&this.paginateRight()}))}))}paginateLeft(){if(1===this.#v)throw new Error("Illegal Argument Exception");--this.#v,this.updatePaginationStyle()}paginateRight(){if(this.#v===this.#b)throw new Error("Illegal Argument Exception");++this.#v,this.updatePaginationStyle()}updatePaginationStyle(){this.#h.style.right=`calc(${this.#v-1} * ${this.#f})`,1===this.#v?this.#d.closest(".arrow-container").classList.add("disabled"):this.#d.closest(".arrow-container").classList.remove("disabled"),this.#v===this.#b?this.#u.closest(".arrow-container").classList.add("disabled"):this.#u.closest(".arrow-container").classList.remove("disabled"),this.#c.textContent=this.#v}createShipsPages(){for(let e=1;e<=this.getMaxShipLength();e+=4)this.#h.append(this.createPage(e,4))}createPage(e,t){const r=document.createElement("div");r.classList.add("page");for(let n=0;n<t;n++){const t=e+n;if(t>this.getMaxShipLength())break;r.append(this.createShipContainer(t))}return r}createShipContainer(e){const t=(new DOMParser).parseFromString(m()({shipLength:e,shipCount:0}),"text/html").body.firstElementChild,r=f.createShipElement(e,5);return t.querySelector(".ship").replaceWith(r),this.#g[e]=new g(t,0,0,0),t}get modalContainerElement(){return this.#a}get modalElement(){return this.#o}getWidth(){return this.#p}getHeight(){return this.#m}getMaxShipLength(){return Math.max(this.#p,this.#m)}getShipsList(){const e={};return this.#l.querySelectorAll(".ship-container").forEach((t=>{const r=t.dataset.length,n=parseInt(t.querySelector(".number").textContent,10);n>0&&(e[r]=n)})),e}updateMaxShipsChoosingNumber(){const e=this.#p*this.#m;let t=0;Array.from(Object.keys(this.#g)).forEach((e=>{t+=this.#g[e].currentNumber*e})),t>0?v(this.#E):b(this.#E),Array.from(Object.keys(this.#g)).forEach((r=>{this.#g[r].updateMax(this.#g[r].currentNumber+Math.floor((e-t)/r))}))}}var w=r(129),y=r.n(w);class S{#a;#o;constructor(){this.cacheDOM()}cacheDOM(){this.#a=(new DOMParser).parseFromString(y()(),"text/html").body.firstElementChild,this.#o=this.#a.firstElementChild}get modalContainerElement(){return this.#a}get modalElement(){return this.#o}}var P=r(661),x=r.n(P);class C{#a;#o;#w;#y;constructor(){this.cacheDOM(),this.setHumanNumber(),this.bindEvents()}cacheDOM(){this.#a=(new DOMParser).parseFromString(x()(),"text/html").body.firstElementChild,this.#o=this.#a.firstElementChild,this.#w=this.#o.querySelector("#form-game-type")}bindEvents(){this.#w.addEventListener("change",this.setHumanNumber.bind(this))}get modalContainerElement(){return this.#a}get modalElement(){return this.#o}gethumanNumber(){return this.#y}setHumanNumber(){this.#y=parseInt(this.#w["game-type"].value,10)}}var L=r(508),k=r.n(L);class A{#a;#o;#S;#P;#x;#p;#m;constructor(e,t){this.cacheDOM(),this.#p=e,this.#m=t,new g(this.#o.querySelector(".width-counter"),1,10,this.#p),new g(this.#o.querySelector(".height-counter"),1,10,this.#m),this.renderBoard(),this.bindEvents()}cacheDOM(){this.#a=(new DOMParser).parseFromString(k()(),"text/html").body.firstElementChild,this.#o=this.#a.firstElementChild,this.#P=this.#o.querySelector(".width-counter .number"),this.#x=this.#o.querySelector(".height-counter .number"),this.#S=this.#a.querySelector(".board")}bindEvents(){[...this.#o.querySelectorAll(".minus"),...this.#o.querySelectorAll(".plus")].forEach((e=>{e.addEventListener("click",(()=>{this.#p=parseInt(this.#P.textContent,10),this.#m=parseInt(this.#x.textContent,10),this.renderBoard()}))}))}renderBoard(){this.#S.innerHTML="",this.#S.style.setProperty("--board-horizontal-cells",this.#p);for(let e=0;e<this.#p*this.#m;e++){const e=document.createElement("div");e.classList.add("board-block"),this.#S.append(e)}}get modalContainerElement(){return this.#a}get modalElement(){return this.#o}getWidth(){return this.#p}getHeight(){return this.#m}}function O(e){let t=e;const r=[];for(let t=0;t<e;t++)r[t]=0;const n={hit(n){if("number"!=typeof n||!Number.isInteger(n))throw new Error("Illegal Argument Exception");if(n<0||n>=e)throw new Error("Illegal Argument Exception");0===r[n]&&(--t,r[n]=1)},isSunk:()=>0===t,getHPRemained:()=>t,getHitpoints:()=>[...r],getHPDamaged:()=>e-t,getLength:()=>e};return Object.create(n)}function M(e,t){const r=[],n=[],i=[];let s=0,a=e*t;for(let r=0;r<t;r++){n.push([]),i.push([]);for(let t=0;t<e;t++)n[r][t]=0,i[r][t]=-1}const o={getWidth:()=>e,getHeight:()=>t,getShips:()=>[...r],getShip:e=>r[e].ship,getShipFromCoordinate(e,t){return this.getShip(this.getShipIndexFromCoordinate(e,t))},getShipIndexFromCoordinate:(e,t)=>i[e][t],pushShip(e){r.push({ship:new O(e)}),++s},removeShip(e){const t=this.getShip(e);t.isSunk()||--s,this.removeFromHitsBoard(r[e].row,r[e].col,t.getLength(),r[e].isVertical),this.removeFromShipsBoard(r[e].row,r[e].col,t.getLength(),r[e].isVertical),void 0!==r[e].row&&void 0!==r[e].col&&this.increaseBlockNotOccupied(t.getLength()),r.splice(e,1)},removeShipByCoordinates(e,t){for(let n=0;n<r.length;n++)if(r[n].row===e&&r[n].col===t){this.removeShip(n);break}},removeFromHitsBoard(e,t,r,i){if(i)for(let i=e;i<e+r;i++)n[i][t]=0;else for(let i=t;i<t+r;i++)n[e][i]=0},removeFromShipsBoard(e,t,r,n){if(n)for(let n=e;n<e+r;n++)this.setShipBoardCell(n,t,-1);else for(let n=t;n<t+r;n++)this.setShipBoardCell(e,n,-1)},isVerticalShip:e=>r[e].isVertical,setShipOrientation(e,t){r[e].isVertical=t},getShipStartPoint:e=>({row:r[e].row,col:r[e].col}),setShipStartPoint(e,t,n){r[e].row=t,r[e].col=n},getShipsCount:()=>r.length,getShipsBoard(){const e=[];return i.forEach((t=>{e.push([...t])})),e},setShipBoardCell(e,t,r){i[e][t]=r},getHitsBoard(){const e=[];return n.forEach((t=>{e.push([...t])})),e},hitBoardCell(e,t){++n[e][t]},getBlockNotOccupied:()=>a,decreaseBlockNotOccupied(e){a-=e},increaseBlockNotOccupied(e){a+=e},getShipsAlive:()=>s,decreaseShipsAlive(){--s},getShipsList(){const e={};return r.forEach((t=>{const r=e[t.ship.getLength()]??0;e[t.ship.getLength()]=r+1})),e},sortShipsByLengthDesc(){r.sort(((e,t)=>t.ship.getLength()-e.ship.getLength()))}};return Object.create(o)}var I=r(72),B=r.n(I),N=r(257),V=r.n(N);const H={getBlockIndexFromCoordinates:function(e,t,r){return e*r+t},getCoordinatesFromBlockIndex:function(e,t){return[Math.floor(e/t),e%t]},getBlockIndexFromBlockElement:function(e,t){return Array.from(e.children).indexOf(t)},getBlockTopOffset:function(e,t){return Array.from(e.children)[t].offsetTop},getBlockLeftOffset:function(e,t){return Array.from(e.children)[t].offsetLeft},createShipElement:function(e,t){const r=document.createElement("div");r.classList.add("ship");for(let t=0;t<e;t++){const e=document.createElement("div");e.classList.add("ship-block"),r.append(e)}return r.classList.add(t?"vertical":"horizontal"),r},createShipOnBoard:function(e,t,r,n,i,s,a,o){void 0===o&&((o=H.createShipElement(i,s)).dataset.id=a);const l=H.getBlockIndexFromCoordinates(r,n,t);o.style.top=`${H.getBlockTopOffset(e,l)}px`,o.style.left=`${H.getBlockLeftOffset(e,l)}px`,o.style["flex-direction"]=s?"column":"row",e.append(o)}},R=H;class T{#a;#o;#C;#L;#k;#E;#A;#p;#m;#O;#M;#I;constructor(e,t,r,n,i,s,a){this.#p=n,this.#m=i,this.#I=t;let o=s?"Player":a;s&&1===t&&e>1&&(o="First Player"),s&&2===t&&(o="Second Player"),this.#B=0,this.#A=1,this.#M=r,this.#O={},this.cacheDOM(o),this.initPlayerArea(s,a),this.initShipsArea(r),this.initPagination(),this.initBoardArea(),b(this.#E),this.bindEvents()}cacheDOM(e){this.#a=(new DOMParser).parseFromString(B()({playerLabel:e}),"text/html").body.firstElementChild,this.#o=this.#a.firstElementChild,this.#C=document.querySelector(".pause-container"),this.#L=this.#o.querySelector(".btn-auto-place"),this.#k=this.#L.nextElementSibling,this.#E=this.#o.querySelector(".btn-submit"),this.cachePlayerAreaDOM(),this.cacheShipsAreaDOM(),this.cachePaginationDOM(),this.cacheBoardAreaDOM()}bindEvents(){this.bindPlayerAreaEvents(),this.bindShipsAreaEvents(),this.bindPaginationEvents(),this.bindBoardAreaEvents()}#N;#V;initPlayerArea(e,t){if(!e){const e=this.#N.nextElementSibling;this.#V.value=t,this.#N.remove(),e.remove()}}cachePlayerAreaDOM(){this.#N=this.#o.querySelector(".section-player-name"),this.#V=this.#N.querySelector("input[name]")}bindPlayerAreaEvents(){this.#V.addEventListener("keypress",this.onKeyPressPlayerName.bind(this))}onKeyPressPlayerName(e){this.checkIfMaxPlayerNameReached()&&e.preventDefault()}checkIfMaxPlayerNameReached(){return 15===this.#V.value.length}getPlayerName(){const e=this.#V.value;return""===e?`Player${this.#I}`:e}#H;#R;#T;#_;#D;#W;initShipsArea(e){this.#H={},this.#R={},this.createShipsPages(e),this.#D=0,Object.keys(this.#R).forEach((e=>{this.#D+=parseInt(this.#R[e].textContent,10)})),this.setActiveShip(this.#o.querySelector(".ship-compressed")),this.createTempShip(this.#_)}bindShipsAreaEvents(){this.#o.querySelectorAll(".page .ship-block").forEach((e=>{e.addEventListener("click",(()=>{this.setActiveShip(e.closest(".ship-compressed")),null===this.#q&&this.setPlaceOptionActive("h")}))}))}cacheShipsAreaDOM(){this.#h=this.#o.querySelector(".pages-container")}increaseShipCount(e){const t=parseInt(this.#R[e].textContent,10);this.#R[e].textContent=t+1}decreaseShipCount(e){const t=parseInt(this.#R[e].textContent,10);if(0===t)throw new Error;this.#R[e].textContent=t-1}resetAllShipsCount(){Object.keys(this.#R).forEach((e=>{this.#R[e].textContent=0}))}setActiveShip(e){if(e===this.#T)return;this.#T&&this.#T.classList.remove("active"),this.#T=e.closest(".ship-compressed"),this.#T.classList.add("active");const t=this.#T.closest(".ship-container"),r=parseInt(t.dataset.length,10);this.#_=r,0!==parseInt(this.#R[r].textContent,10)&&this.createTempShip(this.#_)}createShipsPages(e){const t=Object.keys(e).sort(((e,t)=>e-t));for(let r=0;r<t.length;r+=4)this.#h.append(this.createPage(r,4,t,e))}createPage(e,t,r,n){const i=document.createElement("div");i.classList.add("page");for(let s=0;s<t&&e+s<r.length;s++){const t=r[e+s],a=n[t],o=this.createShipContainer(t,a);i.append(o),this.#H[t]=o,this.#R[t]=o.querySelector(".number")}return i}createShipContainer(e,t){const r=(new DOMParser).parseFromString(V()({shipLength:e,shipCount:t}),"text/html").body.firstElementChild,n=f.createShipElement(e,1);return r.querySelector(".ship").replaceWith(n),r}createTempShip(e){this.#W=R.createShipElement(e),this.#W.classList.add("temp-ship")}#B;bindPlaceShipsEvents(){this.#S.addEventListener("click",(e=>{e.target.classList.contains("board-block")&&this.onClickPlaceShipOnBoard(e)})),this.#S.querySelectorAll(".board-block").forEach((e=>{e.addEventListener("mouseenter",this.OnMouseEnterBoardBlock.bind(this)),e.addEventListener("mouseleave",this.onMouseLeaveBoardBlock.bind(this))})),this.#L.addEventListener("click",(()=>{this.#C.classList.add("active","front"),this.#C.addEventListener("transitionend",(()=>{this.autoPlaceShips.call(this)?this.#k.classList.add("d-none"):this.#k.classList.remove("d-none"),this.#C.classList.remove("active","front")}),{once:!0})}))}placeShipOnBoard(e,t,r,n){if(!this.canPlaceShip(r,e,t,n))throw new Error;const i=this.#A++;this.#O[i]={row:e,col:t,length:r,isVertical:n},R.createShipOnBoard(this.#S,this.#p,e,t,r,n,i),this.decreaseShipCount(r),this.setEmptyCells(e,t,r,n,!1),++this.#B,this.#B===this.#D&&v(this.#E)}onClickPlaceShipOnBoard(e){if(null===this.#q)return;const t=e.target,r=R.getBlockIndexFromBlockElement(this.#S,t),n=this.#q,[i,s]=R.getCoordinatesFromBlockIndex(r,this.#p);this.canPlaceShip(this.#_,i,s,n)&&this.placeShipOnBoard(i,s,this.#_,n)}OnMouseEnterBoardBlock(e){if(null===this.#q)return;const t=e.target,r=R.getBlockIndexFromBlockElement(this.#S,t),n=this.#q,[i,s]=R.getCoordinatesFromBlockIndex(r,this.#p);this.canPlaceShip(this.#_,i,s,n)&&R.createShipOnBoard(this.#S,this.#p,i,s,this.#_,n,void 0,this.#W)}onMouseLeaveBoardBlock(){null!==this.#q&&null!==this.#W&&this.#W.remove()}canPlaceShip(e,t,r,n){if(0===parseInt(this.#R[e].textContent,10))return!1;if(n&&t+e-1>=this.#m)return!1;if(!n&&r+e-1>=this.#p)return!1;for(let i=0;i<e;i++){if(n&&!0!==this.#j[t+i][r])return!1;if(!n&&!0!==this.#j[t][r+i])return!1}return!0}autoPlaceShips(){this.removeAllShipsFromBoard();const e=M(this.#p,this.#m);Object.keys(this.#M).forEach((t=>{for(let r=0;r<this.#M[t];r++)c.addShip(e,parseInt(t,10))}));const t=c.autoPlaceShips(e);return t&&e.getShips().forEach(((t,r)=>{this.placeShipOnBoard(t.row,t.col,e.getShip(r).getLength(),t.isVertical)})),t}setEmptyCells(e,t,r,n,i){for(let s=0;s<r;s++)n?this.#j[e+s][t]=i:this.#j[e][t+s]=i}bindRemoveShipsEvents(){this.#S.addEventListener("click",(e=>{e.target.classList.contains("ship-block")&&this.onClickRemoveShipFromBoard(e)}))}removeShipFromBoardById(e){this.#S.querySelector(`.ship[data-id='${e}']`).remove(),this.increaseShipCount(this.#O[e].length),this.setEmptyCells(this.#O[e].row,this.#O[e].col,this.#O[e].length,this.#O[e].isVertical,!0),delete this.#O[e],--this.#B,b(this.#E)}removeAllShipsFromBoard(){Object.keys(this.#O).forEach((e=>{this.removeShipFromBoardById(e)}))}onClickRemoveShipFromBoard(e){if(null!==this.#q)return;const t=e.target.closest(".ship");this.removeShipFromBoardById(t.dataset.id)}#S;#j;#F;#G;#z;#$;#q;initBoardArea(){this.#q=!1,this.renderBoard(),this.#j=[];for(let e=0;e<this.#m;e++){this.#j.push([]);for(let t=0;t<this.#p;t++)this.#j[e].push(!0)}}cacheBoardAreaDOM(){this.#S=this.#o.querySelector(".board"),this.#F=this.#o.querySelector(".place-options"),this.#z=this.#F.querySelector(".btn-h"),this.#G=this.#F.querySelector(".btn-v"),this.#$=this.#F.querySelector(".btn-remove")}bindBoardAreaEvents(){this.#z.addEventListener("click",this.onClickSetPlaceOptionActive.bind(this)),this.#G.addEventListener("click",this.onClickSetPlaceOptionActive.bind(this)),this.#$.addEventListener("click",this.onClickSetPlaceOptionActive.bind(this)),this.bindPlaceShipsEvents(),this.bindRemoveShipsEvents()}onClickSetPlaceOptionActive(e){const t=e.target.closest("button");t===this.#z?this.setPlaceOptionActive("h"):t===this.#G?this.setPlaceOptionActive("v"):t===this.#$&&this.setPlaceOptionActive("x")}setPlaceOptionActive(e){let t;this.#z.classList.remove("active"),this.#G.classList.remove("active"),this.#$.classList.remove("active"),"h"===e?(this.#q=!1,t=this.#z):"v"===e?(this.#q=!0,t=this.#G):"x"===e&&(this.#q=null,t=this.#$),t.classList.add("active")}renderBoard(){this.#S.style.setProperty("--board-horizontal-cells",this.#p);for(let e=0;e<this.#p*this.#m;e++){const e=document.createElement("div");e.classList.add("board-block"),this.#S.append(e)}}#h;#c;#d;#u;#v;#b;#f;initPagination(){this.#v=1,this.#b=this.#h.children.length,this.#o.querySelector(".pages-num").textContent=this.#b,this.#f="100%",this.updatePaginationStyle()}cachePaginationDOM(){this.#c=this.modalElement.querySelector(".current-page"),this.#d=this.#o.querySelector(".left-arrow"),this.#u=this.#o.querySelector(".right-arrow")}bindPaginationEvents(){this.#o.querySelectorAll(".arrow-container").forEach((e=>{e.addEventListener("click",(()=>{e.contains(this.#d)?this.paginateLeft():e.contains(this.#u)&&this.paginateRight()}))}))}paginateLeft(){if(1===this.#v)throw new Error("Illegal Argument Exception");--this.#v,this.updatePaginationStyle()}paginateRight(){if(this.#v===this.#b)throw new Error("Illegal Argument Exception");++this.#v,this.updatePaginationStyle()}updatePaginationStyle(){this.#h.style.right=`calc(${this.#v-1} * ${this.#f})`,1===this.#v?this.#d.closest(".arrow-container").classList.add("disabled"):this.#d.closest(".arrow-container").classList.remove("disabled"),this.#v===this.#b?this.#u.closest(".arrow-container").classList.add("disabled"):this.#u.closest(".arrow-container").classList.remove("disabled"),this.#c.textContent=this.#v}get modalContainerElement(){return this.#a}get modalElement(){return this.#o}getShipsList(){return this.#O}}var _=r(82),D=r.n(_),W=r(134),q=r.n(W);class j{#Z;#Y;#S;#K;#U;#J;#O;#Q;constructor(e,t,r,n){this.#Z=e,this.#Y=t,this.#K=r,this.#O=n,this.#U=new Audio("./assets/sounds/splash.wav"),this.#J=new Audio("./assets/sounds/explode-cut.wav"),this.#Q=[];for(let e=0;e<this.#Y;e++){this.#Q.push([]);for(let t=0;t<this.#Z;t++)this.#Q[e].push(null)}this.render(),this.bindEvents()}getBoardElement(){return this.#S}get playerView(){return this.#K}render(){const e=[];for(let t=0;t<this.#Y;t++)for(let t=0;t<this.#Z;t++)e.push(null);this.#S=document.createElement("div"),this.#S.classList.add("board"),this.#S.style.setProperty("--board-horizontal-cells",this.#Z),this.#S.innerHTML=q()({blocks:e}),setTimeout((()=>{this.addShipsToBoard()}),200)}addShipsToBoard(){Object.keys(this.#O).forEach((e=>{const t=this.#O[e].length,r=this.#O[e].row,n=this.#O[e].col,i=this.#O[e].isVertical,s=R.createShipElement(t,i);Array.from(s.children).forEach((e=>{e.classList.add("hidden")})),s.classList.add("hidden"),this.setShipsBlocksBoard(r,n,t,i,s),R.createShipOnBoard(this.#S,this.#Z,r,n,t,i,void 0,s)}))}setShipsBlocksBoard(e,t,r,n,i){for(let s=0;s<r;s++)n?this.#Q[e+s][t]=i.children[s]:this.#Q[e][t+s]=i.children[s]}bindEvents(){this.#S.addEventListener("click",this.receiveAttack.bind(this))}receiveAttack(e){if(e.target.classList.contains("board-block")){const r=Array.from(this.#S.children).indexOf(e.target);t().publish("AttackReceived",{row:Math.floor(r/this.#Z),col:r%this.#Z,boardView:this})}}attackFailed(e,t){this.playSound(this.#U);const r=R.getBlockIndexFromCoordinates(e,t,this.#Z);this.#S.children[r].classList.add("disabled","incorrect")}attackSucceded(e,t,r){this.playSound(this.#J);const n=R.getBlockIndexFromCoordinates(e,t,this.#Z);this.#S.children[n].classList.add("disabled");const i=this.#Q[e][t];i.classList.remove("hidden"),r&&(i.closest(".ship").classList.remove("hidden"),i.closest(".ship").classList.add("destroyed"))}playSound(e){e.pause(),e.currentTime=0,e.play()}disableBoard(){this.#S.classList.add("disabled")}enableBoard(){this.#S.classList.remove("disabled")}}var F=r(344),G=r.n(F);class z{#X;#ee;#te;#re;constructor(e,t,r,n,i){this.#ee=e,this.#re=i,this.render(t),this.cacheDOM(),this.createBoard(r,n,t),this.initShipsRemained(t),this.initScore(),this.bindEvents()}cacheDOM(){this.cacheTurnDOM(),this.cacheShipsRemainedDOM(),this.cacheScoreDOM(),this.cacheDarkeningDOM()}render(){this.#X=document.createElement("div"),this.#X.classList.add("player-area"),this.#X.innerHTML=G()({})}createBoard(e,t,r){this.#te=new j(e,t,this,r),this.#X.querySelector(".board").replaceWith(this.#te.getBoardElement())}bindEvents(){this.bindShipsRemainedEvents()}#ne;#l;initShipsRemained(e){this.addShipsToshipsRemainedElement(e),this.initShipsRemainedPagination()}cacheShipsRemainedDOM(){this.#ne=this.#X.querySelector(".ships-remained-container-responsive"),this.#l=this.#ne.querySelector(".ships"),this.cacheShipsRemainedPaginationDOM()}bindShipsRemainedEvents(){this.#ie.addEventListener("mouseenter",this.mouseEnterInfo.bind(this)),this.#ie.addEventListener("mouseleave",this.mouseLeaveInfo.bind(this)),this.bindShipsRemainedPaginationEvents()}addShipsToshipsRemainedElement(e){const t={};Object.keys(e).forEach((r=>{const n=e[r].length;t[n]||(t[n]=0),++t[n]})),Object.keys(t).sort(((e,t)=>e-t)).forEach((e=>{this.#l.append(f.createShipContainerElement(e,t[e]))}))}sinkShip(e){const t=this.#ne.querySelector(`[data-length="${e}"]`),r=t.querySelector(".count"),n=parseInt(r.textContent,10)-1;0===n?t.remove():r.textContent=n}mouseEnterInfo(){this.#ne.classList.add("help")}mouseLeaveInfo(){this.#ne.classList.remove("help")}#se;#ie;#ae;#d;#oe;#u;initShipsRemainedPagination(){requestAnimationFrame((()=>{this.toggleArrowsState(),this.toggleArrowsState()}))}cacheShipsRemainedPaginationDOM(){this.#ie=this.#ne.querySelector(".info"),this.#d=this.#ne.querySelector(".left-arrow"),this.#ae=this.#d.parentElement,this.#u=this.#ne.querySelector(".right-arrow"),this.#oe=this.#u.parentElement}bindShipsRemainedPaginationEvents(){this.#ae.addEventListener("pointerdown",(()=>{this.scroll(-180)})),this.#oe.addEventListener("pointerdown",(()=>{this.scroll(180)})),this.#ae.addEventListener("pointerup",(()=>{this.stopScrolling()})),this.#oe.addEventListener("pointerup",(()=>{this.stopScrolling()}))}scroll(e){const t=this.getResponsiveScroll()+e,r=e>0?"right":"left";this.#se=!1,this.checkIfScreenSmall()?this.#l.scrollTop+=e:this.#l.scrollLeft+=e,new Promise(((e,n)=>{this.keepScrolling(e,n,t,r)})).then((()=>{this.scroll(e)})).catch((()=>{})).finally((()=>{this.toggleArrowsState()}))}keepScrolling(e,t,r,n){this.getResponsiveScroll()!==r?this.#se||"left"===n&&this.checkIfLeftMostReached()||"right"===n&&this.checkIfRightMostReached()?t():requestAnimationFrame((()=>{this.keepScrolling(e,t,r,n)})):e()}checkIfLeftMostReached(){return 0===this.getResponsiveScroll()}checkIfRightMostReached(){return this.checkIfScreenSmall()?this.#l.scrollHeight-this.#l.clientHeight===this.#l.scrollTop:this.#l.scrollWidth-this.#l.clientWidth===this.#l.scrollLeft}toggleArrowsState(){this.checkIfLeftMostReached()?this.#ae.classList.add("disabled"):this.#ae.classList.remove("disabled"),this.checkIfRightMostReached()?this.#oe.classList.add("disabled"):this.#oe.classList.remove("disabled")}stopScrolling(){this.#se=!0}getResponsiveScroll(){return this.checkIfScreenSmall()?this.#l.scrollTop:this.#l.scrollLeft}checkIfScreenSmall(){return"none"!==getComputedStyle(this.#ae).transform}#le;cacheTurnDOM(){this.#le=this.#X.querySelector(".turn-container")}setTurn(){this.showTurnLabel(),this.darken()}unsetTurn(){this.hideTurnLabel(),this.removeDarkening()}showTurnLabel(){this.#le.classList.add("active")}hideTurnLabel(){this.#le.classList.remove("active")}#he;#V;#ce;#de;initScore(){this.setPlayerName(this.#re)}cacheScoreDOM(){this.#he=this.#X.querySelector(".score-container"),this.#V=this.#he.querySelector(".name"),this.#ce=this.#he.querySelector(".wins"),this.#de=this.#he.querySelector(".losses")}setPlayerName(e){this.#V.textContent=e}setWins(e){this.#ce.textContent=e}increaseWins(){this.#ce.textContent=parseInt(this.#ce.textContent,10)+1}setLosses(e){this.#de.textContent=e}increaseLosses(){this.#de.textContent=parseInt(this.#de.textContent,10)+1}showScore(){this.#he.classList.add("active")}hideScore(){this.#he.classList.remove("active")}get gameView(){return this.#ee}get boardView(){return this.#te}getPlayerAreaElement(){return this.#X}#ue;cacheDarkeningDOM(){this.#ue=this.#X.querySelector(".darkening")}darken(){this.#ue.classList.add("active")}removeDarkening(){this.#ue.classList.remove("active")}showWinLabel(){this.#le.firstElementChild.innerText="You Won",this.showTurnLabel()}showLoseLabel(){this.#le.firstElementChild.innerText="You Lost",this.showTurnLabel()}disableBoard(){this.#te.disableBoard()}enableBoard(){this.#te.enableBoard()}}const $=function(e){return new Promise((t=>{e.classList.remove("active"),e.addEventListener("transitionend",(r=>{"bottom"===r.propertyName&&(e.remove(),t())}))}))},Z=function(e,t){e.append(t),setTimeout((()=>{t.classList.add("active")}),25)},Y=function(){const e=document.createElement("div");return e.classList.add("pause-container"),e};class K{#pe;#me;#ge;#fe;#ve;#be;#C;#Ee;#we;#y;#p;#m;#O;#ye;#Se;constructor(e,t,r){this.#pe=e,this.#Ee=r,this.createRootElement(this.#Ee),this.createPauseContainer(),t.append(this.#me)}createRootElement(){this.#me=document.createElement("div"),this.#me.classList.add("game-container"),this.#me.dataset.gameId=this.#Ee}createPauseContainer(){this.#C=Y(),this.#me.append(this.#C)}get game(){return this.#pe}createGameArena(){this.cacheGameArenaDOM(),this.createPlayersViews(),this.#Pe.append(this.getPlayerView(0).getPlayerAreaElement()),this.#xe.append(this.getPlayerView(1).getPlayerAreaElement()),this.#me.append(this.#ge),this.createStartGameLabel()}cacheGameArenaDOM(){this.#ge=(new DOMParser).parseFromString(D()(),"text/html").body.firstElementChild,this.#fe=this.#ge.querySelector(".rounds-container"),this.#ve=this.#fe.querySelector("p"),this.#be=this.#ve.querySelector(".round-num"),this.cachePlayersAreasDOM()}endGame(e){setTimeout((()=>{for(let t=0;t<this.#we.length;t++)this.#we[t].hideTurnLabel(),this.#we[t].disableBoard(),this.#we[t].removeDarkening(),t===e?(this.#we[t].showWinLabel(),this.#we[t].increaseWins()):(this.#we[t].showLoseLabel(),this.#we[t].increaseLosses());this.createNextGameLabel(),this.#C.classList.add("semi-active")}),300)}#Ce;createNextGameLabel(){this.#Ce=document.createElement("div"),this.#Ce.classList.add("next-game-container");const e=document.createElement("button");e.textContent="Next Game",this.#Ce.append(e),this.#me.append(this.#Ce),this.bindNextGameButtonEvents(e),Z(this.#me,this.#Ce)}bindNextGameButtonEvents(e){e.addEventListener("click",this.NextGameButtonClick.bind(this)),e.addEventListener("mouseenter",this.displayScores.bind(this)),e.addEventListener("mouseleave",this.hideScores.bind(this))}async NextGameButtonClick(){await $(this.#Ce),X.generateNextRound(this.#pe,this)}#Le;createStartGameLabel(){this.#Le=document.createElement("div"),this.#Le.classList.add("start-game-container");const e=document.createElement("button");e.textContent="Start Game",this.#Le.append(e),this.#me.append(this.#Le),this.bindStartGameButtonEvents(e),Z(this.#me,this.#Le),this.displayScores()}bindStartGameButtonEvents(e){e.addEventListener("click",this.startGameButtonClick.bind(this))}async startGameButtonClick(){this.hideScores(),await $(this.#Le),X.startGame(this.#pe,this),this.scrollToEnemyArea(this.#pe.currentEnemyIndex)}#Pe;#xe;cachePlayersAreasDOM(){this.#Pe=this.#ge.querySelector(".first-player-arena"),this.#xe=this.#ge.querySelector(".second-player-arena")}createPlayersViews(){this.#we=[];for(let e=0;e<this.#ye.length;e++){const t=new z(this,this.#ye[e].ships,this.#p,this.#m,this.#ye[e].name);this.#we.push(t)}}addPlayerView(e){this.#we.push(e)}displayScores(){this.#C.classList.add("active"),this.#C.addEventListener("transitionend",(()=>{for(let e=0;e<this.#ye.length;e++)this.#we[e].showScore()}),{once:!0})}hideScores(){this.#C.classList.remove("active");for(let e=0;e<this.#ye.length;e++)this.#we[e].hideScore()}updateScores(e){for(let t=0;t<this.#we.length;t++)this.#we[t].setWins(e[t].wins),this.#we[t].setLosses(e[t].losses)}get playersViews(){return[...this.#we]}getPlayerView(e){return this.#we[e]}scrollToEnemyArea(e){0===e?this.#Pe.scrollIntoView():this.#xe.scrollIntoView()}changeTurn(e,t){this.#be.innerText=e,"0deg"===getComputedStyle(this.#fe).getPropertyValue("--angle").trim()?(this.#fe.style.setProperty("--angle","180deg"),this.#ve.style.setProperty("--angle","180deg")):(this.#fe.style.setProperty("--angle","0deg"),this.#ve.style.setProperty("--angle","0deg")),this.scrollToEnemyArea(t)}async newGame(e=!0,t=[]){this.#ye=[],this.#we=[],this.#Se=0,e?(await this.createRulesModal(),await this.createGameTypeModal()):(this.#ge.remove(),this.#C.classList.remove("semi-active"));const r=[this.createGridSizeModal,this.createShipsChoosingModal];for(let n=1;n<=this.#y;n++)r.push(this.createShipsPlacingModal.bind(this,n,e,t));for(;this.#Se<r.length;)await r[this.#Se++].call(this);return 1===this.#y&&this.#ye.push(X.generateComputerPlayer(this.#p,this.#m,this.#O)),this.createGameArena(),{humanNumber:this.#y,boardWidth:this.#p,boardHeight:this.#m,players:this.#ye}}async createRulesModal(){const e=new S;this.displayModal(e),await this.rulesModalSubmit(e),await this.removeModal(e)}rulesModalSubmit(e){return new Promise((t=>{e.modalElement.querySelector(".btn-start").addEventListener("click",(()=>{t()}))}))}async createGameTypeModal(){const e=new C;this.displayModal(e),await this.gameTypeModalSubmit(e),await this.removeModal(e)}gameTypeModalSubmit(e){return new Promise((t=>{e.modalElement.querySelector(".btn-play").addEventListener("click",(()=>{this.#y=e.gethumanNumber(),t()}))}))}async createGridSizeModal(){const e=new A(this.#p??10,this.#m??10);this.displayModal(e),await this.gridSizeModalSubmit(e),await this.removeModal(e)}gridSizeModalSubmit(e){return new Promise((t=>{e.modalElement.querySelector(".btn-next").addEventListener("click",(()=>{this.#p=e.getWidth(),this.#m=e.getHeight(),t()}))}))}async createShipsChoosingModal(){const e=new E(this.#p,this.#m);this.displayModal(e),await this.shipsChoosingModalSubmit(e),await this.removeModal(e)}shipsChoosingModalSubmit(e){return new Promise((t=>{const r=e.modalElement.querySelector(".btn-back");e.modalElement.querySelector(".btn-submit").addEventListener("click",(()=>{this.#O=e.getShipsList(),t()})),r.addEventListener("click",(()=>{this.#Se-=2,t()}))}))}async createShipsPlacingModal(e,t,r){const n=new T(this.#y,e,this.#O,this.#p,this.#m,t,r[e-1]);this.displayModal(n),await this.shipsPlacingModalSubmit(n,e),await this.removeModal(n)}shipsPlacingModalSubmit(e,t){return new Promise((r=>{const n=e.modalElement.querySelector(".btn-back");e.modalElement.querySelector(".btn-submit").addEventListener("click",(()=>{this.#ye.push({name:e.getPlayerName(),ships:e.getShipsList(),isBot:!1}),r()})),n.addEventListener("click",(()=>{this.#Se-=2,t>1&&this.#ye.pop(),r()}))}))}displayModal(e){if(!e.modalContainerElement)throw new Error("Modal instance does not have modal container element property");if(!e.modalElement)throw new Error("Modal instance does not have modal element property");this.#me.append(e.modalContainerElement),setTimeout((()=>{e.modalContainerElement.classList.add("active"),e.modalElement.classList.add("active")}),0)}removeModal(e){if(!e.modalContainerElement)throw new Error("Modal instance does not have modal container element property");if(!e.modalElement)throw new Error("Modal instance does not have modal element property");return new Promise((t=>{e.modalContainerElement.classList.remove("active"),e.modalElement.classList.remove("active"),e.modalElement.addEventListener("transitionend",(r=>{"bottom"===r.propertyName&&(e.modalContainerElement.remove(),t())}))}))}}class U{#ke;#ye;#Ae;#Oe;#Me;#Ie;#Be;constructor(){this.running=!1,this.#ye=[],this.#Ae=0,this.#Oe=0,this.#Me=-1,this.#Be=[]}set running(e){this.#ke=e}get running(){return this.#ke}addPlayer(e){this.#ye.push(e)}getPlayer(e){return this.#ye[e]}getPlayers(){return[...this.#ye]}getPlayersCount(){return this.#ye.length}increaseCurrentRound(){++this.#Ae}get currentRound(){return this.#Ae}set currentPlayerIndex(e){this.#Me=e}get currentPlayerIndex(){return this.#Me}set currentEnemyIndex(e){this.#Ie=e}get currentEnemyIndex(){return this.#Ie}getCurrentPlayer(){return this.#ye[this.#Me]}getCurrentEnemy(){return this.#ye[this.#Ie]}addWinner(e){this.#Be.push(e)}get winners(){return[...this.#Be]}getLastWinner(){return this.#Be[this.#Be.length-1]}increaseCurrentTurn(){++this.#Oe}resetCurrentTurn(){this.#Oe=0}get currentTurn(){return this.#Oe}}class J{#Ne;#Ve;#He;#Re;#Te;constructor(e,t){this.name=e,this.#Te=t,this.#He=0,this.#Re=0}set name(e){this.#Ne=e}get name(){return this.#Ne}get isBot(){return this.#Te}createBoard(e,t){this.#Ve=M(e,t)}get board(){return this.#Ve}increasePlayerRounds(){++this.#Re}get playedRounds(){return this.#Re}increaseWinRounds(){++this.#He}get winRounds(){return this.#He}}const Q=(()=>{function e(e){!1!==e.running&&(e.running=!1,e.getCurrentPlayer().increaseWinRounds(),e.getPlayers().forEach((e=>{e.increasePlayerRounds()})),e.addWinner(e.currentPlayerIndex),e.resetCurrentTurn())}function r(e,t){e.getCurrentPlayer().isBot&&(t.playersViews.forEach((e=>{e.disableBoard()})),n(e.getCurrentEnemy().board,t.getPlayerView(e.currentEnemyIndex).boardView))}function n(e,r){let n=c.getSmartTargets(e);const i={};if(0===n.length){n=c.getNotDamagedSmartTargets(e);const t=Math.floor(Math.random()*n.length);i.row=n[t].row,i.col=n[t].col}else i.row=n[0].row,i.col=n[0].col;setTimeout((()=>{t().publish("AttackReceived",{row:i.row,col:i.col,boardView:r})}),1e3)}return{generateGame:function(e,t){const r=new U;Q.createGameView(r,e,t).newGame().then((e=>{for(let t=0;t<e.players.length;t++){const n=e.players[t],i=new J(n.name,e.players[t].isBot);i.createBoard(e.boardWidth,e.boardHeight),Object.keys(n.ships).forEach((e=>{const t=n.ships[e],r=c.addShip(i.board,t.length);c.placeShip(i.board,r,t.row,t.col,t.isVertical)})),r.addPlayer(i)}}))},startGame:function(e,r){if(!0!==e.running){if(e.getPlayersCount()<2)throw new Error("Too few players");e.running=!0,e.increaseCurrentRound(),function(e){let t;t=1===e.currentRound?function(e){return Math.floor(Math.random()*e.getPlayersCount())}(e):e.getLastWinner(),e.currentPlayerIndex=t}(e),e.currentEnemyIndex=(e.currentPlayerIndex+1)%e.getPlayersCount(),e.increaseCurrentTurn(),r&&t().publish("SwitchPlayerTurn",{game:e,gameView:r,firstTurn:!0})}},attack:function(n,i,s,a){n.running&&(c.receiveAttack(n.getCurrentEnemy().board,i,s,a)?(a&&t().publish("AttackSucceded",{boardView:a,row:i,col:s,isSunk:n.getCurrentEnemy().board.getShipFromCoordinate(i,s).isSunk()}),l.areAllShipsSunk(n.getCurrentEnemy().board)?(e(n),a&&t().publish("GameEnded",{gameView:a.playerView.gameView,winnerIndex:n.currentPlayerIndex})):a&&r(n,a.playerView.gameView)):(a&&t().publish("AttackFailed",{boardView:a,row:i,col:s}),function(e,r){e.currentPlayerIndex=(e.currentPlayerIndex+1)%e.getPlayersCount(),e.currentEnemyIndex=(e.currentEnemyIndex+1)%e.getPlayersCount(),e.increaseCurrentTurn(),r&&(t().publish("SwitchPlayerTurn",{game:e,gameView:r,firstTurn:!1}),t().publish("TurnIncreased",{newTurn:e.currentTurn,currentEnemyIndex:e.currentEnemyIndex,gameView:r}))}(n,void 0!==a?a.playerView.gameView:void 0)))},endGame:e,createGameView:function(e,t,r){return new K(e,t,r)},generateNextRound:function(e,t){const r=[],n=[];e.getPlayers().forEach((e=>{n.push(e.name)})),t.newGame(!1,n).then((n=>{for(let t=0;t<n.players.length;t++){const i=n.players[t],s=e.getPlayer(t);s.createBoard(n.boardWidth,n.boardHeight),Object.keys(i.ships).forEach((e=>{const t=i.ships[e],r=c.addShip(s.board,t.length);c.placeShip(s.board,r,t.row,t.col,t.isVertical)})),r.push({wins:s.winRounds,losses:s.playedRounds-s.winRounds})}t.updateScores(r)}))},generateComputerPlayer:function(e,t,r){const n={name:"Computer",isBot:!0},i=M(e,t);Object.keys(r).forEach((e=>{const t=parseInt(e,10),n=r[t];for(let e=0;e<n;e++)c.addShip(i,t)})),c.autoPlaceShips(i),n.ships={};const s=i.getShips();return Object.keys(s).forEach((e=>{n.ships[e]={},n.ships[e].length=i.getShip(e).getLength(),n.ships[e].row=s[e].row,n.ships[e].col=s[e].col,n.ships[e].isVertical=s[e].isVertical})),n},startMove:r,computerAttack:n}})(),X=Q,ee=(t().subscribe("AttackReceived",(function(e,t){X.attack(t.boardView.playerView.gameView.game,t.row,t.col,t.boardView)})),t().subscribe("AttackFailed",(function(e,t){t.boardView.attackFailed(t.row,t.col)})),t().subscribe("AttackSucceded",(function(e,t){t.boardView.attackSucceded(t.row,t.col,t.isSunk)})),t().subscribe("SwitchPlayerTurn",(function(e,t){const r=t.gameView.getPlayerView(t.game.currentPlayerIndex);if(r.setTurn(),r.disableBoard(),!t.firstTurn){const e=t.gameView.getPlayerView(t.game.currentEnemyIndex);e.unsetTurn(),e.enableBoard()}X.startMove(t.game,t.gameView)})),t().subscribe("GameEnded",(function(e,t){t.gameView.endGame(t.winnerIndex)})),t().subscribe("TurnIncreased",(function(e,t){t.gameView.changeTurn(t.newTurn,t.currentEnemyIndex)})),t().subscribe("ShipSunk",(function(e,t){t.playerView.sinkShip(t.shipLength)})),document.getElementById("games"));X.generateGame(ee,1)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0FBZ0IsSSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaHRtbC90ZW1wbGF0ZXMvZ2FtZS1hcmVuYS5oYW5kbGViYXJzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaHRtbC90ZW1wbGF0ZXMvZ2FtZWJvYXJkLXRlbXBsYXRlLmhhbmRsZWJhcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9odG1sL3RlbXBsYXRlcy9tb2RhbHMvZ2FtZS10eXBlLXRlbXBsYXRlLmhhbmRsZWJhcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9odG1sL3RlbXBsYXRlcy9tb2RhbHMvZ3JpZC1zaXplLXRlbXBsYXRlLmhhbmRsZWJhcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9odG1sL3RlbXBsYXRlcy9tb2RhbHMvcnVsZXMtdGVtcGxhdGUuaGFuZGxlYmFycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2h0bWwvdGVtcGxhdGVzL21vZGFscy9zaGlwcy1jaG9vc2luZy10ZW1wbGF0ZS5oYW5kbGViYXJzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaHRtbC90ZW1wbGF0ZXMvbW9kYWxzL3NoaXBzLWNvbnRhaW5lci1wbGFjaW5nLW1vZGFsLXRlbXBsYXRlLmhhbmRsZWJhcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9odG1sL3RlbXBsYXRlcy9tb2RhbHMvc2hpcHMtY29udGFpbmVyLXRlbXBsYXRlLmhhbmRsZWJhcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9odG1sL3RlbXBsYXRlcy9tb2RhbHMvc2hpcHMtcGxhY2luZy10ZW1wbGF0ZS5oYW5kbGViYXJzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaHRtbC90ZW1wbGF0ZXMvcGxheWVyLXRlbXBsYXRlLmhhbmRsZWJhcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMucnVudGltZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9iYXNlLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2RlY29yYXRvcnMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvZGVjb3JhdG9ycy9pbmxpbmUuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvZXhjZXB0aW9uLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaGVscGVycy9ibG9jay1oZWxwZXItbWlzc2luZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9oZWxwZXJzL2VhY2guanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaGVscGVycy9oZWxwZXItbWlzc2luZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9oZWxwZXJzL2lmLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2hlbHBlcnMvbG9nLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2hlbHBlcnMvbG9va3VwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2hlbHBlcnMvd2l0aC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9pbnRlcm5hbC9jcmVhdGUtbmV3LWxvb2t1cC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaW50ZXJuYWwvcHJvdG8tYWNjZXNzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2ludGVybmFsL3dyYXBIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvbG9nZ2VyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL25vLWNvbmZsaWN0LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvc2FmZS1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9wdWJzdWItanMvc3JjL3B1YnN1Yi5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9ub2RlIG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9qcy9hcnJheS1oZXBsZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9qcy9HYW1lYm9hcmQvZ2FtZWJvYXJkLWdldHRlci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzL2NoZWNrZXItaGVscGVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvanMvR2FtZWJvYXJkL2dhbWVib2FyZC1jaGVja2VyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvanMvR2FtZWJvYXJkL2dhbWVib2FyZC1jb250cm9sbGVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvanMvVmlld0hlbHBlci9jb3VudGVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvanMvUGxheWVyL3BsYXllci12aWV3LWhlbHBlci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzL1ZpZXdIZWxwZXIvZm9ybS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzL01vZGFscy9zaGlwcy1jaG9vc2luZy1tb2RhbC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzL01vZGFscy9ydWxlcy1tb2RhbC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzL01vZGFscy9nYW1lLXR5cGUtbW9kYWwuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9qcy9Nb2RhbHMvZ3JpZC1zaXplLW1vZGFsLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvanMvU2hpcC9zaGlwLWNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9qcy9HYW1lYm9hcmQvZ2FtZWJvYXJkLW1vZGVsLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvanMvVmlld0hlbHBlci9ib2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzL01vZGFscy9zaGlwcy1wbGFjaW5nLW1vZGFsLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvanMvR2FtZWJvYXJkL2dhbWVib2FyZC12aWV3LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvanMvUGxheWVyL3BsYXllci12aWV3LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvanMvVmlld0hlbHBlci9jb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9qcy9HYW1lL2dhbWUtdmlldy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzL0dhbWUvZ2FtZS1tb2RlbC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzL1BsYXllci9wbGF5ZXItbW9kZWwuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9qcy9HYW1lL2dhbWUtY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzL2luZGV4LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvanMvR2FtZS9nYW1lLWV2ZW50LWhhbmRsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIEhhbmRsZWJhcnMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvcnVudGltZS5qc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwiZ2FtZS1hcmVuYVxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImZpcnN0LXBsYXllci1hcmVuYVxcXCI+PC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcIm1pZGRsZS1iaXNlY3RvclxcXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJyb3VuZHMtY29udGFpbmVyXFxcIj5cXHJcXG4gICAgICAgICAgICA8cD5Sb3VuZCA8c3BhbiBjbGFzcz1cXFwicm91bmQtbnVtXFxcIj4xPC9zcGFuPjwvcD5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwic2Vjb25kLXBsYXllci1hcmVuYVxcXCI+PC9kaXY+XFxyXFxuPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTsiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ydW50aW1lLmpzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCIxXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCIgICAgPGRpdiBjbGFzcz1cXFwiYm9hcmQtYmxvY2tcXFwiPjwvZGl2PlxcclxcblwiO1xufSxcImNvbXBpbGVyXCI6WzgsXCI+PSA0LjMuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBzdGFjazEsIGxvb2t1cFByb3BlcnR5ID0gY29udGFpbmVyLmxvb2t1cFByb3BlcnR5IHx8IGZ1bmN0aW9uKHBhcmVudCwgcHJvcGVydHlOYW1lKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyZW50LCBwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmVudFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9O1xuXG4gIHJldHVybiAoKHN0YWNrMSA9IGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJlYWNoXCIpLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJibG9ja3NcIikgOiBkZXB0aDApLHtcIm5hbWVcIjpcImVhY2hcIixcImhhc2hcIjp7fSxcImZuXCI6Y29udGFpbmVyLnByb2dyYW0oMSwgZGF0YSwgMCksXCJpbnZlcnNlXCI6Y29udGFpbmVyLm5vb3AsXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjEsXCJjb2x1bW5cIjowfSxcImVuZFwiOntcImxpbmVcIjozLFwiY29sdW1uXCI6OX19fSkpICE9IG51bGwgPyBzdGFjazEgOiBcIlwiKTtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pOyIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL3J1bnRpbWUuanNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzgsXCI+PSA0LjMuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcIm1vZGFsLWNvbnRhaW5lclxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImdhbWUtdHlwZS1tb2RhbFxcXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1oZWFkZXJcXFwiPlxcclxcbiAgICAgICAgICAgIDxoMj5HYW1lIFR5cGU8L2gyPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1ib2R5XFxcIj5cXHJcXG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzcz1cXFwic2VjdGlvbi10eXBlLW9wdGlvbnNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8Zm9ybSBpZD1cXFwiZm9ybS1nYW1lLXR5cGVcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cXFwic2luZ2xlLXBsYXllclxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XFxcInJhZGlvXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cXFwic2luZ2xlLXBsYXllclxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cXFwiZ2FtZS10eXBlXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT1cXFwiMVxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+U2luZ2xlIFBsYXllcjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVxcXCJtdWx0aXBsYXllclxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XFxcInJhZGlvXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cXFwibXVsdGlwbGF5ZXJcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XFxcImdhbWUtdHlwZVxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9XFxcIjJcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5NdWx0aXBsYXllcjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XFxyXFxuICAgICAgICAgICAgICAgIDwvZm9ybT5cXHJcXG4gICAgICAgICAgICA8L3NlY3Rpb24+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxociBjbGFzcz1cXFwiaWN5LWhyXFxcIiAvPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibW9kYWwtb3B0aW9uc1xcXCI+XFxyXFxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuLXBsYXlcXFwiPlBsYXk8L2J1dHRvbj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pOyIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL3J1bnRpbWUuanNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzgsXCI+PSA0LjMuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcIm1vZGFsLWNvbnRhaW5lclxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImdyaWQtc2l6ZS1tb2RhbFxcXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1oZWFkZXJcXFwiPlxcclxcbiAgICAgICAgICAgIDxoMj5PcHRpb25zPC9oMj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibW9kYWwtYm9keVxcXCI+XFxyXFxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3M9XFxcInNlY3Rpb24tZ3JpZC1zaXplXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGhlYWRlcj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxoMz5HcmlkIFNpemU8L2gzPlxcclxcbiAgICAgICAgICAgICAgICA8L2hlYWRlcj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcIndpZHRoLWxhYmVsXFxcIj5XaWR0aDwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwid2lkdGgtY291bnRlclxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwibWludXNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdmdcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD1cXFwiMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD1cXFwiMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcImJpIGJpLWRhc2gtbGdcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPVxcXCJNMiA4YS41LjUgMCAwIDEgLjUtLjVoMTFhLjUuNSAwIDAgMSAwIDFoLTExQS41LjUgMCAwIDEgMiA4WlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvcGF0aD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJudW1iZXJcXFwiPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJwbHVzXFxcIj48c3ZnXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9XFxcIjE2XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9XFxcIjE2XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsPVxcXCJjdXJyZW50Q29sb3JcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJiaSBiaS1wbHVzLWxnXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3Qm94PVxcXCIwIDAgMTYgMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZD1cXFwiTTggMmEuNS41IDAgMCAxIC41LjV2NWg1YS41LjUgMCAwIDEgMCAxaC01djVhLjUuNSAwIDAgMS0xIDB2LTVoLTVhLjUuNSAwIDAgMSAwLTFoNXYtNUEuNS41IDAgMCAxIDggMlpcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3BhdGg+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImhlaWdodC1sYWJlbFxcXCI+SGVpZ2h0PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJoZWlnaHQtY291bnRlclxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwibWludXNcXFwiPjxzdmdcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD1cXFwiMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD1cXFwiMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcImJpIGJpLWRhc2gtbGdcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPVxcXCJNMiA4YS41LjUgMCAwIDEgLjUtLjVoMTFhLjUuNSAwIDAgMSAwIDFoLTExQS41LjUgMCAwIDEgMiA4WlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvcGF0aD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz48L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwibnVtYmVyXFxcIj4xPC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInBsdXNcXFwiPjxzdmdcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD1cXFwiMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD1cXFwiMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcImJpIGJpLXBsdXMtbGdcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPVxcXCJNOCAyYS41LjUgMCAwIDEgLjUuNXY1aDVhLjUuNSAwIDAgMSAwIDFoLTV2NWEuNS41IDAgMCAxLTEgMHYtNWgtNWEuNS41IDAgMCAxIDAtMWg1di01QS41LjUgMCAwIDEgOCAyWlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvcGF0aD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz48L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJib2FyZFxcXCI+PC9kaXY+XFxyXFxuICAgICAgICAgICAgPC9zZWN0aW9uPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8aHIgY2xhc3M9XFxcImljeS1oclxcXCIgLz5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcIm1vZGFsLW9wdGlvbnNcXFwiPlxcclxcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0bi1uZXh0XFxcIj5OZXh0PC9idXR0b24+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcIm1vZGFsLXNwYWNlclxcXCI+PC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7IiwidmFyIEhhbmRsZWJhcnMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvcnVudGltZS5qc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwibW9kYWwtY29udGFpbmVyXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwicnVsZXMtbW9kYWxcXFwiPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibW9kYWwtaGVhZGVyXFxcIj5cXHJcXG4gICAgICAgICAgICA8aDI+UnVsZXM8L2gyPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1ib2R5XFxcIj5cXHJcXG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzcz1cXFwic2VjdGlvbi1vdmVydmlld1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxoZWFkZXI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8aDM+T3ZlcnZpZXc8L2gzPlxcclxcbiAgICAgICAgICAgICAgICA8L2hlYWRlcj5cXHJcXG4gICAgICAgICAgICAgICAgPHA+XFxyXFxuICAgICAgICAgICAgICAgICAgICBCYXR0bGVzaGlwIGlzIGEgd2FyLXRoZW1lZCBib2FyZCBnYW1lIGZvciB0d28gcGxheWVycyBpbiB3aGljaCB0aGUgb3Bwb25lbnRzIHRyeVxcclxcbiAgICAgICAgICAgICAgICAgICAgdG8gZ3Vlc3MgdGhlIGxvY2F0aW9uIG9mIHRoZWlyIG9wcG9uZW50J3Mgd2Fyc2hpcHMgYW5kIHNpbmsgdGhlbS5cXHJcXG4gICAgICAgICAgICAgICAgPC9wPlxcclxcbiAgICAgICAgICAgIDwvc2VjdGlvbj5cXHJcXG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzcz1cXFwic2VjdGlvbi1nYW1lcGxheVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxoZWFkZXI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8aDM+R2FtZXBsYXk8L2gzPlxcclxcbiAgICAgICAgICAgICAgICA8L2hlYWRlcj5cXHJcXG4gICAgICAgICAgICAgICAgPG9sPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGxpPkJvdGggcGxheWVycyBhZ3JlZSBvbiB0aGUgc2l6ZSBvZiB0aGVpciBib2FyZHMuPC9saT5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxsaT5Cb3RoIHBsYXllcnMgYWdyZWUgb24gdGhlIG51bWJlciBvZiB0aGUgc2hpcHMgYW5kIHRoZWlyIGxlbmd0aCB3aGljaCB3aWxsIGJlXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VkIG9uIHRoZSBib2FyZHMuPC9saT5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxsaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBFYWNoIHBsYXllciBoaWRlcyB0aGVpciBzaGlwcyBpbiB0aGVpciBib2FyZC4gTm90ZTogTWFrZSBzdXJlIHRoYXQgdGhlIG90aGVyXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyIGNhbiBub3Qgc2VlIHRoZSBzY3JlZW4gd2hpbGUgeW91ciBhcmUgcGxhY2luZyB0aGUgc2hpcHMuXFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGxpPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIFdoZW4gdGhlIGdhbWUgc3RhcnRzIHBsYXllcnMgdGFrZSB0dXJucyBhdHRhY2tpbmcgdGhlaXIgZW5lbXkgYm9hcmQsIHRoaXMgaXNcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBkb25lIGJ5IGNob29zaW5nIGEgY2VsbCBvbiB0aGUgYm9hcmQuXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHVsPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiB0aGVyZSBpcyBhIHBhcnQgb2YgdGhlIHNoaXAgdW5kZXIgdGhlIGF0dGFja2VkIGNlbGwgdGhlbiB0aGVcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dGFjayBzdWNjZWRlZCBhbmQgdGhlIHBsYXllciBjb250aW51ZSB0byBhdHRhY2sgYW5vdGhlciBjZWxsLlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPdGhlcndpc2UgdGhlIGF0dGFjayBmYWlsZWQgYW5kIHRoZSBvdGhlciBwbGF5ZXIgc3RhcnRzIGhpcyB0dXJuLlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGxpPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSB3aW5uZXIgaXMgdGhlIGZpcnN0IHRvIHJldmVhbCBhbGwgdGhlIGhpZGRlbiBzaGlwcyBpbiB0aGVpciBlbmVteSdzXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9hcmQuXFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxcclxcbiAgICAgICAgICAgICAgICA8L29sPlxcclxcbiAgICAgICAgICAgIDwvc2VjdGlvbj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGhyIGNsYXNzPVxcXCJpY3ktaHJcXFwiIC8+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1vcHRpb25zXFxcIj5cXHJcXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4tc3RhcnRcXFwiPlN0YXJ0PC9idXR0b24+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcIm1vZGFsLXNwYWNlclxcXCI+PC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7IiwidmFyIEhhbmRsZWJhcnMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvcnVudGltZS5qc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwibW9kYWwtY29udGFpbmVyXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwic2hpcHMtY2hvb3NpbmctbW9kYWxcXFwiPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibW9kYWwtaGVhZGVyXFxcIj5cXHJcXG4gICAgICAgICAgICA8aDI+T3B0aW9uczwvaDI+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcIm1vZGFsLWJvZHlcXFwiPlxcclxcbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzPVxcXCJzZWN0aW9uLWNob29zZS1zaGlwc1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxoZWFkZXI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8aDM+Q2hvb3NlIFNoaXBzPC9oMz5cXHJcXG4gICAgICAgICAgICAgICAgPC9oZWFkZXI+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInNoaXBzXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInBhZ2VzLWNvbnRhaW5lclxcXCI+PC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwYWdpbmF0aW9uXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImFycm93LWNvbnRhaW5lciBhcnJvdy1jb250YWluZXItYnV0dG9uXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3ZnXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJsZWZ0LWFycm93XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cXFwiYmkgYmktY2FyZXQtbGVmdC1maWxsXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3Qm94PVxcXCIwIDAgMTYgMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZD1cXFwibTMuODYgOC43NTMgNS40ODIgNC43OTZjLjY0Ni41NjYgMS42NTguMTA2IDEuNjU4LS43NTNWMy4yMDRhMSAxIDAgMCAwLTEuNjU5LS43NTNsLTUuNDggNC43OTZhMSAxIDAgMCAwIDAgMS41MDZ6XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9wYXRoPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8cD48c3BhbiBjbGFzcz1cXFwiY3VycmVudC1wYWdlXFxcIj4xPC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIC9cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwicGFnZXMtbnVtXFxcIj48L3NwYW4+PC9wPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYXJyb3ctY29udGFpbmVyIGFycm93LWNvbnRhaW5lci1idXR0b25cXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdmdcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcInJpZ2h0LWFycm93XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cXFwiYmkgYmktY2FyZXQtcmlnaHQtZmlsbFxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgID5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGhcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9XFxcIm0xMi4xNCA4Ljc1My01LjQ4MiA0Ljc5NmMtLjY0Ni41NjYtMS42NTguMTA2LTEuNjU4LS43NTNWMy4yMDRhMSAxIDAgMCAxIDEuNjU5LS43NTNsNS40OCA0Ljc5NmExIDEgMCAwIDEgMCAxLjUwNnpcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3BhdGg+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPC9zZWN0aW9uPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8aHIgY2xhc3M9XFxcImljeS1oclxcXCIgLz5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcIm1vZGFsLW9wdGlvbnNcXFwiPlxcclxcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0bi1iYWNrXFxcIj5CYWNrPC9idXR0b24+XFxyXFxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuLXN1Ym1pdFxcXCI+TmV4dDwvYnV0dG9uPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1zcGFjZXJcXFwiPjwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pOyIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL3J1bnRpbWUuanNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzgsXCI+PSA0LjMuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHZhciBoZWxwZXIsIGFsaWFzMT1kZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLCBhbGlhczI9Y29udGFpbmVyLmhvb2tzLmhlbHBlck1pc3NpbmcsIGFsaWFzMz1cImZ1bmN0aW9uXCIsIGFsaWFzND1jb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbiwgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHkgfHwgZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH07XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwic2hpcC1jb250YWluZXJcXFwiIGRhdGEtbGVuZ3RoPVxcXCJcIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJzaGlwTGVuZ3RoXCIpIHx8IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInNoaXBMZW5ndGhcIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInNoaXBMZW5ndGhcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MSxcImNvbHVtblwiOjQxfSxcImVuZFwiOntcImxpbmVcIjoxLFwiY29sdW1uXCI6NTV9fX0pIDogaGVscGVyKSkpXG4gICAgKyBcIlxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcInNoaXAgYWN0aXZlXFxcIj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInNoaXAtYmxvY2tcXFwiPjwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY291bnRcXFwiPlxcclxcbiAgICAgICAgeFxcclxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcIm51bWJlclxcXCI+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwic2hpcENvdW50XCIpIHx8IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInNoaXBDb3VudFwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwic2hpcENvdW50XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjcsXCJjb2x1bW5cIjoyOX0sXCJlbmRcIjp7XCJsaW5lXCI6NyxcImNvbHVtblwiOjQyfX19KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L3NwYW4+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7IiwidmFyIEhhbmRsZWJhcnMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvcnVudGltZS5qc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGFsaWFzMj1jb250YWluZXIuaG9va3MuaGVscGVyTWlzc2luZywgYWxpYXMzPVwiZnVuY3Rpb25cIiwgYWxpYXM0PWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBsb29rdXBQcm9wZXJ0eSA9IGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eSB8fCBmdW5jdGlvbihwYXJlbnQsIHByb3BlcnR5TmFtZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmVudCwgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBwYXJlbnRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfTtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJzaGlwLWNvbnRhaW5lclxcXCIgZGF0YS1sZW5ndGg9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcInNoaXBMZW5ndGhcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwic2hpcExlbmd0aFwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwic2hpcExlbmd0aFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoxLFwiY29sdW1uXCI6NDF9LFwiZW5kXCI6e1wibGluZVwiOjEsXCJjb2x1bW5cIjo1NX19fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY291bnRlclxcXCI+XFxyXFxuICAgICAgICA8c3BhbiBjbGFzcz1cXFwibWludXNcXFwiPlxcclxcbiAgICAgICAgICAgIDxzdmdcXHJcXG4gICAgICAgICAgICAgICAgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIlxcclxcbiAgICAgICAgICAgICAgICB3aWR0aD1cXFwiMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgIGhlaWdodD1cXFwiMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCJcXHJcXG4gICAgICAgICAgICAgICAgY2xhc3M9XFxcImJpIGJpLWRhc2gtbGdcXFwiXFxyXFxuICAgICAgICAgICAgICAgIHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCJcXHJcXG4gICAgICAgICAgICA+XFxyXFxuICAgICAgICAgICAgICAgIDxwYXRoXFxyXFxuICAgICAgICAgICAgICAgICAgICBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICBkPVxcXCJNMiA4YS41LjUgMCAwIDEgLjUtLjVoMTFhLjUuNSAwIDAgMSAwIDFoLTExQS41LjUgMCAwIDEgMiA4WlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgPjwvcGF0aD5cXHJcXG4gICAgICAgICAgICA8L3N2Zz5cXHJcXG4gICAgICAgIDwvc3Bhbj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInNoaXBcXFwiPlxcclxcbiAgICAgICAgICAgIFxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8c3BhbiBjbGFzcz1cXFwicGx1c1xcXCI+PHN2Z1xcclxcbiAgICAgICAgICAgICAgICB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiXFxyXFxuICAgICAgICAgICAgICAgIHdpZHRoPVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgaGVpZ2h0PVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIlxcclxcbiAgICAgICAgICAgICAgICBjbGFzcz1cXFwiYmkgYmktcGx1cy1sZ1xcXCJcXHJcXG4gICAgICAgICAgICAgICAgdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIlxcclxcbiAgICAgICAgICAgID5cXHJcXG4gICAgICAgICAgICAgICAgPHBhdGhcXHJcXG4gICAgICAgICAgICAgICAgICAgIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgIGQ9XFxcIk04IDJhLjUuNSAwIDAgMSAuNS41djVoNWEuNS41IDAgMCAxIDAgMWgtNXY1YS41LjUgMCAwIDEtMSAwdi01aC01YS41LjUgMCAwIDEgMC0xaDV2LTVBLjUuNSAwIDAgMSA4IDJaXFxcIlxcclxcbiAgICAgICAgICAgICAgICA+PC9wYXRoPlxcclxcbiAgICAgICAgICAgIDwvc3ZnPjwvc3Bhbj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNvdW50XFxcIj5cXHJcXG4gICAgICAgIHhcXHJcXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJudW1iZXJcXFwiPlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcInNoaXBDb3VudFwiKSB8fCAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJzaGlwQ291bnRcIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogYWxpYXMyKSwodHlwZW9mIGhlbHBlciA9PT0gYWxpYXMzID8gaGVscGVyLmNhbGwoYWxpYXMxLHtcIm5hbWVcIjpcInNoaXBDb3VudFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjozNyxcImNvbHVtblwiOjI5fSxcImVuZFwiOntcImxpbmVcIjozNyxcImNvbHVtblwiOjQyfX19KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L3NwYW4+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7IiwidmFyIEhhbmRsZWJhcnMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvcnVudGltZS5qc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlciwgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHkgfHwgZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH07XG5cbiAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwibW9kYWwtY29udGFpbmVyXFxcIj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInNoaXBzLXBsYWNpbmctbW9kYWxcXFwiPlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIm1vZGFsLWhlYWRlclxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxoMj5cIlxuICAgICsgY29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24oKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcInBsYXllckxhYmVsXCIpIHx8IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInBsYXllckxhYmVsXCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGNvbnRhaW5lci5ob29rcy5oZWxwZXJNaXNzaW5nKSwodHlwZW9mIGhlbHBlciA9PT0gXCJmdW5jdGlvblwiID8gaGVscGVyLmNhbGwoZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSx7XCJuYW1lXCI6XCJwbGF5ZXJMYWJlbFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjo0LFwiY29sdW1uXCI6MjB9LFwiZW5kXCI6e1wibGluZVwiOjQsXCJjb2x1bW5cIjozNX19fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiPC9oMj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1ib2R5XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3M9XFxcInNlY3Rpb24tcGxheWVyLW5hbWVcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGhlYWRlcj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDM+UGxheWVyIE5hbWU8L2gzPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9oZWFkZXI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz1cXFwiZm9ybS1wbGF5ZXItbmFtZVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmxvYXRpbmctbGFiZWwtaW5wdXRcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XFxcInRleHRcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVxcXCJuYW1lXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XFxcIm5hbWVcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cXFwiIFxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZT1cXFwib2ZmXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVxcXCJuYW1lXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZm9ybT5cXHJcXG4gICAgICAgICAgICAgICAgPC9zZWN0aW9uPlxcclxcbiAgICAgICAgICAgICAgICA8aHIgY2xhc3M9XFxcImljeS1oclxcXCIgLz5cXHJcXG4gICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3M9XFxcInBsYWNlLXNoaXBzXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxoZWFkZXI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGgzPlBsYWNlIFNoaXBzPC9oMz5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvaGVhZGVyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2hpcHNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInBhZ2VzLWNvbnRhaW5lclxcXCI+XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicGFnaW5hdGlvblxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImFycm93LWNvbnRhaW5lciBhcnJvdy1jb250YWluZXItYnV0dG9uXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmdcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cXFwibGVmdC1hcnJvd1xcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9XFxcIjE2XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD1cXFwiMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJiaSBiaS1jYXJldC1sZWZ0LWZpbGxcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9XFxcIm0zLjg2IDguNzUzIDUuNDgyIDQuNzk2Yy42NDYuNTY2IDEuNjU4LjEwNiAxLjY1OC0uNzUzVjMuMjA0YTEgMSAwIDAgMC0xLjY1OS0uNzUzbC01LjQ4IDQuNzk2YTEgMSAwIDAgMCAwIDEuNTA2elxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9wYXRoPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD48c3BhbiBjbGFzcz1cXFwiY3VycmVudC1wYWdlXFxcIj4xPC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInBhZ2VzLW51bVxcXCI+PC9zcGFuPjwvcD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYXJyb3ctY29udGFpbmVyIGFycm93LWNvbnRhaW5lci1idXR0b25cXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2Z1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJyaWdodC1hcnJvd1xcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9XFxcIjE2XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD1cXFwiMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJiaSBiaS1jYXJldC1yaWdodC1maWxsXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPVxcXCJtMTIuMTQgOC43NTMtNS40ODIgNC43OTZjLS42NDYuNTY2LTEuNjU4LjEwNi0xLjY1OC0uNzUzVjMuMjA0YTEgMSAwIDAgMSAxLjY1OS0uNzUzbDUuNDggNC43OTZhMSAxIDAgMCAxIDAgMS41MDZ6XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3BhdGg+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImJvYXJkLWNvbnRhaW5lclxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYm9hcmRcXFwiPjwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInBsYWNlLW9wdGlvbnNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4taCBhY3RpdmVcXFwiPkg8L2J1dHRvbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuLXZcXFwiPlY8L2J1dHRvbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuLXJlbW92ZVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPVxcXCIyMFxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9XFxcIjIwXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XFxcIndoaXRlXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJiaSBiaS10cmFzaC1maWxsXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPVxcXCJNMi41IDFhMSAxIDAgMCAwLTEgMXYxYTEgMSAwIDAgMCAxIDFIM3Y5YTIgMiAwIDAgMCAyIDJoNmEyIDIgMCAwIDAgMi0yVjRoLjVhMSAxIDAgMCAwIDEtMVYyYTEgMSAwIDAgMC0xLTFIMTBhMSAxIDAgMCAwLTEtMUg3YTEgMSAwIDAgMC0xIDFIMi41em0zIDRhLjUuNSAwIDAgMSAuNS41djdhLjUuNSAwIDAgMS0xIDB2LTdhLjUuNSAwIDAgMSAuNS0uNXpNOCA1YS41LjUgMCAwIDEgLjUuNXY3YS41LjUgMCAwIDEtMSAwdi03QS41LjUgMCAwIDEgOCA1em0zIC41djdhLjUuNSAwIDAgMS0xIDB2LTdhLjUuNSAwIDAgMSAxIDB6XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3BhdGg+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImF1dG8tcGxhY2UtY29udGFpbmVyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4tYXV0by1wbGFjZVxcXCI+UmFuZG9tIFBsYWNpbmc8L2J1dHRvbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFwidGV4dC1lcnJvciBkLW5vbmVcXFwiPipDb3VsZG4ndCBwbGFjZSBzaGlwczwvcD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgPGhyIGNsYXNzPVxcXCJpY3ktaHJcXFwiIC8+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwibW9kYWwtb3B0aW9uc1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0bi1iYWNrXFxcIj5CYWNrPC9idXR0b24+XFxyXFxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0bi1zdWJtaXRcXFwiPk5leHQ8L2J1dHRvbj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1zcGFjZXJcXFwiPjwvZGl2PlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pOyIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL3J1bnRpbWUuanNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcImNvbXBpbGVyXCI6WzgsXCI+PSA0LjMuMFwiXSxcIm1haW5cIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcInR1cm4tcm93XFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwidHVybi1jb250YWluZXJcXFwiPlxcclxcbiAgICAgICAgPHA+WW91ciBUdXJuPC9wPlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L2Rpdj5cXHJcXG5cXHJcXG48ZGl2IGNsYXNzPVxcXCJib2FyZFxcXCI+XFxyXFxuXFxyXFxuPC9kaXY+XFxyXFxuXFxyXFxuPGRpdiBjbGFzcz1cXFwic2hpcHMtcmVtYWluZWQtY29udGFpbmVyLXJlc3BvbnNpdmVcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzaGlwc1xcXCI+XFxyXFxuXFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJwYWdpbmF0aW9uXFxcIj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcImFycm93LWNvbnRhaW5lclxcXCI+XFxyXFxuICAgICAgICAgICAgPHN2Z1xcclxcbiAgICAgICAgICAgICAgICBjbGFzcz1cXFwibGVmdC1hcnJvd1xcXCJcXHJcXG4gICAgICAgICAgICAgICAgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIlxcclxcbiAgICAgICAgICAgICAgICB3aWR0aD1cXFwiMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgIGhlaWdodD1cXFwiMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCJcXHJcXG4gICAgICAgICAgICAgICAgY2xhc3M9XFxcImJpIGJpLWNhcmV0LWxlZnQtZmlsbFxcXCJcXHJcXG4gICAgICAgICAgICAgICAgdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIlxcclxcbiAgICAgICAgICAgID5cXHJcXG4gICAgICAgICAgICAgICAgPHBhdGhcXHJcXG4gICAgICAgICAgICAgICAgICAgIGQ9XFxcIm0zLjg2IDguNzUzIDUuNDgyIDQuNzk2Yy42NDYuNTY2IDEuNjU4LjEwNiAxLjY1OC0uNzUzVjMuMjA0YTEgMSAwIDAgMC0xLjY1OS0uNzUzbC01LjQ4IDQuNzk2YTEgMSAwIDAgMCAwIDEuNTA2elxcXCJcXHJcXG4gICAgICAgICAgICAgICAgPjwvcGF0aD5cXHJcXG4gICAgICAgICAgICA8L3N2Zz5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiYXJyb3ctY29udGFpbmVyXFxcIj5cXHJcXG4gICAgICAgICAgICA8c3ZnXFxyXFxuICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJyaWdodC1hcnJvd1xcXCJcXHJcXG4gICAgICAgICAgICAgICAgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIlxcclxcbiAgICAgICAgICAgICAgICB3aWR0aD1cXFwiMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgIGhlaWdodD1cXFwiMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCJcXHJcXG4gICAgICAgICAgICAgICAgY2xhc3M9XFxcImJpIGJpLWNhcmV0LXJpZ2h0LWZpbGxcXFwiXFxyXFxuICAgICAgICAgICAgICAgIHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCJcXHJcXG4gICAgICAgICAgICA+XFxyXFxuICAgICAgICAgICAgICAgIDxwYXRoXFxyXFxuICAgICAgICAgICAgICAgICAgICBkPVxcXCJtMTIuMTQgOC43NTMtNS40ODIgNC43OTZjLS42NDYuNTY2LTEuNjU4LjEwNi0xLjY1OC0uNzUzVjMuMjA0YTEgMSAwIDAgMSAxLjY1OS0uNzUzbDUuNDggNC43OTZhMSAxIDAgMCAxIDAgMS41MDZ6XFxcIlxcclxcbiAgICAgICAgICAgICAgICA+PC9wYXRoPlxcclxcbiAgICAgICAgICAgIDwvc3ZnPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJpbmZvXFxcIj5cXHJcXG4gICAgICAgIDxpbWcgc3JjPVxcXCIuL2Fzc2V0cy9pbWcvaW5mby1jaXJjbGUtZmlsbC5zdmdcXFwiIGFsdD1cXFwiXFxcIiAvPlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L2Rpdj5cXHJcXG5cXHJcXG48ZGl2IGNsYXNzPVxcXCJzY29yZS1jb250YWluZXJcXFwiPlxcclxcbiAgICA8cCBjbGFzcz1cXFwibmFtZVxcXCI+PC9wPlxcclxcbiAgICA8cD5XaW5zOiA8c3BhbiBjbGFzcz1cXFwid2luc1xcXCI+MDwvc3Bhbj48L3A+XFxyXFxuICAgIDxwPkxvc3NlczogPHNwYW4gY2xhc3M9XFxcImxvc3Nlc1xcXCI+MDwvc3Bhbj48L3A+XFxyXFxuPC9kaXY+XFxyXFxuXFxyXFxuPGRpdiBjbGFzcz1cXFwiZGFya2VuaW5nXFxcIj48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09ialsnZGVmYXVsdCddID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxudmFyIF9oYW5kbGViYXJzQmFzZSA9IHJlcXVpcmUoJy4vaGFuZGxlYmFycy9iYXNlJyk7XG5cbnZhciBiYXNlID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2hhbmRsZWJhcnNCYXNlKTtcblxuLy8gRWFjaCBvZiB0aGVzZSBhdWdtZW50IHRoZSBIYW5kbGViYXJzIG9iamVjdC4gTm8gbmVlZCB0byBzZXR1cCBoZXJlLlxuLy8gKFRoaXMgaXMgZG9uZSB0byBlYXNpbHkgc2hhcmUgY29kZSBiZXR3ZWVuIGNvbW1vbmpzIGFuZCBicm93c2UgZW52cylcblxudmFyIF9oYW5kbGViYXJzU2FmZVN0cmluZyA9IHJlcXVpcmUoJy4vaGFuZGxlYmFycy9zYWZlLXN0cmluZycpO1xuXG52YXIgX2hhbmRsZWJhcnNTYWZlU3RyaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhbmRsZWJhcnNTYWZlU3RyaW5nKTtcblxudmFyIF9oYW5kbGViYXJzRXhjZXB0aW9uID0gcmVxdWlyZSgnLi9oYW5kbGViYXJzL2V4Y2VwdGlvbicpO1xuXG52YXIgX2hhbmRsZWJhcnNFeGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc0V4Y2VwdGlvbik7XG5cbnZhciBfaGFuZGxlYmFyc1V0aWxzID0gcmVxdWlyZSgnLi9oYW5kbGViYXJzL3V0aWxzJyk7XG5cbnZhciBVdGlscyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9oYW5kbGViYXJzVXRpbHMpO1xuXG52YXIgX2hhbmRsZWJhcnNSdW50aW1lID0gcmVxdWlyZSgnLi9oYW5kbGViYXJzL3J1bnRpbWUnKTtcblxudmFyIHJ1bnRpbWUgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfaGFuZGxlYmFyc1J1bnRpbWUpO1xuXG52YXIgX2hhbmRsZWJhcnNOb0NvbmZsaWN0ID0gcmVxdWlyZSgnLi9oYW5kbGViYXJzL25vLWNvbmZsaWN0Jyk7XG5cbnZhciBfaGFuZGxlYmFyc05vQ29uZmxpY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc05vQ29uZmxpY3QpO1xuXG4vLyBGb3IgY29tcGF0aWJpbGl0eSBhbmQgdXNhZ2Ugb3V0c2lkZSBvZiBtb2R1bGUgc3lzdGVtcywgbWFrZSB0aGUgSGFuZGxlYmFycyBvYmplY3QgYSBuYW1lc3BhY2VcbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgdmFyIGhiID0gbmV3IGJhc2UuSGFuZGxlYmFyc0Vudmlyb25tZW50KCk7XG5cbiAgVXRpbHMuZXh0ZW5kKGhiLCBiYXNlKTtcbiAgaGIuU2FmZVN0cmluZyA9IF9oYW5kbGViYXJzU2FmZVN0cmluZzJbJ2RlZmF1bHQnXTtcbiAgaGIuRXhjZXB0aW9uID0gX2hhbmRsZWJhcnNFeGNlcHRpb24yWydkZWZhdWx0J107XG4gIGhiLlV0aWxzID0gVXRpbHM7XG4gIGhiLmVzY2FwZUV4cHJlc3Npb24gPSBVdGlscy5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIGhiLlZNID0gcnVudGltZTtcbiAgaGIudGVtcGxhdGUgPSBmdW5jdGlvbiAoc3BlYykge1xuICAgIHJldHVybiBydW50aW1lLnRlbXBsYXRlKHNwZWMsIGhiKTtcbiAgfTtcblxuICByZXR1cm4gaGI7XG59XG5cbnZhciBpbnN0ID0gY3JlYXRlKCk7XG5pbnN0LmNyZWF0ZSA9IGNyZWF0ZTtcblxuX2hhbmRsZWJhcnNOb0NvbmZsaWN0MlsnZGVmYXVsdCddKGluc3QpO1xuXG5pbnN0WydkZWZhdWx0J10gPSBpbnN0O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBpbnN0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TG5KMWJuUnBiV1V1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN09FSkJRWE5DTEcxQ1FVRnRRanM3U1VGQk4wSXNTVUZCU1RzN096czdiME5CU1U4c01FSkJRVEJDT3pzN08yMURRVU16UWl4M1FrRkJkMEk3T3pzN0swSkJRM1pDTEc5Q1FVRnZRanM3U1VGQkwwSXNTMEZCU3pzN2FVTkJRMUVzYzBKQlFYTkNPenRKUVVGdVF5eFBRVUZQT3p0dlEwRkZTU3d3UWtGQk1FSTdPenM3TzBGQlIycEVMRk5CUVZNc1RVRkJUU3hIUVVGSE8wRkJRMmhDTEUxQlFVa3NSVUZCUlN4SFFVRkhMRWxCUVVrc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RlFVRkZMRU5CUVVNN08wRkJSVEZETEU5QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEzWkNMRWxCUVVVc1EwRkJReXhWUVVGVkxHOURRVUZoTEVOQlFVTTdRVUZETTBJc1NVRkJSU3hEUVVGRExGTkJRVk1zYlVOQlFWa3NRMEZCUXp0QlFVTjZRaXhKUVVGRkxFTkJRVU1zUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXp0QlFVTnFRaXhKUVVGRkxFTkJRVU1zWjBKQlFXZENMRWRCUVVjc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkRPenRCUVVVM1F5eEpRVUZGTEVOQlFVTXNSVUZCUlN4SFFVRkhMRTlCUVU4c1EwRkJRenRCUVVOb1FpeEpRVUZGTEVOQlFVTXNVVUZCVVN4SFFVRkhMRlZCUVZNc1NVRkJTU3hGUVVGRk8wRkJRek5DTEZkQlFVOHNUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdSMEZEYmtNc1EwRkJRenM3UVVGRlJpeFRRVUZQTEVWQlFVVXNRMEZCUXp0RFFVTllPenRCUVVWRUxFbEJRVWtzU1VGQlNTeEhRVUZITEUxQlFVMHNSVUZCUlN4RFFVRkRPMEZCUTNCQ0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRPenRCUVVWeVFpeHJRMEZCVnl4SlFVRkpMRU5CUVVNc1EwRkJRenM3UVVGRmFrSXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF6czdjVUpCUlZJc1NVRkJTU0lzSW1acGJHVWlPaUpvWVc1a2JHVmlZWEp6TG5KMWJuUnBiV1V1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ0tpQmhjeUJpWVhObElHWnliMjBnSnk0dmFHRnVaR3hsWW1GeWN5OWlZWE5sSnp0Y2JseHVMeThnUldGamFDQnZaaUIwYUdWelpTQmhkV2R0Wlc1MElIUm9aU0JJWVc1a2JHVmlZWEp6SUc5aWFtVmpkQzRnVG04Z2JtVmxaQ0IwYnlCelpYUjFjQ0JvWlhKbExseHVMeThnS0ZSb2FYTWdhWE1nWkc5dVpTQjBieUJsWVhOcGJIa2djMmhoY21VZ1kyOWtaU0JpWlhSM1pXVnVJR052YlcxdmJtcHpJR0Z1WkNCaWNtOTNjMlVnWlc1MmN5bGNibWx0Y0c5eWRDQlRZV1psVTNSeWFXNW5JR1p5YjIwZ0p5NHZhR0Z1Wkd4bFltRnljeTl6WVdabExYTjBjbWx1WnljN1hHNXBiWEJ2Y25RZ1JYaGpaWEIwYVc5dUlHWnliMjBnSnk0dmFHRnVaR3hsWW1GeWN5OWxlR05sY0hScGIyNG5PMXh1YVcxd2IzSjBJQ29nWVhNZ1ZYUnBiSE1nWm5KdmJTQW5MaTlvWVc1a2JHVmlZWEp6TDNWMGFXeHpKenRjYm1sdGNHOXlkQ0FxSUdGeklISjFiblJwYldVZ1puSnZiU0FuTGk5b1lXNWtiR1ZpWVhKekwzSjFiblJwYldVbk8xeHVYRzVwYlhCdmNuUWdibTlEYjI1bWJHbGpkQ0JtY205dElDY3VMMmhoYm1Sc1pXSmhjbk12Ym04dFkyOXVabXhwWTNRbk8xeHVYRzR2THlCR2IzSWdZMjl0Y0dGMGFXSnBiR2wwZVNCaGJtUWdkWE5oWjJVZ2IzVjBjMmxrWlNCdlppQnRiMlIxYkdVZ2MzbHpkR1Z0Y3l3Z2JXRnJaU0IwYUdVZ1NHRnVaR3hsWW1GeWN5QnZZbXBsWTNRZ1lTQnVZVzFsYzNCaFkyVmNibVoxYm1OMGFXOXVJR055WldGMFpTZ3BJSHRjYmlBZ2JHVjBJR2hpSUQwZ2JtVjNJR0poYzJVdVNHRnVaR3hsWW1GeWMwVnVkbWx5YjI1dFpXNTBLQ2s3WEc1Y2JpQWdWWFJwYkhNdVpYaDBaVzVrS0doaUxDQmlZWE5sS1R0Y2JpQWdhR0l1VTJGbVpWTjBjbWx1WnlBOUlGTmhabVZUZEhKcGJtYzdYRzRnSUdoaUxrVjRZMlZ3ZEdsdmJpQTlJRVY0WTJWd2RHbHZianRjYmlBZ2FHSXVWWFJwYkhNZ1BTQlZkR2xzY3p0Y2JpQWdhR0l1WlhOallYQmxSWGh3Y21WemMybHZiaUE5SUZWMGFXeHpMbVZ6WTJGd1pVVjRjSEpsYzNOcGIyNDdYRzVjYmlBZ2FHSXVWazBnUFNCeWRXNTBhVzFsTzF4dUlDQm9ZaTUwWlcxd2JHRjBaU0E5SUdaMWJtTjBhVzl1S0hOd1pXTXBJSHRjYmlBZ0lDQnlaWFIxY200Z2NuVnVkR2x0WlM1MFpXMXdiR0YwWlNoemNHVmpMQ0JvWWlrN1hHNGdJSDA3WEc1Y2JpQWdjbVYwZFhKdUlHaGlPMXh1ZlZ4dVhHNXNaWFFnYVc1emRDQTlJR055WldGMFpTZ3BPMXh1YVc1emRDNWpjbVZoZEdVZ1BTQmpjbVZoZEdVN1hHNWNibTV2UTI5dVpteHBZM1FvYVc1emRDazdYRzVjYm1sdWMzUmJKMlJsWm1GMWJIUW5YU0E5SUdsdWMzUTdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR2x1YzNRN1hHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLkhhbmRsZWJhcnNFbnZpcm9ubWVudCA9IEhhbmRsZWJhcnNFbnZpcm9ubWVudDtcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIF9leGNlcHRpb24gPSByZXF1aXJlKCcuL2V4Y2VwdGlvbicpO1xuXG52YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMnKTtcblxudmFyIF9kZWNvcmF0b3JzID0gcmVxdWlyZSgnLi9kZWNvcmF0b3JzJyk7XG5cbnZhciBfbG9nZ2VyID0gcmVxdWlyZSgnLi9sb2dnZXInKTtcblxudmFyIF9sb2dnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9nZ2VyKTtcblxudmFyIF9pbnRlcm5hbFByb3RvQWNjZXNzID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9wcm90by1hY2Nlc3MnKTtcblxudmFyIFZFUlNJT04gPSAnNC43LjcnO1xuZXhwb3J0cy5WRVJTSU9OID0gVkVSU0lPTjtcbnZhciBDT01QSUxFUl9SRVZJU0lPTiA9IDg7XG5leHBvcnRzLkNPTVBJTEVSX1JFVklTSU9OID0gQ09NUElMRVJfUkVWSVNJT047XG52YXIgTEFTVF9DT01QQVRJQkxFX0NPTVBJTEVSX1JFVklTSU9OID0gNztcblxuZXhwb3J0cy5MQVNUX0NPTVBBVElCTEVfQ09NUElMRVJfUkVWSVNJT04gPSBMQVNUX0NPTVBBVElCTEVfQ09NUElMRVJfUkVWSVNJT047XG52YXIgUkVWSVNJT05fQ0hBTkdFUyA9IHtcbiAgMTogJzw9IDEuMC5yYy4yJywgLy8gMS4wLnJjLjIgaXMgYWN0dWFsbHkgcmV2MiBidXQgZG9lc24ndCByZXBvcnQgaXRcbiAgMjogJz09IDEuMC4wLXJjLjMnLFxuICAzOiAnPT0gMS4wLjAtcmMuNCcsXG4gIDQ6ICc9PSAxLngueCcsXG4gIDU6ICc9PSAyLjAuMC1hbHBoYS54JyxcbiAgNjogJz49IDIuMC4wLWJldGEuMScsXG4gIDc6ICc+PSA0LjAuMCA8NC4zLjAnLFxuICA4OiAnPj0gNC4zLjAnXG59O1xuXG5leHBvcnRzLlJFVklTSU9OX0NIQU5HRVMgPSBSRVZJU0lPTl9DSEFOR0VTO1xudmFyIG9iamVjdFR5cGUgPSAnW29iamVjdCBPYmplY3RdJztcblxuZnVuY3Rpb24gSGFuZGxlYmFyc0Vudmlyb25tZW50KGhlbHBlcnMsIHBhcnRpYWxzLCBkZWNvcmF0b3JzKSB7XG4gIHRoaXMuaGVscGVycyA9IGhlbHBlcnMgfHwge307XG4gIHRoaXMucGFydGlhbHMgPSBwYXJ0aWFscyB8fCB7fTtcbiAgdGhpcy5kZWNvcmF0b3JzID0gZGVjb3JhdG9ycyB8fCB7fTtcblxuICBfaGVscGVycy5yZWdpc3RlckRlZmF1bHRIZWxwZXJzKHRoaXMpO1xuICBfZGVjb3JhdG9ycy5yZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzKHRoaXMpO1xufVxuXG5IYW5kbGViYXJzRW52aXJvbm1lbnQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogSGFuZGxlYmFyc0Vudmlyb25tZW50LFxuXG4gIGxvZ2dlcjogX2xvZ2dlcjJbJ2RlZmF1bHQnXSxcbiAgbG9nOiBfbG9nZ2VyMlsnZGVmYXVsdCddLmxvZyxcblxuICByZWdpc3RlckhlbHBlcjogZnVuY3Rpb24gcmVnaXN0ZXJIZWxwZXIobmFtZSwgZm4pIHtcbiAgICBpZiAoX3V0aWxzLnRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIGlmIChmbikge1xuICAgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnQXJnIG5vdCBzdXBwb3J0ZWQgd2l0aCBtdWx0aXBsZSBoZWxwZXJzJyk7XG4gICAgICB9XG4gICAgICBfdXRpbHMuZXh0ZW5kKHRoaXMuaGVscGVycywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGVscGVyc1tuYW1lXSA9IGZuO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlckhlbHBlcjogZnVuY3Rpb24gdW5yZWdpc3RlckhlbHBlcihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuaGVscGVyc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uIHJlZ2lzdGVyUGFydGlhbChuYW1lLCBwYXJ0aWFsKSB7XG4gICAgaWYgKF91dGlscy50b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XG4gICAgICBfdXRpbHMuZXh0ZW5kKHRoaXMucGFydGlhbHMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHBhcnRpYWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdBdHRlbXB0aW5nIHRvIHJlZ2lzdGVyIGEgcGFydGlhbCBjYWxsZWQgXCInICsgbmFtZSArICdcIiBhcyB1bmRlZmluZWQnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFydGlhbHNbbmFtZV0gPSBwYXJ0aWFsO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uIHVucmVnaXN0ZXJQYXJ0aWFsKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5wYXJ0aWFsc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24gcmVnaXN0ZXJEZWNvcmF0b3IobmFtZSwgZm4pIHtcbiAgICBpZiAoX3V0aWxzLnRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIGlmIChmbikge1xuICAgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnQXJnIG5vdCBzdXBwb3J0ZWQgd2l0aCBtdWx0aXBsZSBkZWNvcmF0b3JzJyk7XG4gICAgICB9XG4gICAgICBfdXRpbHMuZXh0ZW5kKHRoaXMuZGVjb3JhdG9ycywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGVjb3JhdG9yc1tuYW1lXSA9IGZuO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24gdW5yZWdpc3RlckRlY29yYXRvcihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuZGVjb3JhdG9yc1tuYW1lXTtcbiAgfSxcbiAgLyoqXG4gICAqIFJlc2V0IHRoZSBtZW1vcnkgb2YgaWxsZWdhbCBwcm9wZXJ0eSBhY2Nlc3NlcyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIGxvZ2dlZC5cbiAgICogQGRlcHJlY2F0ZWQgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiBoYW5kbGViYXJzIHRlc3QtY2FzZXNcbiAgICovXG4gIHJlc2V0TG9nZ2VkUHJvcGVydHlBY2Nlc3NlczogZnVuY3Rpb24gcmVzZXRMb2dnZWRQcm9wZXJ0eUFjY2Vzc2VzKCkge1xuICAgIF9pbnRlcm5hbFByb3RvQWNjZXNzLnJlc2V0TG9nZ2VkUHJvcGVydGllcygpO1xuICB9XG59O1xuXG52YXIgbG9nID0gX2xvZ2dlcjJbJ2RlZmF1bHQnXS5sb2c7XG5cbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5jcmVhdGVGcmFtZSA9IF91dGlscy5jcmVhdGVGcmFtZTtcbmV4cG9ydHMubG9nZ2VyID0gX2xvZ2dlcjJbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJKaGMyVXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdjVUpCUVRoRExGTkJRVk03TzNsQ1FVTnFReXhoUVVGaE96czdPM1ZDUVVOSkxGZEJRVmM3T3pCQ1FVTlNMR05CUVdNN08zTkNRVU55UXl4VlFVRlZPenM3TzIxRFFVTlRMSGxDUVVGNVFqczdRVUZGZUVRc1NVRkJUU3hQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZET3p0QlFVTjRRaXhKUVVGTkxHbENRVUZwUWl4SFFVRkhMRU5CUVVNc1EwRkJRenM3UVVGRE5VSXNTVUZCVFN4cFEwRkJhVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdPenRCUVVVMVF5eEpRVUZOTEdkQ1FVRm5RaXhIUVVGSE8wRkJRemxDTEVkQlFVTXNSVUZCUlN4aFFVRmhPMEZCUTJoQ0xFZEJRVU1zUlVGQlJTeGxRVUZsTzBGQlEyeENMRWRCUVVNc1JVRkJSU3hsUVVGbE8wRkJRMnhDTEVkQlFVTXNSVUZCUlN4VlFVRlZPMEZCUTJJc1IwRkJReXhGUVVGRkxHdENRVUZyUWp0QlFVTnlRaXhIUVVGRExFVkJRVVVzYVVKQlFXbENPMEZCUTNCQ0xFZEJRVU1zUlVGQlJTeHBRa0ZCYVVJN1FVRkRjRUlzUjBGQlF5eEZRVUZGTEZWQlFWVTdRMEZEWkN4RFFVRkRPenM3UVVGRlJpeEpRVUZOTEZWQlFWVXNSMEZCUnl4cFFrRkJhVUlzUTBGQlF6czdRVUZGT1VJc1UwRkJVeXh4UWtGQmNVSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1VVRkJVU3hGUVVGRkxGVkJRVlVzUlVGQlJUdEJRVU51UlN4TlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFOUJRVThzU1VGQlNTeEZRVUZGTEVOQlFVTTdRVUZETjBJc1RVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eFJRVUZSTEVsQlFVa3NSVUZCUlN4RFFVRkRPMEZCUXk5Q0xFMUJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NWVUZCVlN4SlFVRkpMRVZCUVVVc1EwRkJRenM3UVVGRmJrTXNhME5CUVhWQ0xFbEJRVWtzUTBGQlF5eERRVUZETzBGQlF6ZENMSGREUVVFd1FpeEpRVUZKTEVOQlFVTXNRMEZCUXp0RFFVTnFRenM3UVVGRlJDeHhRa0ZCY1VJc1EwRkJReXhUUVVGVExFZEJRVWM3UVVGRGFFTXNZVUZCVnl4RlFVRkZMSEZDUVVGeFFqczdRVUZGYkVNc1VVRkJUU3h4UWtGQlVUdEJRVU5rTEV0QlFVY3NSVUZCUlN4dlFrRkJUeXhIUVVGSE96dEJRVVZtTEdkQ1FVRmpMRVZCUVVVc2QwSkJRVk1zU1VGQlNTeEZRVUZGTEVWQlFVVXNSVUZCUlR0QlFVTnFReXhSUVVGSkxHZENRVUZUTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhWUVVGVkxFVkJRVVU3UVVGRGRFTXNWVUZCU1N4RlFVRkZMRVZCUVVVN1FVRkRUaXhqUVVGTkxESkNRVUZqTEhsRFFVRjVReXhEUVVGRExFTkJRVU03VDBGRGFFVTdRVUZEUkN4dlFrRkJUeXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUXpWQ0xFMUJRVTA3UVVGRFRDeFZRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dExRVU42UWp0SFFVTkdPMEZCUTBRc2EwSkJRV2RDTEVWQlFVVXNNRUpCUVZNc1NVRkJTU3hGUVVGRk8wRkJReTlDTEZkQlFVOHNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEhRVU16UWpzN1FVRkZSQ3hwUWtGQlpTeEZRVUZGTEhsQ1FVRlRMRWxCUVVrc1JVRkJSU3hQUVVGUExFVkJRVVU3UVVGRGRrTXNVVUZCU1N4blFrRkJVeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NWVUZCVlN4RlFVRkZPMEZCUTNSRExHOUNRVUZQTEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03UzBGRE4wSXNUVUZCVFR0QlFVTk1MRlZCUVVrc1QwRkJUeXhQUVVGUExFdEJRVXNzVjBGQlZ5eEZRVUZGTzBGQlEyeERMR05CUVUwc2VVVkJRM2RETEVsQlFVa3NiMEpCUTJwRUxFTkJRVU03VDBGRFNEdEJRVU5FTEZWQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzVDBGQlR5eERRVUZETzB0QlF5OUNPMGRCUTBZN1FVRkRSQ3h0UWtGQmFVSXNSVUZCUlN3eVFrRkJVeXhKUVVGSkxFVkJRVVU3UVVGRGFFTXNWMEZCVHl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBkQlF6VkNPenRCUVVWRUxHMUNRVUZwUWl4RlFVRkZMREpDUVVGVExFbEJRVWtzUlVGQlJTeEZRVUZGTEVWQlFVVTdRVUZEY0VNc1VVRkJTU3huUWtGQlV5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1ZVRkJWU3hGUVVGRk8wRkJRM1JETEZWQlFVa3NSVUZCUlN4RlFVRkZPMEZCUTA0c1kwRkJUU3d5UWtGQll5dzBRMEZCTkVNc1EwRkJReXhEUVVGRE8wOUJRMjVGTzBGQlEwUXNiMEpCUVU4c1NVRkJTU3hEUVVGRExGVkJRVlVzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0TFFVTXZRaXhOUVVGTk8wRkJRMHdzVlVGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU03UzBGRE5VSTdSMEZEUmp0QlFVTkVMSEZDUVVGdFFpeEZRVUZGTERaQ1FVRlRMRWxCUVVrc1JVRkJSVHRCUVVOc1F5eFhRVUZQTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UjBGRE9VSTdPenM3TzBGQlMwUXNOa0pCUVRKQ0xFVkJRVUVzZFVOQlFVYzdRVUZETlVJc1owUkJRWFZDTEVOQlFVTTdSMEZEZWtJN1EwRkRSaXhEUVVGRE96dEJRVVZMTEVsQlFVa3NSMEZCUnl4SFFVRkhMRzlDUVVGUExFZEJRVWNzUTBGQlF6czdPMUZCUlc1Q0xGZEJRVmM3VVVGQlJTeE5RVUZOSWl3aVptbHNaU0k2SW1KaGMyVXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnZXlCamNtVmhkR1ZHY21GdFpTd2daWGgwWlc1a0xDQjBiMU4wY21sdVp5QjlJR1p5YjIwZ0p5NHZkWFJwYkhNbk8xeHVhVzF3YjNKMElFVjRZMlZ3ZEdsdmJpQm1jbTl0SUNjdUwyVjRZMlZ3ZEdsdmJpYzdYRzVwYlhCdmNuUWdleUJ5WldkcGMzUmxja1JsWm1GMWJIUklaV3h3WlhKeklIMGdabkp2YlNBbkxpOW9aV3h3WlhKekp6dGNibWx0Y0c5eWRDQjdJSEpsWjJsemRHVnlSR1ZtWVhWc2RFUmxZMjl5WVhSdmNuTWdmU0JtY205dElDY3VMMlJsWTI5eVlYUnZjbk1uTzF4dWFXMXdiM0owSUd4dloyZGxjaUJtY205dElDY3VMMnh2WjJkbGNpYzdYRzVwYlhCdmNuUWdleUJ5WlhObGRFeHZaMmRsWkZCeWIzQmxjblJwWlhNZ2ZTQm1jbTl0SUNjdUwybHVkR1Z5Ym1Gc0wzQnliM1J2TFdGalkyVnpjeWM3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JXUlZKVFNVOU9JRDBnSnpRdU55NDNKenRjYm1WNGNHOXlkQ0JqYjI1emRDQkRUMDFRU1V4RlVsOVNSVlpKVTBsUFRpQTlJRGc3WEc1bGVIQnZjblFnWTI5dWMzUWdURUZUVkY5RFQwMVFRVlJKUWt4RlgwTlBUVkJKVEVWU1gxSkZWa2xUU1U5T0lEMGdOenRjYmx4dVpYaHdiM0owSUdOdmJuTjBJRkpGVmtsVFNVOU9YME5JUVU1SFJWTWdQU0I3WEc0Z0lERTZJQ2M4UFNBeExqQXVjbU11TWljc0lDOHZJREV1TUM1eVl5NHlJR2x6SUdGamRIVmhiR3g1SUhKbGRqSWdZblYwSUdSdlpYTnVKM1FnY21Wd2IzSjBJR2wwWEc0Z0lESTZJQ2M5UFNBeExqQXVNQzF5WXk0ekp5eGNiaUFnTXpvZ0p6MDlJREV1TUM0d0xYSmpMalFuTEZ4dUlDQTBPaUFuUFQwZ01TNTRMbmduTEZ4dUlDQTFPaUFuUFQwZ01pNHdMakF0WVd4d2FHRXVlQ2NzWEc0Z0lEWTZJQ2MrUFNBeUxqQXVNQzFpWlhSaExqRW5MRnh1SUNBM09pQW5QajBnTkM0d0xqQWdQRFF1TXk0d0p5eGNiaUFnT0RvZ0p6NDlJRFF1TXk0d0oxeHVmVHRjYmx4dVkyOXVjM1FnYjJKcVpXTjBWSGx3WlNBOUlDZGJiMkpxWldOMElFOWlhbVZqZEYwbk8xeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdTR0Z1Wkd4bFltRnljMFZ1ZG1seWIyNXRaVzUwS0dobGJIQmxjbk1zSUhCaGNuUnBZV3h6TENCa1pXTnZjbUYwYjNKektTQjdYRzRnSUhSb2FYTXVhR1ZzY0dWeWN5QTlJR2hsYkhCbGNuTWdmSHdnZTMwN1hHNGdJSFJvYVhNdWNHRnlkR2xoYkhNZ1BTQndZWEowYVdGc2N5QjhmQ0I3ZlR0Y2JpQWdkR2hwY3k1a1pXTnZjbUYwYjNKeklEMGdaR1ZqYjNKaGRHOXljeUI4ZkNCN2ZUdGNibHh1SUNCeVpXZHBjM1JsY2tSbFptRjFiSFJJWld4d1pYSnpLSFJvYVhNcE8xeHVJQ0J5WldkcGMzUmxja1JsWm1GMWJIUkVaV052Y21GMGIzSnpLSFJvYVhNcE8xeHVmVnh1WEc1SVlXNWtiR1ZpWVhKelJXNTJhWEp2Ym0xbGJuUXVjSEp2ZEc5MGVYQmxJRDBnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjam9nU0dGdVpHeGxZbUZ5YzBWdWRtbHliMjV0Wlc1MExGeHVYRzRnSUd4dloyZGxjam9nYkc5bloyVnlMRnh1SUNCc2IyYzZJR3h2WjJkbGNpNXNiMmNzWEc1Y2JpQWdjbVZuYVhOMFpYSklaV3h3WlhJNklHWjFibU4wYVc5dUtHNWhiV1VzSUdadUtTQjdYRzRnSUNBZ2FXWWdLSFJ2VTNSeWFXNW5MbU5oYkd3b2JtRnRaU2tnUFQwOUlHOWlhbVZqZEZSNWNHVXBJSHRjYmlBZ0lDQWdJR2xtSUNobWJpa2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhoalpYQjBhVzl1S0NkQmNtY2dibTkwSUhOMWNIQnZjblJsWkNCM2FYUm9JRzExYkhScGNHeGxJR2hsYkhCbGNuTW5LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR1Y0ZEdWdVpDaDBhR2x6TG1obGJIQmxjbk1zSUc1aGJXVXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFHbHpMbWhsYkhCbGNuTmJibUZ0WlYwZ1BTQm1ianRjYmlBZ0lDQjlYRzRnSUgwc1hHNGdJSFZ1Y21WbmFYTjBaWEpJWld4d1pYSTZJR1oxYm1OMGFXOXVLRzVoYldVcElIdGNiaUFnSUNCa1pXeGxkR1VnZEdocGN5NW9aV3h3WlhKelcyNWhiV1ZkTzF4dUlDQjlMRnh1WEc0Z0lISmxaMmx6ZEdWeVVHRnlkR2xoYkRvZ1puVnVZM1JwYjI0b2JtRnRaU3dnY0dGeWRHbGhiQ2tnZTF4dUlDQWdJR2xtSUNoMGIxTjBjbWx1Wnk1allXeHNLRzVoYldVcElEMDlQU0J2WW1wbFkzUlVlWEJsS1NCN1hHNGdJQ0FnSUNCbGVIUmxibVFvZEdocGN5NXdZWEowYVdGc2N5d2dibUZ0WlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnY0dGeWRHbGhiQ0E5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWNFkyVndkR2x2YmloY2JpQWdJQ0FnSUNBZ0lDQmdRWFIwWlcxd2RHbHVaeUIwYnlCeVpXZHBjM1JsY2lCaElIQmhjblJwWVd3Z1kyRnNiR1ZrSUZ3aUpIdHVZVzFsZlZ3aUlHRnpJSFZ1WkdWbWFXNWxaR0JjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhSb2FYTXVjR0Z5ZEdsaGJITmJibUZ0WlYwZ1BTQndZWEowYVdGc08xeHVJQ0FnSUgxY2JpQWdmU3hjYmlBZ2RXNXlaV2RwYzNSbGNsQmhjblJwWVd3NklHWjFibU4wYVc5dUtHNWhiV1VwSUh0Y2JpQWdJQ0JrWld4bGRHVWdkR2hwY3k1d1lYSjBhV0ZzYzF0dVlXMWxYVHRjYmlBZ2ZTeGNibHh1SUNCeVpXZHBjM1JsY2tSbFkyOXlZWFJ2Y2pvZ1puVnVZM1JwYjI0b2JtRnRaU3dnWm00cElIdGNiaUFnSUNCcFppQW9kRzlUZEhKcGJtY3VZMkZzYkNodVlXMWxLU0E5UFQwZ2IySnFaV04wVkhsd1pTa2dlMXh1SUNBZ0lDQWdhV1lnS0dadUtTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGZUdObGNIUnBiMjRvSjBGeVp5QnViM1FnYzNWd2NHOXlkR1ZrSUhkcGRHZ2diWFZzZEdsd2JHVWdaR1ZqYjNKaGRHOXljeWNwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWlhoMFpXNWtLSFJvYVhNdVpHVmpiM0poZEc5eWN5d2dibUZ0WlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvYVhNdVpHVmpiM0poZEc5eWMxdHVZVzFsWFNBOUlHWnVPMXh1SUNBZ0lIMWNiaUFnZlN4Y2JpQWdkVzV5WldkcGMzUmxja1JsWTI5eVlYUnZjam9nWm5WdVkzUnBiMjRvYm1GdFpTa2dlMXh1SUNBZ0lHUmxiR1YwWlNCMGFHbHpMbVJsWTI5eVlYUnZjbk5iYm1GdFpWMDdYRzRnSUgwc1hHNGdJQzhxS2x4dUlDQWdLaUJTWlhObGRDQjBhR1VnYldWdGIzSjVJRzltSUdsc2JHVm5ZV3dnY0hKdmNHVnlkSGtnWVdOalpYTnpaWE1nZEdoaGRDQm9ZWFpsSUdGc2NtVmhaSGtnWW1WbGJpQnNiMmRuWldRdVhHNGdJQ0FxSUVCa1pYQnlaV05oZEdWa0lITm9iM1ZzWkNCdmJteDVJR0psSUhWelpXUWdhVzRnYUdGdVpHeGxZbUZ5Y3lCMFpYTjBMV05oYzJWelhHNGdJQ0FxTDF4dUlDQnlaWE5sZEV4dloyZGxaRkJ5YjNCbGNuUjVRV05qWlhOelpYTW9LU0I3WEc0Z0lDQWdjbVZ6WlhSTWIyZG5aV1JRY205d1pYSjBhV1Z6S0NrN1hHNGdJSDFjYm4wN1hHNWNibVY0Y0c5eWRDQnNaWFFnYkc5bklEMGdiRzluWjJWeUxteHZaenRjYmx4dVpYaHdiM0owSUhzZ1kzSmxZWFJsUm5KaGJXVXNJR3h2WjJkbGNpQjlPMXh1SWwxOVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5yZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzID0gcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycztcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9kZWNvcmF0b3JzSW5saW5lID0gcmVxdWlyZSgnLi9kZWNvcmF0b3JzL2lubGluZScpO1xuXG52YXIgX2RlY29yYXRvcnNJbmxpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVjb3JhdG9yc0lubGluZSk7XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnMoaW5zdGFuY2UpIHtcbiAgX2RlY29yYXRvcnNJbmxpbmUyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMlJsWTI5eVlYUnZjbk11YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3WjBOQlFUSkNMSEZDUVVGeFFqczdPenRCUVVWNlF5eFRRVUZUTEhsQ1FVRjVRaXhEUVVGRExGRkJRVkVzUlVGQlJUdEJRVU5zUkN4blEwRkJaU3hSUVVGUkxFTkJRVU1zUTBGQlF6dERRVU14UWlJc0ltWnBiR1VpT2lKa1pXTnZjbUYwYjNKekxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJSEpsWjJsemRHVnlTVzVzYVc1bElHWnliMjBnSnk0dlpHVmpiM0poZEc5eWN5OXBibXhwYm1Vbk8xeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdjbVZuYVhOMFpYSkVaV1poZFd4MFJHVmpiM0poZEc5eWN5aHBibk4wWVc1alpTa2dlMXh1SUNCeVpXZHBjM1JsY2tsdWJHbHVaU2hwYm5OMFlXNWpaU2s3WEc1OVhHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJEZWNvcmF0b3IoJ2lubGluZScsIGZ1bmN0aW9uIChmbiwgcHJvcHMsIGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIHZhciByZXQgPSBmbjtcbiAgICBpZiAoIXByb3BzLnBhcnRpYWxzKSB7XG4gICAgICBwcm9wcy5wYXJ0aWFscyA9IHt9O1xuICAgICAgcmV0ID0gZnVuY3Rpb24gKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IHBhcnRpYWxzIHN0YWNrIGZyYW1lIHByaW9yIHRvIGV4ZWMuXG4gICAgICAgIHZhciBvcmlnaW5hbCA9IGNvbnRhaW5lci5wYXJ0aWFscztcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gX3V0aWxzLmV4dGVuZCh7fSwgb3JpZ2luYWwsIHByb3BzLnBhcnRpYWxzKTtcbiAgICAgICAgdmFyIHJldCA9IGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBvcmlnaW5hbDtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcHJvcHMucGFydGlhbHNbb3B0aW9ucy5hcmdzWzBdXSA9IG9wdGlvbnMuZm47XG5cbiAgICByZXR1cm4gcmV0O1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJSbFkyOXlZWFJ2Y25NdmFXNXNhVzVsTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdjVUpCUVhWQ0xGVkJRVlU3TzNGQ1FVVnNRaXhWUVVGVExGRkJRVkVzUlVGQlJUdEJRVU5vUXl4VlFVRlJMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNVVUZCVVN4RlFVRkZMRlZCUVZNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFRRVUZUTEVWQlFVVXNUMEZCVHl4RlFVRkZPMEZCUXpORkxGRkJRVWtzUjBGQlJ5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTmlMRkZCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeEZRVUZGTzBGQlEyNUNMRmRCUVVzc1EwRkJReXhSUVVGUkxFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEzQkNMRk5CUVVjc1IwRkJSeXhWUVVGVExFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVTdPMEZCUlM5Q0xGbEJRVWtzVVVGQlVTeEhRVUZITEZOQlFWTXNRMEZCUXl4UlFVRlJMRU5CUVVNN1FVRkRiRU1zYVVKQlFWTXNRMEZCUXl4UlFVRlJMRWRCUVVjc1kwRkJUeXhGUVVGRkxFVkJRVVVzVVVGQlVTeEZRVUZGTEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRCUVVNeFJDeFpRVUZKTEVkQlFVY3NSMEZCUnl4RlFVRkZMRU5CUVVNc1QwRkJUeXhGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETzBGQlF5OUNMR2xDUVVGVExFTkJRVU1zVVVGQlVTeEhRVUZITEZGQlFWRXNRMEZCUXp0QlFVTTVRaXhsUVVGUExFZEJRVWNzUTBGQlF6dFBRVU5hTEVOQlFVTTdTMEZEU0RzN1FVRkZSQ3hUUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eFBRVUZQTEVOQlFVTXNSVUZCUlN4RFFVRkRPenRCUVVVM1F5eFhRVUZQTEVkQlFVY3NRMEZCUXp0SFFVTmFMRU5CUVVNc1EwRkJRenREUVVOS0lpd2labWxzWlNJNkltbHViR2x1WlM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQjdJR1Y0ZEdWdVpDQjlJR1p5YjIwZ0p5NHVMM1YwYVd4ekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNG9hVzV6ZEdGdVkyVXBJSHRjYmlBZ2FXNXpkR0Z1WTJVdWNtVm5hWE4wWlhKRVpXTnZjbUYwYjNJb0oybHViR2x1WlNjc0lHWjFibU4wYVc5dUtHWnVMQ0J3Y205d2N5d2dZMjl1ZEdGcGJtVnlMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdiR1YwSUhKbGRDQTlJR1p1TzF4dUlDQWdJR2xtSUNnaGNISnZjSE11Y0dGeWRHbGhiSE1wSUh0Y2JpQWdJQ0FnSUhCeWIzQnpMbkJoY25ScFlXeHpJRDBnZTMwN1hHNGdJQ0FnSUNCeVpYUWdQU0JtZFc1amRHbHZiaWhqYjI1MFpYaDBMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0FnSUM4dklFTnlaV0YwWlNCaElHNWxkeUJ3WVhKMGFXRnNjeUJ6ZEdGamF5Qm1jbUZ0WlNCd2NtbHZjaUIwYnlCbGVHVmpMbHh1SUNBZ0lDQWdJQ0JzWlhRZ2IzSnBaMmx1WVd3Z1BTQmpiMjUwWVdsdVpYSXVjR0Z5ZEdsaGJITTdYRzRnSUNBZ0lDQWdJR052Ym5SaGFXNWxjaTV3WVhKMGFXRnNjeUE5SUdWNGRHVnVaQ2g3ZlN3Z2IzSnBaMmx1WVd3c0lIQnliM0J6TG5CaGNuUnBZV3h6S1R0Y2JpQWdJQ0FnSUNBZ2JHVjBJSEpsZENBOUlHWnVLR052Ym5SbGVIUXNJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdJQ0JqYjI1MFlXbHVaWEl1Y0dGeWRHbGhiSE1nUFNCdmNtbG5hVzVoYkR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGREdGNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NISnZjSE11Y0dGeWRHbGhiSE5iYjNCMGFXOXVjeTVoY21keld6QmRYU0E5SUc5d2RHbHZibk11Wm00N1hHNWNiaUFnSUNCeVpYUjFjbTRnY21WME8xeHVJQ0I5S1R0Y2JuMWNiaUpkZlE9PVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGVycm9yUHJvcHMgPSBbJ2Rlc2NyaXB0aW9uJywgJ2ZpbGVOYW1lJywgJ2xpbmVOdW1iZXInLCAnZW5kTGluZU51bWJlcicsICdtZXNzYWdlJywgJ25hbWUnLCAnbnVtYmVyJywgJ3N0YWNrJ107XG5cbmZ1bmN0aW9uIEV4Y2VwdGlvbihtZXNzYWdlLCBub2RlKSB7XG4gIHZhciBsb2MgPSBub2RlICYmIG5vZGUubG9jLFxuICAgICAgbGluZSA9IHVuZGVmaW5lZCxcbiAgICAgIGVuZExpbmVOdW1iZXIgPSB1bmRlZmluZWQsXG4gICAgICBjb2x1bW4gPSB1bmRlZmluZWQsXG4gICAgICBlbmRDb2x1bW4gPSB1bmRlZmluZWQ7XG5cbiAgaWYgKGxvYykge1xuICAgIGxpbmUgPSBsb2Muc3RhcnQubGluZTtcbiAgICBlbmRMaW5lTnVtYmVyID0gbG9jLmVuZC5saW5lO1xuICAgIGNvbHVtbiA9IGxvYy5zdGFydC5jb2x1bW47XG4gICAgZW5kQ29sdW1uID0gbG9jLmVuZC5jb2x1bW47XG5cbiAgICBtZXNzYWdlICs9ICcgLSAnICsgbGluZSArICc6JyArIGNvbHVtbjtcbiAgfVxuXG4gIHZhciB0bXAgPSBFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcblxuICAvLyBVbmZvcnR1bmF0ZWx5IGVycm9ycyBhcmUgbm90IGVudW1lcmFibGUgaW4gQ2hyb21lIChhdCBsZWFzdCksIHNvIGBmb3IgcHJvcCBpbiB0bXBgIGRvZXNuJ3Qgd29yay5cbiAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgZXJyb3JQcm9wcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdGhpc1tlcnJvclByb3BzW2lkeF1dID0gdG1wW2Vycm9yUHJvcHNbaWR4XV07XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBFeGNlcHRpb24pO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBpZiAobG9jKSB7XG4gICAgICB0aGlzLmxpbmVOdW1iZXIgPSBsaW5lO1xuICAgICAgdGhpcy5lbmRMaW5lTnVtYmVyID0gZW5kTGluZU51bWJlcjtcblxuICAgICAgLy8gV29yayBhcm91bmQgaXNzdWUgdW5kZXIgc2FmYXJpIHdoZXJlIHdlIGNhbid0IGRpcmVjdGx5IHNldCB0aGUgY29sdW1uIHZhbHVlXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvbHVtbicsIHtcbiAgICAgICAgICB2YWx1ZTogY29sdW1uLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZW5kQ29sdW1uJywge1xuICAgICAgICAgIHZhbHVlOiBlbmRDb2x1bW4sXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29sdW1uID0gY29sdW1uO1xuICAgICAgICB0aGlzLmVuZENvbHVtbiA9IGVuZENvbHVtbjtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKG5vcCkge1xuICAgIC8qIElnbm9yZSBpZiB0aGUgYnJvd3NlciBpcyB2ZXJ5IHBhcnRpY3VsYXIgKi9cbiAgfVxufVxuXG5FeGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEV4Y2VwdGlvbjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMlY0WTJWd2RHbHZiaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkJRU3hKUVVGTkxGVkJRVlVzUjBGQlJ5eERRVU5xUWl4aFFVRmhMRVZCUTJJc1ZVRkJWU3hGUVVOV0xGbEJRVmtzUlVGRFdpeGxRVUZsTEVWQlEyWXNVMEZCVXl4RlFVTlVMRTFCUVUwc1JVRkRUaXhSUVVGUkxFVkJRMUlzVDBGQlR5eERRVU5TTEVOQlFVTTdPMEZCUlVZc1UwRkJVeXhUUVVGVExFTkJRVU1zVDBGQlR5eEZRVUZGTEVsQlFVa3NSVUZCUlR0QlFVTm9ReXhOUVVGSkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWRCUVVjN1RVRkRlRUlzU1VGQlNTeFpRVUZCTzAxQlEwb3NZVUZCWVN4WlFVRkJPMDFCUTJJc1RVRkJUU3haUVVGQk8wMUJRMDRzVTBGQlV5eFpRVUZCTEVOQlFVTTdPMEZCUlZvc1RVRkJTU3hIUVVGSExFVkJRVVU3UVVGRFVDeFJRVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU03UVVGRGRFSXNhVUpCUVdFc1IwRkJSeXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXp0QlFVTTNRaXhWUVVGTkxFZEJRVWNzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNN1FVRkRNVUlzWVVGQlV5eEhRVUZITEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRE96dEJRVVV6UWl4WFFVRlBMRWxCUVVrc1MwRkJTeXhIUVVGSExFbEJRVWtzUjBGQlJ5eEhRVUZITEVkQlFVY3NUVUZCVFN4RFFVRkRPMGRCUTNoRE96dEJRVVZFTEUxQlFVa3NSMEZCUnl4SFFVRkhMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03T3p0QlFVY3hSQ3hQUVVGTExFbEJRVWtzUjBGQlJ5eEhRVUZITEVOQlFVTXNSVUZCUlN4SFFVRkhMRWRCUVVjc1ZVRkJWU3hEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVWQlFVVXNSVUZCUlR0QlFVTm9SQ3hSUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRExGVkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMGRCUXpsRE96czdRVUZIUkN4TlFVRkpMRXRCUVVzc1EwRkJReXhwUWtGQmFVSXNSVUZCUlR0QlFVTXpRaXhUUVVGTExFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1NVRkJTU3hGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETzBkQlF6RkRPenRCUVVWRUxFMUJRVWs3UVVGRFJpeFJRVUZKTEVkQlFVY3NSVUZCUlR0QlFVTlFMRlZCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETzBGQlEzWkNMRlZCUVVrc1EwRkJReXhoUVVGaExFZEJRVWNzWVVGQllTeERRVUZET3pzN08wRkJTVzVETEZWQlFVa3NUVUZCVFN4RFFVRkRMR05CUVdNc1JVRkJSVHRCUVVONlFpeGpRVUZOTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hSUVVGUkxFVkJRVVU3UVVGRGNFTXNaVUZCU3l4RlFVRkZMRTFCUVUwN1FVRkRZaXh2UWtGQlZTeEZRVUZGTEVsQlFVazdVMEZEYWtJc1EwRkJReXhEUVVGRE8wRkJRMGdzWTBGQlRTeERRVUZETEdOQlFXTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1YwRkJWeXhGUVVGRk8wRkJRM1pETEdWQlFVc3NSVUZCUlN4VFFVRlRPMEZCUTJoQ0xHOUNRVUZWTEVWQlFVVXNTVUZCU1R0VFFVTnFRaXhEUVVGRExFTkJRVU03VDBGRFNpeE5RVUZOTzBGQlEwd3NXVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU03UVVGRGNrSXNXVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhUUVVGVExFTkJRVU03VDBGRE5VSTdTMEZEUmp0SFFVTkdMRU5CUVVNc1QwRkJUeXhIUVVGSExFVkJRVVU3TzBkQlJXSTdRMEZEUmpzN1FVRkZSQ3hUUVVGVExFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NTMEZCU3l4RlFVRkZMRU5CUVVNN08zRkNRVVZ1UWl4VFFVRlRJaXdpWm1sc1pTSTZJbVY0WTJWd2RHbHZiaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltTnZibk4wSUdWeWNtOXlVSEp2Y0hNZ1BTQmJYRzRnSUNka1pYTmpjbWx3ZEdsdmJpY3NYRzRnSUNkbWFXeGxUbUZ0WlNjc1hHNGdJQ2RzYVc1bFRuVnRZbVZ5Snl4Y2JpQWdKMlZ1WkV4cGJtVk9kVzFpWlhJbkxGeHVJQ0FuYldWemMyRm5aU2NzWEc0Z0lDZHVZVzFsSnl4Y2JpQWdKMjUxYldKbGNpY3NYRzRnSUNkemRHRmpheWRjYmwwN1hHNWNibVoxYm1OMGFXOXVJRVY0WTJWd2RHbHZiaWh0WlhOellXZGxMQ0J1YjJSbEtTQjdYRzRnSUd4bGRDQnNiMk1nUFNCdWIyUmxJQ1ltSUc1dlpHVXViRzlqTEZ4dUlDQWdJR3hwYm1Vc1hHNGdJQ0FnWlc1a1RHbHVaVTUxYldKbGNpeGNiaUFnSUNCamIyeDFiVzRzWEc0Z0lDQWdaVzVrUTI5c2RXMXVPMXh1WEc0Z0lHbG1JQ2hzYjJNcElIdGNiaUFnSUNCc2FXNWxJRDBnYkc5akxuTjBZWEowTG14cGJtVTdYRzRnSUNBZ1pXNWtUR2x1WlU1MWJXSmxjaUE5SUd4dll5NWxibVF1YkdsdVpUdGNiaUFnSUNCamIyeDFiVzRnUFNCc2IyTXVjM1JoY25RdVkyOXNkVzF1TzF4dUlDQWdJR1Z1WkVOdmJIVnRiaUE5SUd4dll5NWxibVF1WTI5c2RXMXVPMXh1WEc0Z0lDQWdiV1Z6YzJGblpTQXJQU0FuSUMwZ0p5QXJJR3hwYm1VZ0t5QW5PaWNnS3lCamIyeDFiVzQ3WEc0Z0lIMWNibHh1SUNCc1pYUWdkRzF3SUQwZ1JYSnliM0l1Y0hKdmRHOTBlWEJsTG1OdmJuTjBjblZqZEc5eUxtTmhiR3dvZEdocGN5d2diV1Z6YzJGblpTazdYRzVjYmlBZ0x5OGdWVzVtYjNKMGRXNWhkR1ZzZVNCbGNuSnZjbk1nWVhKbElHNXZkQ0JsYm5WdFpYSmhZbXhsSUdsdUlFTm9jbTl0WlNBb1lYUWdiR1ZoYzNRcExDQnpieUJnWm05eUlIQnliM0FnYVc0Z2RHMXdZQ0JrYjJWemJpZDBJSGR2Y21zdVhHNGdJR1p2Y2lBb2JHVjBJR2xrZUNBOUlEQTdJR2xrZUNBOElHVnljbTl5VUhKdmNITXViR1Z1WjNSb095QnBaSGdyS3lrZ2UxeHVJQ0FnSUhSb2FYTmJaWEp5YjNKUWNtOXdjMXRwWkhoZFhTQTlJSFJ0Y0Z0bGNuSnZjbEJ5YjNCelcybGtlRjFkTzF4dUlDQjlYRzVjYmlBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHVnNjMlVnS2k5Y2JpQWdhV1lnS0VWeWNtOXlMbU5oY0hSMWNtVlRkR0ZqYTFSeVlXTmxLU0I3WEc0Z0lDQWdSWEp5YjNJdVkyRndkSFZ5WlZOMFlXTnJWSEpoWTJVb2RHaHBjeXdnUlhoalpYQjBhVzl1S1R0Y2JpQWdmVnh1WEc0Z0lIUnllU0I3WEc0Z0lDQWdhV1lnS0d4dll5a2dlMXh1SUNBZ0lDQWdkR2hwY3k1c2FXNWxUblZ0WW1WeUlEMGdiR2x1WlR0Y2JpQWdJQ0FnSUhSb2FYTXVaVzVrVEdsdVpVNTFiV0psY2lBOUlHVnVaRXhwYm1WT2RXMWlaWEk3WEc1Y2JpQWdJQ0FnSUM4dklGZHZjbXNnWVhKdmRXNWtJR2x6YzNWbElIVnVaR1Z5SUhOaFptRnlhU0IzYUdWeVpTQjNaU0JqWVc0bmRDQmthWEpsWTNSc2VTQnpaWFFnZEdobElHTnZiSFZ0YmlCMllXeDFaVnh1SUNBZ0lDQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJRzVsZUhRZ0tpOWNiaUFnSUNBZ0lHbG1JQ2hQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrcElIdGNiaUFnSUNBZ0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hSb2FYTXNJQ2RqYjJ4MWJXNG5MQ0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdOdmJIVnRiaXhjYmlBZ0lDQWdJQ0FnSUNCbGJuVnRaWEpoWW14bE9pQjBjblZsWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZEdocGN5d2dKMlZ1WkVOdmJIVnRiaWNzSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1pXNWtRMjlzZFcxdUxGeHVJQ0FnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVmNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZiSFZ0YmlBOUlHTnZiSFZ0Ymp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYm1SRGIyeDFiVzRnUFNCbGJtUkRiMngxYlc0N1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlJR05oZEdOb0lDaHViM0FwSUh0Y2JpQWdJQ0F2S2lCSloyNXZjbVVnYVdZZ2RHaGxJR0p5YjNkelpYSWdhWE1nZG1WeWVTQndZWEowYVdOMWJHRnlJQ292WEc0Z0lIMWNibjFjYmx4dVJYaGpaWEIwYVc5dUxuQnliM1J2ZEhsd1pTQTlJRzVsZHlCRmNuSnZjaWdwTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCRmVHTmxjSFJwYjI0N1hHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLnJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMgPSByZWdpc3RlckRlZmF1bHRIZWxwZXJzO1xuZXhwb3J0cy5tb3ZlSGVscGVyVG9Ib29rcyA9IG1vdmVIZWxwZXJUb0hvb2tzO1xuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmcgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcnKTtcblxudmFyIF9oZWxwZXJzQmxvY2tIZWxwZXJNaXNzaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmcpO1xuXG52YXIgX2hlbHBlcnNFYWNoID0gcmVxdWlyZSgnLi9oZWxwZXJzL2VhY2gnKTtcblxudmFyIF9oZWxwZXJzRWFjaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWxwZXJzRWFjaCk7XG5cbnZhciBfaGVscGVyc0hlbHBlck1pc3NpbmcgPSByZXF1aXJlKCcuL2hlbHBlcnMvaGVscGVyLW1pc3NpbmcnKTtcblxudmFyIF9oZWxwZXJzSGVscGVyTWlzc2luZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWxwZXJzSGVscGVyTWlzc2luZyk7XG5cbnZhciBfaGVscGVyc0lmID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lmJyk7XG5cbnZhciBfaGVscGVyc0lmMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNJZik7XG5cbnZhciBfaGVscGVyc0xvZyA9IHJlcXVpcmUoJy4vaGVscGVycy9sb2cnKTtcblxudmFyIF9oZWxwZXJzTG9nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNMb2cpO1xuXG52YXIgX2hlbHBlcnNMb29rdXAgPSByZXF1aXJlKCcuL2hlbHBlcnMvbG9va3VwJyk7XG5cbnZhciBfaGVscGVyc0xvb2t1cDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWxwZXJzTG9va3VwKTtcblxudmFyIF9oZWxwZXJzV2l0aCA9IHJlcXVpcmUoJy4vaGVscGVycy93aXRoJyk7XG5cbnZhciBfaGVscGVyc1dpdGgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVyc1dpdGgpO1xuXG5mdW5jdGlvbiByZWdpc3RlckRlZmF1bHRIZWxwZXJzKGluc3RhbmNlKSB7XG4gIF9oZWxwZXJzQmxvY2tIZWxwZXJNaXNzaW5nMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcbiAgX2hlbHBlcnNFYWNoMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcbiAgX2hlbHBlcnNIZWxwZXJNaXNzaW5nMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcbiAgX2hlbHBlcnNJZjJbJ2RlZmF1bHQnXShpbnN0YW5jZSk7XG4gIF9oZWxwZXJzTG9nMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcbiAgX2hlbHBlcnNMb29rdXAyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xuICBfaGVscGVyc1dpdGgyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xufVxuXG5mdW5jdGlvbiBtb3ZlSGVscGVyVG9Ib29rcyhpbnN0YW5jZSwgaGVscGVyTmFtZSwga2VlcEhlbHBlcikge1xuICBpZiAoaW5zdGFuY2UuaGVscGVyc1toZWxwZXJOYW1lXSkge1xuICAgIGluc3RhbmNlLmhvb2tzW2hlbHBlck5hbWVdID0gaW5zdGFuY2UuaGVscGVyc1toZWxwZXJOYW1lXTtcbiAgICBpZiAoIWtlZXBIZWxwZXIpIHtcbiAgICAgIGRlbGV0ZSBpbnN0YW5jZS5oZWxwZXJzW2hlbHBlck5hbWVdO1xuICAgIH1cbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMmhsYkhCbGNuTXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPM2xEUVVGMVF5eG5RMEZCWjBNN096czdNa0pCUXpsRExHZENRVUZuUWpzN096dHZRMEZEVUN3d1FrRkJNRUk3T3pzN2VVSkJRM0pETEdOQlFXTTdPenM3TUVKQlEySXNaVUZCWlRzN096czJRa0ZEV2l4clFrRkJhMEk3T3pzN01rSkJRM0JDTEdkQ1FVRm5RanM3T3p0QlFVVnNReXhUUVVGVExITkNRVUZ6UWl4RFFVRkRMRkZCUVZFc1JVRkJSVHRCUVVNdlF5eDVRMEZCTWtJc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRGNrTXNNa0pCUVdFc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRGRrSXNiME5CUVhOQ0xGRkJRVkVzUTBGQlF5eERRVUZETzBGQlEyaERMSGxDUVVGWExGRkJRVkVzUTBGQlF5eERRVUZETzBGQlEzSkNMREJDUVVGWkxGRkJRVkVzUTBGQlF5eERRVUZETzBGQlEzUkNMRFpDUVVGbExGRkJRVkVzUTBGQlF5eERRVUZETzBGQlEzcENMREpDUVVGaExGRkJRVkVzUTBGQlF5eERRVUZETzBOQlEzaENPenRCUVVWTkxGTkJRVk1zYVVKQlFXbENMRU5CUVVNc1VVRkJVU3hGUVVGRkxGVkJRVlVzUlVGQlJTeFZRVUZWTEVWQlFVVTdRVUZEYkVVc1RVRkJTU3hSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZPMEZCUTJoRExGbEJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0QlFVTXhSQ3hSUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTzBGQlEyWXNZVUZCVHl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzB0QlEzSkRPMGRCUTBZN1EwRkRSaUlzSW1acGJHVWlPaUpvWld4d1pYSnpMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUhKbFoybHpkR1Z5UW14dlkydElaV3h3WlhKTmFYTnphVzVuSUdaeWIyMGdKeTR2YUdWc2NHVnljeTlpYkc5amF5MW9aV3h3WlhJdGJXbHpjMmx1WnljN1hHNXBiWEJ2Y25RZ2NtVm5hWE4wWlhKRllXTm9JR1p5YjIwZ0p5NHZhR1ZzY0dWeWN5OWxZV05vSnp0Y2JtbHRjRzl5ZENCeVpXZHBjM1JsY2tobGJIQmxjazFwYzNOcGJtY2dabkp2YlNBbkxpOW9aV3h3WlhKekwyaGxiSEJsY2kxdGFYTnphVzVuSnp0Y2JtbHRjRzl5ZENCeVpXZHBjM1JsY2tsbUlHWnliMjBnSnk0dmFHVnNjR1Z5Y3k5cFppYzdYRzVwYlhCdmNuUWdjbVZuYVhOMFpYSk1iMmNnWm5KdmJTQW5MaTlvWld4d1pYSnpMMnh2WnljN1hHNXBiWEJ2Y25RZ2NtVm5hWE4wWlhKTWIyOXJkWEFnWm5KdmJTQW5MaTlvWld4d1pYSnpMMnh2YjJ0MWNDYzdYRzVwYlhCdmNuUWdjbVZuYVhOMFpYSlhhWFJvSUdaeWIyMGdKeTR2YUdWc2NHVnljeTkzYVhSb0p6dGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSEpsWjJsemRHVnlSR1ZtWVhWc2RFaGxiSEJsY25Nb2FXNXpkR0Z1WTJVcElIdGNiaUFnY21WbmFYTjBaWEpDYkc5amEwaGxiSEJsY2sxcGMzTnBibWNvYVc1emRHRnVZMlVwTzF4dUlDQnlaV2RwYzNSbGNrVmhZMmdvYVc1emRHRnVZMlVwTzF4dUlDQnlaV2RwYzNSbGNraGxiSEJsY2sxcGMzTnBibWNvYVc1emRHRnVZMlVwTzF4dUlDQnlaV2RwYzNSbGNrbG1LR2x1YzNSaGJtTmxLVHRjYmlBZ2NtVm5hWE4wWlhKTWIyY29hVzV6ZEdGdVkyVXBPMXh1SUNCeVpXZHBjM1JsY2t4dmIydDFjQ2hwYm5OMFlXNWpaU2s3WEc0Z0lISmxaMmx6ZEdWeVYybDBhQ2hwYm5OMFlXNWpaU2s3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnRiM1psU0dWc2NHVnlWRzlJYjI5cmN5aHBibk4wWVc1alpTd2dhR1ZzY0dWeVRtRnRaU3dnYTJWbGNFaGxiSEJsY2lrZ2UxeHVJQ0JwWmlBb2FXNXpkR0Z1WTJVdWFHVnNjR1Z5YzF0b1pXeHdaWEpPWVcxbFhTa2dlMXh1SUNBZ0lHbHVjM1JoYm1ObExtaHZiMnR6VzJobGJIQmxjazVoYldWZElEMGdhVzV6ZEdGdVkyVXVhR1ZzY0dWeWMxdG9aV3h3WlhKT1lXMWxYVHRjYmlBZ0lDQnBaaUFvSVd0bFpYQklaV3h3WlhJcElIdGNiaUFnSUNBZ0lHUmxiR1YwWlNCcGJuTjBZVzVqWlM1b1pXeHdaWEp6VzJobGJIQmxjazVoYldWZE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dUlsMTlcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignYmxvY2tIZWxwZXJNaXNzaW5nJywgZnVuY3Rpb24gKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICB2YXIgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcbiAgICAgICAgZm4gPSBvcHRpb25zLmZuO1xuXG4gICAgaWYgKGNvbnRleHQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBmbih0aGlzKTtcbiAgICB9IGVsc2UgaWYgKGNvbnRleHQgPT09IGZhbHNlIHx8IGNvbnRleHQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGludmVyc2UodGhpcyk7XG4gICAgfSBlbHNlIGlmIChfdXRpbHMuaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICBvcHRpb25zLmlkcyA9IFtvcHRpb25zLm5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIHZhciBkYXRhID0gX3V0aWxzLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBfdXRpbHMuYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLm5hbWUpO1xuICAgICAgICBvcHRpb25zID0geyBkYXRhOiBkYXRhIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMmhsYkhCbGNuTXZZbXh2WTJzdGFHVnNjR1Z5TFcxcGMzTnBibWN1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096dHhRa0ZCZDBRc1ZVRkJWVHM3Y1VKQlJXNUVMRlZCUVZNc1VVRkJVU3hGUVVGRk8wRkJRMmhETEZWQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc2IwSkJRVzlDTEVWQlFVVXNWVUZCVXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRk8wRkJRM1pGTEZGQlFVa3NUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJReXhQUVVGUE8xRkJRek5DTEVWQlFVVXNSMEZCUnl4UFFVRlBMRU5CUVVNc1JVRkJSU3hEUVVGRE96dEJRVVZzUWl4UlFVRkpMRTlCUVU4c1MwRkJTeXhKUVVGSkxFVkJRVVU3UVVGRGNFSXNZVUZCVHl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UzBGRGFrSXNUVUZCVFN4SlFVRkpMRTlCUVU4c1MwRkJTeXhMUVVGTExFbEJRVWtzVDBGQlR5eEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTXZReXhoUVVGUExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0TFFVTjBRaXhOUVVGTkxFbEJRVWtzWlVGQlVTeFBRVUZQTEVOQlFVTXNSVUZCUlR0QlFVTXpRaXhWUVVGSkxFOUJRVThzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RlFVRkZPMEZCUTNSQ0xGbEJRVWtzVDBGQlR5eERRVUZETEVkQlFVY3NSVUZCUlR0QlFVTm1MR2xDUVVGUExFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xTkJRemxDT3p0QlFVVkVMR1ZCUVU4c1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8wOUJRMmhFTEUxQlFVMDdRVUZEVEN4bFFVRlBMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFBRVU4wUWp0TFFVTkdMRTFCUVUwN1FVRkRUQ3hWUVVGSkxFOUJRVThzUTBGQlF5eEpRVUZKTEVsQlFVa3NUMEZCVHl4RFFVRkRMRWRCUVVjc1JVRkJSVHRCUVVNdlFpeFpRVUZKTEVsQlFVa3NSMEZCUnl4dFFrRkJXU3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEY2tNc1dVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eDVRa0ZEYWtJc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVWQlEzaENMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRMklzUTBGQlF6dEJRVU5HTEdWQlFVOHNSMEZCUnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF6dFBRVU14UWpzN1FVRkZSQ3hoUVVGUExFVkJRVVVzUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1MwRkROMEk3UjBGRFJpeERRVUZETEVOQlFVTTdRMEZEU2lJc0ltWnBiR1VpT2lKaWJHOWpheTFvWld4d1pYSXRiV2x6YzJsdVp5NXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3SUdGd2NHVnVaRU52Ym5SbGVIUlFZWFJvTENCamNtVmhkR1ZHY21GdFpTd2dhWE5CY25KaGVTQjlJR1p5YjIwZ0p5NHVMM1YwYVd4ekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNG9hVzV6ZEdGdVkyVXBJSHRjYmlBZ2FXNXpkR0Z1WTJVdWNtVm5hWE4wWlhKSVpXeHdaWElvSjJKc2IyTnJTR1ZzY0dWeVRXbHpjMmx1Wnljc0lHWjFibU4wYVc5dUtHTnZiblJsZUhRc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNCc1pYUWdhVzUyWlhKelpTQTlJRzl3ZEdsdmJuTXVhVzUyWlhKelpTeGNiaUFnSUNBZ0lHWnVJRDBnYjNCMGFXOXVjeTVtYmp0Y2JseHVJQ0FnSUdsbUlDaGpiMjUwWlhoMElEMDlQU0IwY25WbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptNG9kR2hwY3lrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoamIyNTBaWGgwSUQwOVBTQm1ZV3h6WlNCOGZDQmpiMjUwWlhoMElEMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCcGJuWmxjbk5sS0hSb2FYTXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9hWE5CY25KaGVTaGpiMjUwWlhoMEtTa2dlMXh1SUNBZ0lDQWdhV1lnS0dOdmJuUmxlSFF1YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVwWkhNcElIdGNiaUFnSUNBZ0lDQWdJQ0J2Y0hScGIyNXpMbWxrY3lBOUlGdHZjSFJwYjI1ekxtNWhiV1ZkTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHbHVjM1JoYm1ObExtaGxiSEJsY25NdVpXRmphQ2hqYjI1MFpYaDBMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnBiblpsY25ObEtIUm9hWE1wTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVrWVhSaElDWW1JRzl3ZEdsdmJuTXVhV1J6S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JrWVhSaElEMGdZM0psWVhSbFJuSmhiV1VvYjNCMGFXOXVjeTVrWVhSaEtUdGNiaUFnSUNBZ0lDQWdaR0YwWVM1amIyNTBaWGgwVUdGMGFDQTlJR0Z3Y0dWdVpFTnZiblJsZUhSUVlYUm9LRnh1SUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk11WkdGMFlTNWpiMjUwWlhoMFVHRjBhQ3hjYmlBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6TG01aGJXVmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnYjNCMGFXOXVjeUE5SUhzZ1pHRjBZVG9nWkdGMFlTQjlPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabTRvWTI5dWRHVjRkQ3dnYjNCMGFXOXVjeWs3WEc0Z0lDQWdmVnh1SUNCOUtUdGNibjFjYmlKZGZRPT1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbnZhciBfZXhjZXB0aW9uID0gcmVxdWlyZSgnLi4vZXhjZXB0aW9uJyk7XG5cbnZhciBfZXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4Y2VwdGlvbik7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignZWFjaCcsIGZ1bmN0aW9uIChjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnTXVzdCBwYXNzIGl0ZXJhdG9yIHRvICNlYWNoJyk7XG4gICAgfVxuXG4gICAgdmFyIGZuID0gb3B0aW9ucy5mbixcbiAgICAgICAgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIHJldCA9ICcnLFxuICAgICAgICBkYXRhID0gdW5kZWZpbmVkLFxuICAgICAgICBjb250ZXh0UGF0aCA9IHVuZGVmaW5lZDtcblxuICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgIGNvbnRleHRQYXRoID0gX3V0aWxzLmFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5pZHNbMF0pICsgJy4nO1xuICAgIH1cblxuICAgIGlmIChfdXRpbHMuaXNGdW5jdGlvbihjb250ZXh0KSkge1xuICAgICAgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5kYXRhKSB7XG4gICAgICBkYXRhID0gX3V0aWxzLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhlY0l0ZXJhdGlvbihmaWVsZCwgaW5kZXgsIGxhc3QpIHtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGRhdGEua2V5ID0gZmllbGQ7XG4gICAgICAgIGRhdGEuaW5kZXggPSBpbmRleDtcbiAgICAgICAgZGF0YS5maXJzdCA9IGluZGV4ID09PSAwO1xuICAgICAgICBkYXRhLmxhc3QgPSAhIWxhc3Q7XG5cbiAgICAgICAgaWYgKGNvbnRleHRQYXRoKSB7XG4gICAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGNvbnRleHRQYXRoICsgZmllbGQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0ID0gcmV0ICsgZm4oY29udGV4dFtmaWVsZF0sIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgYmxvY2tQYXJhbXM6IF91dGlscy5ibG9ja1BhcmFtcyhbY29udGV4dFtmaWVsZF0sIGZpZWxkXSwgW2NvbnRleHRQYXRoICsgZmllbGQsIG51bGxdKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoX3V0aWxzLmlzQXJyYXkoY29udGV4dCkpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IGNvbnRleHQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgaWYgKGkgaW4gY29udGV4dCkge1xuICAgICAgICAgICAgZXhlY0l0ZXJhdGlvbihpLCBpLCBpID09PSBjb250ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChnbG9iYWwuU3ltYm9sICYmIGNvbnRleHRbZ2xvYmFsLlN5bWJvbC5pdGVyYXRvcl0pIHtcbiAgICAgICAgdmFyIG5ld0NvbnRleHQgPSBbXTtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gY29udGV4dFtnbG9iYWwuU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgICBmb3IgKHZhciBpdCA9IGl0ZXJhdG9yLm5leHQoKTsgIWl0LmRvbmU7IGl0ID0gaXRlcmF0b3IubmV4dCgpKSB7XG4gICAgICAgICAgbmV3Q29udGV4dC5wdXNoKGl0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0ID0gbmV3Q29udGV4dDtcbiAgICAgICAgZm9yICh2YXIgaiA9IGNvbnRleHQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgZXhlY0l0ZXJhdGlvbihpLCBpLCBpID09PSBjb250ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBwcmlvcktleSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgIE9iamVjdC5rZXlzKGNvbnRleHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgLy8gV2UncmUgcnVubmluZyB0aGUgaXRlcmF0aW9ucyBvbmUgc3RlcCBvdXQgb2Ygc3luYyBzbyB3ZSBjYW4gZGV0ZWN0XG4gICAgICAgICAgICAvLyB0aGUgbGFzdCBpdGVyYXRpb24gd2l0aG91dCBoYXZlIHRvIHNjYW4gdGhlIG9iamVjdCB0d2ljZSBhbmQgY3JlYXRlXG4gICAgICAgICAgICAvLyBhbiBpdGVybWVkaWF0ZSBrZXlzIGFycmF5LlxuICAgICAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgZXhlY0l0ZXJhdGlvbihwcmlvcktleSwgaSAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJpb3JLZXkgPSBrZXk7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV4ZWNJdGVyYXRpb24ocHJpb3JLZXksIGkgLSAxLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIHJldCA9IGludmVyc2UodGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyaGxiSEJsY25NdlpXRmphQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPM0ZDUVUxUExGVkJRVlU3TzNsQ1FVTkxMR05CUVdNN096czdjVUpCUlhKQ0xGVkJRVk1zVVVGQlVTeEZRVUZGTzBGQlEyaERMRlZCUVZFc1EwRkJReXhqUVVGakxFTkJRVU1zVFVGQlRTeEZRVUZGTEZWQlFWTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1JVRkJSVHRCUVVONlJDeFJRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZPMEZCUTFvc1dVRkJUU3d5UWtGQll5dzJRa0ZCTmtJc1EwRkJReXhEUVVGRE8wdEJRM0JFT3p0QlFVVkVMRkZCUVVrc1JVRkJSU3hIUVVGSExFOUJRVThzUTBGQlF5eEZRVUZGTzFGQlEycENMRTlCUVU4c1IwRkJSeXhQUVVGUExFTkJRVU1zVDBGQlR6dFJRVU42UWl4RFFVRkRMRWRCUVVjc1EwRkJRenRSUVVOTUxFZEJRVWNzUjBGQlJ5eEZRVUZGTzFGQlExSXNTVUZCU1N4WlFVRkJPMUZCUTBvc1YwRkJWeXhaUVVGQkxFTkJRVU03TzBGQlJXUXNVVUZCU1N4UFFVRlBMRU5CUVVNc1NVRkJTU3hKUVVGSkxFOUJRVThzUTBGQlF5eEhRVUZITEVWQlFVVTdRVUZETDBJc2FVSkJRVmNzUjBGRFZDeDVRa0ZCYTBJc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVWQlFVVXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVkQlFVY3NRMEZCUXp0TFFVTnlSVHM3UVVGRlJDeFJRVUZKTEd0Q1FVRlhMRTlCUVU4c1EwRkJReXhGUVVGRk8wRkJRM1pDTEdGQlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzB0QlF6bENPenRCUVVWRUxGRkJRVWtzVDBGQlR5eERRVUZETEVsQlFVa3NSVUZCUlR0QlFVTm9RaXhWUVVGSkxFZEJRVWNzYlVKQlFWa3NUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wdEJRMnhET3p0QlFVVkVMR0ZCUVZNc1lVRkJZU3hEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTVUZCU1N4RlFVRkZPMEZCUTNwRExGVkJRVWtzU1VGQlNTeEZRVUZGTzBGQlExSXNXVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhMUVVGTExFTkJRVU03UVVGRGFrSXNXVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU03UVVGRGJrSXNXVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEzcENMRmxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXpzN1FVRkZia0lzV1VGQlNTeFhRVUZYTEVWQlFVVTdRVUZEWml4alFVRkpMRU5CUVVNc1YwRkJWeXhIUVVGSExGZEJRVmNzUjBGQlJ5eExRVUZMTEVOQlFVTTdVMEZEZUVNN1QwRkRSanM3UVVGRlJDeFRRVUZITEVkQlEwUXNSMEZCUnl4SFFVTklMRVZCUVVVc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVTdRVUZEYWtJc1dVRkJTU3hGUVVGRkxFbEJRVWs3UVVGRFZpeHRRa0ZCVnl4RlFVRkZMRzFDUVVOWUxFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZMRXRCUVVzc1EwRkJReXhGUVVOMlFpeERRVUZETEZkQlFWY3NSMEZCUnl4TFFVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRelZDTzA5QlEwWXNRMEZCUXl4RFFVRkRPMHRCUTA0N08wRkJSVVFzVVVGQlNTeFBRVUZQTEVsQlFVa3NUMEZCVHl4UFFVRlBMRXRCUVVzc1VVRkJVU3hGUVVGRk8wRkJRekZETEZWQlFVa3NaVUZCVVN4UFFVRlBMRU5CUVVNc1JVRkJSVHRCUVVOd1FpeGhRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRTlCUVU4c1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVOMlF5eGpRVUZKTEVOQlFVTXNTVUZCU1N4UFFVRlBMRVZCUVVVN1FVRkRhRUlzZVVKQlFXRXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUzBGQlN5eFBRVUZQTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8xZEJReTlETzFOQlEwWTdUMEZEUml4TlFVRk5MRWxCUVVrc1RVRkJUU3hEUVVGRExFMUJRVTBzU1VGQlNTeFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zUlVGQlJUdEJRVU16UkN4WlFVRk5MRlZCUVZVc1IwRkJSeXhGUVVGRkxFTkJRVU03UVVGRGRFSXNXVUZCVFN4UlFVRlJMRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRVZCUVVVc1EwRkJRenRCUVVOdVJDeGhRVUZMTEVsQlFVa3NSVUZCUlN4SFFVRkhMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpMRVZCUVVVc1JVRkJSU3hIUVVGSExGRkJRVkVzUTBGQlF5eEpRVUZKTEVWQlFVVXNSVUZCUlR0QlFVTTNSQ3h2UWtGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03VTBGRE0wSTdRVUZEUkN4bFFVRlBMRWRCUVVjc1ZVRkJWU3hEUVVGRE8wRkJRM0pDTEdGQlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8wRkJRM1pETEhWQ1FVRmhMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEV0QlFVc3NUMEZCVHl4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU12UXp0UFFVTkdMRTFCUVUwN08wRkJRMHdzWTBGQlNTeFJRVUZSTEZsQlFVRXNRMEZCUXpzN1FVRkZZaXhuUWtGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlFTeEhRVUZITEVWQlFVazdPenM3UVVGSmJFTXNaMEpCUVVrc1VVRkJVU3hMUVVGTExGTkJRVk1zUlVGQlJUdEJRVU14UWl3eVFrRkJZU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1lVRkRhRU03UVVGRFJDeHZRa0ZCVVN4SFFVRkhMRWRCUVVjc1EwRkJRenRCUVVObUxHRkJRVU1zUlVGQlJTeERRVUZETzFkQlEwd3NRMEZCUXl4RFFVRkRPMEZCUTBnc1kwRkJTU3hSUVVGUkxFdEJRVXNzVTBGQlV5eEZRVUZGTzBGQlF6RkNMSGxDUVVGaExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03VjBGRGRFTTdPMDlCUTBZN1MwRkRSanM3UVVGRlJDeFJRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVN1FVRkRXQ3hUUVVGSExFZEJRVWNzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUTNKQ096dEJRVVZFTEZkQlFVOHNSMEZCUnl4RFFVRkRPMGRCUTFvc1EwRkJReXhEUVVGRE8wTkJRMG9pTENKbWFXeGxJam9pWldGamFDNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3WEc0Z0lHRndjR1Z1WkVOdmJuUmxlSFJRWVhSb0xGeHVJQ0JpYkc5amExQmhjbUZ0Y3l4Y2JpQWdZM0psWVhSbFJuSmhiV1VzWEc0Z0lHbHpRWEp5WVhrc1hHNGdJR2x6Um5WdVkzUnBiMjVjYm4wZ1puSnZiU0FuTGk0dmRYUnBiSE1uTzF4dWFXMXdiM0owSUVWNFkyVndkR2x2YmlCbWNtOXRJQ2N1TGk5bGVHTmxjSFJwYjI0bk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpaHBibk4wWVc1alpTa2dlMXh1SUNCcGJuTjBZVzVqWlM1eVpXZHBjM1JsY2tobGJIQmxjaWduWldGamFDY3NJR1oxYm1OMGFXOXVLR052Ym5SbGVIUXNJRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQnBaaUFvSVc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmVHTmxjSFJwYjI0b0owMTFjM1FnY0dGemN5QnBkR1Z5WVhSdmNpQjBieUFqWldGamFDY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHeGxkQ0JtYmlBOUlHOXdkR2x2Ym5NdVptNHNYRzRnSUNBZ0lDQnBiblpsY25ObElEMGdiM0IwYVc5dWN5NXBiblpsY25ObExGeHVJQ0FnSUNBZ2FTQTlJREFzWEc0Z0lDQWdJQ0J5WlhRZ1BTQW5KeXhjYmlBZ0lDQWdJR1JoZEdFc1hHNGdJQ0FnSUNCamIyNTBaWGgwVUdGMGFEdGNibHh1SUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbVJoZEdFZ0ppWWdiM0IwYVc5dWN5NXBaSE1wSUh0Y2JpQWdJQ0FnSUdOdmJuUmxlSFJRWVhSb0lEMWNiaUFnSUNBZ0lDQWdZWEJ3Wlc1a1EyOXVkR1Y0ZEZCaGRHZ29iM0IwYVc5dWN5NWtZWFJoTG1OdmJuUmxlSFJRWVhSb0xDQnZjSFJwYjI1ekxtbGtjMXN3WFNrZ0t5QW5MaWM3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dselJuVnVZM1JwYjI0b1kyOXVkR1Y0ZENrcElIdGNiaUFnSUNBZ0lHTnZiblJsZUhRZ1BTQmpiMjUwWlhoMExtTmhiR3dvZEdocGN5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVaR0YwWVNrZ2UxeHVJQ0FnSUNBZ1pHRjBZU0E5SUdOeVpXRjBaVVp5WVcxbEtHOXdkR2x2Ym5NdVpHRjBZU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdablZ1WTNScGIyNGdaWGhsWTBsMFpYSmhkR2x2YmlobWFXVnNaQ3dnYVc1a1pYZ3NJR3hoYzNRcElIdGNiaUFnSUNBZ0lHbG1JQ2hrWVhSaEtTQjdYRzRnSUNBZ0lDQWdJR1JoZEdFdWEyVjVJRDBnWm1sbGJHUTdYRzRnSUNBZ0lDQWdJR1JoZEdFdWFXNWtaWGdnUFNCcGJtUmxlRHRjYmlBZ0lDQWdJQ0FnWkdGMFlTNW1hWEp6ZENBOUlHbHVaR1Y0SUQwOVBTQXdPMXh1SUNBZ0lDQWdJQ0JrWVhSaExteGhjM1FnUFNBaElXeGhjM1E3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR052Ym5SbGVIUlFZWFJvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdaR0YwWVM1amIyNTBaWGgwVUdGMGFDQTlJR052Ym5SbGVIUlFZWFJvSUNzZ1ptbGxiR1E3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBJRDFjYmlBZ0lDQWdJQ0FnY21WMElDdGNiaUFnSUNBZ0lDQWdabTRvWTI5dWRHVjRkRnRtYVdWc1pGMHNJSHRjYmlBZ0lDQWdJQ0FnSUNCa1lYUmhPaUJrWVhSaExGeHVJQ0FnSUNBZ0lDQWdJR0pzYjJOclVHRnlZVzF6T2lCaWJHOWphMUJoY21GdGN5aGNiaUFnSUNBZ0lDQWdJQ0FnSUZ0amIyNTBaWGgwVzJacFpXeGtYU3dnWm1sbGJHUmRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1cyTnZiblJsZUhSUVlYUm9JQ3NnWm1sbGJHUXNJRzUxYkd4ZFhHNGdJQ0FnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb1kyOXVkR1Y0ZENBbUppQjBlWEJsYjJZZ1kyOXVkR1Y0ZENBOVBUMGdKMjlpYW1WamRDY3BJSHRjYmlBZ0lDQWdJR2xtSUNocGMwRnljbUY1S0dOdmJuUmxlSFFwS1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHb2dQU0JqYjI1MFpYaDBMbXhsYm1kMGFEc2dhU0E4SUdvN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hwSUdsdUlHTnZiblJsZUhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWNFpXTkpkR1Z5WVhScGIyNG9hU3dnYVN3Z2FTQTlQVDBnWTI5dWRHVjRkQzVzWlc1bmRHZ2dMU0F4S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvWjJ4dlltRnNMbE41YldKdmJDQW1KaUJqYjI1MFpYaDBXMmRzYjJKaGJDNVRlVzFpYjJ3dWFYUmxjbUYwYjNKZEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHNWxkME52Ym5SbGVIUWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYVhSbGNtRjBiM0lnUFNCamIyNTBaWGgwVzJkc2IySmhiQzVUZVcxaWIyd3VhWFJsY21GMGIzSmRLQ2s3WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdsMElEMGdhWFJsY21GMGIzSXVibVY0ZENncE95QWhhWFF1Wkc5dVpUc2dhWFFnUFNCcGRHVnlZWFJ2Y2k1dVpYaDBLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQnVaWGREYjI1MFpYaDBMbkIxYzJnb2FYUXVkbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR052Ym5SbGVIUWdQU0J1WlhkRGIyNTBaWGgwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcUlEMGdZMjl1ZEdWNGRDNXNaVzVuZEdnN0lHa2dQQ0JxT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNCbGVHVmpTWFJsY21GMGFXOXVLR2tzSUdrc0lHa2dQVDA5SUdOdmJuUmxlSFF1YkdWdVozUm9JQzBnTVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J3Y21sdmNrdGxlVHRjYmx4dUlDQWdJQ0FnSUNCUFltcGxZM1F1YTJWNWN5aGpiMjUwWlhoMEtTNW1iM0pGWVdOb0tHdGxlU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnVjJVbmNtVWdjblZ1Ym1sdVp5QjBhR1VnYVhSbGNtRjBhVzl1Y3lCdmJtVWdjM1JsY0NCdmRYUWdiMllnYzNsdVl5QnpieUIzWlNCallXNGdaR1YwWldOMFhHNGdJQ0FnSUNBZ0lDQWdMeThnZEdobElHeGhjM1FnYVhSbGNtRjBhVzl1SUhkcGRHaHZkWFFnYUdGMlpTQjBieUJ6WTJGdUlIUm9aU0J2WW1wbFkzUWdkSGRwWTJVZ1lXNWtJR055WldGMFpWeHVJQ0FnSUNBZ0lDQWdJQzh2SUdGdUlHbDBaWEp0WldScFlYUmxJR3RsZVhNZ1lYSnlZWGt1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSEJ5YVc5eVMyVjVJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWNFpXTkpkR1Z5WVhScGIyNG9jSEpwYjNKTFpYa3NJR2tnTFNBeEtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2NISnBiM0pMWlhrZ1BTQnJaWGs3WEc0Z0lDQWdJQ0FnSUNBZ2FTc3JPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJ5YVc5eVMyVjVJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0JsZUdWalNYUmxjbUYwYVc5dUtIQnlhVzl5UzJWNUxDQnBJQzBnTVN3Z2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2FTQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ2NtVjBJRDBnYVc1MlpYSnpaU2gwYUdsektUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnY21WME8xeHVJQ0I5S1R0Y2JuMWNiaUpkZlE9PVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX2V4Y2VwdGlvbiA9IHJlcXVpcmUoJy4uL2V4Y2VwdGlvbicpO1xuXG52YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbiAoKSAvKiBbYXJncywgXW9wdGlvbnMgKi97XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIC8vIEEgbWlzc2luZyBmaWVsZCBpbiBhIHt7Zm9vfX0gY29uc3RydWN0LlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU29tZW9uZSBpcyBhY3R1YWxseSB0cnlpbmcgdG8gY2FsbCBzb21ldGhpbmcsIGJsb3cgdXAuXG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnTWlzc2luZyBoZWxwZXI6IFwiJyArIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV0ubmFtZSArICdcIicpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyaGxiSEJsY25NdmFHVnNjR1Z5TFcxcGMzTnBibWN1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenQ1UWtGQmMwSXNZMEZCWXpzN096dHhRa0ZGY2tJc1ZVRkJVeXhSUVVGUkxFVkJRVVU3UVVGRGFFTXNWVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhsUVVGbExFVkJRVVVzYVVOQlFXZERPMEZCUTNaRkxGRkJRVWtzVTBGQlV5eERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRMRVZCUVVVN08wRkJSVEZDTEdGQlFVOHNVMEZCVXl4RFFVRkRPMHRCUTJ4Q0xFMUJRVTA3TzBGQlJVd3NXVUZCVFN3eVFrRkRTaXh0UWtGQmJVSXNSMEZCUnl4VFFVRlRMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRWRCUVVjc1IwRkJSeXhEUVVOcVJTeERRVUZETzB0QlEwZzdSMEZEUml4RFFVRkRMRU5CUVVNN1EwRkRTaUlzSW1acGJHVWlPaUpvWld4d1pYSXRiV2x6YzJsdVp5NXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0JGZUdObGNIUnBiMjRnWm5KdmJTQW5MaTR2WlhoalpYQjBhVzl1Snp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0b2FXNXpkR0Z1WTJVcElIdGNiaUFnYVc1emRHRnVZMlV1Y21WbmFYTjBaWEpJWld4d1pYSW9KMmhsYkhCbGNrMXBjM05wYm1jbkxDQm1kVzVqZEdsdmJpZ3ZLaUJiWVhKbmN5d2dYVzl3ZEdsdmJuTWdLaThwSUh0Y2JpQWdJQ0JwWmlBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBOVBUMGdNU2tnZTF4dUlDQWdJQ0FnTHk4Z1FTQnRhWE56YVc1bklHWnBaV3hrSUdsdUlHRWdlM3RtYjI5OWZTQmpiMjV6ZEhKMVkzUXVYRzRnSUNBZ0lDQnlaWFIxY200Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0F2THlCVGIyMWxiMjVsSUdseklHRmpkSFZoYkd4NUlIUnllV2x1WnlCMGJ5QmpZV3hzSUhOdmJXVjBhR2x1Wnl3Z1lteHZkeUIxY0M1Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmVHTmxjSFJwYjI0b1hHNGdJQ0FnSUNBZ0lDZE5hWE56YVc1bklHaGxiSEJsY2pvZ1hDSW5JQ3NnWVhKbmRXMWxiblJ6VzJGeVozVnRaVzUwY3k1c1pXNW5kR2dnTFNBeFhTNXVZVzFsSUNzZ0oxd2lKMXh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzRnSUgwcE8xeHVmVnh1SWwxOVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9leGNlcHRpb24gPSByZXF1aXJlKCcuLi9leGNlcHRpb24nKTtcblxudmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdpZicsIGZ1bmN0aW9uIChjb25kaXRpb25hbCwgb3B0aW9ucykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9IDIpIHtcbiAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCcjaWYgcmVxdWlyZXMgZXhhY3RseSBvbmUgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgaWYgKF91dGlscy5pc0Z1bmN0aW9uKGNvbmRpdGlvbmFsKSkge1xuICAgICAgY29uZGl0aW9uYWwgPSBjb25kaXRpb25hbC5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIC8vIERlZmF1bHQgYmVoYXZpb3IgaXMgdG8gcmVuZGVyIHRoZSBwb3NpdGl2ZSBwYXRoIGlmIHRoZSB2YWx1ZSBpcyB0cnV0aHkgYW5kIG5vdCBlbXB0eS5cbiAgICAvLyBUaGUgYGluY2x1ZGVaZXJvYCBvcHRpb24gbWF5IGJlIHNldCB0byB0cmVhdCB0aGUgY29uZHRpb25hbCBhcyBwdXJlbHkgbm90IGVtcHR5IGJhc2VkIG9uIHRoZVxuICAgIC8vIGJlaGF2aW9yIG9mIGlzRW1wdHkuIEVmZmVjdGl2ZWx5IHRoaXMgZGV0ZXJtaW5lcyBpZiAwIGlzIGhhbmRsZWQgYnkgdGhlIHBvc2l0aXZlIHBhdGggb3IgbmVnYXRpdmUuXG4gICAgaWYgKCFvcHRpb25zLmhhc2guaW5jbHVkZVplcm8gJiYgIWNvbmRpdGlvbmFsIHx8IF91dGlscy5pc0VtcHR5KGNvbmRpdGlvbmFsKSkge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuZm4odGhpcyk7XG4gICAgfVxuICB9KTtcblxuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcigndW5sZXNzJywgZnVuY3Rpb24gKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT0gMikge1xuICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJyN1bmxlc3MgcmVxdWlyZXMgZXhhY3RseSBvbmUgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnNbJ2lmJ10uY2FsbCh0aGlzLCBjb25kaXRpb25hbCwge1xuICAgICAgZm46IG9wdGlvbnMuaW52ZXJzZSxcbiAgICAgIGludmVyc2U6IG9wdGlvbnMuZm4sXG4gICAgICBoYXNoOiBvcHRpb25zLmhhc2hcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyaGxiSEJsY25NdmFXWXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096dHhRa0ZCYjBNc1ZVRkJWVHM3ZVVKQlEzaENMR05CUVdNN096czdjVUpCUlhKQ0xGVkJRVk1zVVVGQlVTeEZRVUZGTzBGQlEyaERMRlZCUVZFc1EwRkJReXhqUVVGakxFTkJRVU1zU1VGQlNTeEZRVUZGTEZWQlFWTXNWMEZCVnl4RlFVRkZMRTlCUVU4c1JVRkJSVHRCUVVNelJDeFJRVUZKTEZOQlFWTXNRMEZCUXl4TlFVRk5MRWxCUVVrc1EwRkJReXhGUVVGRk8wRkJRM3BDTEZsQlFVMHNNa0pCUVdNc2JVTkJRVzFETEVOQlFVTXNRMEZCUXp0TFFVTXhSRHRCUVVORUxGRkJRVWtzYTBKQlFWY3NWMEZCVnl4RFFVRkRMRVZCUVVVN1FVRkRNMElzYVVKQlFWY3NSMEZCUnl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzB0QlEzUkRPenM3T3p0QlFVdEVMRkZCUVVrc1FVRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4SlFVRkpMRU5CUVVNc1YwRkJWeXhKUVVGTExHVkJRVkVzVjBGQlZ5eERRVUZETEVWQlFVVTdRVUZEZGtVc1lVRkJUeXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUXpsQ0xFMUJRVTA3UVVGRFRDeGhRVUZQTEU5QlFVOHNRMEZCUXl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UzBGRGVrSTdSMEZEUml4RFFVRkRMRU5CUVVNN08wRkJSVWdzVlVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4UlFVRlJMRVZCUVVVc1ZVRkJVeXhYUVVGWExFVkJRVVVzVDBGQlR5eEZRVUZGTzBGQlF5OUVMRkZCUVVrc1UwRkJVeXhEUVVGRExFMUJRVTBzU1VGQlNTeERRVUZETEVWQlFVVTdRVUZEZWtJc1dVRkJUU3d5UWtGQll5eDFRMEZCZFVNc1EwRkJReXhEUVVGRE8wdEJRemxFTzBGQlEwUXNWMEZCVHl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1YwRkJWeXhGUVVGRk8wRkJRM0JFTEZGQlFVVXNSVUZCUlN4UFFVRlBMRU5CUVVNc1QwRkJUenRCUVVOdVFpeGhRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRMRVZCUVVVN1FVRkRia0lzVlVGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXl4SlFVRkpPMHRCUTI1Q0xFTkJRVU1zUTBGQlF6dEhRVU5LTEVOQlFVTXNRMEZCUXp0RFFVTktJaXdpWm1sc1pTSTZJbWxtTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIc2dhWE5GYlhCMGVTd2dhWE5HZFc1amRHbHZiaUI5SUdaeWIyMGdKeTR1TDNWMGFXeHpKenRjYm1sdGNHOXlkQ0JGZUdObGNIUnBiMjRnWm5KdmJTQW5MaTR2WlhoalpYQjBhVzl1Snp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0b2FXNXpkR0Z1WTJVcElIdGNiaUFnYVc1emRHRnVZMlV1Y21WbmFYTjBaWEpJWld4d1pYSW9KMmxtSnl3Z1puVnVZM1JwYjI0b1kyOXVaR2wwYVc5dVlXd3NJRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQnBaaUFvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0FoUFNBeUtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWGhqWlhCMGFXOXVLQ2NqYVdZZ2NtVnhkV2x5WlhNZ1pYaGhZM1JzZVNCdmJtVWdZWEpuZFcxbGJuUW5LVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR2x6Um5WdVkzUnBiMjRvWTI5dVpHbDBhVzl1WVd3cEtTQjdYRzRnSUNBZ0lDQmpiMjVrYVhScGIyNWhiQ0E5SUdOdmJtUnBkR2x2Ym1Gc0xtTmhiR3dvZEdocGN5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdSR1ZtWVhWc2RDQmlaV2hoZG1sdmNpQnBjeUIwYnlCeVpXNWtaWElnZEdobElIQnZjMmwwYVhabElIQmhkR2dnYVdZZ2RHaGxJSFpoYkhWbElHbHpJSFJ5ZFhSb2VTQmhibVFnYm05MElHVnRjSFI1TGx4dUlDQWdJQzh2SUZSb1pTQmdhVzVqYkhWa1pWcGxjbTlnSUc5d2RHbHZiaUJ0WVhrZ1ltVWdjMlYwSUhSdklIUnlaV0YwSUhSb1pTQmpiMjVrZEdsdmJtRnNJR0Z6SUhCMWNtVnNlU0J1YjNRZ1pXMXdkSGtnWW1GelpXUWdiMjRnZEdobFhHNGdJQ0FnTHk4Z1ltVm9ZWFpwYjNJZ2IyWWdhWE5GYlhCMGVTNGdSV1ptWldOMGFYWmxiSGtnZEdocGN5QmtaWFJsY20xcGJtVnpJR2xtSURBZ2FYTWdhR0Z1Wkd4bFpDQmllU0IwYUdVZ2NHOXphWFJwZG1VZ2NHRjBhQ0J2Y2lCdVpXZGhkR2wyWlM1Y2JpQWdJQ0JwWmlBb0tDRnZjSFJwYjI1ekxtaGhjMmd1YVc1amJIVmtaVnBsY204Z0ppWWdJV052Ym1ScGRHbHZibUZzS1NCOGZDQnBjMFZ0Y0hSNUtHTnZibVJwZEdsdmJtRnNLU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzl3ZEdsdmJuTXVhVzUyWlhKelpTaDBhR2x6S1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHOXdkR2x2Ym5NdVptNG9kR2hwY3lrN1hHNGdJQ0FnZlZ4dUlDQjlLVHRjYmx4dUlDQnBibk4wWVc1alpTNXlaV2RwYzNSbGNraGxiSEJsY2lnbmRXNXNaWE56Snl3Z1puVnVZM1JwYjI0b1kyOXVaR2wwYVc5dVlXd3NJRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQnBaaUFvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0FoUFNBeUtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWGhqWlhCMGFXOXVLQ2NqZFc1c1pYTnpJSEpsY1hWcGNtVnpJR1Y0WVdOMGJIa2diMjVsSUdGeVozVnRaVzUwSnlrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnBibk4wWVc1alpTNW9aV3h3WlhKeld5ZHBaaWRkTG1OaGJHd29kR2hwY3l3Z1kyOXVaR2wwYVc5dVlXd3NJSHRjYmlBZ0lDQWdJR1p1T2lCdmNIUnBiMjV6TG1sdWRtVnljMlVzWEc0Z0lDQWdJQ0JwYm5abGNuTmxPaUJ2Y0hScGIyNXpMbVp1TEZ4dUlDQWdJQ0FnYUdGemFEb2diM0IwYVc5dWN5NW9ZWE5vWEc0Z0lDQWdmU2s3WEc0Z0lIMHBPMXh1ZlZ4dUlsMTlcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb2cnLCBmdW5jdGlvbiAoKSAvKiBtZXNzYWdlLCBvcHRpb25zICove1xuICAgIHZhciBhcmdzID0gW3VuZGVmaW5lZF0sXG4gICAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgfVxuXG4gICAgdmFyIGxldmVsID0gMTtcbiAgICBpZiAob3B0aW9ucy5oYXNoLmxldmVsICE9IG51bGwpIHtcbiAgICAgIGxldmVsID0gb3B0aW9ucy5oYXNoLmxldmVsO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuZGF0YS5sZXZlbCAhPSBudWxsKSB7XG4gICAgICBsZXZlbCA9IG9wdGlvbnMuZGF0YS5sZXZlbDtcbiAgICB9XG4gICAgYXJnc1swXSA9IGxldmVsO1xuXG4gICAgaW5zdGFuY2UubG9nLmFwcGx5KGluc3RhbmNlLCBhcmdzKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyaGxiSEJsY25NdmJHOW5MbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN2NVSkJRV1VzVlVGQlV5eFJRVUZSTEVWQlFVVTdRVUZEYUVNc1ZVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eExRVUZMTEVWQlFVVXNhME5CUVdsRE8wRkJRemxFTEZGQlFVa3NTVUZCU1N4SFFVRkhMRU5CUVVNc1UwRkJVeXhEUVVGRE8xRkJRM0JDTEU5QlFVOHNSMEZCUnl4VFFVRlRMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTTFReXhUUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1UwRkJVeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1FVRkROME1zVlVGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dExRVU42UWpzN1FVRkZSQ3hSUVVGSkxFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEWkN4UlFVRkpMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTTVRaXhYUVVGTExFZEJRVWNzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNN1MwRkROVUlzVFVGQlRTeEpRVUZKTEU5QlFVOHNRMEZCUXl4SlFVRkpMRWxCUVVrc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVsQlFVa3NTVUZCU1N4RlFVRkZPMEZCUTNKRUxGZEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenRMUVVNMVFqdEJRVU5FTEZGQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU03TzBGQlJXaENMRmxCUVZFc1EwRkJReXhIUVVGSExFMUJRVUVzUTBGQldpeFJRVUZSTEVWQlFWRXNTVUZCU1N4RFFVRkRMRU5CUVVNN1IwRkRka0lzUTBGQlF5eERRVUZETzBOQlEwb2lMQ0ptYVd4bElqb2liRzluTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2laWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0b2FXNXpkR0Z1WTJVcElIdGNiaUFnYVc1emRHRnVZMlV1Y21WbmFYTjBaWEpJWld4d1pYSW9KMnh2Wnljc0lHWjFibU4wYVc5dUtDOHFJRzFsYzNOaFoyVXNJRzl3ZEdsdmJuTWdLaThwSUh0Y2JpQWdJQ0JzWlhRZ1lYSm5jeUE5SUZ0MWJtUmxabWx1WldSZExGeHVJQ0FnSUNBZ2IzQjBhVzl1Y3lBOUlHRnlaM1Z0Wlc1MGMxdGhjbWQxYldWdWRITXViR1Z1WjNSb0lDMGdNVjA3WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JQzBnTVRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0JoY21kekxuQjFjMmdvWVhKbmRXMWxiblJ6VzJsZEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCc1pYUWdiR1YyWld3Z1BTQXhPMXh1SUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbWhoYzJndWJHVjJaV3dnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnYkdWMlpXd2dQU0J2Y0hScGIyNXpMbWhoYzJndWJHVjJaV3c3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h2Y0hScGIyNXpMbVJoZEdFZ0ppWWdiM0IwYVc5dWN5NWtZWFJoTG14bGRtVnNJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJR3hsZG1Wc0lEMGdiM0IwYVc5dWN5NWtZWFJoTG14bGRtVnNPMXh1SUNBZ0lIMWNiaUFnSUNCaGNtZHpXekJkSUQwZ2JHVjJaV3c3WEc1Y2JpQWdJQ0JwYm5OMFlXNWpaUzVzYjJjb0xpNHVZWEpuY3lrN1hHNGdJSDBwTzF4dWZWeHVJbDE5XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignbG9va3VwJywgZnVuY3Rpb24gKG9iaiwgZmllbGQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9iaikge1xuICAgICAgLy8gTm90ZSBmb3IgNS4wOiBDaGFuZ2UgdG8gXCJvYmogPT0gbnVsbFwiIGluIDUuMFxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnMubG9va3VwUHJvcGVydHkob2JqLCBmaWVsZCk7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMmhsYkhCbGNuTXZiRzl2YTNWd0xtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3Y1VKQlFXVXNWVUZCVXl4UlFVRlJMRVZCUVVVN1FVRkRhRU1zVlVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4UlFVRlJMRVZCUVVVc1ZVRkJVeXhIUVVGSExFVkJRVVVzUzBGQlN5eEZRVUZGTEU5QlFVOHNSVUZCUlR0QlFVTTVSQ3hSUVVGSkxFTkJRVU1zUjBGQlJ5eEZRVUZGT3p0QlFVVlNMR0ZCUVU4c1IwRkJSeXhEUVVGRE8wdEJRMW83UVVGRFJDeFhRVUZQTEU5QlFVOHNRMEZCUXl4alFVRmpMRU5CUVVNc1IwRkJSeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzBkQlF6TkRMRU5CUVVNc1EwRkJRenREUVVOS0lpd2labWxzWlNJNklteHZiMnQxY0M1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUtHbHVjM1JoYm1ObEtTQjdYRzRnSUdsdWMzUmhibU5sTG5KbFoybHpkR1Z5U0dWc2NHVnlLQ2RzYjI5cmRYQW5MQ0JtZFc1amRHbHZiaWh2WW1vc0lHWnBaV3hrTENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnYVdZZ0tDRnZZbW9wSUh0Y2JpQWdJQ0FnSUM4dklFNXZkR1VnWm05eUlEVXVNRG9nUTJoaGJtZGxJSFJ2SUZ3aWIySnFJRDA5SUc1MWJHeGNJaUJwYmlBMUxqQmNiaUFnSUNBZ0lISmxkSFZ5YmlCdlltbzdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ2Y0hScGIyNXpMbXh2YjJ0MWNGQnliM0JsY25SNUtHOWlhaXdnWm1sbGJHUXBPMXh1SUNCOUtUdGNibjFjYmlKZGZRPT1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbnZhciBfZXhjZXB0aW9uID0gcmVxdWlyZSgnLi4vZXhjZXB0aW9uJyk7XG5cbnZhciBfZXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4Y2VwdGlvbik7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignd2l0aCcsIGZ1bmN0aW9uIChjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT0gMikge1xuICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJyN3aXRoIHJlcXVpcmVzIGV4YWN0bHkgb25lIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIGlmIChfdXRpbHMuaXNGdW5jdGlvbihjb250ZXh0KSkge1xuICAgICAgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICB2YXIgZm4gPSBvcHRpb25zLmZuO1xuXG4gICAgaWYgKCFfdXRpbHMuaXNFbXB0eShjb250ZXh0KSkge1xuICAgICAgdmFyIGRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGRhdGEgPSBfdXRpbHMuY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IF91dGlscy5hcHBlbmRDb250ZXh0UGF0aChvcHRpb25zLmRhdGEuY29udGV4dFBhdGgsIG9wdGlvbnMuaWRzWzBdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgYmxvY2tQYXJhbXM6IF91dGlscy5ibG9ja1BhcmFtcyhbY29udGV4dF0sIFtkYXRhICYmIGRhdGEuY29udGV4dFBhdGhdKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJobGJIQmxjbk12ZDJsMGFDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN08zRkNRVTFQTEZWQlFWVTdPM2xDUVVOTExHTkJRV003T3pzN2NVSkJSWEpDTEZWQlFWTXNVVUZCVVN4RlFVRkZPMEZCUTJoRExGVkJRVkVzUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4RlFVRkZMRlZCUVZNc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJUdEJRVU42UkN4UlFVRkpMRk5CUVZNc1EwRkJReXhOUVVGTkxFbEJRVWtzUTBGQlF5eEZRVUZGTzBGQlEzcENMRmxCUVUwc01rSkJRV01zY1VOQlFYRkRMRU5CUVVNc1EwRkJRenRMUVVNMVJEdEJRVU5FTEZGQlFVa3NhMEpCUVZjc1QwRkJUeXhEUVVGRExFVkJRVVU3UVVGRGRrSXNZVUZCVHl4SFFVRkhMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTMEZET1VJN08wRkJSVVFzVVVGQlNTeEZRVUZGTEVkQlFVY3NUMEZCVHl4RFFVRkRMRVZCUVVVc1EwRkJRenM3UVVGRmNFSXNVVUZCU1N4RFFVRkRMR1ZCUVZFc1QwRkJUeXhEUVVGRExFVkJRVVU3UVVGRGNrSXNWVUZCU1N4SlFVRkpMRWRCUVVjc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF6dEJRVU40UWl4VlFVRkpMRTlCUVU4c1EwRkJReXhKUVVGSkxFbEJRVWtzVDBGQlR5eERRVUZETEVkQlFVY3NSVUZCUlR0QlFVTXZRaXhaUVVGSkxFZEJRVWNzYlVKQlFWa3NUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMnBETEZsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc2VVSkJRMnBDTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVONFFpeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVObUxFTkJRVU03VDBGRFNEczdRVUZGUkN4aFFVRlBMRVZCUVVVc1EwRkJReXhQUVVGUExFVkJRVVU3UVVGRGFrSXNXVUZCU1N4RlFVRkZMRWxCUVVrN1FVRkRWaXh0UWtGQlZ5eEZRVUZGTEcxQ1FVRlpMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVVzUTBGQlF5eEpRVUZKTEVsQlFVa3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8wOUJRMmhGTEVOQlFVTXNRMEZCUXp0TFFVTktMRTFCUVUwN1FVRkRUQ3hoUVVGUExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1MwRkRPVUk3UjBGRFJpeERRVUZETEVOQlFVTTdRMEZEU2lJc0ltWnBiR1VpT2lKM2FYUm9MbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUh0Y2JpQWdZWEJ3Wlc1a1EyOXVkR1Y0ZEZCaGRHZ3NYRzRnSUdKc2IyTnJVR0Z5WVcxekxGeHVJQ0JqY21WaGRHVkdjbUZ0WlN4Y2JpQWdhWE5GYlhCMGVTeGNiaUFnYVhOR2RXNWpkR2x2Ymx4dWZTQm1jbTl0SUNjdUxpOTFkR2xzY3ljN1hHNXBiWEJ2Y25RZ1JYaGpaWEIwYVc5dUlHWnliMjBnSnk0dUwyVjRZMlZ3ZEdsdmJpYzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVLR2x1YzNSaGJtTmxLU0I3WEc0Z0lHbHVjM1JoYm1ObExuSmxaMmx6ZEdWeVNHVnNjR1Z5S0NkM2FYUm9KeXdnWm5WdVkzUnBiMjRvWTI5dWRHVjRkQ3dnYjNCMGFXOXVjeWtnZTF4dUlDQWdJR2xtSUNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUNFOUlESXBJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGZUdObGNIUnBiMjRvSnlOM2FYUm9JSEpsY1hWcGNtVnpJR1Y0WVdOMGJIa2diMjVsSUdGeVozVnRaVzUwSnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNocGMwWjFibU4wYVc5dUtHTnZiblJsZUhRcEtTQjdYRzRnSUNBZ0lDQmpiMjUwWlhoMElEMGdZMjl1ZEdWNGRDNWpZV3hzS0hSb2FYTXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHeGxkQ0JtYmlBOUlHOXdkR2x2Ym5NdVptNDdYRzVjYmlBZ0lDQnBaaUFvSVdselJXMXdkSGtvWTI5dWRHVjRkQ2twSUh0Y2JpQWdJQ0FnSUd4bGRDQmtZWFJoSUQwZ2IzQjBhVzl1Y3k1a1lYUmhPMXh1SUNBZ0lDQWdhV1lnS0c5d2RHbHZibk11WkdGMFlTQW1KaUJ2Y0hScGIyNXpMbWxrY3lrZ2UxeHVJQ0FnSUNBZ0lDQmtZWFJoSUQwZ1kzSmxZWFJsUm5KaGJXVW9iM0IwYVc5dWN5NWtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ1pHRjBZUzVqYjI1MFpYaDBVR0YwYUNBOUlHRndjR1Z1WkVOdmJuUmxlSFJRWVhSb0tGeHVJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTXVaR0YwWVM1amIyNTBaWGgwVUdGMGFDeGNiaUFnSUNBZ0lDQWdJQ0J2Y0hScGIyNXpMbWxrYzFzd1hWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabTRvWTI5dWRHVjRkQ3dnZTF4dUlDQWdJQ0FnSUNCa1lYUmhPaUJrWVhSaExGeHVJQ0FnSUNBZ0lDQmliRzlqYTFCaGNtRnRjem9nWW14dlkydFFZWEpoYlhNb1cyTnZiblJsZUhSZExDQmJaR0YwWVNBbUppQmtZWFJoTG1OdmJuUmxlSFJRWVhSb1hTbGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYjNCMGFXOXVjeTVwYm5abGNuTmxLSFJvYVhNcE8xeHVJQ0FnSUgxY2JpQWdmU2s3WEc1OVhHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmNyZWF0ZU5ld0xvb2t1cE9iamVjdCA9IGNyZWF0ZU5ld0xvb2t1cE9iamVjdDtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IG9iamVjdCB3aXRoIFwibnVsbFwiLXByb3RvdHlwZSB0byBhdm9pZCB0cnV0aHkgcmVzdWx0cyBvbiBwcm90b3R5cGUgcHJvcGVydGllcy5cbiAqIFRoZSByZXN1bHRpbmcgb2JqZWN0IGNhbiBiZSB1c2VkIHdpdGggXCJvYmplY3RbcHJvcGVydHldXCIgdG8gY2hlY2sgaWYgYSBwcm9wZXJ0eSBleGlzdHNcbiAqIEBwYXJhbSB7Li4ub2JqZWN0fSBzb3VyY2VzIGEgdmFyYXJncyBwYXJhbWV0ZXIgb2Ygc291cmNlIG9iamVjdHMgdGhhdCB3aWxsIGJlIG1lcmdlZFxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVOZXdMb29rdXBPYmplY3QoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzb3VyY2VzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgc291cmNlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBfdXRpbHMuZXh0ZW5kLmFwcGx5KHVuZGVmaW5lZCwgW09iamVjdC5jcmVhdGUobnVsbCldLmNvbmNhdChzb3VyY2VzKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMmx1ZEdWeWJtRnNMMk55WldGMFpTMXVaWGN0Ykc5dmEzVndMVzlpYW1WamRDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3p0eFFrRkJkVUlzVlVGQlZUczdPenM3T3pzN08wRkJVVEZDTEZOQlFWTXNjVUpCUVhGQ0xFZEJRV0U3YjBOQlFWUXNUMEZCVHp0QlFVRlFMRmRCUVU4N096dEJRVU01UXl4VFFVRlBMR2REUVVGUExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVVzc1QwRkJUeXhGUVVGRExFTkJRVU03UTBGRGFFUWlMQ0ptYVd4bElqb2lZM0psWVhSbExXNWxkeTFzYjI5cmRYQXRiMkpxWldOMExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJSHNnWlhoMFpXNWtJSDBnWm5KdmJTQW5MaTR2ZFhScGJITW5PMXh1WEc0dktpcGNiaUFxSUVOeVpXRjBaU0JoSUc1bGR5QnZZbXBsWTNRZ2QybDBhQ0JjSW01MWJHeGNJaTF3Y205MGIzUjVjR1VnZEc4Z1lYWnZhV1FnZEhKMWRHaDVJSEpsYzNWc2RITWdiMjRnY0hKdmRHOTBlWEJsSUhCeWIzQmxjblJwWlhNdVhHNGdLaUJVYUdVZ2NtVnpkV3gwYVc1bklHOWlhbVZqZENCallXNGdZbVVnZFhObFpDQjNhWFJvSUZ3aWIySnFaV04wVzNCeWIzQmxjblI1WFZ3aUlIUnZJR05vWldOcklHbG1JR0VnY0hKdmNHVnlkSGtnWlhocGMzUnpYRzRnS2lCQWNHRnlZVzBnZXk0dUxtOWlhbVZqZEgwZ2MyOTFjbU5sY3lCaElIWmhjbUZ5WjNNZ2NHRnlZVzFsZEdWeUlHOW1JSE52ZFhKalpTQnZZbXBsWTNSeklIUm9ZWFFnZDJsc2JDQmlaU0J0WlhKblpXUmNiaUFxSUVCeVpYUjFjbTV6SUh0dlltcGxZM1I5WEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmpjbVZoZEdWT1pYZE1iMjlyZFhCUFltcGxZM1FvTGk0dWMyOTFjbU5sY3lrZ2UxeHVJQ0J5WlhSMWNtNGdaWGgwWlc1a0tFOWlhbVZqZEM1amNtVmhkR1VvYm5Wc2JDa3NJQzR1TG5OdmRYSmpaWE1wTzF4dWZWeHVJbDE5XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmNyZWF0ZVByb3RvQWNjZXNzQ29udHJvbCA9IGNyZWF0ZVByb3RvQWNjZXNzQ29udHJvbDtcbmV4cG9ydHMucmVzdWx0SXNBbGxvd2VkID0gcmVzdWx0SXNBbGxvd2VkO1xuZXhwb3J0cy5yZXNldExvZ2dlZFByb3BlcnRpZXMgPSByZXNldExvZ2dlZFByb3BlcnRpZXM7XG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqWydkZWZhdWx0J10gPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG52YXIgX2NyZWF0ZU5ld0xvb2t1cE9iamVjdCA9IHJlcXVpcmUoJy4vY3JlYXRlLW5ldy1sb29rdXAtb2JqZWN0Jyk7XG5cbnZhciBfbG9nZ2VyID0gcmVxdWlyZSgnLi4vbG9nZ2VyJyk7XG5cbnZhciBsb2dnZXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfbG9nZ2VyKTtcblxudmFyIGxvZ2dlZFByb3BlcnRpZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBjcmVhdGVQcm90b0FjY2Vzc0NvbnRyb2wocnVudGltZU9wdGlvbnMpIHtcbiAgdmFyIGRlZmF1bHRNZXRob2RXaGl0ZUxpc3QgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBkZWZhdWx0TWV0aG9kV2hpdGVMaXN0Wydjb25zdHJ1Y3RvciddID0gZmFsc2U7XG4gIGRlZmF1bHRNZXRob2RXaGl0ZUxpc3RbJ19fZGVmaW5lR2V0dGVyX18nXSA9IGZhbHNlO1xuICBkZWZhdWx0TWV0aG9kV2hpdGVMaXN0WydfX2RlZmluZVNldHRlcl9fJ10gPSBmYWxzZTtcbiAgZGVmYXVsdE1ldGhvZFdoaXRlTGlzdFsnX19sb29rdXBHZXR0ZXJfXyddID0gZmFsc2U7XG5cbiAgdmFyIGRlZmF1bHRQcm9wZXJ0eVdoaXRlTGlzdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b1xuICBkZWZhdWx0UHJvcGVydHlXaGl0ZUxpc3RbJ19fcHJvdG9fXyddID0gZmFsc2U7XG5cbiAgcmV0dXJuIHtcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICB3aGl0ZWxpc3Q6IF9jcmVhdGVOZXdMb29rdXBPYmplY3QuY3JlYXRlTmV3TG9va3VwT2JqZWN0KGRlZmF1bHRQcm9wZXJ0eVdoaXRlTGlzdCwgcnVudGltZU9wdGlvbnMuYWxsb3dlZFByb3RvUHJvcGVydGllcyksXG4gICAgICBkZWZhdWx0VmFsdWU6IHJ1bnRpbWVPcHRpb25zLmFsbG93UHJvdG9Qcm9wZXJ0aWVzQnlEZWZhdWx0XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICB3aGl0ZWxpc3Q6IF9jcmVhdGVOZXdMb29rdXBPYmplY3QuY3JlYXRlTmV3TG9va3VwT2JqZWN0KGRlZmF1bHRNZXRob2RXaGl0ZUxpc3QsIHJ1bnRpbWVPcHRpb25zLmFsbG93ZWRQcm90b01ldGhvZHMpLFxuICAgICAgZGVmYXVsdFZhbHVlOiBydW50aW1lT3B0aW9ucy5hbGxvd1Byb3RvTWV0aG9kc0J5RGVmYXVsdFxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVzdWx0SXNBbGxvd2VkKHJlc3VsdCwgcHJvdG9BY2Nlc3NDb250cm9sLCBwcm9wZXJ0eU5hbWUpIHtcbiAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY2hlY2tXaGl0ZUxpc3QocHJvdG9BY2Nlc3NDb250cm9sLm1ldGhvZHMsIHByb3BlcnR5TmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNoZWNrV2hpdGVMaXN0KHByb3RvQWNjZXNzQ29udHJvbC5wcm9wZXJ0aWVzLCBwcm9wZXJ0eU5hbWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrV2hpdGVMaXN0KHByb3RvQWNjZXNzQ29udHJvbEZvclR5cGUsIHByb3BlcnR5TmFtZSkge1xuICBpZiAocHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZS53aGl0ZWxpc3RbcHJvcGVydHlOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHByb3RvQWNjZXNzQ29udHJvbEZvclR5cGUud2hpdGVsaXN0W3Byb3BlcnR5TmFtZV0gPT09IHRydWU7XG4gIH1cbiAgaWYgKHByb3RvQWNjZXNzQ29udHJvbEZvclR5cGUuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZS5kZWZhdWx0VmFsdWU7XG4gIH1cbiAgbG9nVW5leHBlY2VkUHJvcGVydHlBY2Nlc3NPbmNlKHByb3BlcnR5TmFtZSk7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbG9nVW5leHBlY2VkUHJvcGVydHlBY2Nlc3NPbmNlKHByb3BlcnR5TmFtZSkge1xuICBpZiAobG9nZ2VkUHJvcGVydGllc1twcm9wZXJ0eU5hbWVdICE9PSB0cnVlKSB7XG4gICAgbG9nZ2VkUHJvcGVydGllc1twcm9wZXJ0eU5hbWVdID0gdHJ1ZTtcbiAgICBsb2dnZXIubG9nKCdlcnJvcicsICdIYW5kbGViYXJzOiBBY2Nlc3MgaGFzIGJlZW4gZGVuaWVkIHRvIHJlc29sdmUgdGhlIHByb3BlcnR5IFwiJyArIHByb3BlcnR5TmFtZSArICdcIiBiZWNhdXNlIGl0IGlzIG5vdCBhbiBcIm93biBwcm9wZXJ0eVwiIG9mIGl0cyBwYXJlbnQuXFxuJyArICdZb3UgY2FuIGFkZCBhIHJ1bnRpbWUgb3B0aW9uIHRvIGRpc2FibGUgdGhlIGNoZWNrIG9yIHRoaXMgd2FybmluZzpcXG4nICsgJ1NlZSBodHRwczovL2hhbmRsZWJhcnNqcy5jb20vYXBpLXJlZmVyZW5jZS9ydW50aW1lLW9wdGlvbnMuaHRtbCNvcHRpb25zLXRvLWNvbnRyb2wtcHJvdG90eXBlLWFjY2VzcyBmb3IgZGV0YWlscycpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2V0TG9nZ2VkUHJvcGVydGllcygpIHtcbiAgT2JqZWN0LmtleXMobG9nZ2VkUHJvcGVydGllcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcGVydHlOYW1lKSB7XG4gICAgZGVsZXRlIGxvZ2dlZFByb3BlcnRpZXNbcHJvcGVydHlOYW1lXTtcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMmx1ZEdWeWJtRnNMM0J5YjNSdkxXRmpZMlZ6Y3k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN08zRkRRVUZ6UXl3MFFrRkJORUk3TzNOQ1FVTXhReXhYUVVGWE96dEpRVUYyUWl4TlFVRk5PenRCUVVWc1FpeEpRVUZOTEdkQ1FVRm5RaXhIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN08wRkJSWFJETEZOQlFWTXNkMEpCUVhkQ0xFTkJRVU1zWTBGQll5eEZRVUZGTzBGQlEzWkVMRTFCUVVrc2MwSkJRWE5DTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU5xUkN4M1FrRkJjMElzUTBGQlF5eGhRVUZoTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkRPVU1zZDBKQlFYTkNMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkRia1FzZDBKQlFYTkNMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkRia1FzZDBKQlFYTkNMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNN08wRkJSVzVFTEUxQlFVa3NkMEpCUVhkQ0xFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenM3UVVGRmJrUXNNRUpCUVhkQ0xFTkJRVU1zVjBGQlZ5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRPenRCUVVVNVF5eFRRVUZQTzBGQlEwd3NZMEZCVlN4RlFVRkZPMEZCUTFZc1pVRkJVeXhGUVVGRkxEWkRRVU5VTEhkQ1FVRjNRaXhGUVVONFFpeGpRVUZqTEVOQlFVTXNjMEpCUVhOQ0xFTkJRM1JETzBGQlEwUXNhMEpCUVZrc1JVRkJSU3hqUVVGakxFTkJRVU1zTmtKQlFUWkNPMHRCUXpORU8wRkJRMFFzVjBGQlR5eEZRVUZGTzBGQlExQXNaVUZCVXl4RlFVRkZMRFpEUVVOVUxITkNRVUZ6UWl4RlFVTjBRaXhqUVVGakxFTkJRVU1zYlVKQlFXMUNMRU5CUTI1RE8wRkJRMFFzYTBKQlFWa3NSVUZCUlN4alFVRmpMRU5CUVVNc01FSkJRVEJDTzB0QlEzaEVPMGRCUTBZc1EwRkJRenREUVVOSU96dEJRVVZOTEZOQlFWTXNaVUZCWlN4RFFVRkRMRTFCUVUwc1JVRkJSU3hyUWtGQmEwSXNSVUZCUlN4WlFVRlpMRVZCUVVVN1FVRkRlRVVzVFVGQlNTeFBRVUZQTEUxQlFVMHNTMEZCU3l4VlFVRlZMRVZCUVVVN1FVRkRhRU1zVjBGQlR5eGpRVUZqTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZsQlFWa3NRMEZCUXl4RFFVRkRPMGRCUTJwRkxFMUJRVTA3UVVGRFRDeFhRVUZQTEdOQlFXTXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eFZRVUZWTEVWQlFVVXNXVUZCV1N4RFFVRkRMRU5CUVVNN1IwRkRjRVU3UTBGRFJqczdRVUZGUkN4VFFVRlRMR05CUVdNc1EwRkJReXg1UWtGQmVVSXNSVUZCUlN4WlFVRlpMRVZCUVVVN1FVRkRMMFFzVFVGQlNTeDVRa0ZCZVVJc1EwRkJReXhUUVVGVExFTkJRVU1zV1VGQldTeERRVUZETEV0QlFVc3NVMEZCVXl4RlFVRkZPMEZCUTI1RkxGZEJRVThzZVVKQlFYbENMRU5CUVVNc1UwRkJVeXhEUVVGRExGbEJRVmtzUTBGQlF5eExRVUZMTEVsQlFVa3NRMEZCUXp0SFFVTnVSVHRCUVVORUxFMUJRVWtzZVVKQlFYbENMRU5CUVVNc1dVRkJXU3hMUVVGTExGTkJRVk1zUlVGQlJUdEJRVU40UkN4WFFVRlBMSGxDUVVGNVFpeERRVUZETEZsQlFWa3NRMEZCUXp0SFFVTXZRenRCUVVORUxHZERRVUU0UWl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8wRkJRemRETEZOQlFVOHNTMEZCU3l4RFFVRkRPME5CUTJRN08wRkJSVVFzVTBGQlV5dzRRa0ZCT0VJc1EwRkJReXhaUVVGWkxFVkJRVVU3UVVGRGNFUXNUVUZCU1N4blFrRkJaMElzUTBGQlF5eFpRVUZaTEVOQlFVTXNTMEZCU3l4SlFVRkpMRVZCUVVVN1FVRkRNME1zYjBKQlFXZENMRU5CUVVNc1dVRkJXU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETzBGQlEzUkRMRlZCUVUwc1EwRkJReXhIUVVGSExFTkJRMUlzVDBGQlR5eEZRVU5RTEdsRlFVRXJSQ3haUVVGWkxHOUpRVU5JTEc5SVFVTXlReXhEUVVOd1NDeERRVUZETzBkQlEwZzdRMEZEUmpzN1FVRkZUU3hUUVVGVExIRkNRVUZ4UWl4SFFVRkhPMEZCUTNSRExGRkJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUVN4WlFVRlpMRVZCUVVrN1FVRkRjRVFzVjBGQlR5eG5Ra0ZCWjBJc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dEhRVU4yUXl4RFFVRkRMRU5CUVVNN1EwRkRTaUlzSW1acGJHVWlPaUp3Y205MGJ5MWhZMk5sYzNNdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdleUJqY21WaGRHVk9aWGRNYjI5cmRYQlBZbXBsWTNRZ2ZTQm1jbTl0SUNjdUwyTnlaV0YwWlMxdVpYY3RiRzl2YTNWd0xXOWlhbVZqZENjN1hHNXBiWEJ2Y25RZ0tpQmhjeUJzYjJkblpYSWdabkp2YlNBbkxpNHZiRzluWjJWeUp6dGNibHh1WTI5dWMzUWdiRzluWjJWa1VISnZjR1Z5ZEdsbGN5QTlJRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2s3WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCamNtVmhkR1ZRY205MGIwRmpZMlZ6YzBOdmJuUnliMndvY25WdWRHbHRaVTl3ZEdsdmJuTXBJSHRjYmlBZ2JHVjBJR1JsWm1GMWJIUk5aWFJvYjJSWGFHbDBaVXhwYzNRZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0c1MWJHd3BPMXh1SUNCa1pXWmhkV3gwVFdWMGFHOWtWMmhwZEdWTWFYTjBXeWRqYjI1emRISjFZM1J2Y2lkZElEMGdabUZzYzJVN1hHNGdJR1JsWm1GMWJIUk5aWFJvYjJSWGFHbDBaVXhwYzNSYkoxOWZaR1ZtYVc1bFIyVjBkR1Z5WDE4blhTQTlJR1poYkhObE8xeHVJQ0JrWldaaGRXeDBUV1YwYUc5a1YyaHBkR1ZNYVhOMFd5ZGZYMlJsWm1sdVpWTmxkSFJsY2w5ZkoxMGdQU0JtWVd4elpUdGNiaUFnWkdWbVlYVnNkRTFsZEdodlpGZG9hWFJsVEdsemRGc25YMTlzYjI5cmRYQkhaWFIwWlhKZlh5ZGRJRDBnWm1Gc2MyVTdYRzVjYmlBZ2JHVjBJR1JsWm1GMWJIUlFjbTl3WlhKMGVWZG9hWFJsVEdsemRDQTlJRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2s3WEc0Z0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnVieTF3Y205MGIxeHVJQ0JrWldaaGRXeDBVSEp2Y0dWeWRIbFhhR2wwWlV4cGMzUmJKMTlmY0hKdmRHOWZYeWRkSUQwZ1ptRnNjMlU3WEc1Y2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCd2NtOXdaWEowYVdWek9pQjdYRzRnSUNBZ0lDQjNhR2wwWld4cGMzUTZJR055WldGMFpVNWxkMHh2YjJ0MWNFOWlhbVZqZENoY2JpQWdJQ0FnSUNBZ1pHVm1ZWFZzZEZCeWIzQmxjblI1VjJocGRHVk1hWE4wTEZ4dUlDQWdJQ0FnSUNCeWRXNTBhVzFsVDNCMGFXOXVjeTVoYkd4dmQyVmtVSEp2ZEc5UWNtOXdaWEowYVdWelhHNGdJQ0FnSUNBcExGeHVJQ0FnSUNBZ1pHVm1ZWFZzZEZaaGJIVmxPaUJ5ZFc1MGFXMWxUM0IwYVc5dWN5NWhiR3h2ZDFCeWIzUnZVSEp2Y0dWeWRHbGxjMEo1UkdWbVlYVnNkRnh1SUNBZ0lIMHNYRzRnSUNBZ2JXVjBhRzlrY3pvZ2UxeHVJQ0FnSUNBZ2QyaHBkR1ZzYVhOME9pQmpjbVZoZEdWT1pYZE1iMjlyZFhCUFltcGxZM1FvWEc0Z0lDQWdJQ0FnSUdSbFptRjFiSFJOWlhSb2IyUlhhR2wwWlV4cGMzUXNYRzRnSUNBZ0lDQWdJSEoxYm5ScGJXVlBjSFJwYjI1ekxtRnNiRzkzWldSUWNtOTBiMDFsZEdodlpITmNiaUFnSUNBZ0lDa3NYRzRnSUNBZ0lDQmtaV1poZFd4MFZtRnNkV1U2SUhKMWJuUnBiV1ZQY0hScGIyNXpMbUZzYkc5M1VISnZkRzlOWlhSb2IyUnpRbmxFWldaaGRXeDBYRzRnSUNBZ2ZWeHVJQ0I5TzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdjbVZ6ZFd4MFNYTkJiR3h2ZDJWa0tISmxjM1ZzZEN3Z2NISnZkRzlCWTJObGMzTkRiMjUwY205c0xDQndjbTl3WlhKMGVVNWhiV1VwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJ5WlhOMWJIUWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNCeVpYUjFjbTRnWTJobFkydFhhR2wwWlV4cGMzUW9jSEp2ZEc5QlkyTmxjM05EYjI1MGNtOXNMbTFsZEdodlpITXNJSEJ5YjNCbGNuUjVUbUZ0WlNrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVjBkWEp1SUdOb1pXTnJWMmhwZEdWTWFYTjBLSEJ5YjNSdlFXTmpaWE56UTI5dWRISnZiQzV3Y205d1pYSjBhV1Z6TENCd2NtOXdaWEowZVU1aGJXVXBPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdOb1pXTnJWMmhwZEdWTWFYTjBLSEJ5YjNSdlFXTmpaWE56UTI5dWRISnZiRVp2Y2xSNWNHVXNJSEJ5YjNCbGNuUjVUbUZ0WlNrZ2UxeHVJQ0JwWmlBb2NISnZkRzlCWTJObGMzTkRiMjUwY205c1JtOXlWSGx3WlM1M2FHbDBaV3hwYzNSYmNISnZjR1Z5ZEhsT1lXMWxYU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhCeWIzUnZRV05qWlhOelEyOXVkSEp2YkVadmNsUjVjR1V1ZDJocGRHVnNhWE4wVzNCeWIzQmxjblI1VG1GdFpWMGdQVDA5SUhSeWRXVTdYRzRnSUgxY2JpQWdhV1lnS0hCeWIzUnZRV05qWlhOelEyOXVkSEp2YkVadmNsUjVjR1V1WkdWbVlYVnNkRlpoYkhWbElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjSEp2ZEc5QlkyTmxjM05EYjI1MGNtOXNSbTl5Vkhsd1pTNWtaV1poZFd4MFZtRnNkV1U3WEc0Z0lIMWNiaUFnYkc5blZXNWxlSEJsWTJWa1VISnZjR1Z5ZEhsQlkyTmxjM05QYm1ObEtIQnliM0JsY25SNVRtRnRaU2s3WEc0Z0lISmxkSFZ5YmlCbVlXeHpaVHRjYm4xY2JseHVablZ1WTNScGIyNGdiRzluVlc1bGVIQmxZMlZrVUhKdmNHVnlkSGxCWTJObGMzTlBibU5sS0hCeWIzQmxjblI1VG1GdFpTa2dlMXh1SUNCcFppQW9iRzluWjJWa1VISnZjR1Z5ZEdsbGMxdHdjbTl3WlhKMGVVNWhiV1ZkSUNFOVBTQjBjblZsS1NCN1hHNGdJQ0FnYkc5bloyVmtVSEp2Y0dWeWRHbGxjMXR3Y205d1pYSjBlVTVoYldWZElEMGdkSEoxWlR0Y2JpQWdJQ0JzYjJkblpYSXViRzluS0Z4dUlDQWdJQ0FnSjJWeWNtOXlKeXhjYmlBZ0lDQWdJR0JJWVc1a2JHVmlZWEp6T2lCQlkyTmxjM01nYUdGeklHSmxaVzRnWkdWdWFXVmtJSFJ2SUhKbGMyOXNkbVVnZEdobElIQnliM0JsY25SNUlGd2lKSHR3Y205d1pYSjBlVTVoYldWOVhDSWdZbVZqWVhWelpTQnBkQ0JwY3lCdWIzUWdZVzRnWENKdmQyNGdjSEp2Y0dWeWRIbGNJaUJ2WmlCcGRITWdjR0Z5Wlc1MExseGNibUFnSzF4dUlDQWdJQ0FnSUNCZ1dXOTFJR05oYmlCaFpHUWdZU0J5ZFc1MGFXMWxJRzl3ZEdsdmJpQjBieUJrYVhOaFlteGxJSFJvWlNCamFHVmpheUJ2Y2lCMGFHbHpJSGRoY201cGJtYzZYRnh1WUNBclhHNGdJQ0FnSUNBZ0lHQlRaV1VnYUhSMGNITTZMeTlvWVc1a2JHVmlZWEp6YW5NdVkyOXRMMkZ3YVMxeVpXWmxjbVZ1WTJVdmNuVnVkR2x0WlMxdmNIUnBiMjV6TG1oMGJXd2piM0IwYVc5dWN5MTBieTFqYjI1MGNtOXNMWEJ5YjNSdmRIbHdaUzFoWTJObGMzTWdabTl5SUdSbGRHRnBiSE5nWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnY21WelpYUk1iMmRuWldSUWNtOXdaWEowYVdWektDa2dlMXh1SUNCUFltcGxZM1F1YTJWNWN5aHNiMmRuWldSUWNtOXdaWEowYVdWektTNW1iM0pGWVdOb0tIQnliM0JsY25SNVRtRnRaU0E5UGlCN1hHNGdJQ0FnWkdWc1pYUmxJR3h2WjJkbFpGQnliM0JsY25ScFpYTmJjSEp2Y0dWeWRIbE9ZVzFsWFR0Y2JpQWdmU2s3WEc1OVhHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLndyYXBIZWxwZXIgPSB3cmFwSGVscGVyO1xuXG5mdW5jdGlvbiB3cmFwSGVscGVyKGhlbHBlciwgdHJhbnNmb3JtT3B0aW9uc0ZuKSB7XG4gIGlmICh0eXBlb2YgaGVscGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gVGhpcyBzaG91bGQgbm90IGhhcHBlbiwgYnV0IGFwcGFyZW50bHkgaXQgZG9lcyBpbiBodHRwczovL2dpdGh1Yi5jb20vd3ljYXRzL2hhbmRsZWJhcnMuanMvaXNzdWVzLzE2MzlcbiAgICAvLyBXZSB0cnkgdG8gbWFrZSB0aGUgd3JhcHBlciBsZWFzdC1pbnZhc2l2ZSBieSBub3Qgd3JhcHBpbmcgaXQsIGlmIHRoZSBoZWxwZXIgaXMgbm90IGEgZnVuY3Rpb24uXG4gICAgcmV0dXJuIGhlbHBlcjtcbiAgfVxuICB2YXIgd3JhcHBlciA9IGZ1bmN0aW9uIHdyYXBwZXIoKSAvKiBkeW5hbWljIGFyZ3VtZW50cyAqL3tcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gICAgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXSA9IHRyYW5zZm9ybU9wdGlvbnNGbihvcHRpb25zKTtcbiAgICByZXR1cm4gaGVscGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG4gIHJldHVybiB3cmFwcGVyO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJsdWRHVnlibUZzTDNkeVlYQklaV3h3WlhJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3UVVGQlR5eFRRVUZUTEZWQlFWVXNRMEZCUXl4TlFVRk5MRVZCUVVVc2EwSkJRV3RDTEVWQlFVVTdRVUZEY2tRc1RVRkJTU3hQUVVGUExFMUJRVTBzUzBGQlN5eFZRVUZWTEVWQlFVVTdPenRCUVVkb1F5eFhRVUZQTEUxQlFVMHNRMEZCUXp0SFFVTm1PMEZCUTBRc1RVRkJTU3hQUVVGUExFZEJRVWNzVTBGQlZpeFBRVUZQTERCQ1FVRnhRenRCUVVNNVF5eFJRVUZOTEU5QlFVOHNSMEZCUnl4VFFVRlRMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTm9SQ3hoUVVGVExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhyUWtGQmEwSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRCUVVNNVJDeFhRVUZQTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETzBkQlEzUkRMRU5CUVVNN1FVRkRSaXhUUVVGUExFOUJRVThzUTBGQlF6dERRVU5vUWlJc0ltWnBiR1VpT2lKM2NtRndTR1ZzY0dWeUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWlhod2IzSjBJR1oxYm1OMGFXOXVJSGR5WVhCSVpXeHdaWElvYUdWc2NHVnlMQ0IwY21GdWMyWnZjbTFQY0hScGIyNXpSbTRwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJvWld4d1pYSWdJVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBdkx5QlVhR2x6SUhOb2IzVnNaQ0J1YjNRZ2FHRndjR1Z1TENCaWRYUWdZWEJ3WVhKbGJuUnNlU0JwZENCa2IyVnpJR2x1SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5M2VXTmhkSE12YUdGdVpHeGxZbUZ5Y3k1cWN5OXBjM04xWlhNdk1UWXpPVnh1SUNBZ0lDOHZJRmRsSUhSeWVTQjBieUJ0WVd0bElIUm9aU0IzY21Gd2NHVnlJR3hsWVhOMExXbHVkbUZ6YVhabElHSjVJRzV2ZENCM2NtRndjR2x1WnlCcGRDd2dhV1lnZEdobElHaGxiSEJsY2lCcGN5QnViM1FnWVNCbWRXNWpkR2x2Ymk1Y2JpQWdJQ0J5WlhSMWNtNGdhR1ZzY0dWeU8xeHVJQ0I5WEc0Z0lHeGxkQ0IzY21Gd2NHVnlJRDBnWm5WdVkzUnBiMjRvTHlvZ1pIbHVZVzFwWXlCaGNtZDFiV1Z1ZEhNZ0tpOHBJSHRjYmlBZ0lDQmpiMjV6ZENCdmNIUnBiMjV6SUQwZ1lYSm5kVzFsYm5SelcyRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ0xTQXhYVHRjYmlBZ0lDQmhjbWQxYldWdWRITmJZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQXRJREZkSUQwZ2RISmhibk5tYjNKdFQzQjBhVzl1YzBadUtHOXdkR2x2Ym5NcE8xeHVJQ0FnSUhKbGRIVnliaUJvWld4d1pYSXVZWEJ3Ykhrb2RHaHBjeXdnWVhKbmRXMWxiblJ6S1R0Y2JpQWdmVHRjYmlBZ2NtVjBkWEp1SUhkeVlYQndaWEk3WEc1OVhHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBsb2dnZXIgPSB7XG4gIG1ldGhvZE1hcDogWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXSxcbiAgbGV2ZWw6ICdpbmZvJyxcblxuICAvLyBNYXBzIGEgZ2l2ZW4gbGV2ZWwgdmFsdWUgdG8gdGhlIGBtZXRob2RNYXBgIGluZGV4ZXMgYWJvdmUuXG4gIGxvb2t1cExldmVsOiBmdW5jdGlvbiBsb29rdXBMZXZlbChsZXZlbCkge1xuICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgbGV2ZWxNYXAgPSBfdXRpbHMuaW5kZXhPZihsb2dnZXIubWV0aG9kTWFwLCBsZXZlbC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIGlmIChsZXZlbE1hcCA+PSAwKSB7XG4gICAgICAgIGxldmVsID0gbGV2ZWxNYXA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXZlbCA9IHBhcnNlSW50KGxldmVsLCAxMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxldmVsO1xuICB9LFxuXG4gIC8vIENhbiBiZSBvdmVycmlkZGVuIGluIHRoZSBob3N0IGVudmlyb25tZW50XG4gIGxvZzogZnVuY3Rpb24gbG9nKGxldmVsKSB7XG4gICAgbGV2ZWwgPSBsb2dnZXIubG9va3VwTGV2ZWwobGV2ZWwpO1xuXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBsb2dnZXIubG9va3VwTGV2ZWwobG9nZ2VyLmxldmVsKSA8PSBsZXZlbCkge1xuICAgICAgdmFyIG1ldGhvZCA9IGxvZ2dlci5tZXRob2RNYXBbbGV2ZWxdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGlmICghY29uc29sZVttZXRob2RdKSB7XG4gICAgICAgIG1ldGhvZCA9ICdsb2cnO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWVzc2FnZSA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgbWVzc2FnZVtfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGVbbWV0aG9kXS5hcHBseShjb25zb2xlLCBtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfVxuICB9XG59O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBsb2dnZXI7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJ4dloyZGxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN08zRkNRVUYzUWl4VFFVRlRPenRCUVVWcVF5eEpRVUZKTEUxQlFVMHNSMEZCUnp0QlFVTllMRmRCUVZNc1JVRkJSU3hEUVVGRExFOUJRVThzUlVGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RlFVRkZMRTlCUVU4c1EwRkJRenRCUVVNM1F5eFBRVUZMTEVWQlFVVXNUVUZCVFRzN08wRkJSMklzWVVGQlZ5eEZRVUZGTEhGQ1FVRlRMRXRCUVVzc1JVRkJSVHRCUVVNelFpeFJRVUZKTEU5QlFVOHNTMEZCU3l4TFFVRkxMRkZCUVZFc1JVRkJSVHRCUVVNM1FpeFZRVUZKTEZGQlFWRXNSMEZCUnl4bFFVRlJMRTFCUVUwc1EwRkJReXhUUVVGVExFVkJRVVVzUzBGQlN5eERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRPVVFzVlVGQlNTeFJRVUZSTEVsQlFVa3NRMEZCUXl4RlFVRkZPMEZCUTJwQ0xHRkJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVTTdUMEZEYkVJc1RVRkJUVHRCUVVOTUxHRkJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8wOUJRemRDTzB0QlEwWTdPMEZCUlVRc1YwRkJUeXhMUVVGTExFTkJRVU03UjBGRFpEczdPMEZCUjBRc1MwRkJSeXhGUVVGRkxHRkJRVk1zUzBGQlN5eEZRVUZqTzBGQlF5OUNMRk5CUVVzc1IwRkJSeXhOUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPenRCUVVWc1F5eFJRVU5GTEU5QlFVOHNUMEZCVHl4TFFVRkxMRmRCUVZjc1NVRkRPVUlzVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUzBGQlN5eEZRVU42UXp0QlFVTkJMRlZCUVVrc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN08wRkJSWEpETEZWQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVU3UVVGRGNFSXNZMEZCVFN4SFFVRkhMRXRCUVVzc1EwRkJRenRQUVVOb1FqczdkME5CV0cxQ0xFOUJRVTg3UVVGQlVDeGxRVUZQT3pzN1FVRlpNMElzWVVGQlR5eERRVUZETEUxQlFVMHNUMEZCUXl4RFFVRm1MRTlCUVU4c1JVRkJXU3hQUVVGUExFTkJRVU1zUTBGQlF6dExRVU0zUWp0SFFVTkdPME5CUTBZc1EwRkJRenM3Y1VKQlJXRXNUVUZCVFNJc0ltWnBiR1VpT2lKc2IyZG5aWEl1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2V5QnBibVJsZUU5bUlIMGdabkp2YlNBbkxpOTFkR2xzY3ljN1hHNWNibXhsZENCc2IyZG5aWElnUFNCN1hHNGdJRzFsZEdodlpFMWhjRG9nV3lka1pXSjFaeWNzSUNkcGJtWnZKeXdnSjNkaGNtNG5MQ0FuWlhKeWIzSW5YU3hjYmlBZ2JHVjJaV3c2SUNkcGJtWnZKeXhjYmx4dUlDQXZMeUJOWVhCeklHRWdaMmwyWlc0Z2JHVjJaV3dnZG1Gc2RXVWdkRzhnZEdobElHQnRaWFJvYjJSTllYQmdJR2x1WkdWNFpYTWdZV0p2ZG1VdVhHNGdJR3h2YjJ0MWNFeGxkbVZzT2lCbWRXNWpkR2x2Ymloc1pYWmxiQ2tnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnYkdWMlpXd2dQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNCc1pYUWdiR1YyWld4TllYQWdQU0JwYm1SbGVFOW1LR3h2WjJkbGNpNXRaWFJvYjJSTllYQXNJR3hsZG1Wc0xuUnZURzkzWlhKRFlYTmxLQ2twTzF4dUlDQWdJQ0FnYVdZZ0tHeGxkbVZzVFdGd0lENDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjJaV3dnUFNCc1pYWmxiRTFoY0R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUd4bGRtVnNJRDBnY0dGeWMyVkpiblFvYkdWMlpXd3NJREV3S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdiR1YyWld3N1hHNGdJSDBzWEc1Y2JpQWdMeThnUTJGdUlHSmxJRzkyWlhKeWFXUmtaVzRnYVc0Z2RHaGxJR2h2YzNRZ1pXNTJhWEp2Ym0xbGJuUmNiaUFnYkc5bk9pQm1kVzVqZEdsdmJpaHNaWFpsYkN3Z0xpNHViV1Z6YzJGblpTa2dlMXh1SUNBZ0lHeGxkbVZzSUQwZ2JHOW5aMlZ5TG14dmIydDFjRXhsZG1Wc0tHeGxkbVZzS1R0Y2JseHVJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lIUjVjR1Z2WmlCamIyNXpiMnhsSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmx4dUlDQWdJQ0FnYkc5bloyVnlMbXh2YjJ0MWNFeGxkbVZzS0d4dloyZGxjaTVzWlhabGJDa2dQRDBnYkdWMlpXeGNiaUFnSUNBcElIdGNiaUFnSUNBZ0lHeGxkQ0J0WlhSb2IyUWdQU0JzYjJkblpYSXViV1YwYUc5a1RXRndXMnhsZG1Wc1hUdGNiaUFnSUNBZ0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnVieTFqYjI1emIyeGxYRzRnSUNBZ0lDQnBaaUFvSVdOdmJuTnZiR1ZiYldWMGFHOWtYU2tnZTF4dUlDQWdJQ0FnSUNCdFpYUm9iMlFnUFNBbmJHOW5KenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR052Ym5OdmJHVmJiV1YwYUc5a1hTZ3VMaTV0WlhOellXZGxLVHNnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQnVieTFqYjI1emIyeGxYRzRnSUNBZ2ZWeHVJQ0I5WEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQnNiMmRuWlhJN1hHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChIYW5kbGViYXJzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHZhciByb290ID0gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB3aW5kb3csXG4gICAgICAkSGFuZGxlYmFycyA9IHJvb3QuSGFuZGxlYmFycztcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgSGFuZGxlYmFycy5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChyb290LkhhbmRsZWJhcnMgPT09IEhhbmRsZWJhcnMpIHtcbiAgICAgIHJvb3QuSGFuZGxlYmFycyA9ICRIYW5kbGViYXJzO1xuICAgIH1cbiAgICByZXR1cm4gSGFuZGxlYmFycztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMjV2TFdOdmJtWnNhV04wTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdjVUpCUVdVc1ZVRkJVeXhWUVVGVkxFVkJRVVU3TzBGQlJXeERMRTFCUVVrc1NVRkJTU3hIUVVGSExFOUJRVThzVFVGQlRTeExRVUZMTEZkQlFWY3NSMEZCUnl4TlFVRk5MRWRCUVVjc1RVRkJUVHROUVVONFJDeFhRVUZYTEVkQlFVY3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJRenM3UVVGRmFFTXNXVUZCVlN4RFFVRkRMRlZCUVZVc1IwRkJSeXhaUVVGWE8wRkJRMnBETEZGQlFVa3NTVUZCU1N4RFFVRkRMRlZCUVZVc1MwRkJTeXhWUVVGVkxFVkJRVVU3UVVGRGJFTXNWVUZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhYUVVGWExFTkJRVU03UzBGREwwSTdRVUZEUkN4WFFVRlBMRlZCUVZVc1EwRkJRenRIUVVOdVFpeERRVUZETzBOQlEwZ2lMQ0ptYVd4bElqb2libTh0WTI5dVpteHBZM1F1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmloSVlXNWtiR1ZpWVhKektTQjdYRzRnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCdVpYaDBJQ292WEc0Z0lHeGxkQ0J5YjI5MElEMGdkSGx3Wlc5bUlHZHNiMkpoYkNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCbmJHOWlZV3dnT2lCM2FXNWtiM2NzWEc0Z0lDQWdKRWhoYm1Sc1pXSmhjbk1nUFNCeWIyOTBMa2hoYm1Sc1pXSmhjbk03WEc0Z0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnVaWGgwSUNvdlhHNGdJRWhoYm1Sc1pXSmhjbk11Ym05RGIyNW1iR2xqZENBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lHbG1JQ2h5YjI5MExraGhibVJzWldKaGNuTWdQVDA5SUVoaGJtUnNaV0poY25NcElIdGNiaUFnSUNBZ0lISnZiM1F1U0dGdVpHeGxZbUZ5Y3lBOUlDUklZVzVrYkdWaVlYSnpPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnU0dGdVpHeGxZbUZ5Y3p0Y2JpQWdmVHRjYm4xY2JpSmRmUT09XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmNoZWNrUmV2aXNpb24gPSBjaGVja1JldmlzaW9uO1xuZXhwb3J0cy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuZXhwb3J0cy53cmFwUHJvZ3JhbSA9IHdyYXBQcm9ncmFtO1xuZXhwb3J0cy5yZXNvbHZlUGFydGlhbCA9IHJlc29sdmVQYXJ0aWFsO1xuZXhwb3J0cy5pbnZva2VQYXJ0aWFsID0gaW52b2tlUGFydGlhbDtcbmV4cG9ydHMubm9vcCA9IG5vb3A7XG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmpbJ2RlZmF1bHQnXSA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBVdGlscyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF91dGlscyk7XG5cbnZhciBfZXhjZXB0aW9uID0gcmVxdWlyZSgnLi9leGNlcHRpb24nKTtcblxudmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcblxudmFyIF9iYXNlID0gcmVxdWlyZSgnLi9iYXNlJyk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xuXG52YXIgX2ludGVybmFsV3JhcEhlbHBlciA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvd3JhcEhlbHBlcicpO1xuXG52YXIgX2ludGVybmFsUHJvdG9BY2Nlc3MgPSByZXF1aXJlKCcuL2ludGVybmFsL3Byb3RvLWFjY2VzcycpO1xuXG5mdW5jdGlvbiBjaGVja1JldmlzaW9uKGNvbXBpbGVySW5mbykge1xuICB2YXIgY29tcGlsZXJSZXZpc2lvbiA9IGNvbXBpbGVySW5mbyAmJiBjb21waWxlckluZm9bMF0gfHwgMSxcbiAgICAgIGN1cnJlbnRSZXZpc2lvbiA9IF9iYXNlLkNPTVBJTEVSX1JFVklTSU9OO1xuXG4gIGlmIChjb21waWxlclJldmlzaW9uID49IF9iYXNlLkxBU1RfQ09NUEFUSUJMRV9DT01QSUxFUl9SRVZJU0lPTiAmJiBjb21waWxlclJldmlzaW9uIDw9IF9iYXNlLkNPTVBJTEVSX1JFVklTSU9OKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNvbXBpbGVyUmV2aXNpb24gPCBfYmFzZS5MQVNUX0NPTVBBVElCTEVfQ09NUElMRVJfUkVWSVNJT04pIHtcbiAgICB2YXIgcnVudGltZVZlcnNpb25zID0gX2Jhc2UuUkVWSVNJT05fQ0hBTkdFU1tjdXJyZW50UmV2aXNpb25dLFxuICAgICAgICBjb21waWxlclZlcnNpb25zID0gX2Jhc2UuUkVWSVNJT05fQ0hBTkdFU1tjb21waWxlclJldmlzaW9uXTtcbiAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVGVtcGxhdGUgd2FzIHByZWNvbXBpbGVkIHdpdGggYW4gb2xkZXIgdmVyc2lvbiBvZiBIYW5kbGViYXJzIHRoYW4gdGhlIGN1cnJlbnQgcnVudGltZS4gJyArICdQbGVhc2UgdXBkYXRlIHlvdXIgcHJlY29tcGlsZXIgdG8gYSBuZXdlciB2ZXJzaW9uICgnICsgcnVudGltZVZlcnNpb25zICsgJykgb3IgZG93bmdyYWRlIHlvdXIgcnVudGltZSB0byBhbiBvbGRlciB2ZXJzaW9uICgnICsgY29tcGlsZXJWZXJzaW9ucyArICcpLicpO1xuICB9IGVsc2Uge1xuICAgIC8vIFVzZSB0aGUgZW1iZWRkZWQgdmVyc2lvbiBpbmZvIHNpbmNlIHRoZSBydW50aW1lIGRvZXNuJ3Qga25vdyBhYm91dCB0aGlzIHJldmlzaW9uIHlldFxuICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdUZW1wbGF0ZSB3YXMgcHJlY29tcGlsZWQgd2l0aCBhIG5ld2VyIHZlcnNpb24gb2YgSGFuZGxlYmFycyB0aGFuIHRoZSBjdXJyZW50IHJ1bnRpbWUuICcgKyAnUGxlYXNlIHVwZGF0ZSB5b3VyIHJ1bnRpbWUgdG8gYSBuZXdlciB2ZXJzaW9uICgnICsgY29tcGlsZXJJbmZvWzFdICsgJykuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGVtcGxhdGUodGVtcGxhdGVTcGVjLCBlbnYpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKCFlbnYpIHtcbiAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnTm8gZW52aXJvbm1lbnQgcGFzc2VkIHRvIHRlbXBsYXRlJyk7XG4gIH1cbiAgaWYgKCF0ZW1wbGF0ZVNwZWMgfHwgIXRlbXBsYXRlU3BlYy5tYWluKSB7XG4gICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1Vua25vd24gdGVtcGxhdGUgb2JqZWN0OiAnICsgdHlwZW9mIHRlbXBsYXRlU3BlYyk7XG4gIH1cblxuICB0ZW1wbGF0ZVNwZWMubWFpbi5kZWNvcmF0b3IgPSB0ZW1wbGF0ZVNwZWMubWFpbl9kO1xuXG4gIC8vIE5vdGU6IFVzaW5nIGVudi5WTSByZWZlcmVuY2VzIHJhdGhlciB0aGFuIGxvY2FsIHZhciByZWZlcmVuY2VzIHRocm91Z2hvdXQgdGhpcyBzZWN0aW9uIHRvIGFsbG93XG4gIC8vIGZvciBleHRlcm5hbCB1c2VycyB0byBvdmVycmlkZSB0aGVzZSBhcyBwc2V1ZG8tc3VwcG9ydGVkIEFQSXMuXG4gIGVudi5WTS5jaGVja1JldmlzaW9uKHRlbXBsYXRlU3BlYy5jb21waWxlcik7XG5cbiAgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZm9yIHByZWNvbXBpbGVkIHRlbXBsYXRlcyB3aXRoIGNvbXBpbGVyLXZlcnNpb24gNyAoPDQuMy4wKVxuICB2YXIgdGVtcGxhdGVXYXNQcmVjb21waWxlZFdpdGhDb21waWxlclY3ID0gdGVtcGxhdGVTcGVjLmNvbXBpbGVyICYmIHRlbXBsYXRlU3BlYy5jb21waWxlclswXSA9PT0gNztcblxuICBmdW5jdGlvbiBpbnZva2VQYXJ0aWFsV3JhcHBlcihwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgICAgY29udGV4dCA9IFV0aWxzLmV4dGVuZCh7fSwgY29udGV4dCwgb3B0aW9ucy5oYXNoKTtcbiAgICAgIGlmIChvcHRpb25zLmlkcykge1xuICAgICAgICBvcHRpb25zLmlkc1swXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHBhcnRpYWwgPSBlbnYuVk0ucmVzb2x2ZVBhcnRpYWwuY2FsbCh0aGlzLCBwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKTtcblxuICAgIHZhciBleHRlbmRlZE9wdGlvbnMgPSBVdGlscy5leHRlbmQoe30sIG9wdGlvbnMsIHtcbiAgICAgIGhvb2tzOiB0aGlzLmhvb2tzLFxuICAgICAgcHJvdG9BY2Nlc3NDb250cm9sOiB0aGlzLnByb3RvQWNjZXNzQ29udHJvbFxuICAgIH0pO1xuXG4gICAgdmFyIHJlc3VsdCA9IGVudi5WTS5pbnZva2VQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCwgY29udGV4dCwgZXh0ZW5kZWRPcHRpb25zKTtcblxuICAgIGlmIChyZXN1bHQgPT0gbnVsbCAmJiBlbnYuY29tcGlsZSkge1xuICAgICAgb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdID0gZW52LmNvbXBpbGUocGFydGlhbCwgdGVtcGxhdGVTcGVjLmNvbXBpbGVyT3B0aW9ucywgZW52KTtcbiAgICAgIHJlc3VsdCA9IG9wdGlvbnMucGFydGlhbHNbb3B0aW9ucy5uYW1lXShjb250ZXh0LCBleHRlbmRlZE9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICAgIGlmIChvcHRpb25zLmluZGVudCkge1xuICAgICAgICB2YXIgbGluZXMgPSByZXN1bHQuc3BsaXQoJ1xcbicpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpbmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGlmICghbGluZXNbaV0gJiYgaSArIDEgPT09IGwpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpbmVzW2ldID0gb3B0aW9ucy5pbmRlbnQgKyBsaW5lc1tpXTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSBsaW5lcy5qb2luKCdcXG4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdUaGUgcGFydGlhbCAnICsgb3B0aW9ucy5uYW1lICsgJyBjb3VsZCBub3QgYmUgY29tcGlsZWQgd2hlbiBydW5uaW5nIGluIHJ1bnRpbWUtb25seSBtb2RlJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gSnVzdCBhZGQgd2F0ZXJcbiAgdmFyIGNvbnRhaW5lciA9IHtcbiAgICBzdHJpY3Q6IGZ1bmN0aW9uIHN0cmljdChvYmosIG5hbWUsIGxvYykge1xuICAgICAgaWYgKCFvYmogfHwgIShuYW1lIGluIG9iaikpIHtcbiAgICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1wiJyArIG5hbWUgKyAnXCIgbm90IGRlZmluZWQgaW4gJyArIG9iaiwge1xuICAgICAgICAgIGxvYzogbG9jXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eShvYmosIG5hbWUpO1xuICAgIH0sXG4gICAgbG9va3VwUHJvcGVydHk6IGZ1bmN0aW9uIGxvb2t1cFByb3BlcnR5KHBhcmVudCwgcHJvcGVydHlOYW1lKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICBpZiAocmVzdWx0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyZW50LCBwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaW50ZXJuYWxQcm90b0FjY2Vzcy5yZXN1bHRJc0FsbG93ZWQocmVzdWx0LCBjb250YWluZXIucHJvdG9BY2Nlc3NDb250cm9sLCBwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sXG4gICAgbG9va3VwOiBmdW5jdGlvbiBsb29rdXAoZGVwdGhzLCBuYW1lKSB7XG4gICAgICB2YXIgbGVuID0gZGVwdGhzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRlcHRoc1tpXSAmJiBjb250YWluZXIubG9va3VwUHJvcGVydHkoZGVwdGhzW2ldLCBuYW1lKTtcbiAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGRlcHRoc1tpXVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbGFtYmRhOiBmdW5jdGlvbiBsYW1iZGEoY3VycmVudCwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBjdXJyZW50ID09PSAnZnVuY3Rpb24nID8gY3VycmVudC5jYWxsKGNvbnRleHQpIDogY3VycmVudDtcbiAgICB9LFxuXG4gICAgZXNjYXBlRXhwcmVzc2lvbjogVXRpbHMuZXNjYXBlRXhwcmVzc2lvbixcbiAgICBpbnZva2VQYXJ0aWFsOiBpbnZva2VQYXJ0aWFsV3JhcHBlcixcblxuICAgIGZuOiBmdW5jdGlvbiBmbihpKSB7XG4gICAgICB2YXIgcmV0ID0gdGVtcGxhdGVTcGVjW2ldO1xuICAgICAgcmV0LmRlY29yYXRvciA9IHRlbXBsYXRlU3BlY1tpICsgJ19kJ107XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0sXG5cbiAgICBwcm9ncmFtczogW10sXG4gICAgcHJvZ3JhbTogZnVuY3Rpb24gcHJvZ3JhbShpLCBkYXRhLCBkZWNsYXJlZEJsb2NrUGFyYW1zLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gICAgICB2YXIgcHJvZ3JhbVdyYXBwZXIgPSB0aGlzLnByb2dyYW1zW2ldLFxuICAgICAgICAgIGZuID0gdGhpcy5mbihpKTtcbiAgICAgIGlmIChkYXRhIHx8IGRlcHRocyB8fCBibG9ja1BhcmFtcyB8fCBkZWNsYXJlZEJsb2NrUGFyYW1zKSB7XG4gICAgICAgIHByb2dyYW1XcmFwcGVyID0gd3JhcFByb2dyYW0odGhpcywgaSwgZm4sIGRhdGEsIGRlY2xhcmVkQmxvY2tQYXJhbXMsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICAgICAgfSBlbHNlIGlmICghcHJvZ3JhbVdyYXBwZXIpIHtcbiAgICAgICAgcHJvZ3JhbVdyYXBwZXIgPSB0aGlzLnByb2dyYW1zW2ldID0gd3JhcFByb2dyYW0odGhpcywgaSwgZm4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb2dyYW1XcmFwcGVyO1xuICAgIH0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbiBkYXRhKHZhbHVlLCBkZXB0aCkge1xuICAgICAgd2hpbGUgKHZhbHVlICYmIGRlcHRoLS0pIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5fcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgbWVyZ2VJZk5lZWRlZDogZnVuY3Rpb24gbWVyZ2VJZk5lZWRlZChwYXJhbSwgY29tbW9uKSB7XG4gICAgICB2YXIgb2JqID0gcGFyYW0gfHwgY29tbW9uO1xuXG4gICAgICBpZiAocGFyYW0gJiYgY29tbW9uICYmIHBhcmFtICE9PSBjb21tb24pIHtcbiAgICAgICAgb2JqID0gVXRpbHMuZXh0ZW5kKHt9LCBjb21tb24sIHBhcmFtKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIC8vIEFuIGVtcHR5IG9iamVjdCB0byB1c2UgYXMgcmVwbGFjZW1lbnQgZm9yIG51bGwtY29udGV4dHNcbiAgICBudWxsQ29udGV4dDogT2JqZWN0LnNlYWwoe30pLFxuXG4gICAgbm9vcDogZW52LlZNLm5vb3AsXG4gICAgY29tcGlsZXJJbmZvOiB0ZW1wbGF0ZVNwZWMuY29tcGlsZXJcbiAgfTtcblxuICBmdW5jdGlvbiByZXQoY29udGV4dCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMV07XG5cbiAgICB2YXIgZGF0YSA9IG9wdGlvbnMuZGF0YTtcblxuICAgIHJldC5fc2V0dXAob3B0aW9ucyk7XG4gICAgaWYgKCFvcHRpb25zLnBhcnRpYWwgJiYgdGVtcGxhdGVTcGVjLnVzZURhdGEpIHtcbiAgICAgIGRhdGEgPSBpbml0RGF0YShjb250ZXh0LCBkYXRhKTtcbiAgICB9XG4gICAgdmFyIGRlcHRocyA9IHVuZGVmaW5lZCxcbiAgICAgICAgYmxvY2tQYXJhbXMgPSB0ZW1wbGF0ZVNwZWMudXNlQmxvY2tQYXJhbXMgPyBbXSA6IHVuZGVmaW5lZDtcbiAgICBpZiAodGVtcGxhdGVTcGVjLnVzZURlcHRocykge1xuICAgICAgaWYgKG9wdGlvbnMuZGVwdGhzKSB7XG4gICAgICAgIGRlcHRocyA9IGNvbnRleHQgIT0gb3B0aW9ucy5kZXB0aHNbMF0gPyBbY29udGV4dF0uY29uY2F0KG9wdGlvbnMuZGVwdGhzKSA6IG9wdGlvbnMuZGVwdGhzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVwdGhzID0gW2NvbnRleHRdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1haW4oY29udGV4dCAvKiwgb3B0aW9ucyovKSB7XG4gICAgICByZXR1cm4gJycgKyB0ZW1wbGF0ZVNwZWMubWFpbihjb250YWluZXIsIGNvbnRleHQsIGNvbnRhaW5lci5oZWxwZXJzLCBjb250YWluZXIucGFydGlhbHMsIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICAgIH1cblxuICAgIG1haW4gPSBleGVjdXRlRGVjb3JhdG9ycyh0ZW1wbGF0ZVNwZWMubWFpbiwgbWFpbiwgY29udGFpbmVyLCBvcHRpb25zLmRlcHRocyB8fCBbXSwgZGF0YSwgYmxvY2tQYXJhbXMpO1xuICAgIHJldHVybiBtYWluKGNvbnRleHQsIG9wdGlvbnMpO1xuICB9XG5cbiAgcmV0LmlzVG9wID0gdHJ1ZTtcblxuICByZXQuX3NldHVwID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMucGFydGlhbCkge1xuICAgICAgdmFyIG1lcmdlZEhlbHBlcnMgPSBVdGlscy5leHRlbmQoe30sIGVudi5oZWxwZXJzLCBvcHRpb25zLmhlbHBlcnMpO1xuICAgICAgd3JhcEhlbHBlcnNUb1Bhc3NMb29rdXBQcm9wZXJ0eShtZXJnZWRIZWxwZXJzLCBjb250YWluZXIpO1xuICAgICAgY29udGFpbmVyLmhlbHBlcnMgPSBtZXJnZWRIZWxwZXJzO1xuXG4gICAgICBpZiAodGVtcGxhdGVTcGVjLnVzZVBhcnRpYWwpIHtcbiAgICAgICAgLy8gVXNlIG1lcmdlSWZOZWVkZWQgaGVyZSB0byBwcmV2ZW50IGNvbXBpbGluZyBnbG9iYWwgcGFydGlhbHMgbXVsdGlwbGUgdGltZXNcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gY29udGFpbmVyLm1lcmdlSWZOZWVkZWQob3B0aW9ucy5wYXJ0aWFscywgZW52LnBhcnRpYWxzKTtcbiAgICAgIH1cbiAgICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlUGFydGlhbCB8fCB0ZW1wbGF0ZVNwZWMudXNlRGVjb3JhdG9ycykge1xuICAgICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IFV0aWxzLmV4dGVuZCh7fSwgZW52LmRlY29yYXRvcnMsIG9wdGlvbnMuZGVjb3JhdG9ycyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRhaW5lci5ob29rcyA9IHt9O1xuICAgICAgY29udGFpbmVyLnByb3RvQWNjZXNzQ29udHJvbCA9IF9pbnRlcm5hbFByb3RvQWNjZXNzLmNyZWF0ZVByb3RvQWNjZXNzQ29udHJvbChvcHRpb25zKTtcblxuICAgICAgdmFyIGtlZXBIZWxwZXJJbkhlbHBlcnMgPSBvcHRpb25zLmFsbG93Q2FsbHNUb0hlbHBlck1pc3NpbmcgfHwgdGVtcGxhdGVXYXNQcmVjb21waWxlZFdpdGhDb21waWxlclY3O1xuICAgICAgX2hlbHBlcnMubW92ZUhlbHBlclRvSG9va3MoY29udGFpbmVyLCAnaGVscGVyTWlzc2luZycsIGtlZXBIZWxwZXJJbkhlbHBlcnMpO1xuICAgICAgX2hlbHBlcnMubW92ZUhlbHBlclRvSG9va3MoY29udGFpbmVyLCAnYmxvY2tIZWxwZXJNaXNzaW5nJywga2VlcEhlbHBlckluSGVscGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRhaW5lci5wcm90b0FjY2Vzc0NvbnRyb2wgPSBvcHRpb25zLnByb3RvQWNjZXNzQ29udHJvbDsgLy8gaW50ZXJuYWwgb3B0aW9uXG4gICAgICBjb250YWluZXIuaGVscGVycyA9IG9wdGlvbnMuaGVscGVycztcbiAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IG9wdGlvbnMucGFydGlhbHM7XG4gICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IG9wdGlvbnMuZGVjb3JhdG9ycztcbiAgICAgIGNvbnRhaW5lci5ob29rcyA9IG9wdGlvbnMuaG9va3M7XG4gICAgfVxuICB9O1xuXG4gIHJldC5fY2hpbGQgPSBmdW5jdGlvbiAoaSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocykge1xuICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlQmxvY2tQYXJhbXMgJiYgIWJsb2NrUGFyYW1zKSB7XG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnbXVzdCBwYXNzIGJsb2NrIHBhcmFtcycpO1xuICAgIH1cbiAgICBpZiAodGVtcGxhdGVTcGVjLnVzZURlcHRocyAmJiAhZGVwdGhzKSB7XG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnbXVzdCBwYXNzIHBhcmVudCBkZXB0aHMnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gd3JhcFByb2dyYW0oY29udGFpbmVyLCBpLCB0ZW1wbGF0ZVNwZWNbaV0sIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICB9O1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiB3cmFwUHJvZ3JhbShjb250YWluZXIsIGksIGZuLCBkYXRhLCBkZWNsYXJlZEJsb2NrUGFyYW1zLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gIGZ1bmN0aW9uIHByb2coY29udGV4dCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMV07XG5cbiAgICB2YXIgY3VycmVudERlcHRocyA9IGRlcHRocztcbiAgICBpZiAoZGVwdGhzICYmIGNvbnRleHQgIT0gZGVwdGhzWzBdICYmICEoY29udGV4dCA9PT0gY29udGFpbmVyLm51bGxDb250ZXh0ICYmIGRlcHRoc1swXSA9PT0gbnVsbCkpIHtcbiAgICAgIGN1cnJlbnREZXB0aHMgPSBbY29udGV4dF0uY29uY2F0KGRlcHRocyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZuKGNvbnRhaW5lciwgY29udGV4dCwgY29udGFpbmVyLmhlbHBlcnMsIGNvbnRhaW5lci5wYXJ0aWFscywgb3B0aW9ucy5kYXRhIHx8IGRhdGEsIGJsb2NrUGFyYW1zICYmIFtvcHRpb25zLmJsb2NrUGFyYW1zXS5jb25jYXQoYmxvY2tQYXJhbXMpLCBjdXJyZW50RGVwdGhzKTtcbiAgfVxuXG4gIHByb2cgPSBleGVjdXRlRGVjb3JhdG9ycyhmbiwgcHJvZywgY29udGFpbmVyLCBkZXB0aHMsIGRhdGEsIGJsb2NrUGFyYW1zKTtcblxuICBwcm9nLnByb2dyYW0gPSBpO1xuICBwcm9nLmRlcHRoID0gZGVwdGhzID8gZGVwdGhzLmxlbmd0aCA6IDA7XG4gIHByb2cuYmxvY2tQYXJhbXMgPSBkZWNsYXJlZEJsb2NrUGFyYW1zIHx8IDA7XG4gIHJldHVybiBwcm9nO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgY3VycmVudGx5IHBhcnQgb2YgdGhlIG9mZmljaWFsIEFQSSwgdGhlcmVmb3JlIGltcGxlbWVudGF0aW9uIGRldGFpbHMgc2hvdWxkIG5vdCBiZSBjaGFuZ2VkLlxuICovXG5cbmZ1bmN0aW9uIHJlc29sdmVQYXJ0aWFsKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgaWYgKCFwYXJ0aWFsKSB7XG4gICAgaWYgKG9wdGlvbnMubmFtZSA9PT0gJ0BwYXJ0aWFsLWJsb2NrJykge1xuICAgICAgcGFydGlhbCA9IG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJ0aWFsID0gb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdO1xuICAgIH1cbiAgfSBlbHNlIGlmICghcGFydGlhbC5jYWxsICYmICFvcHRpb25zLm5hbWUpIHtcbiAgICAvLyBUaGlzIGlzIGEgZHluYW1pYyBwYXJ0aWFsIHRoYXQgcmV0dXJuZWQgYSBzdHJpbmdcbiAgICBvcHRpb25zLm5hbWUgPSBwYXJ0aWFsO1xuICAgIHBhcnRpYWwgPSBvcHRpb25zLnBhcnRpYWxzW3BhcnRpYWxdO1xuICB9XG4gIHJldHVybiBwYXJ0aWFsO1xufVxuXG5mdW5jdGlvbiBpbnZva2VQYXJ0aWFsKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgLy8gVXNlIHRoZSBjdXJyZW50IGNsb3N1cmUgY29udGV4dCB0byBzYXZlIHRoZSBwYXJ0aWFsLWJsb2NrIGlmIHRoaXMgcGFydGlhbFxuICB2YXIgY3VycmVudFBhcnRpYWxCbG9jayA9IG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXTtcbiAgb3B0aW9ucy5wYXJ0aWFsID0gdHJ1ZTtcbiAgaWYgKG9wdGlvbnMuaWRzKSB7XG4gICAgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoID0gb3B0aW9ucy5pZHNbMF0gfHwgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoO1xuICB9XG5cbiAgdmFyIHBhcnRpYWxCbG9jayA9IHVuZGVmaW5lZDtcbiAgaWYgKG9wdGlvbnMuZm4gJiYgb3B0aW9ucy5mbiAhPT0gbm9vcCkge1xuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICBvcHRpb25zLmRhdGEgPSBfYmFzZS5jcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgLy8gV3JhcHBlciBmdW5jdGlvbiB0byBnZXQgYWNjZXNzIHRvIGN1cnJlbnRQYXJ0aWFsQmxvY2sgZnJvbSB0aGUgY2xvc3VyZVxuICAgICAgdmFyIGZuID0gb3B0aW9ucy5mbjtcbiAgICAgIHBhcnRpYWxCbG9jayA9IG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddID0gZnVuY3Rpb24gcGFydGlhbEJsb2NrV3JhcHBlcihjb250ZXh0KSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMV07XG5cbiAgICAgICAgLy8gUmVzdG9yZSB0aGUgcGFydGlhbC1ibG9jayBmcm9tIHRoZSBjbG9zdXJlIGZvciB0aGUgZXhlY3V0aW9uIG9mIHRoZSBibG9ja1xuICAgICAgICAvLyBpLmUuIHRoZSBwYXJ0IGluc2lkZSB0aGUgYmxvY2sgb2YgdGhlIHBhcnRpYWwgY2FsbC5cbiAgICAgICAgb3B0aW9ucy5kYXRhID0gX2Jhc2UuY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ10gPSBjdXJyZW50UGFydGlhbEJsb2NrO1xuICAgICAgICByZXR1cm4gZm4oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgICB9O1xuICAgICAgaWYgKGZuLnBhcnRpYWxzKSB7XG4gICAgICAgIG9wdGlvbnMucGFydGlhbHMgPSBVdGlscy5leHRlbmQoe30sIG9wdGlvbnMucGFydGlhbHMsIGZuLnBhcnRpYWxzKTtcbiAgICAgIH1cbiAgICB9KSgpO1xuICB9XG5cbiAgaWYgKHBhcnRpYWwgPT09IHVuZGVmaW5lZCAmJiBwYXJ0aWFsQmxvY2spIHtcbiAgICBwYXJ0aWFsID0gcGFydGlhbEJsb2NrO1xuICB9XG5cbiAgaWYgKHBhcnRpYWwgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdUaGUgcGFydGlhbCAnICsgb3B0aW9ucy5uYW1lICsgJyBjb3VsZCBub3QgYmUgZm91bmQnKTtcbiAgfSBlbHNlIGlmIChwYXJ0aWFsIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICByZXR1cm4gcGFydGlhbChjb250ZXh0LCBvcHRpb25zKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBub29wKCkge1xuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhKGNvbnRleHQsIGRhdGEpIHtcbiAgaWYgKCFkYXRhIHx8ICEoJ3Jvb3QnIGluIGRhdGEpKSB7XG4gICAgZGF0YSA9IGRhdGEgPyBfYmFzZS5jcmVhdGVGcmFtZShkYXRhKSA6IHt9O1xuICAgIGRhdGEucm9vdCA9IGNvbnRleHQ7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGV4ZWN1dGVEZWNvcmF0b3JzKGZuLCBwcm9nLCBjb250YWluZXIsIGRlcHRocywgZGF0YSwgYmxvY2tQYXJhbXMpIHtcbiAgaWYgKGZuLmRlY29yYXRvcikge1xuICAgIHZhciBwcm9wcyA9IHt9O1xuICAgIHByb2cgPSBmbi5kZWNvcmF0b3IocHJvZywgcHJvcHMsIGNvbnRhaW5lciwgZGVwdGhzICYmIGRlcHRoc1swXSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gICAgVXRpbHMuZXh0ZW5kKHByb2csIHByb3BzKTtcbiAgfVxuICByZXR1cm4gcHJvZztcbn1cblxuZnVuY3Rpb24gd3JhcEhlbHBlcnNUb1Bhc3NMb29rdXBQcm9wZXJ0eShtZXJnZWRIZWxwZXJzLCBjb250YWluZXIpIHtcbiAgT2JqZWN0LmtleXMobWVyZ2VkSGVscGVycykuZm9yRWFjaChmdW5jdGlvbiAoaGVscGVyTmFtZSkge1xuICAgIHZhciBoZWxwZXIgPSBtZXJnZWRIZWxwZXJzW2hlbHBlck5hbWVdO1xuICAgIG1lcmdlZEhlbHBlcnNbaGVscGVyTmFtZV0gPSBwYXNzTG9va3VwUHJvcGVydHlPcHRpb24oaGVscGVyLCBjb250YWluZXIpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcGFzc0xvb2t1cFByb3BlcnR5T3B0aW9uKGhlbHBlciwgY29udGFpbmVyKSB7XG4gIHZhciBsb29rdXBQcm9wZXJ0eSA9IGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eTtcbiAgcmV0dXJuIF9pbnRlcm5hbFdyYXBIZWxwZXIud3JhcEhlbHBlcihoZWxwZXIsIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgcmV0dXJuIFV0aWxzLmV4dGVuZCh7IGxvb2t1cFByb3BlcnR5OiBsb29rdXBQcm9wZXJ0eSB9LCBvcHRpb25zKTtcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwzSjFiblJwYldVdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPenM3T3pzN2NVSkJRWFZDTEZOQlFWTTdPMGxCUVhCQ0xFdEJRVXM3TzNsQ1FVTkxMR0ZCUVdFN096czdiMEpCVFRWQ0xGRkJRVkU3TzNWQ1FVTnRRaXhYUVVGWE96dHJRMEZEYkVJc2RVSkJRWFZDT3p0dFEwRkpNME1zZVVKQlFYbENPenRCUVVWNlFpeFRRVUZUTEdGQlFXRXNRMEZCUXl4WlFVRlpMRVZCUVVVN1FVRkRNVU1zVFVGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhCUVVGRExGbEJRVmtzU1VGQlNTeFpRVUZaTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVzc1EwRkJRenROUVVNM1JDeGxRVUZsTERCQ1FVRnZRaXhEUVVGRE96dEJRVVYwUXl4TlFVTkZMR2RDUVVGblFpd3lRMEZCY1VNc1NVRkRja1FzWjBKQlFXZENMREpDUVVGeFFpeEZRVU55UXp0QlFVTkJMRmRCUVU4N1IwRkRVanM3UVVGRlJDeE5RVUZKTEdkQ1FVRm5RaXd3UTBGQmIwTXNSVUZCUlR0QlFVTjRSQ3hSUVVGTkxHVkJRV1VzUjBGQlJ5eDFRa0ZCYVVJc1pVRkJaU3hEUVVGRE8xRkJRM1pFTEdkQ1FVRm5RaXhIUVVGSExIVkNRVUZwUWl4blFrRkJaMElzUTBGQlF5eERRVUZETzBGQlEzaEVMRlZCUVUwc01rSkJRMG9zZVVaQlFYbEdMRWRCUTNaR0xIRkVRVUZ4UkN4SFFVTnlSQ3hsUVVGbExFZEJRMllzYlVSQlFXMUVMRWRCUTI1RUxHZENRVUZuUWl4SFFVTm9RaXhKUVVGSkxFTkJRMUFzUTBGQlF6dEhRVU5JTEUxQlFVMDdPMEZCUlV3c1ZVRkJUU3d5UWtGRFNpeDNSa0ZCZDBZc1IwRkRkRVlzYVVSQlFXbEVMRWRCUTJwRUxGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZEWml4SlFVRkpMRU5CUTFBc1EwRkJRenRIUVVOSU8wTkJRMFk3TzBGQlJVMHNVMEZCVXl4UlFVRlJMRU5CUVVNc1dVRkJXU3hGUVVGRkxFZEJRVWNzUlVGQlJUczdRVUZGTVVNc1RVRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJUdEJRVU5TTEZWQlFVMHNNa0pCUVdNc2JVTkJRVzFETEVOQlFVTXNRMEZCUXp0SFFVTXhSRHRCUVVORUxFMUJRVWtzUTBGQlF5eFpRVUZaTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hGUVVGRk8wRkJRM1pETEZWQlFVMHNNa0pCUVdNc01rSkJRVEpDTEVkQlFVY3NUMEZCVHl4WlFVRlpMRU5CUVVNc1EwRkJRenRIUVVONFJUczdRVUZGUkN4alFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eFpRVUZaTEVOQlFVTXNUVUZCVFN4RFFVRkRPenM3TzBGQlNXeEVMRXRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zWVVGQllTeERRVUZETEZsQlFWa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenM3TzBGQlJ6VkRMRTFCUVUwc2IwTkJRVzlETEVkQlEzaERMRmxCUVZrc1EwRkJReXhSUVVGUkxFbEJRVWtzV1VGQldTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03TzBGQlJURkVMRmRCUVZNc2IwSkJRVzlDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1JVRkJSU3hQUVVGUExFVkJRVVU3UVVGRGRrUXNVVUZCU1N4UFFVRlBMRU5CUVVNc1NVRkJTU3hGUVVGRk8wRkJRMmhDTEdGQlFVOHNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzUlVGQlJTeFBRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMnhFTEZWQlFVa3NUMEZCVHl4RFFVRkRMRWRCUVVjc1JVRkJSVHRCUVVObUxHVkJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRE8wOUJRM1pDTzB0QlEwWTdRVUZEUkN4WFFVRlBMRWRCUVVjc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPenRCUVVWMFJTeFJRVUZKTEdWQlFXVXNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzUlVGQlJTeFBRVUZQTEVWQlFVVTdRVUZET1VNc1YwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTzBGQlEycENMSGRDUVVGclFpeEZRVUZGTEVsQlFVa3NRMEZCUXl4clFrRkJhMEk3UzBGRE5VTXNRMEZCUXl4RFFVRkRPenRCUVVWSUxGRkJRVWtzVFVGQlRTeEhRVUZITEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzUTBGRGNFTXNTVUZCU1N4RlFVTktMRTlCUVU4c1JVRkRVQ3hQUVVGUExFVkJRMUFzWlVGQlpTeERRVU5vUWl4RFFVRkRPenRCUVVWR0xGRkJRVWtzVFVGQlRTeEpRVUZKTEVsQlFVa3NTVUZCU1N4SFFVRkhMRU5CUVVNc1QwRkJUeXhGUVVGRk8wRkJRMnBETEdGQlFVOHNRMEZCUXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUXpGRExFOUJRVThzUlVGRFVDeFpRVUZaTEVOQlFVTXNaVUZCWlN4RlFVTTFRaXhIUVVGSExFTkJRMG9zUTBGQlF6dEJRVU5HTEZsQlFVMHNSMEZCUnl4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4UFFVRlBMRVZCUVVVc1pVRkJaU3hEUVVGRExFTkJRVU03UzBGRGJrVTdRVUZEUkN4UlFVRkpMRTFCUVUwc1NVRkJTU3hKUVVGSkxFVkJRVVU3UVVGRGJFSXNWVUZCU1N4UFFVRlBMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRMnhDTEZsQlFVa3NTMEZCU3l4SFFVRkhMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZETDBJc1lVRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVNMVF5eGpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZPMEZCUXpWQ0xHdENRVUZOTzFkQlExQTdPMEZCUlVRc1pVRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEU5QlFVOHNRMEZCUXl4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFOQlEzUkRPMEZCUTBRc1kwRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1QwRkRNMEk3UVVGRFJDeGhRVUZQTEUxQlFVMHNRMEZCUXp0TFFVTm1MRTFCUVUwN1FVRkRUQ3haUVVGTkxESkNRVU5LTEdOQlFXTXNSMEZEV2l4UFFVRlBMRU5CUVVNc1NVRkJTU3hIUVVOYUxEQkVRVUV3UkN4RFFVTTNSQ3hEUVVGRE8wdEJRMGc3UjBGRFJqczdPMEZCUjBRc1RVRkJTU3hUUVVGVExFZEJRVWM3UVVGRFpDeFZRVUZOTEVWQlFVVXNaMEpCUVZNc1IwRkJSeXhGUVVGRkxFbEJRVWtzUlVGQlJTeEhRVUZITEVWQlFVVTdRVUZETDBJc1ZVRkJTU3hEUVVGRExFZEJRVWNzU1VGQlNTeEZRVUZGTEVsQlFVa3NTVUZCU1N4SFFVRkhMRU5CUVVFc1FVRkJReXhGUVVGRk8wRkJRekZDTEdOQlFVMHNNa0pCUVdNc1IwRkJSeXhIUVVGSExFbEJRVWtzUjBGQlJ5eHRRa0ZCYlVJc1IwRkJSeXhIUVVGSExFVkJRVVU3UVVGRE1VUXNZVUZCUnl4RlFVRkZMRWRCUVVjN1UwRkRWQ3hEUVVGRExFTkJRVU03VDBGRFNqdEJRVU5FTEdGQlFVOHNVMEZCVXl4RFFVRkRMR05CUVdNc1EwRkJReXhIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdTMEZETlVNN1FVRkRSQ3hyUWtGQll5eEZRVUZGTEhkQ1FVRlRMRTFCUVUwc1JVRkJSU3haUVVGWkxFVkJRVVU3UVVGRE4wTXNWVUZCU1N4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzBGQlEyeERMRlZCUVVrc1RVRkJUU3hKUVVGSkxFbEJRVWtzUlVGQlJUdEJRVU5zUWl4bFFVRlBMRTFCUVUwc1EwRkJRenRQUVVObU8wRkJRMFFzVlVGQlNTeE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEZsQlFWa3NRMEZCUXl4RlFVRkZPMEZCUXpsRUxHVkJRVThzVFVGQlRTeERRVUZETzA5QlEyWTdPMEZCUlVRc1ZVRkJTU3h4UTBGQlowSXNUVUZCVFN4RlFVRkZMRk5CUVZNc1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4WlFVRlpMRU5CUVVNc1JVRkJSVHRCUVVOMlJTeGxRVUZQTEUxQlFVMHNRMEZCUXp0UFFVTm1PMEZCUTBRc1lVRkJUeXhUUVVGVExFTkJRVU03UzBGRGJFSTdRVUZEUkN4VlFVRk5MRVZCUVVVc1owSkJRVk1zVFVGQlRTeEZRVUZGTEVsQlFVa3NSVUZCUlR0QlFVTTNRaXhWUVVGTkxFZEJRVWNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRPMEZCUXpGQ0xGZEJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhIUVVGSExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdRVUZETlVJc1dVRkJTU3hOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRk5CUVZNc1EwRkJReXhqUVVGakxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRM0JGTEZsQlFVa3NUVUZCVFN4SlFVRkpMRWxCUVVrc1JVRkJSVHRCUVVOc1FpeHBRa0ZCVHl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVMEZEZUVJN1QwRkRSanRMUVVOR08wRkJRMFFzVlVGQlRTeEZRVUZGTEdkQ1FVRlRMRTlCUVU4c1JVRkJSU3hQUVVGUExFVkJRVVU3UVVGRGFrTXNZVUZCVHl4UFFVRlBMRTlCUVU4c1MwRkJTeXhWUVVGVkxFZEJRVWNzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhQUVVGUExFTkJRVU03UzBGRGVFVTdPMEZCUlVRc2IwSkJRV2RDTEVWQlFVVXNTMEZCU3l4RFFVRkRMR2RDUVVGblFqdEJRVU40UXl4cFFrRkJZU3hGUVVGRkxHOUNRVUZ2UWpzN1FVRkZia01zVFVGQlJTeEZRVUZGTEZsQlFWTXNRMEZCUXl4RlFVRkZPMEZCUTJRc1ZVRkJTU3hIUVVGSExFZEJRVWNzV1VGQldTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUXpGQ0xGTkJRVWNzUTBGQlF5eFRRVUZUTEVkQlFVY3NXVUZCV1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU4yUXl4aFFVRlBMRWRCUVVjc1EwRkJRenRMUVVOYU96dEJRVVZFTEZsQlFWRXNSVUZCUlN4RlFVRkZPMEZCUTFvc1YwRkJUeXhGUVVGRkxHbENRVUZUTEVOQlFVTXNSVUZCUlN4SlFVRkpMRVZCUVVVc2JVSkJRVzFDTEVWQlFVVXNWMEZCVnl4RlFVRkZMRTFCUVUwc1JVRkJSVHRCUVVOdVJTeFZRVUZKTEdOQlFXTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF6dFZRVU51UXl4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTnNRaXhWUVVGSkxFbEJRVWtzU1VGQlNTeE5RVUZOTEVsQlFVa3NWMEZCVnl4SlFVRkpMRzFDUVVGdFFpeEZRVUZGTzBGQlEzaEVMSE5DUVVGakxFZEJRVWNzVjBGQlZ5eERRVU14UWl4SlFVRkpMRVZCUTBvc1EwRkJReXhGUVVORUxFVkJRVVVzUlVGRFJpeEpRVUZKTEVWQlEwb3NiVUpCUVcxQ0xFVkJRMjVDTEZkQlFWY3NSVUZEV0N4TlFVRk5MRU5CUTFBc1EwRkJRenRQUVVOSUxFMUJRVTBzU1VGQlNTeERRVUZETEdOQlFXTXNSVUZCUlR0QlFVTXhRaXh6UWtGQll5eEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzVjBGQlZ5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU03VDBGRE9VUTdRVUZEUkN4aFFVRlBMR05CUVdNc1EwRkJRenRMUVVOMlFqczdRVUZGUkN4UlFVRkpMRVZCUVVVc1kwRkJVeXhMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTzBGQlF6TkNMR0ZCUVU4c1MwRkJTeXhKUVVGSkxFdEJRVXNzUlVGQlJTeEZRVUZGTzBGQlEzWkNMR0ZCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETzA5QlEzWkNPMEZCUTBRc1lVRkJUeXhMUVVGTExFTkJRVU03UzBGRFpEdEJRVU5FTEdsQ1FVRmhMRVZCUVVVc2RVSkJRVk1zUzBGQlN5eEZRVUZGTEUxQlFVMHNSVUZCUlR0QlFVTnlReXhWUVVGSkxFZEJRVWNzUjBGQlJ5eExRVUZMTEVsQlFVa3NUVUZCVFN4RFFVRkRPenRCUVVVeFFpeFZRVUZKTEV0QlFVc3NTVUZCU1N4TlFVRk5MRWxCUVVrc1MwRkJTeXhMUVVGTExFMUJRVTBzUlVGQlJUdEJRVU4yUXl4WFFVRkhMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTEVWQlFVVXNUVUZCVFN4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8wOUJRM1pET3p0QlFVVkVMR0ZCUVU4c1IwRkJSeXhEUVVGRE8wdEJRMW83TzBGQlJVUXNaVUZCVnl4RlFVRkZMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZET3p0QlFVVTFRaXhSUVVGSkxFVkJRVVVzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpPMEZCUTJwQ0xHZENRVUZaTEVWQlFVVXNXVUZCV1N4RFFVRkRMRkZCUVZFN1IwRkRjRU1zUTBGQlF6czdRVUZGUml4WFFVRlRMRWRCUVVjc1EwRkJReXhQUVVGUExFVkJRV2RDTzFGQlFXUXNUMEZCVHl4NVJFRkJSeXhGUVVGRk96dEJRVU5vUXl4UlFVRkpMRWxCUVVrc1IwRkJSeXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZET3p0QlFVVjRRaXhQUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMEZCUTNCQ0xGRkJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4SlFVRkpMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVU3UVVGRE5VTXNWVUZCU1N4SFFVRkhMRkZCUVZFc1EwRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdTMEZEYUVNN1FVRkRSQ3hSUVVGSkxFMUJRVTBzV1VGQlFUdFJRVU5TTEZkQlFWY3NSMEZCUnl4WlFVRlpMRU5CUVVNc1kwRkJZeXhIUVVGSExFVkJRVVVzUjBGQlJ5eFRRVUZUTEVOQlFVTTdRVUZETjBRc1VVRkJTU3haUVVGWkxFTkJRVU1zVTBGQlV5eEZRVUZGTzBGQlF6RkNMRlZCUVVrc1QwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJUdEJRVU5zUWl4alFVRk5MRWRCUTBvc1QwRkJUeXhKUVVGSkxFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUTNoQ0xFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGRGFFTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJRenRQUVVOMFFpeE5RVUZOTzBGQlEwd3NZMEZCVFN4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03VDBGRGNFSTdTMEZEUmpzN1FVRkZSQ3hoUVVGVExFbEJRVWtzUTBGQlF5eFBRVUZQTEdkQ1FVRm5RanRCUVVOdVF5eGhRVU5GTEVWQlFVVXNSMEZEUml4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVObUxGTkJRVk1zUlVGRFZDeFBRVUZQTEVWQlExQXNVMEZCVXl4RFFVRkRMRTlCUVU4c1JVRkRha0lzVTBGQlV5eERRVUZETEZGQlFWRXNSVUZEYkVJc1NVRkJTU3hGUVVOS0xGZEJRVmNzUlVGRFdDeE5RVUZOTEVOQlExQXNRMEZEUkR0TFFVTklPenRCUVVWRUxGRkJRVWtzUjBGQlJ5eHBRa0ZCYVVJc1EwRkRkRUlzV1VGQldTeERRVUZETEVsQlFVa3NSVUZEYWtJc1NVRkJTU3hGUVVOS0xGTkJRVk1zUlVGRFZDeFBRVUZQTEVOQlFVTXNUVUZCVFN4SlFVRkpMRVZCUVVVc1JVRkRjRUlzU1VGQlNTeEZRVU5LTEZkQlFWY3NRMEZEV2l4RFFVRkRPMEZCUTBZc1YwRkJUeXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMGRCUXk5Q096dEJRVVZFTEV0QlFVY3NRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRE96dEJRVVZxUWl4TFFVRkhMRU5CUVVNc1RVRkJUU3hIUVVGSExGVkJRVk1zVDBGQlR5eEZRVUZGTzBGQlF6ZENMRkZCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eEZRVUZGTzBGQlEzQkNMRlZCUVVrc1lVRkJZU3hIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMRWRCUVVjc1EwRkJReXhQUVVGUExFVkJRVVVzVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMEZCUTI1RkxIRkRRVUVyUWl4RFFVRkRMR0ZCUVdFc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6dEJRVU14UkN4bFFVRlRMRU5CUVVNc1QwRkJUeXhIUVVGSExHRkJRV0VzUTBGQlF6czdRVUZGYkVNc1ZVRkJTU3haUVVGWkxFTkJRVU1zVlVGQlZTeEZRVUZGT3p0QlFVVXpRaXhwUWtGQlV5eERRVUZETEZGQlFWRXNSMEZCUnl4VFFVRlRMRU5CUVVNc1lVRkJZU3hEUVVNeFF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RlFVTm9RaXhIUVVGSExFTkJRVU1zVVVGQlVTeERRVU5pTEVOQlFVTTdUMEZEU0R0QlFVTkVMRlZCUVVrc1dVRkJXU3hEUVVGRExGVkJRVlVzU1VGQlNTeFpRVUZaTEVOQlFVTXNZVUZCWVN4RlFVRkZPMEZCUTNwRUxHbENRVUZUTEVOQlFVTXNWVUZCVlN4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRMnBETEVWQlFVVXNSVUZEUml4SFFVRkhMRU5CUVVNc1ZVRkJWU3hGUVVOa0xFOUJRVThzUTBGQlF5eFZRVUZWTEVOQlEyNUNMRU5CUVVNN1QwRkRTRHM3UVVGRlJDeGxRVUZUTEVOQlFVTXNTMEZCU3l4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVOeVFpeGxRVUZUTEVOQlFVTXNhMEpCUVd0Q0xFZEJRVWNzT0VOQlFYbENMRTlCUVU4c1EwRkJReXhEUVVGRE96dEJRVVZxUlN4VlFVRkpMRzFDUVVGdFFpeEhRVU55UWl4UFFVRlBMRU5CUVVNc2VVSkJRWGxDTEVsQlEycERMRzlEUVVGdlF5eERRVUZETzBGQlEzWkRMR2xEUVVGclFpeFRRVUZUTEVWQlFVVXNaVUZCWlN4RlFVRkZMRzFDUVVGdFFpeERRVUZETEVOQlFVTTdRVUZEYmtVc2FVTkJRV3RDTEZOQlFWTXNSVUZCUlN4dlFrRkJiMElzUlVGQlJTeHRRa0ZCYlVJc1EwRkJReXhEUVVGRE8wdEJRM3BGTEUxQlFVMDdRVUZEVEN4bFFVRlRMRU5CUVVNc2EwSkJRV3RDTEVkQlFVY3NUMEZCVHl4RFFVRkRMR3RDUVVGclFpeERRVUZETzBGQlF6RkVMR1ZCUVZNc1EwRkJReXhQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXp0QlFVTndReXhsUVVGVExFTkJRVU1zVVVGQlVTeEhRVUZITEU5QlFVOHNRMEZCUXl4UlFVRlJMRU5CUVVNN1FVRkRkRU1zWlVGQlV5eERRVUZETEZWQlFWVXNSMEZCUnl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hEUVVGRE8wRkJRekZETEdWQlFWTXNRMEZCUXl4TFFVRkxMRWRCUVVjc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF6dExRVU5xUXp0SFFVTkdMRU5CUVVNN08wRkJSVVlzUzBGQlJ5eERRVUZETEUxQlFVMHNSMEZCUnl4VlFVRlRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFVkJRVVVzVjBGQlZ5eEZRVUZGTEUxQlFVMHNSVUZCUlR0QlFVTnNSQ3hSUVVGSkxGbEJRVmtzUTBGQlF5eGpRVUZqTEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVN1FVRkRMME1zV1VGQlRTd3lRa0ZCWXl4M1FrRkJkMElzUTBGQlF5eERRVUZETzB0QlF5OURPMEZCUTBRc1VVRkJTU3haUVVGWkxFTkJRVU1zVTBGQlV5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZPMEZCUTNKRExGbEJRVTBzTWtKQlFXTXNlVUpCUVhsQ0xFTkJRVU1zUTBGQlF6dExRVU5vUkRzN1FVRkZSQ3hYUVVGUExGZEJRVmNzUTBGRGFFSXNVMEZCVXl4RlFVTlVMRU5CUVVNc1JVRkRSQ3haUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlEyWXNTVUZCU1N4RlFVTktMRU5CUVVNc1JVRkRSQ3hYUVVGWExFVkJRMWdzVFVGQlRTeERRVU5RTEVOQlFVTTdSMEZEU0N4RFFVRkRPMEZCUTBZc1UwRkJUeXhIUVVGSExFTkJRVU03UTBGRFdqczdRVUZGVFN4VFFVRlRMRmRCUVZjc1EwRkRla0lzVTBGQlV5eEZRVU5VTEVOQlFVTXNSVUZEUkN4RlFVRkZMRVZCUTBZc1NVRkJTU3hGUVVOS0xHMUNRVUZ0UWl4RlFVTnVRaXhYUVVGWExFVkJRMWdzVFVGQlRTeEZRVU5PTzBGQlEwRXNWMEZCVXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGblFqdFJRVUZrTEU5QlFVOHNlVVJCUVVjc1JVRkJSVHM3UVVGRGFrTXNVVUZCU1N4aFFVRmhMRWRCUVVjc1RVRkJUU3hEUVVGRE8wRkJRek5DTEZGQlEwVXNUVUZCVFN4SlFVTk9MRTlCUVU4c1NVRkJTU3hOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVsQlEzQkNMRVZCUVVVc1QwRkJUeXhMUVVGTExGTkJRVk1zUTBGQlF5eFhRVUZYTEVsQlFVa3NUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFbEJRVWtzUTBGQlFTeEJRVUZETEVWQlF6RkVPMEZCUTBFc2JVSkJRV0VzUjBGQlJ5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dExRVU14UXpzN1FVRkZSQ3hYUVVGUExFVkJRVVVzUTBGRFVDeFRRVUZUTEVWQlExUXNUMEZCVHl4RlFVTlFMRk5CUVZNc1EwRkJReXhQUVVGUExFVkJRMnBDTEZOQlFWTXNRMEZCUXl4UlFVRlJMRVZCUTJ4Q0xFOUJRVThzUTBGQlF5eEpRVUZKTEVsQlFVa3NTVUZCU1N4RlFVTndRaXhYUVVGWExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eEZRVU40UkN4aFFVRmhMRU5CUTJRc1EwRkJRenRIUVVOSU96dEJRVVZFTEUxQlFVa3NSMEZCUnl4cFFrRkJhVUlzUTBGQlF5eEZRVUZGTEVWQlFVVXNTVUZCU1N4RlFVRkZMRk5CUVZNc1JVRkJSU3hOUVVGTkxFVkJRVVVzU1VGQlNTeEZRVUZGTEZkQlFWY3NRMEZCUXl4RFFVRkRPenRCUVVWNlJTeE5RVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOcVFpeE5RVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTjRReXhOUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEcxQ1FVRnRRaXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU0xUXl4VFFVRlBMRWxCUVVrc1EwRkJRenREUVVOaU96czdPenM3UVVGTFRTeFRRVUZUTEdOQlFXTXNRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJUdEJRVU40UkN4TlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRk8wRkJRMW9zVVVGQlNTeFBRVUZQTEVOQlFVTXNTVUZCU1N4TFFVRkxMR2RDUVVGblFpeEZRVUZGTzBGQlEzSkRMR0ZCUVU4c1IwRkJSeXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPMHRCUTNwRExFMUJRVTA3UVVGRFRDeGhRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTMEZETVVNN1IwRkRSaXhOUVVGTkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUlVGQlJUczdRVUZGZWtNc1YwRkJUeXhEUVVGRExFbEJRVWtzUjBGQlJ5eFBRVUZQTEVOQlFVTTdRVUZEZGtJc1YwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1IwRkRja003UVVGRFJDeFRRVUZQTEU5QlFVOHNRMEZCUXp0RFFVTm9RanM3UVVGRlRTeFRRVUZUTEdGQlFXRXNRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJUczdRVUZGZGtRc1RVRkJUU3h0UWtGQmJVSXNSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hKUVVGSkxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNN1FVRkRNVVVzVTBGQlR5eERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkRka0lzVFVGQlNTeFBRVUZQTEVOQlFVTXNSMEZCUnl4RlFVRkZPMEZCUTJZc1YwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVkQlFVY3NUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJRenRIUVVOMlJUczdRVUZGUkN4TlFVRkpMRmxCUVZrc1dVRkJRU3hEUVVGRE8wRkJRMnBDTEUxQlFVa3NUMEZCVHl4RFFVRkRMRVZCUVVVc1NVRkJTU3hQUVVGUExFTkJRVU1zUlVGQlJTeExRVUZMTEVsQlFVa3NSVUZCUlRzN1FVRkRja01zWVVGQlR5eERRVUZETEVsQlFVa3NSMEZCUnl4clFrRkJXU3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdPMEZCUlhwRExGVkJRVWtzUlVGQlJTeEhRVUZITEU5QlFVOHNRMEZCUXl4RlFVRkZMRU5CUVVNN1FVRkRjRUlzYTBKQlFWa3NSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eEhRVUZITEZOQlFWTXNiVUpCUVcxQ0xFTkJRM3BGTEU5QlFVOHNSVUZGVUR0WlFVUkJMRTlCUVU4c2VVUkJRVWNzUlVGQlJUczdPenRCUVVsYUxHVkJRVThzUTBGQlF5eEpRVUZKTEVkQlFVY3NhMEpCUVZrc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEzcERMR1ZCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEVkQlFVY3NiVUpCUVcxQ0xFTkJRVU03UVVGRGNFUXNaVUZCVHl4RlFVRkZMRU5CUVVNc1QwRkJUeXhGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETzA5QlF6ZENMRU5CUVVNN1FVRkRSaXhWUVVGSkxFVkJRVVVzUTBGQlF5eFJRVUZSTEVWQlFVVTdRVUZEWml4bFFVRlBMRU5CUVVNc1VVRkJVU3hIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMRTlCUVU4c1EwRkJReXhSUVVGUkxFVkJRVVVzUlVGQlJTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMDlCUTNCRk96dEhRVU5HT3p0QlFVVkVMRTFCUVVrc1QwRkJUeXhMUVVGTExGTkJRVk1zU1VGQlNTeFpRVUZaTEVWQlFVVTdRVUZEZWtNc1YwRkJUeXhIUVVGSExGbEJRVmtzUTBGQlF6dEhRVU40UWpzN1FVRkZSQ3hOUVVGSkxFOUJRVThzUzBGQlN5eFRRVUZUTEVWQlFVVTdRVUZEZWtJc1ZVRkJUU3d5UWtGQll5eGpRVUZqTEVkQlFVY3NUMEZCVHl4RFFVRkRMRWxCUVVrc1IwRkJSeXh4UWtGQmNVSXNRMEZCUXl4RFFVRkRPMGRCUXpWRkxFMUJRVTBzU1VGQlNTeFBRVUZQTEZsQlFWa3NVVUZCVVN4RlFVRkZPMEZCUTNSRExGZEJRVThzVDBGQlR5eERRVUZETEU5QlFVOHNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRIUVVOc1F6dERRVU5HT3p0QlFVVk5MRk5CUVZNc1NVRkJTU3hIUVVGSE8wRkJRM0pDTEZOQlFVOHNSVUZCUlN4RFFVRkRPME5CUTFnN08wRkJSVVFzVTBGQlV5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RlFVRkZMRWxCUVVrc1JVRkJSVHRCUVVNdlFpeE5RVUZKTEVOQlFVTXNTVUZCU1N4SlFVRkpMRVZCUVVVc1RVRkJUU3hKUVVGSkxFbEJRVWtzUTBGQlFTeEJRVUZETEVWQlFVVTdRVUZET1VJc1VVRkJTU3hIUVVGSExFbEJRVWtzUjBGQlJ5eHJRa0ZCV1N4SlFVRkpMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU03UVVGRGNrTXNVVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhQUVVGUExFTkJRVU03UjBGRGNrSTdRVUZEUkN4VFFVRlBMRWxCUVVrc1EwRkJRenREUVVOaU96dEJRVVZFTEZOQlFWTXNhVUpCUVdsQ0xFTkJRVU1zUlVGQlJTeEZRVUZGTEVsQlFVa3NSVUZCUlN4VFFVRlRMRVZCUVVVc1RVRkJUU3hGUVVGRkxFbEJRVWtzUlVGQlJTeFhRVUZYTEVWQlFVVTdRVUZEZWtVc1RVRkJTU3hGUVVGRkxFTkJRVU1zVTBGQlV5eEZRVUZGTzBGQlEyaENMRkZCUVVrc1MwRkJTeXhIUVVGSExFVkJRVVVzUTBGQlF6dEJRVU5tTEZGQlFVa3NSMEZCUnl4RlFVRkZMRU5CUVVNc1UwRkJVeXhEUVVOcVFpeEpRVUZKTEVWQlEwb3NTMEZCU3l4RlFVTk1MRk5CUVZNc1JVRkRWQ3hOUVVGTkxFbEJRVWtzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVTnVRaXhKUVVGSkxFVkJRMG9zVjBGQlZ5eEZRVU5ZTEUxQlFVMHNRMEZEVUN4RFFVRkRPMEZCUTBZc1UwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1IwRkRNMEk3UVVGRFJDeFRRVUZQTEVsQlFVa3NRMEZCUXp0RFFVTmlPenRCUVVWRUxGTkJRVk1zSzBKQlFTdENMRU5CUVVNc1lVRkJZU3hGUVVGRkxGTkJRVk1zUlVGQlJUdEJRVU5xUlN4UlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRkJMRlZCUVZVc1JVRkJTVHRCUVVNdlF5eFJRVUZKTEUxQlFVMHNSMEZCUnl4aFFVRmhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03UVVGRGRrTXNhVUpCUVdFc1EwRkJReXhWUVVGVkxFTkJRVU1zUjBGQlJ5eDNRa0ZCZDBJc1EwRkJReXhOUVVGTkxFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTTdSMEZEZWtVc1EwRkJReXhEUVVGRE8wTkJRMG83TzBGQlJVUXNVMEZCVXl4M1FrRkJkMElzUTBGQlF5eE5RVUZOTEVWQlFVVXNVMEZCVXl4RlFVRkZPMEZCUTI1RUxFMUJRVTBzWTBGQll5eEhRVUZITEZOQlFWTXNRMEZCUXl4alFVRmpMRU5CUVVNN1FVRkRhRVFzVTBGQlR5d3JRa0ZCVnl4TlFVRk5MRVZCUVVVc1ZVRkJRU3hQUVVGUExFVkJRVWs3UVVGRGJrTXNWMEZCVHl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzWTBGQll5eEZRVUZrTEdOQlFXTXNSVUZCUlN4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8wZEJRMnhFTEVOQlFVTXNRMEZCUXp0RFFVTktJaXdpWm1sc1pTSTZJbkoxYm5ScGJXVXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnS2lCaGN5QlZkR2xzY3lCbWNtOXRJQ2N1TDNWMGFXeHpKenRjYm1sdGNHOXlkQ0JGZUdObGNIUnBiMjRnWm5KdmJTQW5MaTlsZUdObGNIUnBiMjRuTzF4dWFXMXdiM0owSUh0Y2JpQWdRMDlOVUVsTVJWSmZVa1ZXU1ZOSlQwNHNYRzRnSUdOeVpXRjBaVVp5WVcxbExGeHVJQ0JNUVZOVVgwTlBUVkJCVkVsQ1RFVmZRMDlOVUVsTVJWSmZVa1ZXU1ZOSlQwNHNYRzRnSUZKRlZrbFRTVTlPWDBOSVFVNUhSVk5jYm4wZ1puSnZiU0FuTGk5aVlYTmxKenRjYm1sdGNHOXlkQ0I3SUcxdmRtVklaV3h3WlhKVWIwaHZiMnR6SUgwZ1puSnZiU0FuTGk5b1pXeHdaWEp6Snp0Y2JtbHRjRzl5ZENCN0lIZHlZWEJJWld4d1pYSWdmU0JtY205dElDY3VMMmx1ZEdWeWJtRnNMM2R5WVhCSVpXeHdaWEluTzF4dWFXMXdiM0owSUh0Y2JpQWdZM0psWVhSbFVISnZkRzlCWTJObGMzTkRiMjUwY205c0xGeHVJQ0J5WlhOMWJIUkpjMEZzYkc5M1pXUmNibjBnWm5KdmJTQW5MaTlwYm5SbGNtNWhiQzl3Y205MGJ5MWhZMk5sYzNNbk8xeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdZMmhsWTJ0U1pYWnBjMmx2YmloamIyMXdhV3hsY2tsdVptOHBJSHRjYmlBZ1kyOXVjM1FnWTI5dGNHbHNaWEpTWlhacGMybHZiaUE5SUNoamIyMXdhV3hsY2tsdVptOGdKaVlnWTI5dGNHbHNaWEpKYm1adld6QmRLU0I4ZkNBeExGeHVJQ0FnSUdOMWNuSmxiblJTWlhacGMybHZiaUE5SUVOUFRWQkpURVZTWDFKRlZrbFRTVTlPTzF4dVhHNGdJR2xtSUNoY2JpQWdJQ0JqYjIxd2FXeGxjbEpsZG1semFXOXVJRDQ5SUV4QlUxUmZRMDlOVUVGVVNVSk1SVjlEVDAxUVNVeEZVbDlTUlZaSlUwbFBUaUFtSmx4dUlDQWdJR052YlhCcGJHVnlVbVYyYVhOcGIyNGdQRDBnUTA5TlVFbE1SVkpmVWtWV1NWTkpUMDVjYmlBZ0tTQjdYRzRnSUNBZ2NtVjBkWEp1TzF4dUlDQjlYRzVjYmlBZ2FXWWdLR052YlhCcGJHVnlVbVYyYVhOcGIyNGdQQ0JNUVZOVVgwTlBUVkJCVkVsQ1RFVmZRMDlOVUVsTVJWSmZVa1ZXU1ZOSlQwNHBJSHRjYmlBZ0lDQmpiMjV6ZENCeWRXNTBhVzFsVm1WeWMybHZibk1nUFNCU1JWWkpVMGxQVGw5RFNFRk9SMFZUVzJOMWNuSmxiblJTWlhacGMybHZibDBzWEc0Z0lDQWdJQ0JqYjIxd2FXeGxjbFpsY25OcGIyNXpJRDBnVWtWV1NWTkpUMDVmUTBoQlRrZEZVMXRqYjIxd2FXeGxjbEpsZG1semFXOXVYVHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWGhqWlhCMGFXOXVLRnh1SUNBZ0lDQWdKMVJsYlhCc1lYUmxJSGRoY3lCd2NtVmpiMjF3YVd4bFpDQjNhWFJvSUdGdUlHOXNaR1Z5SUhabGNuTnBiMjRnYjJZZ1NHRnVaR3hsWW1GeWN5QjBhR0Z1SUhSb1pTQmpkWEp5Wlc1MElISjFiblJwYldVdUlDY2dLMXh1SUNBZ0lDQWdJQ0FuVUd4bFlYTmxJSFZ3WkdGMFpTQjViM1Z5SUhCeVpXTnZiWEJwYkdWeUlIUnZJR0VnYm1WM1pYSWdkbVZ5YzJsdmJpQW9KeUFyWEc0Z0lDQWdJQ0FnSUhKMWJuUnBiV1ZXWlhKemFXOXVjeUFyWEc0Z0lDQWdJQ0FnSUNjcElHOXlJR1J2ZDI1bmNtRmtaU0I1YjNWeUlISjFiblJwYldVZ2RHOGdZVzRnYjJ4a1pYSWdkbVZ5YzJsdmJpQW9KeUFyWEc0Z0lDQWdJQ0FnSUdOdmJYQnBiR1Z5Vm1WeWMybHZibk1nSzF4dUlDQWdJQ0FnSUNBbktTNG5YRzRnSUNBZ0tUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQXZMeUJWYzJVZ2RHaGxJR1Z0WW1Wa1pHVmtJSFpsY25OcGIyNGdhVzVtYnlCemFXNWpaU0IwYUdVZ2NuVnVkR2x0WlNCa2IyVnpiaWQwSUd0dWIzY2dZV0p2ZFhRZ2RHaHBjeUJ5WlhacGMybHZiaUI1WlhSY2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhoalpYQjBhVzl1S0Z4dUlDQWdJQ0FnSjFSbGJYQnNZWFJsSUhkaGN5QndjbVZqYjIxd2FXeGxaQ0IzYVhSb0lHRWdibVYzWlhJZ2RtVnljMmx2YmlCdlppQklZVzVrYkdWaVlYSnpJSFJvWVc0Z2RHaGxJR04xY25KbGJuUWdjblZ1ZEdsdFpTNGdKeUFyWEc0Z0lDQWdJQ0FnSUNkUWJHVmhjMlVnZFhCa1lYUmxJSGx2ZFhJZ2NuVnVkR2x0WlNCMGJ5QmhJRzVsZDJWeUlIWmxjbk5wYjI0Z0tDY2dLMXh1SUNBZ0lDQWdJQ0JqYjIxd2FXeGxja2x1Wm05Yk1WMGdLMXh1SUNBZ0lDQWdJQ0FuS1M0blhHNGdJQ0FnS1R0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2RHVnRjR3hoZEdVb2RHVnRjR3hoZEdWVGNHVmpMQ0JsYm5ZcElIdGNiaUFnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUc1bGVIUWdLaTljYmlBZ2FXWWdLQ0ZsYm5ZcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYaGpaWEIwYVc5dUtDZE9ieUJsYm5acGNtOXViV1Z1ZENCd1lYTnpaV1FnZEc4Z2RHVnRjR3hoZEdVbktUdGNiaUFnZlZ4dUlDQnBaaUFvSVhSbGJYQnNZWFJsVTNCbFl5QjhmQ0FoZEdWdGNHeGhkR1ZUY0dWakxtMWhhVzRwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhoalpYQjBhVzl1S0NkVmJtdHViM2R1SUhSbGJYQnNZWFJsSUc5aWFtVmpkRG9nSnlBcklIUjVjR1Z2WmlCMFpXMXdiR0YwWlZOd1pXTXBPMXh1SUNCOVhHNWNiaUFnZEdWdGNHeGhkR1ZUY0dWakxtMWhhVzR1WkdWamIzSmhkRzl5SUQwZ2RHVnRjR3hoZEdWVGNHVmpMbTFoYVc1ZlpEdGNibHh1SUNBdkx5Qk9iM1JsT2lCVmMybHVaeUJsYm5ZdVZrMGdjbVZtWlhKbGJtTmxjeUJ5WVhSb1pYSWdkR2hoYmlCc2IyTmhiQ0IyWVhJZ2NtVm1aWEpsYm1ObGN5QjBhSEp2ZFdkb2IzVjBJSFJvYVhNZ2MyVmpkR2x2YmlCMGJ5QmhiR3h2ZDF4dUlDQXZMeUJtYjNJZ1pYaDBaWEp1WVd3Z2RYTmxjbk1nZEc4Z2IzWmxjbkpwWkdVZ2RHaGxjMlVnWVhNZ2NITmxkV1J2TFhOMWNIQnZjblJsWkNCQlVFbHpMbHh1SUNCbGJuWXVWazB1WTJobFkydFNaWFpwYzJsdmJpaDBaVzF3YkdGMFpWTndaV011WTI5dGNHbHNaWElwTzF4dVhHNGdJQzh2SUdKaFkydDNZWEprY3lCamIyMXdZWFJwWW1sc2FYUjVJR1p2Y2lCd2NtVmpiMjF3YVd4bFpDQjBaVzF3YkdGMFpYTWdkMmwwYUNCamIyMXdhV3hsY2kxMlpYSnphVzl1SURjZ0tEdzBMak11TUNsY2JpQWdZMjl1YzNRZ2RHVnRjR3hoZEdWWFlYTlFjbVZqYjIxd2FXeGxaRmRwZEdoRGIyMXdhV3hsY2xZM0lEMWNiaUFnSUNCMFpXMXdiR0YwWlZOd1pXTXVZMjl0Y0dsc1pYSWdKaVlnZEdWdGNHeGhkR1ZUY0dWakxtTnZiWEJwYkdWeVd6QmRJRDA5UFNBM08xeHVYRzRnSUdaMWJtTjBhVzl1SUdsdWRtOXJaVkJoY25ScFlXeFhjbUZ3Y0dWeUtIQmhjblJwWVd3c0lHTnZiblJsZUhRc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNCcFppQW9iM0IwYVc5dWN5NW9ZWE5vS1NCN1hHNGdJQ0FnSUNCamIyNTBaWGgwSUQwZ1ZYUnBiSE11WlhoMFpXNWtLSHQ5TENCamIyNTBaWGgwTENCdmNIUnBiMjV6TG1oaGMyZ3BPMXh1SUNBZ0lDQWdhV1lnS0c5d2RHbHZibk11YVdSektTQjdYRzRnSUNBZ0lDQWdJRzl3ZEdsdmJuTXVhV1J6V3pCZElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjR0Z5ZEdsaGJDQTlJR1Z1ZGk1V1RTNXlaWE52YkhabFVHRnlkR2xoYkM1allXeHNLSFJvYVhNc0lIQmhjblJwWVd3c0lHTnZiblJsZUhRc0lHOXdkR2x2Ym5NcE8xeHVYRzRnSUNBZ2JHVjBJR1Y0ZEdWdVpHVmtUM0IwYVc5dWN5QTlJRlYwYVd4ekxtVjRkR1Z1WkNoN2ZTd2diM0IwYVc5dWN5d2dlMXh1SUNBZ0lDQWdhRzl2YTNNNklIUm9hWE11YUc5dmEzTXNYRzRnSUNBZ0lDQndjbTkwYjBGalkyVnpjME52Ym5SeWIydzZJSFJvYVhNdWNISnZkRzlCWTJObGMzTkRiMjUwY205c1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCc1pYUWdjbVZ6ZFd4MElEMGdaVzUyTGxaTkxtbHVkbTlyWlZCaGNuUnBZV3d1WTJGc2JDaGNiaUFnSUNBZ0lIUm9hWE1zWEc0Z0lDQWdJQ0J3WVhKMGFXRnNMRnh1SUNBZ0lDQWdZMjl1ZEdWNGRDeGNiaUFnSUNBZ0lHVjRkR1Z1WkdWa1QzQjBhVzl1YzF4dUlDQWdJQ2s3WEc1Y2JpQWdJQ0JwWmlBb2NtVnpkV3gwSUQwOUlHNTFiR3dnSmlZZ1pXNTJMbU52YlhCcGJHVXBJSHRjYmlBZ0lDQWdJRzl3ZEdsdmJuTXVjR0Z5ZEdsaGJITmJiM0IwYVc5dWN5NXVZVzFsWFNBOUlHVnVkaTVqYjIxd2FXeGxLRnh1SUNBZ0lDQWdJQ0J3WVhKMGFXRnNMRnh1SUNBZ0lDQWdJQ0IwWlcxd2JHRjBaVk53WldNdVkyOXRjR2xzWlhKUGNIUnBiMjV6TEZ4dUlDQWdJQ0FnSUNCbGJuWmNiaUFnSUNBZ0lDazdYRzRnSUNBZ0lDQnlaWE4xYkhRZ1BTQnZjSFJwYjI1ekxuQmhjblJwWVd4elcyOXdkR2x2Ym5NdWJtRnRaVjBvWTI5dWRHVjRkQ3dnWlhoMFpXNWtaV1JQY0hScGIyNXpLVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSEpsYzNWc2RDQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVwYm1SbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnYkdWMElHeHBibVZ6SUQwZ2NtVnpkV3gwTG5Od2JHbDBLQ2RjWEc0bktUdGNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHd2dQU0JzYVc1bGN5NXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9JV3hwYm1WelcybGRJQ1ltSUdrZ0t5QXhJRDA5UFNCc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0JzYVc1bGMxdHBYU0E5SUc5d2RHbHZibk11YVc1a1pXNTBJQ3NnYkdsdVpYTmJhVjA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVnpkV3gwSUQwZ2JHbHVaWE11YW05cGJpZ25YRnh1SnlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYaGpaWEIwYVc5dUtGeHVJQ0FnSUNBZ0lDQW5WR2hsSUhCaGNuUnBZV3dnSnlBclhHNGdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN5NXVZVzFsSUN0Y2JpQWdJQ0FnSUNBZ0lDQW5JR052ZFd4a0lHNXZkQ0JpWlNCamIyMXdhV3hsWkNCM2FHVnVJSEoxYm01cGJtY2dhVzRnY25WdWRHbHRaUzF2Ym14NUlHMXZaR1VuWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4dklFcDFjM1FnWVdSa0lIZGhkR1Z5WEc0Z0lHeGxkQ0JqYjI1MFlXbHVaWElnUFNCN1hHNGdJQ0FnYzNSeWFXTjBPaUJtZFc1amRHbHZiaWh2WW1vc0lHNWhiV1VzSUd4dll5a2dlMXh1SUNBZ0lDQWdhV1lnS0NGdlltb2dmSHdnSVNodVlXMWxJR2x1SUc5aWFpa3BJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWNFkyVndkR2x2YmlnblhDSW5JQ3NnYm1GdFpTQXJJQ2RjSWlCdWIzUWdaR1ZtYVc1bFpDQnBiaUFuSUNzZ2IySnFMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ2JHOWpPaUJzYjJOY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z1kyOXVkR0ZwYm1WeUxteHZiMnQxY0ZCeWIzQmxjblI1S0c5aWFpd2dibUZ0WlNrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JzYjI5cmRYQlFjbTl3WlhKMGVUb2dablZ1WTNScGIyNG9jR0Z5Wlc1MExDQndjbTl3WlhKMGVVNWhiV1VwSUh0Y2JpQWdJQ0FnSUd4bGRDQnlaWE4xYkhRZ1BTQndZWEpsYm5SYmNISnZjR1Z5ZEhsT1lXMWxYVHRjYmlBZ0lDQWdJR2xtSUNoeVpYTjFiSFFnUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0U5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNod1lYSmxiblFzSUhCeWIzQmxjblI1VG1GdFpTa3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0hKbGMzVnNkRWx6UVd4c2IzZGxaQ2h5WlhOMWJIUXNJR052Ym5SaGFXNWxjaTV3Y205MGIwRmpZMlZ6YzBOdmJuUnliMndzSUhCeWIzQmxjblI1VG1GdFpTa3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCMWJtUmxabWx1WldRN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JzYjI5cmRYQTZJR1oxYm1OMGFXOXVLR1JsY0hSb2N5d2dibUZ0WlNrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnYkdWdUlEMGdaR1Z3ZEdoekxteGxibWQwYUR0Y2JpQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2JHVnVPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdiR1YwSUhKbGMzVnNkQ0E5SUdSbGNIUm9jMXRwWFNBbUppQmpiMjUwWVdsdVpYSXViRzl2YTNWd1VISnZjR1Z5ZEhrb1pHVndkR2h6VzJsZExDQnVZVzFsS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEpsYzNWc2RDQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1JsY0hSb2MxdHBYVnR1WVcxbFhUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzRnSUNBZ2JHRnRZbVJoT2lCbWRXNWpkR2x2YmloamRYSnlaVzUwTENCamIyNTBaWGgwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEhsd1pXOW1JR04xY25KbGJuUWdQVDA5SUNkbWRXNWpkR2x2YmljZ1B5QmpkWEp5Wlc1MExtTmhiR3dvWTI5dWRHVjRkQ2tnT2lCamRYSnlaVzUwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JsYzJOaGNHVkZlSEJ5WlhOemFXOXVPaUJWZEdsc2N5NWxjMk5oY0dWRmVIQnlaWE56YVc5dUxGeHVJQ0FnSUdsdWRtOXJaVkJoY25ScFlXdzZJR2x1ZG05clpWQmhjblJwWVd4WGNtRndjR1Z5TEZ4dVhHNGdJQ0FnWm00NklHWjFibU4wYVc5dUtHa3BJSHRjYmlBZ0lDQWdJR3hsZENCeVpYUWdQU0IwWlcxd2JHRjBaVk53WldOYmFWMDdYRzRnSUNBZ0lDQnlaWFF1WkdWamIzSmhkRzl5SUQwZ2RHVnRjR3hoZEdWVGNHVmpXMmtnS3lBblgyUW5YVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaWFE3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSEJ5YjJkeVlXMXpPaUJiWFN4Y2JpQWdJQ0J3Y205bmNtRnRPaUJtZFc1amRHbHZiaWhwTENCa1lYUmhMQ0JrWldOc1lYSmxaRUpzYjJOclVHRnlZVzF6TENCaWJHOWphMUJoY21GdGN5d2daR1Z3ZEdoektTQjdYRzRnSUNBZ0lDQnNaWFFnY0hKdlozSmhiVmR5WVhCd1pYSWdQU0IwYUdsekxuQnliMmR5WVcxelcybGRMRnh1SUNBZ0lDQWdJQ0JtYmlBOUlIUm9hWE11Wm00b2FTazdYRzRnSUNBZ0lDQnBaaUFvWkdGMFlTQjhmQ0JrWlhCMGFITWdmSHdnWW14dlkydFFZWEpoYlhNZ2ZId2daR1ZqYkdGeVpXUkNiRzlqYTFCaGNtRnRjeWtnZTF4dUlDQWdJQ0FnSUNCd2NtOW5jbUZ0VjNKaGNIQmxjaUE5SUhkeVlYQlFjbTluY21GdEtGeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNc1hHNGdJQ0FnSUNBZ0lDQWdhU3hjYmlBZ0lDQWdJQ0FnSUNCbWJpeGNiaUFnSUNBZ0lDQWdJQ0JrWVhSaExGeHVJQ0FnSUNBZ0lDQWdJR1JsWTJ4aGNtVmtRbXh2WTJ0UVlYSmhiWE1zWEc0Z0lDQWdJQ0FnSUNBZ1lteHZZMnRRWVhKaGJYTXNYRzRnSUNBZ0lDQWdJQ0FnWkdWd2RHaHpYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0NGd2NtOW5jbUZ0VjNKaGNIQmxjaWtnZTF4dUlDQWdJQ0FnSUNCd2NtOW5jbUZ0VjNKaGNIQmxjaUE5SUhSb2FYTXVjSEp2WjNKaGJYTmJhVjBnUFNCM2NtRndVSEp2WjNKaGJTaDBhR2x6TENCcExDQm1iaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjSEp2WjNKaGJWZHlZWEJ3WlhJN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdSaGRHRTZJR1oxYm1OMGFXOXVLSFpoYkhWbExDQmtaWEIwYUNrZ2UxeHVJQ0FnSUNBZ2QyaHBiR1VnS0haaGJIVmxJQ1ltSUdSbGNIUm9MUzBwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCMllXeDFaUzVmY0dGeVpXNTBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlIWmhiSFZsTzF4dUlDQWdJSDBzWEc0Z0lDQWdiV1Z5WjJWSlprNWxaV1JsWkRvZ1puVnVZM1JwYjI0b2NHRnlZVzBzSUdOdmJXMXZiaWtnZTF4dUlDQWdJQ0FnYkdWMElHOWlhaUE5SUhCaGNtRnRJSHg4SUdOdmJXMXZianRjYmx4dUlDQWdJQ0FnYVdZZ0tIQmhjbUZ0SUNZbUlHTnZiVzF2YmlBbUppQndZWEpoYlNBaFBUMGdZMjl0Ylc5dUtTQjdYRzRnSUNBZ0lDQWdJRzlpYWlBOUlGVjBhV3h6TG1WNGRHVnVaQ2g3ZlN3Z1kyOXRiVzl1TENCd1lYSmhiU2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJ2WW1vN1hHNGdJQ0FnZlN4Y2JpQWdJQ0F2THlCQmJpQmxiWEIwZVNCdlltcGxZM1FnZEc4Z2RYTmxJR0Z6SUhKbGNHeGhZMlZ0Wlc1MElHWnZjaUJ1ZFd4c0xXTnZiblJsZUhSelhHNGdJQ0FnYm5Wc2JFTnZiblJsZUhRNklFOWlhbVZqZEM1elpXRnNLSHQ5S1N4Y2JseHVJQ0FnSUc1dmIzQTZJR1Z1ZGk1V1RTNXViMjl3TEZ4dUlDQWdJR052YlhCcGJHVnlTVzVtYnpvZ2RHVnRjR3hoZEdWVGNHVmpMbU52YlhCcGJHVnlYRzRnSUgwN1hHNWNiaUFnWm5WdVkzUnBiMjRnY21WMEtHTnZiblJsZUhRc0lHOXdkR2x2Ym5NZ1BTQjdmU2tnZTF4dUlDQWdJR3hsZENCa1lYUmhJRDBnYjNCMGFXOXVjeTVrWVhSaE8xeHVYRzRnSUNBZ2NtVjBMbDl6WlhSMWNDaHZjSFJwYjI1ektUdGNiaUFnSUNCcFppQW9JVzl3ZEdsdmJuTXVjR0Z5ZEdsaGJDQW1KaUIwWlcxd2JHRjBaVk53WldNdWRYTmxSR0YwWVNrZ2UxeHVJQ0FnSUNBZ1pHRjBZU0E5SUdsdWFYUkVZWFJoS0dOdmJuUmxlSFFzSUdSaGRHRXBPMXh1SUNBZ0lIMWNiaUFnSUNCc1pYUWdaR1Z3ZEdoekxGeHVJQ0FnSUNBZ1lteHZZMnRRWVhKaGJYTWdQU0IwWlcxd2JHRjBaVk53WldNdWRYTmxRbXh2WTJ0UVlYSmhiWE1nUHlCYlhTQTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQnBaaUFvZEdWdGNHeGhkR1ZUY0dWakxuVnpaVVJsY0hSb2N5a2dlMXh1SUNBZ0lDQWdhV1lnS0c5d2RHbHZibk11WkdWd2RHaHpLU0I3WEc0Z0lDQWdJQ0FnSUdSbGNIUm9jeUE5WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkR1Y0ZENBaFBTQnZjSFJwYjI1ekxtUmxjSFJvYzFzd1hWeHVJQ0FnSUNBZ0lDQWdJQ0FnUHlCYlkyOXVkR1Y0ZEYwdVkyOXVZMkYwS0c5d2RHbHZibk11WkdWd2RHaHpLVnh1SUNBZ0lDQWdJQ0FnSUNBZ09pQnZjSFJwYjI1ekxtUmxjSFJvY3p0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdSbGNIUm9jeUE5SUZ0amIyNTBaWGgwWFR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JtZFc1amRHbHZiaUJ0WVdsdUtHTnZiblJsZUhRZ0x5b3NJRzl3ZEdsdmJuTXFMeWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJQ0FnSnljZ0sxeHVJQ0FnSUNBZ0lDQjBaVzF3YkdGMFpWTndaV011YldGcGJpaGNiaUFnSUNBZ0lDQWdJQ0JqYjI1MFlXbHVaWElzWEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkR1Y0ZEN4Y2JpQWdJQ0FnSUNBZ0lDQmpiMjUwWVdsdVpYSXVhR1ZzY0dWeWN5eGNiaUFnSUNBZ0lDQWdJQ0JqYjI1MFlXbHVaWEl1Y0dGeWRHbGhiSE1zWEc0Z0lDQWdJQ0FnSUNBZ1pHRjBZU3hjYmlBZ0lDQWdJQ0FnSUNCaWJHOWphMUJoY21GdGN5eGNiaUFnSUNBZ0lDQWdJQ0JrWlhCMGFITmNiaUFnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnRZV2x1SUQwZ1pYaGxZM1YwWlVSbFkyOXlZWFJ2Y25Nb1hHNGdJQ0FnSUNCMFpXMXdiR0YwWlZOd1pXTXViV0ZwYml4Y2JpQWdJQ0FnSUcxaGFXNHNYRzRnSUNBZ0lDQmpiMjUwWVdsdVpYSXNYRzRnSUNBZ0lDQnZjSFJwYjI1ekxtUmxjSFJvY3lCOGZDQmJYU3hjYmlBZ0lDQWdJR1JoZEdFc1hHNGdJQ0FnSUNCaWJHOWphMUJoY21GdGMxeHVJQ0FnSUNrN1hHNGdJQ0FnY21WMGRYSnVJRzFoYVc0b1kyOXVkR1Y0ZEN3Z2IzQjBhVzl1Y3lrN1hHNGdJSDFjYmx4dUlDQnlaWFF1YVhOVWIzQWdQU0IwY25WbE8xeHVYRzRnSUhKbGRDNWZjMlYwZFhBZ1BTQm1kVzVqZEdsdmJpaHZjSFJwYjI1ektTQjdYRzRnSUNBZ2FXWWdLQ0Z2Y0hScGIyNXpMbkJoY25ScFlXd3BJSHRjYmlBZ0lDQWdJR3hsZENCdFpYSm5aV1JJWld4d1pYSnpJRDBnVlhScGJITXVaWGgwWlc1a0tIdDlMQ0JsYm5ZdWFHVnNjR1Z5Y3l3Z2IzQjBhVzl1Y3k1b1pXeHdaWEp6S1R0Y2JpQWdJQ0FnSUhkeVlYQklaV3h3WlhKelZHOVFZWE56VEc5dmEzVndVSEp2Y0dWeWRIa29iV1Z5WjJWa1NHVnNjR1Z5Y3l3Z1kyOXVkR0ZwYm1WeUtUdGNiaUFnSUNBZ0lHTnZiblJoYVc1bGNpNW9aV3h3WlhKeklEMGdiV1Z5WjJWa1NHVnNjR1Z5Y3p0Y2JseHVJQ0FnSUNBZ2FXWWdLSFJsYlhCc1lYUmxVM0JsWXk1MWMyVlFZWEowYVdGc0tTQjdYRzRnSUNBZ0lDQWdJQzh2SUZWelpTQnRaWEpuWlVsbVRtVmxaR1ZrSUdobGNtVWdkRzhnY0hKbGRtVnVkQ0JqYjIxd2FXeHBibWNnWjJ4dlltRnNJSEJoY25ScFlXeHpJRzExYkhScGNHeGxJSFJwYldWelhHNGdJQ0FnSUNBZ0lHTnZiblJoYVc1bGNpNXdZWEowYVdGc2N5QTlJR052Ym5SaGFXNWxjaTV0WlhKblpVbG1UbVZsWkdWa0tGeHVJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTXVjR0Z5ZEdsaGJITXNYRzRnSUNBZ0lDQWdJQ0FnWlc1MkxuQmhjblJwWVd4elhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaUFvZEdWdGNHeGhkR1ZUY0dWakxuVnpaVkJoY25ScFlXd2dmSHdnZEdWdGNHeGhkR1ZUY0dWakxuVnpaVVJsWTI5eVlYUnZjbk1wSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVkR0ZwYm1WeUxtUmxZMjl5WVhSdmNuTWdQU0JWZEdsc2N5NWxlSFJsYm1Rb1hHNGdJQ0FnSUNBZ0lDQWdlMzBzWEc0Z0lDQWdJQ0FnSUNBZ1pXNTJMbVJsWTI5eVlYUnZjbk1zWEc0Z0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1a1pXTnZjbUYwYjNKelhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR052Ym5SaGFXNWxjaTVvYjI5cmN5QTlJSHQ5TzF4dUlDQWdJQ0FnWTI5dWRHRnBibVZ5TG5CeWIzUnZRV05qWlhOelEyOXVkSEp2YkNBOUlHTnlaV0YwWlZCeWIzUnZRV05qWlhOelEyOXVkSEp2YkNodmNIUnBiMjV6S1R0Y2JseHVJQ0FnSUNBZ2JHVjBJR3RsWlhCSVpXeHdaWEpKYmtobGJIQmxjbk1nUFZ4dUlDQWdJQ0FnSUNCdmNIUnBiMjV6TG1Gc2JHOTNRMkZzYkhOVWIwaGxiSEJsY2sxcGMzTnBibWNnZkh4Y2JpQWdJQ0FnSUNBZ2RHVnRjR3hoZEdWWFlYTlFjbVZqYjIxd2FXeGxaRmRwZEdoRGIyMXdhV3hsY2xZM08xeHVJQ0FnSUNBZ2JXOTJaVWhsYkhCbGNsUnZTRzl2YTNNb1kyOXVkR0ZwYm1WeUxDQW5hR1ZzY0dWeVRXbHpjMmx1Wnljc0lHdGxaWEJJWld4d1pYSkpia2hsYkhCbGNuTXBPMXh1SUNBZ0lDQWdiVzkyWlVobGJIQmxjbFJ2U0c5dmEzTW9ZMjl1ZEdGcGJtVnlMQ0FuWW14dlkydElaV3h3WlhKTmFYTnphVzVuSnl3Z2EyVmxjRWhsYkhCbGNrbHVTR1ZzY0dWeWN5azdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdOdmJuUmhhVzVsY2k1d2NtOTBiMEZqWTJWemMwTnZiblJ5YjJ3Z1BTQnZjSFJwYjI1ekxuQnliM1J2UVdOalpYTnpRMjl1ZEhKdmJEc2dMeThnYVc1MFpYSnVZV3dnYjNCMGFXOXVYRzRnSUNBZ0lDQmpiMjUwWVdsdVpYSXVhR1ZzY0dWeWN5QTlJRzl3ZEdsdmJuTXVhR1ZzY0dWeWN6dGNiaUFnSUNBZ0lHTnZiblJoYVc1bGNpNXdZWEowYVdGc2N5QTlJRzl3ZEdsdmJuTXVjR0Z5ZEdsaGJITTdYRzRnSUNBZ0lDQmpiMjUwWVdsdVpYSXVaR1ZqYjNKaGRHOXljeUE5SUc5d2RHbHZibk11WkdWamIzSmhkRzl5Y3p0Y2JpQWdJQ0FnSUdOdmJuUmhhVzVsY2k1b2IyOXJjeUE5SUc5d2RHbHZibk11YUc5dmEzTTdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dVhHNGdJSEpsZEM1ZlkyaHBiR1FnUFNCbWRXNWpkR2x2YmlocExDQmtZWFJoTENCaWJHOWphMUJoY21GdGN5d2daR1Z3ZEdoektTQjdYRzRnSUNBZ2FXWWdLSFJsYlhCc1lYUmxVM0JsWXk1MWMyVkNiRzlqYTFCaGNtRnRjeUFtSmlBaFlteHZZMnRRWVhKaGJYTXBJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGZUdObGNIUnBiMjRvSjIxMWMzUWdjR0Z6Y3lCaWJHOWpheUJ3WVhKaGJYTW5LVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFJsYlhCc1lYUmxVM0JsWXk1MWMyVkVaWEIwYUhNZ0ppWWdJV1JsY0hSb2N5a2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVY0WTJWd2RHbHZiaWduYlhWemRDQndZWE56SUhCaGNtVnVkQ0JrWlhCMGFITW5LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2QzSmhjRkJ5YjJkeVlXMG9YRzRnSUNBZ0lDQmpiMjUwWVdsdVpYSXNYRzRnSUNBZ0lDQnBMRnh1SUNBZ0lDQWdkR1Z0Y0d4aGRHVlRjR1ZqVzJsZExGeHVJQ0FnSUNBZ1pHRjBZU3hjYmlBZ0lDQWdJREFzWEc0Z0lDQWdJQ0JpYkc5amExQmhjbUZ0Y3l4Y2JpQWdJQ0FnSUdSbGNIUm9jMXh1SUNBZ0lDazdYRzRnSUgwN1hHNGdJSEpsZEhWeWJpQnlaWFE3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQjNjbUZ3VUhKdlozSmhiU2hjYmlBZ1kyOXVkR0ZwYm1WeUxGeHVJQ0JwTEZ4dUlDQm1iaXhjYmlBZ1pHRjBZU3hjYmlBZ1pHVmpiR0Z5WldSQ2JHOWphMUJoY21GdGN5eGNiaUFnWW14dlkydFFZWEpoYlhNc1hHNGdJR1JsY0hSb2MxeHVLU0I3WEc0Z0lHWjFibU4wYVc5dUlIQnliMmNvWTI5dWRHVjRkQ3dnYjNCMGFXOXVjeUE5SUh0OUtTQjdYRzRnSUNBZ2JHVjBJR04xY25KbGJuUkVaWEIwYUhNZ1BTQmtaWEIwYUhNN1hHNGdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ1pHVndkR2h6SUNZbVhHNGdJQ0FnSUNCamIyNTBaWGgwSUNFOUlHUmxjSFJvYzFzd1hTQW1KbHh1SUNBZ0lDQWdJU2hqYjI1MFpYaDBJRDA5UFNCamIyNTBZV2x1WlhJdWJuVnNiRU52Ym5SbGVIUWdKaVlnWkdWd2RHaHpXekJkSUQwOVBTQnVkV3hzS1Z4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnWTNWeWNtVnVkRVJsY0hSb2N5QTlJRnRqYjI1MFpYaDBYUzVqYjI1allYUW9aR1Z3ZEdoektUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWm00b1hHNGdJQ0FnSUNCamIyNTBZV2x1WlhJc1hHNGdJQ0FnSUNCamIyNTBaWGgwTEZ4dUlDQWdJQ0FnWTI5dWRHRnBibVZ5TG1obGJIQmxjbk1zWEc0Z0lDQWdJQ0JqYjI1MFlXbHVaWEl1Y0dGeWRHbGhiSE1zWEc0Z0lDQWdJQ0J2Y0hScGIyNXpMbVJoZEdFZ2ZId2daR0YwWVN4Y2JpQWdJQ0FnSUdKc2IyTnJVR0Z5WVcxeklDWW1JRnR2Y0hScGIyNXpMbUpzYjJOclVHRnlZVzF6WFM1amIyNWpZWFFvWW14dlkydFFZWEpoYlhNcExGeHVJQ0FnSUNBZ1kzVnljbVZ1ZEVSbGNIUm9jMXh1SUNBZ0lDazdYRzRnSUgxY2JseHVJQ0J3Y205bklEMGdaWGhsWTNWMFpVUmxZMjl5WVhSdmNuTW9abTRzSUhCeWIyY3NJR052Ym5SaGFXNWxjaXdnWkdWd2RHaHpMQ0JrWVhSaExDQmliRzlqYTFCaGNtRnRjeWs3WEc1Y2JpQWdjSEp2Wnk1d2NtOW5jbUZ0SUQwZ2FUdGNiaUFnY0hKdlp5NWtaWEIwYUNBOUlHUmxjSFJvY3lBL0lHUmxjSFJvY3k1c1pXNW5kR2dnT2lBd08xeHVJQ0J3Y205bkxtSnNiMk5yVUdGeVlXMXpJRDBnWkdWamJHRnlaV1JDYkc5amExQmhjbUZ0Y3lCOGZDQXdPMXh1SUNCeVpYUjFjbTRnY0hKdlp6dGNibjFjYmx4dUx5b3FYRzRnS2lCVWFHbHpJR2x6SUdOMWNuSmxiblJzZVNCd1lYSjBJRzltSUhSb1pTQnZabVpwWTJsaGJDQkJVRWtzSUhSb1pYSmxabTl5WlNCcGJYQnNaVzFsYm5SaGRHbHZiaUJrWlhSaGFXeHpJSE5vYjNWc1pDQnViM1FnWW1VZ1kyaGhibWRsWkM1Y2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSEpsYzI5c2RtVlFZWEowYVdGc0tIQmhjblJwWVd3c0lHTnZiblJsZUhRc0lHOXdkR2x2Ym5NcElIdGNiaUFnYVdZZ0tDRndZWEowYVdGc0tTQjdYRzRnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVibUZ0WlNBOVBUMGdKMEJ3WVhKMGFXRnNMV0pzYjJOckp5a2dlMXh1SUNBZ0lDQWdjR0Z5ZEdsaGJDQTlJRzl3ZEdsdmJuTXVaR0YwWVZzbmNHRnlkR2xoYkMxaWJHOWpheWRkTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQndZWEowYVdGc0lEMGdiM0IwYVc5dWN5NXdZWEowYVdGc2MxdHZjSFJwYjI1ekxtNWhiV1ZkTzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUdsbUlDZ2hjR0Z5ZEdsaGJDNWpZV3hzSUNZbUlDRnZjSFJwYjI1ekxtNWhiV1VwSUh0Y2JpQWdJQ0F2THlCVWFHbHpJR2x6SUdFZ1pIbHVZVzFwWXlCd1lYSjBhV0ZzSUhSb1lYUWdjbVYwZFhKdVpXUWdZU0J6ZEhKcGJtZGNiaUFnSUNCdmNIUnBiMjV6TG01aGJXVWdQU0J3WVhKMGFXRnNPMXh1SUNBZ0lIQmhjblJwWVd3Z1BTQnZjSFJwYjI1ekxuQmhjblJwWVd4elczQmhjblJwWVd4ZE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCd1lYSjBhV0ZzTzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdhVzUyYjJ0bFVHRnlkR2xoYkNod1lYSjBhV0ZzTENCamIyNTBaWGgwTENCdmNIUnBiMjV6S1NCN1hHNGdJQzh2SUZWelpTQjBhR1VnWTNWeWNtVnVkQ0JqYkc5emRYSmxJR052Ym5SbGVIUWdkRzhnYzJGMlpTQjBhR1VnY0dGeWRHbGhiQzFpYkc5amF5QnBaaUIwYUdseklIQmhjblJwWVd4Y2JpQWdZMjl1YzNRZ1kzVnljbVZ1ZEZCaGNuUnBZV3hDYkc5amF5QTlJRzl3ZEdsdmJuTXVaR0YwWVNBbUppQnZjSFJwYjI1ekxtUmhkR0ZiSjNCaGNuUnBZV3d0WW14dlkyc25YVHRjYmlBZ2IzQjBhVzl1Y3k1d1lYSjBhV0ZzSUQwZ2RISjFaVHRjYmlBZ2FXWWdLRzl3ZEdsdmJuTXVhV1J6S1NCN1hHNGdJQ0FnYjNCMGFXOXVjeTVrWVhSaExtTnZiblJsZUhSUVlYUm9JRDBnYjNCMGFXOXVjeTVwWkhOYk1GMGdmSHdnYjNCMGFXOXVjeTVrWVhSaExtTnZiblJsZUhSUVlYUm9PMXh1SUNCOVhHNWNiaUFnYkdWMElIQmhjblJwWVd4Q2JHOWphenRjYmlBZ2FXWWdLRzl3ZEdsdmJuTXVabTRnSmlZZ2IzQjBhVzl1Y3k1bWJpQWhQVDBnYm05dmNDa2dlMXh1SUNBZ0lHOXdkR2x2Ym5NdVpHRjBZU0E5SUdOeVpXRjBaVVp5WVcxbEtHOXdkR2x2Ym5NdVpHRjBZU2s3WEc0Z0lDQWdMeThnVjNKaGNIQmxjaUJtZFc1amRHbHZiaUIwYnlCblpYUWdZV05qWlhOeklIUnZJR04xY25KbGJuUlFZWEowYVdGc1FteHZZMnNnWm5KdmJTQjBhR1VnWTJ4dmMzVnlaVnh1SUNBZ0lHeGxkQ0JtYmlBOUlHOXdkR2x2Ym5NdVptNDdYRzRnSUNBZ2NHRnlkR2xoYkVKc2IyTnJJRDBnYjNCMGFXOXVjeTVrWVhSaFd5ZHdZWEowYVdGc0xXSnNiMk5ySjEwZ1BTQm1kVzVqZEdsdmJpQndZWEowYVdGc1FteHZZMnRYY21Gd2NHVnlLRnh1SUNBZ0lDQWdZMjl1ZEdWNGRDeGNiaUFnSUNBZ0lHOXdkR2x2Ym5NZ1BTQjdmVnh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdMeThnVW1WemRHOXlaU0IwYUdVZ2NHRnlkR2xoYkMxaWJHOWpheUJtY205dElIUm9aU0JqYkc5emRYSmxJR1p2Y2lCMGFHVWdaWGhsWTNWMGFXOXVJRzltSUhSb1pTQmliRzlqYTF4dUlDQWdJQ0FnTHk4Z2FTNWxMaUIwYUdVZ2NHRnlkQ0JwYm5OcFpHVWdkR2hsSUdKc2IyTnJJRzltSUhSb1pTQndZWEowYVdGc0lHTmhiR3d1WEc0Z0lDQWdJQ0J2Y0hScGIyNXpMbVJoZEdFZ1BTQmpjbVZoZEdWR2NtRnRaU2h2Y0hScGIyNXpMbVJoZEdFcE8xeHVJQ0FnSUNBZ2IzQjBhVzl1Y3k1a1lYUmhXeWR3WVhKMGFXRnNMV0pzYjJOckoxMGdQU0JqZFhKeVpXNTBVR0Z5ZEdsaGJFSnNiMk5yTzF4dUlDQWdJQ0FnY21WMGRYSnVJR1p1S0dOdmJuUmxlSFFzSUc5d2RHbHZibk1wTzF4dUlDQWdJSDA3WEc0Z0lDQWdhV1lnS0dadUxuQmhjblJwWVd4ektTQjdYRzRnSUNBZ0lDQnZjSFJwYjI1ekxuQmhjblJwWVd4eklEMGdWWFJwYkhNdVpYaDBaVzVrS0h0OUxDQnZjSFJwYjI1ekxuQmhjblJwWVd4ekxDQm1iaTV3WVhKMGFXRnNjeWs3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnYVdZZ0tIQmhjblJwWVd3Z1BUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCd1lYSjBhV0ZzUW14dlkyc3BJSHRjYmlBZ0lDQndZWEowYVdGc0lEMGdjR0Z5ZEdsaGJFSnNiMk5yTzF4dUlDQjlYRzVjYmlBZ2FXWWdLSEJoY25ScFlXd2dQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmVHTmxjSFJwYjI0b0oxUm9aU0J3WVhKMGFXRnNJQ2NnS3lCdmNIUnBiMjV6TG01aGJXVWdLeUFuSUdOdmRXeGtJRzV2ZENCaVpTQm1iM1Z1WkNjcE8xeHVJQ0I5SUdWc2MyVWdhV1lnS0hCaGNuUnBZV3dnYVc1emRHRnVZMlZ2WmlCR2RXNWpkR2x2YmlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ3WVhKMGFXRnNLR052Ym5SbGVIUXNJRzl3ZEdsdmJuTXBPMXh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ1YjI5d0tDa2dlMXh1SUNCeVpYUjFjbTRnSnljN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdsdWFYUkVZWFJoS0dOdmJuUmxlSFFzSUdSaGRHRXBJSHRjYmlBZ2FXWWdLQ0ZrWVhSaElIeDhJQ0VvSjNKdmIzUW5JR2x1SUdSaGRHRXBLU0I3WEc0Z0lDQWdaR0YwWVNBOUlHUmhkR0VnUHlCamNtVmhkR1ZHY21GdFpTaGtZWFJoS1NBNklIdDlPMXh1SUNBZ0lHUmhkR0V1Y205dmRDQTlJR052Ym5SbGVIUTdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHUmhkR0U3WEc1OVhHNWNibVoxYm1OMGFXOXVJR1Y0WldOMWRHVkVaV052Y21GMGIzSnpLR1p1TENCd2NtOW5MQ0JqYjI1MFlXbHVaWElzSUdSbGNIUm9jeXdnWkdGMFlTd2dZbXh2WTJ0UVlYSmhiWE1wSUh0Y2JpQWdhV1lnS0dadUxtUmxZMjl5WVhSdmNpa2dlMXh1SUNBZ0lHeGxkQ0J3Y205d2N5QTlJSHQ5TzF4dUlDQWdJSEJ5YjJjZ1BTQm1iaTVrWldOdmNtRjBiM0lvWEc0Z0lDQWdJQ0J3Y205bkxGeHVJQ0FnSUNBZ2NISnZjSE1zWEc0Z0lDQWdJQ0JqYjI1MFlXbHVaWElzWEc0Z0lDQWdJQ0JrWlhCMGFITWdKaVlnWkdWd2RHaHpXekJkTEZ4dUlDQWdJQ0FnWkdGMFlTeGNiaUFnSUNBZ0lHSnNiMk5yVUdGeVlXMXpMRnh1SUNBZ0lDQWdaR1Z3ZEdoelhHNGdJQ0FnS1R0Y2JpQWdJQ0JWZEdsc2N5NWxlSFJsYm1Rb2NISnZaeXdnY0hKdmNITXBPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQndjbTluTzF4dWZWeHVYRzVtZFc1amRHbHZiaUIzY21Gd1NHVnNjR1Z5YzFSdlVHRnpjMHh2YjJ0MWNGQnliM0JsY25SNUtHMWxjbWRsWkVobGJIQmxjbk1zSUdOdmJuUmhhVzVsY2lrZ2UxeHVJQ0JQWW1wbFkzUXVhMlY1Y3lodFpYSm5aV1JJWld4d1pYSnpLUzVtYjNKRllXTm9LR2hsYkhCbGNrNWhiV1VnUFQ0Z2UxeHVJQ0FnSUd4bGRDQm9aV3h3WlhJZ1BTQnRaWEpuWldSSVpXeHdaWEp6VzJobGJIQmxjazVoYldWZE8xeHVJQ0FnSUcxbGNtZGxaRWhsYkhCbGNuTmJhR1ZzY0dWeVRtRnRaVjBnUFNCd1lYTnpURzl2YTNWd1VISnZjR1Z5ZEhsUGNIUnBiMjRvYUdWc2NHVnlMQ0JqYjI1MFlXbHVaWElwTzF4dUlDQjlLVHRjYm4xY2JseHVablZ1WTNScGIyNGdjR0Z6YzB4dmIydDFjRkJ5YjNCbGNuUjVUM0IwYVc5dUtHaGxiSEJsY2l3Z1kyOXVkR0ZwYm1WeUtTQjdYRzRnSUdOdmJuTjBJR3h2YjJ0MWNGQnliM0JsY25SNUlEMGdZMjl1ZEdGcGJtVnlMbXh2YjJ0MWNGQnliM0JsY25SNU8xeHVJQ0J5WlhSMWNtNGdkM0poY0VobGJIQmxjaWhvWld4d1pYSXNJRzl3ZEdsdmJuTWdQVDRnZTF4dUlDQWdJSEpsZEhWeWJpQlZkR2xzY3k1bGVIUmxibVFvZXlCc2IyOXJkWEJRY205d1pYSjBlU0I5TENCdmNIUnBiMjV6S1R0Y2JpQWdmU2s3WEc1OVhHNGlYWDA9XG4iLCIvLyBCdWlsZCBvdXQgb3VyIGJhc2ljIFNhZmVTdHJpbmcgdHlwZVxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZnVuY3Rpb24gU2FmZVN0cmluZyhzdHJpbmcpIHtcbiAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG59XG5cblNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJycgKyB0aGlzLnN0cmluZztcbn07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFNhZmVTdHJpbmc7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDNOaFptVXRjM1J5YVc1bkxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3UVVGRFFTeFRRVUZUTEZWQlFWVXNRMEZCUXl4TlFVRk5MRVZCUVVVN1FVRkRNVUlzVFVGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNN1EwRkRkRUk3TzBGQlJVUXNWVUZCVlN4RFFVRkRMRk5CUVZNc1EwRkJReXhSUVVGUkxFZEJRVWNzVlVGQlZTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRWRCUVVjc1dVRkJWenRCUVVOMlJTeFRRVUZQTEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRE8wTkJRM3BDTEVOQlFVTTdPM0ZDUVVWaExGVkJRVlVpTENKbWFXeGxJam9pYzJGbVpTMXpkSEpwYm1jdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2THlCQ2RXbHNaQ0J2ZFhRZ2IzVnlJR0poYzJsaklGTmhabVZUZEhKcGJtY2dkSGx3WlZ4dVpuVnVZM1JwYjI0Z1UyRm1aVk4wY21sdVp5aHpkSEpwYm1jcElIdGNiaUFnZEdocGN5NXpkSEpwYm1jZ1BTQnpkSEpwYm1jN1hHNTlYRzVjYmxOaFptVlRkSEpwYm1jdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bklEMGdVMkZtWlZOMGNtbHVaeTV3Y205MGIzUjVjR1V1ZEc5SVZFMU1JRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJSEpsZEhWeWJpQW5KeUFySUhSb2FYTXVjM1J5YVc1bk8xeHVmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVTJGbVpWTjBjbWx1Wnp0Y2JpSmRmUT09XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmV4dGVuZCA9IGV4dGVuZDtcbmV4cG9ydHMuaW5kZXhPZiA9IGluZGV4T2Y7XG5leHBvcnRzLmVzY2FwZUV4cHJlc3Npb24gPSBlc2NhcGVFeHByZXNzaW9uO1xuZXhwb3J0cy5pc0VtcHR5ID0gaXNFbXB0eTtcbmV4cG9ydHMuY3JlYXRlRnJhbWUgPSBjcmVhdGVGcmFtZTtcbmV4cG9ydHMuYmxvY2tQYXJhbXMgPSBibG9ja1BhcmFtcztcbmV4cG9ydHMuYXBwZW5kQ29udGV4dFBhdGggPSBhcHBlbmRDb250ZXh0UGF0aDtcbnZhciBlc2NhcGUgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmI3gyNzsnLFxuICAnYCc6ICcmI3g2MDsnLFxuICAnPSc6ICcmI3gzRDsnXG59O1xuXG52YXIgYmFkQ2hhcnMgPSAvWyY8PlwiJ2A9XS9nLFxuICAgIHBvc3NpYmxlID0gL1smPD5cIidgPV0vO1xuXG5mdW5jdGlvbiBlc2NhcGVDaGFyKGNocikge1xuICByZXR1cm4gZXNjYXBlW2Nocl07XG59XG5cbmZ1bmN0aW9uIGV4dGVuZChvYmogLyogLCAuLi5zb3VyY2UgKi8pIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gYXJndW1lbnRzW2ldKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFyZ3VtZW50c1tpXSwga2V5KSkge1xuICAgICAgICBvYmpba2V5XSA9IGFyZ3VtZW50c1tpXVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbmV4cG9ydHMudG9TdHJpbmcgPSB0b1N0cmluZztcbi8vIFNvdXJjZWQgZnJvbSBsb2Rhc2hcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXN0aWVqcy9sb2Rhc2gvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHRcbi8qIGVzbGludC1kaXNhYmxlIGZ1bmMtc3R5bGUgKi9cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufTtcbi8vIGZhbGxiYWNrIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpc0Z1bmN0aW9uKC94LykpIHtcbiAgZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gIH07XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG4vKiBlc2xpbnQtZW5hYmxlIGZ1bmMtc3R5bGUgKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgPyB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJyA6IGZhbHNlO1xufTtcblxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcbi8vIE9sZGVyIElFIHZlcnNpb25zIGRvIG5vdCBkaXJlY3RseSBzdXBwb3J0IGluZGV4T2Ygc28gd2UgbXVzdCBpbXBsZW1lbnQgb3VyIG93biwgc2FkbHkuXG5cbmZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChhcnJheVtpXSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZUV4cHJlc3Npb24oc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGVzY2FwZSBTYWZlU3RyaW5ncywgc2luY2UgdGhleSdyZSBhbHJlYWR5IHNhZmVcbiAgICBpZiAoc3RyaW5nICYmIHN0cmluZy50b0hUTUwpIHtcbiAgICAgIHJldHVybiBzdHJpbmcudG9IVE1MKCk7XG4gICAgfSBlbHNlIGlmIChzdHJpbmcgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSBpZiAoIXN0cmluZykge1xuICAgICAgcmV0dXJuIHN0cmluZyArICcnO1xuICAgIH1cblxuICAgIC8vIEZvcmNlIGEgc3RyaW5nIGNvbnZlcnNpb24gYXMgdGhpcyB3aWxsIGJlIGRvbmUgYnkgdGhlIGFwcGVuZCByZWdhcmRsZXNzIGFuZFxuICAgIC8vIHRoZSByZWdleCB0ZXN0IHdpbGwgZG8gdGhpcyB0cmFuc3BhcmVudGx5IGJlaGluZCB0aGUgc2NlbmVzLCBjYXVzaW5nIGlzc3VlcyBpZlxuICAgIC8vIGFuIG9iamVjdCdzIHRvIHN0cmluZyBoYXMgZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGl0LlxuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nO1xuICB9XG5cbiAgaWYgKCFwb3NzaWJsZS50ZXN0KHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShiYWRDaGFycywgZXNjYXBlQ2hhcik7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVGcmFtZShvYmplY3QpIHtcbiAgdmFyIGZyYW1lID0gZXh0ZW5kKHt9LCBvYmplY3QpO1xuICBmcmFtZS5fcGFyZW50ID0gb2JqZWN0O1xuICByZXR1cm4gZnJhbWU7XG59XG5cbmZ1bmN0aW9uIGJsb2NrUGFyYW1zKHBhcmFtcywgaWRzKSB7XG4gIHBhcmFtcy5wYXRoID0gaWRzO1xuICByZXR1cm4gcGFyYW1zO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDb250ZXh0UGF0aChjb250ZXh0UGF0aCwgaWQpIHtcbiAgcmV0dXJuIChjb250ZXh0UGF0aCA/IGNvbnRleHRQYXRoICsgJy4nIDogJycpICsgaWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwzVjBhV3h6TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN1FVRkJRU3hKUVVGTkxFMUJRVTBzUjBGQlJ6dEJRVU5pTEV0QlFVY3NSVUZCUlN4UFFVRlBPMEZCUTFvc1MwRkJSeXhGUVVGRkxFMUJRVTA3UVVGRFdDeExRVUZITEVWQlFVVXNUVUZCVFR0QlFVTllMRXRCUVVjc1JVRkJSU3hSUVVGUk8wRkJRMklzUzBGQlJ5eEZRVUZGTEZGQlFWRTdRVUZEWWl4TFFVRkhMRVZCUVVVc1VVRkJVVHRCUVVOaUxFdEJRVWNzUlVGQlJTeFJRVUZSTzBOQlEyUXNRMEZCUXpzN1FVRkZSaXhKUVVGTkxGRkJRVkVzUjBGQlJ5eFpRVUZaTzBsQlF6TkNMRkZCUVZFc1IwRkJSeXhYUVVGWExFTkJRVU03TzBGQlJYcENMRk5CUVZNc1ZVRkJWU3hEUVVGRExFZEJRVWNzUlVGQlJUdEJRVU4yUWl4VFFVRlBMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dERRVU53UWpzN1FVRkZUU3hUUVVGVExFMUJRVTBzUTBGQlF5eEhRVUZITEc5Q1FVRnZRanRCUVVNMVF5eFBRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzVTBGQlV5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVONlF5eFRRVUZMTEVsQlFVa3NSMEZCUnl4SlFVRkpMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJUdEJRVU0xUWl4VlFVRkpMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVWQlFVVTdRVUZETTBRc1YwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dFBRVU01UWp0TFFVTkdPMGRCUTBZN08wRkJSVVFzVTBGQlR5eEhRVUZITEVOQlFVTTdRMEZEV2pzN1FVRkZUU3hKUVVGSkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJRenM3T3pzN08wRkJTMmhFTEVsQlFVa3NWVUZCVlN4SFFVRkhMRzlDUVVGVExFdEJRVXNzUlVGQlJUdEJRVU12UWl4VFFVRlBMRTlCUVU4c1MwRkJTeXhMUVVGTExGVkJRVlVzUTBGQlF6dERRVU53UXl4RFFVRkRPenM3UVVGSFJpeEpRVUZKTEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSVHRCUVVOdVFpeFZRVTlQTEZWQlFWVXNSMEZRYWtJc1ZVRkJWU3hIUVVGSExGVkJRVk1zUzBGQlN5eEZRVUZGTzBGQlF6TkNMRmRCUTBVc1QwRkJUeXhMUVVGTExFdEJRVXNzVlVGQlZTeEpRVU16UWl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEcxQ1FVRnRRaXhEUVVNMVF6dEhRVU5JTEVOQlFVTTdRMEZEU0R0UlFVTlJMRlZCUVZVc1IwRkJWaXhWUVVGVk96czdPenRCUVVsYUxFbEJRVTBzVDBGQlR5eEhRVU5zUWl4TFFVRkxMRU5CUVVNc1QwRkJUeXhKUVVOaUxGVkJRVk1zUzBGQlN5eEZRVUZGTzBGQlEyUXNVMEZCVHl4TFFVRkxMRWxCUVVrc1QwRkJUeXhMUVVGTExFdEJRVXNzVVVGQlVTeEhRVU55UXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEdkQ1FVRm5RaXhIUVVONlF5eExRVUZMTEVOQlFVTTdRMEZEV0N4RFFVRkRPenM3T3p0QlFVZEhMRk5CUVZNc1QwRkJUeXhEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVTdRVUZEY0VNc1QwRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNSMEZCUnl4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEhRVUZITEVkQlFVY3NSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVOb1JDeFJRVUZKTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhMUVVGTExFVkJRVVU3UVVGRGRFSXNZVUZCVHl4RFFVRkRMRU5CUVVNN1MwRkRWanRIUVVOR08wRkJRMFFzVTBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXp0RFFVTllPenRCUVVWTkxGTkJRVk1zWjBKQlFXZENMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRM1pETEUxQlFVa3NUMEZCVHl4TlFVRk5MRXRCUVVzc1VVRkJVU3hGUVVGRk96dEJRVVU1UWl4UlFVRkpMRTFCUVUwc1NVRkJTU3hOUVVGTkxFTkJRVU1zVFVGQlRTeEZRVUZGTzBGQlF6TkNMR0ZCUVU4c1RVRkJUU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETzB0QlEzaENMRTFCUVUwc1NVRkJTU3hOUVVGTkxFbEJRVWtzU1VGQlNTeEZRVUZGTzBGQlEzcENMR0ZCUVU4c1JVRkJSU3hEUVVGRE8wdEJRMWdzVFVGQlRTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZPMEZCUTJ4Q0xHRkJRVThzVFVGQlRTeEhRVUZITEVWQlFVVXNRMEZCUXp0TFFVTndRanM3T3pzN1FVRkxSQ3hWUVVGTkxFZEJRVWNzUlVGQlJTeEhRVUZITEUxQlFVMHNRMEZCUXp0SFFVTjBRanM3UVVGRlJDeE5RVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJUdEJRVU14UWl4WFFVRlBMRTFCUVUwc1EwRkJRenRIUVVObU8wRkJRMFFzVTBGQlR5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRkZCUVZFc1JVRkJSU3hWUVVGVkxFTkJRVU1zUTBGQlF6dERRVU0zUXpzN1FVRkZUU3hUUVVGVExFOUJRVThzUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZETjBJc1RVRkJTU3hEUVVGRExFdEJRVXNzU1VGQlNTeExRVUZMTEV0QlFVc3NRMEZCUXl4RlFVRkZPMEZCUTNwQ0xGZEJRVThzU1VGQlNTeERRVUZETzBkQlEySXNUVUZCVFN4SlFVRkpMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeExRVUZMTEVOQlFVTXNUVUZCVFN4TFFVRkxMRU5CUVVNc1JVRkJSVHRCUVVNdlF5eFhRVUZQTEVsQlFVa3NRMEZCUXp0SFFVTmlMRTFCUVUwN1FVRkRUQ3hYUVVGUExFdEJRVXNzUTBGQlF6dEhRVU5rTzBOQlEwWTdPMEZCUlUwc1UwRkJVeXhYUVVGWExFTkJRVU1zVFVGQlRTeEZRVUZGTzBGQlEyeERMRTFCUVVrc1MwRkJTeXhIUVVGSExFMUJRVTBzUTBGQlF5eEZRVUZGTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRMMElzVDBGQlN5eERRVUZETEU5QlFVOHNSMEZCUnl4TlFVRk5MRU5CUVVNN1FVRkRka0lzVTBGQlR5eExRVUZMTEVOQlFVTTdRMEZEWkRzN1FVRkZUU3hUUVVGVExGZEJRVmNzUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4RlFVRkZPMEZCUTNaRExGRkJRVTBzUTBGQlF5eEpRVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRPMEZCUTJ4Q0xGTkJRVThzVFVGQlRTeERRVUZETzBOQlEyWTdPMEZCUlUwc1UwRkJVeXhwUWtGQmFVSXNRMEZCUXl4WFFVRlhMRVZCUVVVc1JVRkJSU3hGUVVGRk8wRkJRMnBFTEZOQlFVOHNRMEZCUXl4WFFVRlhMRWRCUVVjc1YwRkJWeXhIUVVGSExFZEJRVWNzUjBGQlJ5eEZRVUZGTEVOQlFVRXNSMEZCU1N4RlFVRkZMRU5CUVVNN1EwRkRjRVFpTENKbWFXeGxJam9pZFhScGJITXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKamIyNXpkQ0JsYzJOaGNHVWdQU0I3WEc0Z0lDY21Kem9nSnlaaGJYQTdKeXhjYmlBZ0p6d25PaUFuSm14ME95Y3NYRzRnSUNjK0p6b2dKeVpuZERzbkxGeHVJQ0FuWENJbk9pQW5KbkYxYjNRN0p5eGNiaUFnWENJblhDSTZJQ2NtSTNneU56c25MRnh1SUNBbllDYzZJQ2NtSTNnMk1Ec25MRnh1SUNBblBTYzZJQ2NtSTNnelJEc25YRzU5TzF4dVhHNWpiMjV6ZENCaVlXUkRhR0Z5Y3lBOUlDOWJKancrWENJbllEMWRMMmNzWEc0Z0lIQnZjM05wWW14bElEMGdMMXNtUEQ1Y0lpZGdQVjB2TzF4dVhHNW1kVzVqZEdsdmJpQmxjMk5oY0dWRGFHRnlLR05vY2lrZ2UxeHVJQ0J5WlhSMWNtNGdaWE5qWVhCbFcyTm9jbDA3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmxlSFJsYm1Rb2IySnFJQzhxSUN3Z0xpNHVjMjkxY21ObElDb3ZLU0I3WEc0Z0lHWnZjaUFvYkdWMElHa2dQU0F4T3lCcElEd2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnWm05eUlDaHNaWFFnYTJWNUlHbHVJR0Z5WjNWdFpXNTBjMXRwWFNrZ2UxeHVJQ0FnSUNBZ2FXWWdLRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2hoY21kMWJXVnVkSE5iYVYwc0lHdGxlU2twSUh0Y2JpQWdJQ0FnSUNBZ2IySnFXMnRsZVYwZ1BTQmhjbWQxYldWdWRITmJhVjFiYTJWNVhUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2IySnFPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ2JHVjBJSFJ2VTNSeWFXNW5JRDBnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaenRjYmx4dUx5OGdVMjkxY21ObFpDQm1jbTl0SUd4dlpHRnphRnh1THk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwySmxjM1JwWldwekwyeHZaR0Z6YUM5aWJHOWlMMjFoYzNSbGNpOU1TVU5GVGxORkxuUjRkRnh1THlvZ1pYTnNhVzUwTFdScGMyRmliR1VnWm5WdVl5MXpkSGxzWlNBcUwxeHViR1YwSUdselJuVnVZM1JwYjI0Z1BTQm1kVzVqZEdsdmJpaDJZV3gxWlNrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5ablZ1WTNScGIyNG5PMXh1ZlR0Y2JpOHZJR1poYkd4aVlXTnJJR1p2Y2lCdmJHUmxjaUIyWlhKemFXOXVjeUJ2WmlCRGFISnZiV1VnWVc1a0lGTmhabUZ5YVZ4dUx5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHNWxlSFFnS2k5Y2JtbG1JQ2hwYzBaMWJtTjBhVzl1S0M5NEx5a3BJSHRjYmlBZ2FYTkdkVzVqZEdsdmJpQTlJR1oxYm1OMGFXOXVLSFpoYkhWbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUhSNWNHVnZaaUIyWVd4MVpTQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUpseHVJQ0FnSUNBZ2RHOVRkSEpwYm1jdVkyRnNiQ2gyWVd4MVpTa2dQVDA5SUNkYmIySnFaV04wSUVaMWJtTjBhVzl1WFNkY2JpQWdJQ0FwTzF4dUlDQjlPMXh1ZlZ4dVpYaHdiM0owSUhzZ2FYTkdkVzVqZEdsdmJpQjlPMXh1THlvZ1pYTnNhVzUwTFdWdVlXSnNaU0JtZFc1akxYTjBlV3hsSUNvdlhHNWNiaThxSUdsemRHRnVZblZzSUdsbmJtOXlaU0J1WlhoMElDb3ZYRzVsZUhCdmNuUWdZMjl1YzNRZ2FYTkJjbkpoZVNBOVhHNGdJRUZ5Y21GNUxtbHpRWEp5WVhrZ2ZIeGNiaUFnWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RtRnNkV1VnSmlZZ2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmIySnFaV04wSjF4dUlDQWdJQ0FnUHlCMGIxTjBjbWx1Wnk1allXeHNLSFpoYkhWbEtTQTlQVDBnSjF0dlltcGxZM1FnUVhKeVlYbGRKMXh1SUNBZ0lDQWdPaUJtWVd4elpUdGNiaUFnZlR0Y2JseHVMeThnVDJ4a1pYSWdTVVVnZG1WeWMybHZibk1nWkc4Z2JtOTBJR1JwY21WamRHeDVJSE4xY0hCdmNuUWdhVzVrWlhoUFppQnpieUIzWlNCdGRYTjBJR2x0Y0d4bGJXVnVkQ0J2ZFhJZ2IzZHVMQ0J6WVdSc2VTNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnBibVJsZUU5bUtHRnljbUY1TENCMllXeDFaU2tnZTF4dUlDQm1iM0lnS0d4bGRDQnBJRDBnTUN3Z2JHVnVJRDBnWVhKeVlYa3ViR1Z1WjNSb095QnBJRHdnYkdWdU95QnBLeXNwSUh0Y2JpQWdJQ0JwWmlBb1lYSnlZWGxiYVYwZ1BUMDlJSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2FUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUMweE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWlhOallYQmxSWGh3Y21WemMybHZiaWh6ZEhKcGJtY3BJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQnpkSEpwYm1jZ0lUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdMeThnWkc5dUozUWdaWE5qWVhCbElGTmhabVZUZEhKcGJtZHpMQ0J6YVc1alpTQjBhR1Y1SjNKbElHRnNjbVZoWkhrZ2MyRm1aVnh1SUNBZ0lHbG1JQ2h6ZEhKcGJtY2dKaVlnYzNSeWFXNW5MblJ2U0ZSTlRDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlITjBjbWx1Wnk1MGIwaFVUVXdvS1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hOMGNtbHVaeUE5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdKeWM3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2doYzNSeWFXNW5LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjM1J5YVc1bklDc2dKeWM3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUm05eVkyVWdZU0J6ZEhKcGJtY2dZMjl1ZG1WeWMybHZiaUJoY3lCMGFHbHpJSGRwYkd3Z1ltVWdaRzl1WlNCaWVTQjBhR1VnWVhCd1pXNWtJSEpsWjJGeVpHeGxjM01nWVc1a1hHNGdJQ0FnTHk4Z2RHaGxJSEpsWjJWNElIUmxjM1FnZDJsc2JDQmtieUIwYUdseklIUnlZVzV6Y0dGeVpXNTBiSGtnWW1Wb2FXNWtJSFJvWlNCelkyVnVaWE1zSUdOaGRYTnBibWNnYVhOemRXVnpJR2xtWEc0Z0lDQWdMeThnWVc0Z2IySnFaV04wSjNNZ2RHOGdjM1J5YVc1bklHaGhjeUJsYzJOaGNHVmtJR05vWVhKaFkzUmxjbk1nYVc0Z2FYUXVYRzRnSUNBZ2MzUnlhVzVuSUQwZ0p5Y2dLeUJ6ZEhKcGJtYzdYRzRnSUgxY2JseHVJQ0JwWmlBb0lYQnZjM05wWW14bExuUmxjM1FvYzNSeWFXNW5LU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnpkSEpwYm1jN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhOMGNtbHVaeTV5WlhCc1lXTmxLR0poWkVOb1lYSnpMQ0JsYzJOaGNHVkRhR0Z5S1R0Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2x6Ulcxd2RIa29kbUZzZFdVcElIdGNiaUFnYVdZZ0tDRjJZV3gxWlNBbUppQjJZV3gxWlNBaFBUMGdNQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQjlJR1ZzYzJVZ2FXWWdLR2x6UVhKeVlYa29kbUZzZFdVcElDWW1JSFpoYkhWbExteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnZlZ4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdZM0psWVhSbFJuSmhiV1VvYjJKcVpXTjBLU0I3WEc0Z0lHeGxkQ0JtY21GdFpTQTlJR1Y0ZEdWdVpDaDdmU3dnYjJKcVpXTjBLVHRjYmlBZ1puSmhiV1V1WDNCaGNtVnVkQ0E5SUc5aWFtVmpkRHRjYmlBZ2NtVjBkWEp1SUdaeVlXMWxPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1lteHZZMnRRWVhKaGJYTW9jR0Z5WVcxekxDQnBaSE1wSUh0Y2JpQWdjR0Z5WVcxekxuQmhkR2dnUFNCcFpITTdYRzRnSUhKbGRIVnliaUJ3WVhKaGJYTTdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCaGNIQmxibVJEYjI1MFpYaDBVR0YwYUNoamIyNTBaWGgwVUdGMGFDd2dhV1FwSUh0Y2JpQWdjbVYwZFhKdUlDaGpiMjUwWlhoMFVHRjBhQ0EvSUdOdmJuUmxlSFJRWVhSb0lDc2dKeTRuSURvZ0p5Y3BJQ3NnYVdRN1hHNTlYRzRpWFgwPVxuIiwiLy8gQ3JlYXRlIGEgc2ltcGxlIHBhdGggYWxpYXMgdG8gYWxsb3cgYnJvd3NlcmlmeSB0byByZXNvbHZlXG4vLyB0aGUgcnVudGltZSBvbiBhIHN1cHBvcnRlZCBwYXRoLlxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvY2pzL2hhbmRsZWJhcnMucnVudGltZScpWydkZWZhdWx0J107XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMCwyMDExLDIwMTIsMjAxMywyMDE0IE1vcmdhbiBSb2RlcmljayBodHRwOi8vcm9kZXJpY2suZGtcbiAqIExpY2Vuc2U6IE1JVCAtIGh0dHA6Ly9tcmducmRyY2subWl0LWxpY2Vuc2Uub3JnXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL21yb2Rlcmljay9QdWJTdWJKU1xuICovXG5cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIFB1YlN1YiA9IHt9O1xuXG4gICAgaWYgKHJvb3QuUHViU3ViKSB7XG4gICAgICAgIFB1YlN1YiA9IHJvb3QuUHViU3ViO1xuICAgICAgICBjb25zb2xlLndhcm4oXCJQdWJTdWIgYWxyZWFkeSBsb2FkZWQsIHVzaW5nIGV4aXN0aW5nIHZlcnNpb25cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5QdWJTdWIgPSBQdWJTdWI7XG4gICAgICAgIGZhY3RvcnkoUHViU3ViKTtcbiAgICB9XG4gICAgLy8gQ29tbW9uSlMgYW5kIE5vZGUuanMgbW9kdWxlIHN1cHBvcnRcbiAgICBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKXtcbiAgICAgICAgaWYgKG1vZHVsZSAhPT0gdW5kZWZpbmVkICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBQdWJTdWI7IC8vIE5vZGUuanMgc3BlY2lmaWMgYG1vZHVsZS5leHBvcnRzYFxuICAgICAgICB9XG4gICAgICAgIGV4cG9ydHMuUHViU3ViID0gUHViU3ViOyAvLyBDb21tb25KUyBtb2R1bGUgMS4xLjEgc3BlY1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBQdWJTdWI7IC8vIENvbW1vbkpTXG4gICAgfVxuICAgIC8vIEFNRCBzdXBwb3J0XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbiAgICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpe1xuICAgICAgICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBQdWJTdWI7IH0pO1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZGVmICovXG4gICAgfVxuXG59KCggdHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93ICkgfHwgdGhpcywgZnVuY3Rpb24gKFB1YlN1Yil7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIG1lc3NhZ2VzID0ge30sXG4gICAgICAgIGxhc3RVaWQgPSAtMSxcbiAgICAgICAgQUxMX1NVQlNDUklCSU5HX01TRyA9ICcqJztcblxuICAgIGZ1bmN0aW9uIGhhc0tleXMob2JqKXtcbiAgICAgICAgdmFyIGtleTtcblxuICAgICAgICBmb3IgKGtleSBpbiBvYmope1xuICAgICAgICAgICAgaWYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpICl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHRocm93cyB0aGUgcGFzc2VkIGV4Y2VwdGlvbiwgZm9yIHVzZSBhcyBhcmd1bWVudCBmb3Igc2V0VGltZW91dFxuICAgICAqIEBhbGlhcyB0aHJvd0V4Y2VwdGlvblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7IE9iamVjdCB9IGV4IEFuIEVycm9yIG9iamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm93RXhjZXB0aW9uKCBleCApe1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gcmVUaHJvd0V4Y2VwdGlvbigpe1xuICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsbFN1YnNjcmliZXJXaXRoRGVsYXllZEV4Y2VwdGlvbnMoIHN1YnNjcmliZXIsIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIoIG1lc3NhZ2UsIGRhdGEgKTtcbiAgICAgICAgfSBjYXRjaCggZXggKXtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoIHRocm93RXhjZXB0aW9uKCBleCApLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMoIHN1YnNjcmliZXIsIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgc3Vic2NyaWJlciggbWVzc2FnZSwgZGF0YSApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGl2ZXJNZXNzYWdlKCBvcmlnaW5hbE1lc3NhZ2UsIG1hdGNoZWRNZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICl7XG4gICAgICAgIHZhciBzdWJzY3JpYmVycyA9IG1lc3NhZ2VzW21hdGNoZWRNZXNzYWdlXSxcbiAgICAgICAgICAgIGNhbGxTdWJzY3JpYmVyID0gaW1tZWRpYXRlRXhjZXB0aW9ucyA/IGNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMgOiBjYWxsU3Vic2NyaWJlcldpdGhEZWxheWVkRXhjZXB0aW9ucyxcbiAgICAgICAgICAgIHM7XG5cbiAgICAgICAgaWYgKCAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKCBtZXNzYWdlcywgbWF0Y2hlZE1lc3NhZ2UgKSApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAocyBpbiBzdWJzY3JpYmVycyl7XG4gICAgICAgICAgICBpZiAoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzdWJzY3JpYmVycywgcykpe1xuICAgICAgICAgICAgICAgIGNhbGxTdWJzY3JpYmVyKCBzdWJzY3JpYmVyc1tzXSwgb3JpZ2luYWxNZXNzYWdlLCBkYXRhICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEZWxpdmVyeUZ1bmN0aW9uKCBtZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICl7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBkZWxpdmVyTmFtZXNwYWNlZCgpe1xuICAgICAgICAgICAgdmFyIHRvcGljID0gU3RyaW5nKCBtZXNzYWdlICksXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZiggJy4nICk7XG5cbiAgICAgICAgICAgIC8vIGRlbGl2ZXIgdGhlIG1lc3NhZ2UgYXMgaXQgaXMgbm93XG4gICAgICAgICAgICBkZWxpdmVyTWVzc2FnZShtZXNzYWdlLCBtZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gdHJpbSB0aGUgaGllcmFyY2h5IGFuZCBkZWxpdmVyIG1lc3NhZ2UgdG8gZWFjaCBsZXZlbFxuICAgICAgICAgICAgd2hpbGUoIHBvc2l0aW9uICE9PSAtMSApe1xuICAgICAgICAgICAgICAgIHRvcGljID0gdG9waWMuc3Vic3RyKCAwLCBwb3NpdGlvbiApO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdG9waWMubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgICAgICAgICAgICBkZWxpdmVyTWVzc2FnZSggbWVzc2FnZSwgdG9waWMsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVsaXZlck1lc3NhZ2UobWVzc2FnZSwgQUxMX1NVQlNDUklCSU5HX01TRywgZGF0YSwgaW1tZWRpYXRlRXhjZXB0aW9ucyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzRGlyZWN0U3Vic2NyaWJlcnNGb3IoIG1lc3NhZ2UgKSB7XG4gICAgICAgIHZhciB0b3BpYyA9IFN0cmluZyggbWVzc2FnZSApLFxuICAgICAgICAgICAgZm91bmQgPSBCb29sZWFuKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCggbWVzc2FnZXMsIHRvcGljICkgJiYgaGFzS2V5cyhtZXNzYWdlc1t0b3BpY10pKTtcblxuICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVzc2FnZUhhc1N1YnNjcmliZXJzKCBtZXNzYWdlICl7XG4gICAgICAgIHZhciB0b3BpYyA9IFN0cmluZyggbWVzc2FnZSApLFxuICAgICAgICAgICAgZm91bmQgPSBoYXNEaXJlY3RTdWJzY3JpYmVyc0Zvcih0b3BpYykgfHwgaGFzRGlyZWN0U3Vic2NyaWJlcnNGb3IoQUxMX1NVQlNDUklCSU5HX01TRyksXG4gICAgICAgICAgICBwb3NpdGlvbiA9IHRvcGljLmxhc3RJbmRleE9mKCAnLicgKTtcblxuICAgICAgICB3aGlsZSAoICFmb3VuZCAmJiBwb3NpdGlvbiAhPT0gLTEgKXtcbiAgICAgICAgICAgIHRvcGljID0gdG9waWMuc3Vic3RyKCAwLCBwb3NpdGlvbiApO1xuICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZiggJy4nICk7XG4gICAgICAgICAgICBmb3VuZCA9IGhhc0RpcmVjdFN1YnNjcmliZXJzRm9yKHRvcGljKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3VuZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwdWJsaXNoKCBtZXNzYWdlLCBkYXRhLCBzeW5jLCBpbW1lZGlhdGVFeGNlcHRpb25zICl7XG4gICAgICAgIG1lc3NhZ2UgPSAodHlwZW9mIG1lc3NhZ2UgPT09ICdzeW1ib2wnKSA/IG1lc3NhZ2UudG9TdHJpbmcoKSA6IG1lc3NhZ2U7XG5cbiAgICAgICAgdmFyIGRlbGl2ZXIgPSBjcmVhdGVEZWxpdmVyeUZ1bmN0aW9uKCBtZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICksXG4gICAgICAgICAgICBoYXNTdWJzY3JpYmVycyA9IG1lc3NhZ2VIYXNTdWJzY3JpYmVycyggbWVzc2FnZSApO1xuXG4gICAgICAgIGlmICggIWhhc1N1YnNjcmliZXJzICl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHN5bmMgPT09IHRydWUgKXtcbiAgICAgICAgICAgIGRlbGl2ZXIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoIGRlbGl2ZXIsIDAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQdWJsaXNoZXMgdGhlIG1lc3NhZ2UsIHBhc3NpbmcgdGhlIGRhdGEgdG8gaXQncyBzdWJzY3JpYmVyc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBwdWJsaXNoXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIH0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBwdWJsaXNoXG4gICAgICogQHBhcmFtIHt9IGRhdGEgVGhlIGRhdGEgdG8gcGFzcyB0byBzdWJzY3JpYmVyc1xuICAgICAqIEByZXR1cm4geyBCb29sZWFuIH1cbiAgICAgKi9cbiAgICBQdWJTdWIucHVibGlzaCA9IGZ1bmN0aW9uKCBtZXNzYWdlLCBkYXRhICl7XG4gICAgICAgIHJldHVybiBwdWJsaXNoKCBtZXNzYWdlLCBkYXRhLCBmYWxzZSwgUHViU3ViLmltbWVkaWF0ZUV4Y2VwdGlvbnMgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUHVibGlzaGVzIHRoZSBtZXNzYWdlIHN5bmNocm9ub3VzbHksIHBhc3NpbmcgdGhlIGRhdGEgdG8gaXQncyBzdWJzY3JpYmVyc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBwdWJsaXNoU3luY1xuICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gcHVibGlzaFxuICAgICAqIEBwYXJhbSB7fSBkYXRhIFRoZSBkYXRhIHRvIHBhc3MgdG8gc3Vic2NyaWJlcnNcbiAgICAgKiBAcmV0dXJuIHsgQm9vbGVhbiB9XG4gICAgICovXG4gICAgUHViU3ViLnB1Ymxpc2hTeW5jID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgcmV0dXJuIHB1Ymxpc2goIG1lc3NhZ2UsIGRhdGEsIHRydWUsIFB1YlN1Yi5pbW1lZGlhdGVFeGNlcHRpb25zICk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdGhlIHBhc3NlZCBmdW5jdGlvbiB0byB0aGUgcGFzc2VkIG1lc3NhZ2UuIEV2ZXJ5IHJldHVybmVkIHRva2VuIGlzIHVuaXF1ZSBhbmQgc2hvdWxkIGJlIHN0b3JlZCBpZiB5b3UgbmVlZCB0byB1bnN1YnNjcmliZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBzdWJzY3JpYmVcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHN1YnNjcmliZSB0b1xuICAgICAqIEBwYXJhbSB7IEZ1bmN0aW9uIH0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGEgbmV3IG1lc3NhZ2UgaXMgcHVibGlzaGVkXG4gICAgICogQHJldHVybiB7IFN0cmluZyB9XG4gICAgICovXG4gICAgUHViU3ViLnN1YnNjcmliZSA9IGZ1bmN0aW9uKCBtZXNzYWdlLCBmdW5jICl7XG4gICAgICAgIGlmICggdHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVzc2FnZSA9ICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N5bWJvbCcpID8gbWVzc2FnZS50b1N0cmluZygpIDogbWVzc2FnZTtcblxuICAgICAgICAvLyBtZXNzYWdlIGlzIG5vdCByZWdpc3RlcmVkIHlldFxuICAgICAgICBpZiAoICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoIG1lc3NhZ2VzLCBtZXNzYWdlICkgKXtcbiAgICAgICAgICAgIG1lc3NhZ2VzW21lc3NhZ2VdID0ge307XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmb3JjaW5nIHRva2VuIGFzIFN0cmluZywgdG8gYWxsb3cgZm9yIGZ1dHVyZSBleHBhbnNpb25zIHdpdGhvdXQgYnJlYWtpbmcgdXNhZ2VcbiAgICAgICAgLy8gYW5kIGFsbG93IGZvciBlYXN5IHVzZSBhcyBrZXkgbmFtZXMgZm9yIHRoZSAnbWVzc2FnZXMnIG9iamVjdFxuICAgICAgICB2YXIgdG9rZW4gPSAndWlkXycgKyBTdHJpbmcoKytsYXN0VWlkKTtcbiAgICAgICAgbWVzc2FnZXNbbWVzc2FnZV1bdG9rZW5dID0gZnVuYztcblxuICAgICAgICAvLyByZXR1cm4gdG9rZW4gZm9yIHVuc3Vic2NyaWJpbmdcbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH07XG5cbiAgICBQdWJTdWIuc3Vic2NyaWJlQWxsID0gZnVuY3Rpb24oIGZ1bmMgKXtcbiAgICAgICAgcmV0dXJuIFB1YlN1Yi5zdWJzY3JpYmUoQUxMX1NVQlNDUklCSU5HX01TRywgZnVuYyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdGhlIHBhc3NlZCBmdW5jdGlvbiB0byB0aGUgcGFzc2VkIG1lc3NhZ2Ugb25jZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBzdWJzY3JpYmVPbmNlXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIH0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzdWJzY3JpYmUgdG9cbiAgICAgKiBAcGFyYW0geyBGdW5jdGlvbiB9IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBhIG5ldyBtZXNzYWdlIGlzIHB1Ymxpc2hlZFxuICAgICAqIEByZXR1cm4geyBQdWJTdWIgfVxuICAgICAqL1xuICAgIFB1YlN1Yi5zdWJzY3JpYmVPbmNlID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGZ1bmMgKXtcbiAgICAgICAgdmFyIHRva2VuID0gUHViU3ViLnN1YnNjcmliZSggbWVzc2FnZSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8vIGJlZm9yZSBmdW5jIGFwcGx5LCB1bnN1YnNjcmliZSBtZXNzYWdlXG4gICAgICAgICAgICBQdWJTdWIudW5zdWJzY3JpYmUoIHRva2VuICk7XG4gICAgICAgICAgICBmdW5jLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBQdWJTdWI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgc3Vic2NyaXB0aW9uc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAYWxpYXMgY2xlYXJBbGxTdWJzY3JpcHRpb25zXG4gICAgICovXG4gICAgUHViU3ViLmNsZWFyQWxsU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIGNsZWFyQWxsU3Vic2NyaXB0aW9ucygpe1xuICAgICAgICBtZXNzYWdlcyA9IHt9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhciBzdWJzY3JpcHRpb25zIGJ5IHRoZSB0b3BpY1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAYWxpYXMgY2xlYXJBbGxTdWJzY3JpcHRpb25zXG4gICAgICogQHJldHVybiB7IGludCB9XG4gICAgICovXG4gICAgUHViU3ViLmNsZWFyU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIGNsZWFyU3Vic2NyaXB0aW9ucyh0b3BpYyl7XG4gICAgICAgIHZhciBtO1xuICAgICAgICBmb3IgKG0gaW4gbWVzc2FnZXMpe1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlcywgbSkgJiYgbS5pbmRleE9mKHRvcGljKSA9PT0gMCl7XG4gICAgICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2VzW21dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAgIENvdW50IHN1YnNjcmlwdGlvbnMgYnkgdGhlIHRvcGljXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhbGlhcyBjb3VudFN1YnNjcmlwdGlvbnNcbiAgICAgKiBAcmV0dXJuIHsgQXJyYXkgfVxuICAgICovXG4gICAgUHViU3ViLmNvdW50U3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIGNvdW50U3Vic2NyaXB0aW9ucyh0b3BpYyl7XG4gICAgICAgIHZhciBtO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgICAgdmFyIHRva2VuO1xuICAgICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgICBmb3IgKG0gaW4gbWVzc2FnZXMpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZXMsIG0pICYmIG0uaW5kZXhPZih0b3BpYykgPT09IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKHRva2VuIGluIG1lc3NhZ2VzW21dKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb3VudDtcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgICBHZXRzIHN1YnNjcmlwdGlvbnMgYnkgdGhlIHRvcGljXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhbGlhcyBnZXRTdWJzY3JpcHRpb25zXG4gICAgKi9cbiAgICBQdWJTdWIuZ2V0U3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIGdldFN1YnNjcmlwdGlvbnModG9waWMpe1xuICAgICAgICB2YXIgbTtcbiAgICAgICAgdmFyIGxpc3QgPSBbXTtcbiAgICAgICAgZm9yIChtIGluIG1lc3NhZ2VzKXtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZXMsIG0pICYmIG0uaW5kZXhPZih0b3BpYykgPT09IDApe1xuICAgICAgICAgICAgICAgIGxpc3QucHVzaChtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBzdWJzY3JpcHRpb25zXG4gICAgICpcbiAgICAgKiAtIFdoZW4gcGFzc2VkIGEgdG9rZW4sIHJlbW92ZXMgYSBzcGVjaWZpYyBzdWJzY3JpcHRpb24uXG4gICAgICpcblx0ICogLSBXaGVuIHBhc3NlZCBhIGZ1bmN0aW9uLCByZW1vdmVzIGFsbCBzdWJzY3JpcHRpb25zIGZvciB0aGF0IGZ1bmN0aW9uXG4gICAgICpcblx0ICogLSBXaGVuIHBhc3NlZCBhIHRvcGljLCByZW1vdmVzIGFsbCBzdWJzY3JpcHRpb25zIGZvciB0aGF0IHRvcGljIChoaWVyYXJjaHkpXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhbGlhcyBzdWJzY3JpYmVPbmNlXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIHwgRnVuY3Rpb24gfSB2YWx1ZSBBIHRva2VuLCBmdW5jdGlvbiBvciB0b3BpYyB0byB1bnN1YnNjcmliZSBmcm9tXG4gICAgICogQGV4YW1wbGUgLy8gVW5zdWJzY3JpYmluZyB3aXRoIGEgdG9rZW5cbiAgICAgKiB2YXIgdG9rZW4gPSBQdWJTdWIuc3Vic2NyaWJlKCdteXRvcGljJywgbXlGdW5jKTtcbiAgICAgKiBQdWJTdWIudW5zdWJzY3JpYmUodG9rZW4pO1xuICAgICAqIEBleGFtcGxlIC8vIFVuc3Vic2NyaWJpbmcgd2l0aCBhIGZ1bmN0aW9uXG4gICAgICogUHViU3ViLnVuc3Vic2NyaWJlKG15RnVuYyk7XG4gICAgICogQGV4YW1wbGUgLy8gVW5zdWJzY3JpYmluZyBmcm9tIGEgdG9waWNcbiAgICAgKiBQdWJTdWIudW5zdWJzY3JpYmUoJ215dG9waWMnKTtcbiAgICAgKi9cbiAgICBQdWJTdWIudW5zdWJzY3JpYmUgPSBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgIHZhciBkZXNjZW5kYW50VG9waWNFeGlzdHMgPSBmdW5jdGlvbih0b3BpYykge1xuICAgICAgICAgICAgICAgIHZhciBtO1xuICAgICAgICAgICAgICAgIGZvciAoIG0gaW4gbWVzc2FnZXMgKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZXMsIG0pICYmIG0uaW5kZXhPZih0b3BpYykgPT09IDAgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgZGVzY2VuZGFudCBvZiB0aGUgdG9waWMgZXhpc3RzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNUb3BpYyAgICA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZXMsIHZhbHVlKSB8fCBkZXNjZW5kYW50VG9waWNFeGlzdHModmFsdWUpICksXG4gICAgICAgICAgICBpc1Rva2VuICAgID0gIWlzVG9waWMgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyxcbiAgICAgICAgICAgIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicsXG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZSxcbiAgICAgICAgICAgIG0sIG1lc3NhZ2UsIHQ7XG5cbiAgICAgICAgaWYgKGlzVG9waWMpe1xuICAgICAgICAgICAgUHViU3ViLmNsZWFyU3Vic2NyaXB0aW9ucyh2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKCBtIGluIG1lc3NhZ2VzICl7XG4gICAgICAgICAgICBpZiAoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCggbWVzc2FnZXMsIG0gKSApe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlc1ttXTtcblxuICAgICAgICAgICAgICAgIGlmICggaXNUb2tlbiAmJiBtZXNzYWdlW3ZhbHVlXSApe1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbWVzc2FnZVt2YWx1ZV07XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAvLyB0b2tlbnMgYXJlIHVuaXF1ZSwgc28gd2UgY2FuIGp1c3Qgc3RvcCBoZXJlXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoIHQgaW4gbWVzc2FnZSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCB0KSAmJiBtZXNzYWdlW3RdID09PSB2YWx1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2VbdF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn0pKTtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsImNvbnN0IEFycmF5SGVscGVyID0gKCgpID0+IHtcclxuICAgIGZ1bmN0aW9uIHNodWZmbGUoYXJyYXkpIHtcclxuICAgICAgICBsZXQgY3VycmVudEluZGV4ID0gYXJyYXkubGVuZ3RoLFxyXG4gICAgICAgICAgICByYW5kb21JbmRleDtcclxuXHJcbiAgICAgICAgLy8gV2hpbGUgdGhlcmUgcmVtYWluIGVsZW1lbnRzIHRvIHNodWZmbGUuLi5cclxuICAgICAgICB3aGlsZSAoY3VycmVudEluZGV4ICE9PSAwKSB7XHJcbiAgICAgICAgICAgIC8vIFBpY2sgYSByZW1haW5pbmcgZWxlbWVudC4uLlxyXG4gICAgICAgICAgICByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGN1cnJlbnRJbmRleCk7XHJcbiAgICAgICAgICAgIGN1cnJlbnRJbmRleC0tO1xyXG5cclxuICAgICAgICAgICAgLy8gQW5kIHN3YXAgaXQgd2l0aCB0aGUgY3VycmVudCBlbGVtZW50LlxyXG4gICAgICAgICAgICBbYXJyYXlbY3VycmVudEluZGV4XSwgYXJyYXlbcmFuZG9tSW5kZXhdXSA9IFthcnJheVtyYW5kb21JbmRleF0sIGFycmF5W2N1cnJlbnRJbmRleF1dO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGFycmF5O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgc2h1ZmZsZSxcclxuICAgIH07XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBcnJheUhlbHBlcjtcclxuIiwiY29uc3QgR2FtZWJvYXJkR2V0dGVyID0gKCgpID0+IHtcclxuICAgIGZ1bmN0aW9uIG1heEhvcml6b250YWxMZW5ndGhDYW5CZU9jY3VwaWVkKGJvYXJkKSB7XHJcbiAgICAgICAgbGV0IGhvcml6b250YWxMZW5ndGggPSAwO1xyXG4gICAgICAgIGNvbnN0IHNoaXBzQm9hcmQgPSBib2FyZC5nZXRTaGlwc0JvYXJkKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2FyZC5nZXRIZWlnaHQoKTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYm9hcmQuZ2V0V2lkdGgoKTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hpcHNCb2FyZFtpXVtqXSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY250ID0gMTtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiArIDEgPT09IGJvYXJkLmdldFdpZHRoKCkgfHwgc2hpcHNCb2FyZFtpXVtqICsgMV0gIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsTGVuZ3RoID0gTWF0aC5tYXgoaG9yaXpvbnRhbExlbmd0aCwgY250KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsrY250O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICArK2o7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBob3Jpem9udGFsTGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIG1heFZlcnRpY2FsTGVuZ3RoQ2FuQmVPY2N1cGllZChib2FyZCkge1xyXG4gICAgICAgIGxldCB2ZXJ0aWNhbExlbmd0aCA9IDA7XHJcbiAgICAgICAgY29uc3Qgc2hpcHNCb2FyZCA9IGJvYXJkLmdldFNoaXBzQm9hcmQoKTtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJvYXJkLmdldFdpZHRoKCk7IGorKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvYXJkLmdldEhlaWdodCgpOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChzaGlwc0JvYXJkW2ldW2pdID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjbnQgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpICsgMSA9PT0gYm9hcmQuZ2V0SGVpZ2h0KCkgfHwgc2hpcHNCb2FyZFtpICsgMV1bal0gIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbExlbmd0aCA9IE1hdGgubWF4KHZlcnRpY2FsTGVuZ3RoLCBjbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKytjbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZlcnRpY2FsTGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWF4SG9yaXpvbnRhbExlbmd0aENhbkJlT2NjdXBpZWQsXHJcbiAgICAgICAgbWF4VmVydGljYWxMZW5ndGhDYW5CZU9jY3VwaWVkLFxyXG4gICAgfTtcclxufSkoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEdhbWVib2FyZEdldHRlcjtcclxuIiwiY29uc3QgQ2hlY2tlckhlbHBlciA9ICgoKSA9PiB7XHJcbiAgICBmdW5jdGlvbiBjaGVja0lmV2hvbGVOdW1iZXIobnVtKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBudW0gPT09IFwibnVtYmVyXCIgJiYgTnVtYmVyLmlzSW50ZWdlcihudW0pICYmIG51bSA+PSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNoZWNrSWZQb3NpdGl2ZU51bWJlcihudW0pIHtcclxuICAgICAgICByZXR1cm4gY2hlY2tJZldob2xlTnVtYmVyKG51bSkgJiYgbnVtID4gMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGNoZWNrSWZXaG9sZU51bWJlcixcclxuICAgICAgICBjaGVja0lmUG9zaXRpdmVOdW1iZXIsXHJcbiAgICB9O1xyXG59KSgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2hlY2tlckhlbHBlcjtcclxuIiwiaW1wb3J0IEdhbWVib2FyZEdldHRlciBmcm9tIFwiLi9nYW1lYm9hcmQtZ2V0dGVyXCI7XHJcbmltcG9ydCBDaGVja2VySGVscGVyIGZyb20gXCIuLi9jaGVja2VyLWhlbHBlclwiO1xyXG5cclxuY29uc3QgR2FtZWJvYXJkQ2hlY2tlciA9ICgoKSA9PiB7XHJcbiAgICBmdW5jdGlvbiBjYW5BZGRTaGlwKGJvYXJkLCBsZW5ndGgpIHtcclxuICAgICAgICBpZiAoIUNoZWNrZXJIZWxwZXIuY2hlY2tJZlBvc2l0aXZlTnVtYmVyKGxlbmd0aCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBBcmd1bWVudCBFeGNlcHRpb25cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgbGVuZ3RoID5cclxuICAgICAgICAgICAgTWF0aC5tYXgoXHJcbiAgICAgICAgICAgICAgICBHYW1lYm9hcmRHZXR0ZXIubWF4SG9yaXpvbnRhbExlbmd0aENhbkJlT2NjdXBpZWQoYm9hcmQpLFxyXG4gICAgICAgICAgICAgICAgR2FtZWJvYXJkR2V0dGVyLm1heFZlcnRpY2FsTGVuZ3RoQ2FuQmVPY2N1cGllZChib2FyZCksXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgbm90UGxhY2VkTGVuZ3RoID0gMDtcclxuICAgICAgICBib2FyZC5nZXRTaGlwcygpLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0ucm93ID09PSB1bmRlZmluZWQgJiYgaXRlbS5jb2wgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgbm90UGxhY2VkTGVuZ3RoICs9IGl0ZW0uc2hpcC5nZXRMZW5ndGgoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChib2FyZC5nZXRCbG9ja05vdE9jY3VwaWVkKCkgLSBub3RQbGFjZWRMZW5ndGggLSBsZW5ndGggPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaXNPdXRzaWRlQm9hcmQoYm9hcmQsIHJvdywgY29sKSB7XHJcbiAgICAgICAgcmV0dXJuIHJvdyA8IDAgfHwgcm93ID49IGJvYXJkLmdldEhlaWdodCgpIHx8IGNvbCA8IDAgfHwgY29sID49IGJvYXJkLmdldFdpZHRoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY2FuUGxhY2VTaGlwKGJvYXJkLCBzaGlwSW5kZXgsIHJvdywgY29sLCBpc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAhQ2hlY2tlckhlbHBlci5jaGVja0lmV2hvbGVOdW1iZXIoc2hpcEluZGV4KSB8fFxyXG4gICAgICAgICAgICAhQ2hlY2tlckhlbHBlci5jaGVja0lmV2hvbGVOdW1iZXIocm93KSB8fFxyXG4gICAgICAgICAgICAhQ2hlY2tlckhlbHBlci5jaGVja0lmV2hvbGVOdW1iZXIoY29sKSB8fFxyXG4gICAgICAgICAgICB0eXBlb2YgaXNWZXJ0aWNhbCAhPT0gXCJib29sZWFuXCJcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBBcmd1bWVudCBFeGNlcHRpb25cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc091dHNpZGVCb2FyZChib2FyZCwgcm93LCBjb2wpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgQXJndW1lbnQgRXhjZXB0aW9uXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2hpcEluZGV4ID49IGJvYXJkLmdldFNoaXBzKCkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgQXJndW1lbnQgRXhjZXB0aW9uXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzaGlwVG9QbGFjZSA9IGJvYXJkLmdldFNoaXAoc2hpcEluZGV4KTtcclxuICAgICAgICBpZiAoaXNWZXJ0aWNhbCAmJiByb3cgKyBzaGlwVG9QbGFjZS5nZXRMZW5ndGgoKSAtIDEgPj0gYm9hcmQuZ2V0SGVpZ2h0KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWlzVmVydGljYWwgJiYgY29sICsgc2hpcFRvUGxhY2UuZ2V0TGVuZ3RoKCkgLSAxID49IGJvYXJkLmdldFdpZHRoKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzaGlwc0JvYXJkID0gYm9hcmQuZ2V0U2hpcHNCb2FyZCgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcFRvUGxhY2UuZ2V0TGVuZ3RoKCk7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoaXNWZXJ0aWNhbCAmJiBzaGlwc0JvYXJkW3JvdyArIGldW2NvbF0gIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFpc1ZlcnRpY2FsICYmIHNoaXBzQm9hcmRbcm93XVtjb2wgKyBpXSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpc0hpdChib2FyZCwgcm93LCBjb2wpIHtcclxuICAgICAgICBpZiAoIUNoZWNrZXJIZWxwZXIuY2hlY2tJZldob2xlTnVtYmVyKHJvdykgfHwgIUNoZWNrZXJIZWxwZXIuY2hlY2tJZldob2xlTnVtYmVyKGNvbCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBBcmd1bWVudCBFeGNlcHRpb25cIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaXNPdXRzaWRlQm9hcmQoYm9hcmQsIHJvdywgY29sKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIEFyZ3VtZW50IEV4Y2VwdGlvblwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJvYXJkLmdldEhpdHNCb2FyZCgpW3Jvd11bY29sXSAhPT0gMDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhcmVBbGxTaGlwc1N1bmsoYm9hcmQpIHtcclxuICAgICAgICByZXR1cm4gYm9hcmQuZ2V0U2hpcHNBbGl2ZSgpID09PSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNoZWNrSWZBbGxTaGlwc1BsYWNlZChib2FyZCkge1xyXG4gICAgICAgIGNvbnN0IHNoaXBzQXJyYXkgPSBib2FyZC5nZXRTaGlwcygpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcHNBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoc2hpcHNBcnJheVtpXS5yb3cgPT09IHVuZGVmaW5lZCB8fCBzaGlwc0FycmF5W2ldLmNvbCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY2hlY2tJZk5vbk9mU2hpcHNQbGFjZWQoYm9hcmQpIHtcclxuICAgICAgICBjb25zdCBzaGlwc0FycmF5ID0gYm9hcmQuZ2V0U2hpcHMoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBzQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHNoaXBzQXJyYXlbaV0ucm93ICE9PSB1bmRlZmluZWQgfHwgc2hpcHNBcnJheVtpXS5jb2wgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgY2FuQWRkU2hpcCxcclxuICAgICAgICBpc091dHNpZGVCb2FyZCxcclxuICAgICAgICBjYW5QbGFjZVNoaXAsXHJcbiAgICAgICAgaXNIaXQsXHJcbiAgICAgICAgYXJlQWxsU2hpcHNTdW5rLFxyXG4gICAgICAgIGNoZWNrSWZBbGxTaGlwc1BsYWNlZCxcclxuICAgICAgICBjaGVja0lmTm9uT2ZTaGlwc1BsYWNlZCxcclxuICAgIH07XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBHYW1lYm9hcmRDaGVja2VyO1xyXG4iLCJpbXBvcnQgUHViU3ViIGZyb20gXCJwdWJzdWItanNcIjtcclxuaW1wb3J0IEFycmF5SGVscGVyIGZyb20gXCIuLi9hcnJheS1oZXBsZXJcIjtcclxuaW1wb3J0IEdhbWVib2FyZENoZWNrZXIgZnJvbSBcIi4vZ2FtZWJvYXJkLWNoZWNrZXJcIjtcclxuXHJcbmNvbnN0IEdhbWVib2FyZENvbnRyb2xsZXIgPSAoKCkgPT4ge1xyXG4gICAgZnVuY3Rpb24gYWRkU2hpcChib2FyZCwgbGVuZ3RoKSB7XHJcbiAgICAgICAgaWYgKCFHYW1lYm9hcmRDaGVja2VyLmNhbkFkZFNoaXAoYm9hcmQsIGxlbmd0aCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBBcmd1bWVudCBFeGNlcHRpb25cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJvYXJkLnB1c2hTaGlwKGxlbmd0aCk7XHJcbiAgICAgICAgLy8gcmV0dXJuIGluZGV4IG9mIHRoZSBhZGRlZCBzaGlwXHJcbiAgICAgICAgcmV0dXJuIGJvYXJkLmdldFNoaXBzQ291bnQoKSAtIDE7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcGxhY2VTaGlwKGJvYXJkLCBzaGlwSW5kZXgsIHJvdywgY29sLCBpc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgaWYgKCFHYW1lYm9hcmRDaGVja2VyLmNhblBsYWNlU2hpcChib2FyZCwgc2hpcEluZGV4LCByb3csIGNvbCwgaXNWZXJ0aWNhbCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzaGlwVG9QbGFjZSA9IGJvYXJkLmdldFNoaXAoc2hpcEluZGV4KTtcclxuICAgICAgICBib2FyZC5zZXRTaGlwT3JpZW50YXRpb24oc2hpcEluZGV4LCBpc1ZlcnRpY2FsKTtcclxuICAgICAgICBib2FyZC5zZXRTaGlwU3RhcnRQb2ludChzaGlwSW5kZXgsIHJvdywgY29sKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBUb1BsYWNlLmdldExlbmd0aCgpOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGlzVmVydGljYWwpIHtcclxuICAgICAgICAgICAgICAgIGJvYXJkLnNldFNoaXBCb2FyZENlbGwocm93ICsgaSwgY29sLCBzaGlwSW5kZXgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYm9hcmQuc2V0U2hpcEJvYXJkQ2VsbChyb3csIGNvbCArIGksIHNoaXBJbmRleCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgYm9hcmQuZGVjcmVhc2VCbG9ja05vdE9jY3VwaWVkKHNoaXBUb1BsYWNlLmdldExlbmd0aCgpKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZW1vdmVBbGxTaGlwcyhib2FyZCkge1xyXG4gICAgICAgIGNvbnN0IGNvdW50ID0gYm9hcmQuZ2V0U2hpcHNDb3VudCgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBjb3VudCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIHVucGxhY2VTaGlwKGJvYXJkLCBpKTtcclxuICAgICAgICAgICAgYm9hcmQucmVtb3ZlU2hpcChpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdW5wbGFjZUFsbFNoaXBzKGJvYXJkKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2FyZC5nZXRTaGlwc0NvdW50KCk7IGkrKykge1xyXG4gICAgICAgICAgICB1bnBsYWNlU2hpcChib2FyZCwgaSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVucGxhY2VTaGlwKGJvYXJkLCBzaGlwSW5kZXgpIHtcclxuICAgICAgICBjb25zdCBzaGlwc0FycmF5ID0gYm9hcmQuZ2V0U2hpcHMoKTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHNoaXBzQXJyYXlbc2hpcEluZGV4XS5yb3cgPT09IHVuZGVmaW5lZCB8fFxyXG4gICAgICAgICAgICBzaGlwc0FycmF5W3NoaXBJbmRleF0uY29sID09PSB1bmRlZmluZWQgfHxcclxuICAgICAgICAgICAgc2hpcHNBcnJheVtzaGlwSW5kZXhdLmlzVmVydGljYWwgPT09IHVuZGVmaW5lZFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaGlwIGlzIG5vdCBwbGFjZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHNoaXAgPSBib2FyZC5nZXRTaGlwKHNoaXBJbmRleCk7XHJcbiAgICAgICAgaWYgKCFzaGlwLmlzU3VuaygpKSB7XHJcbiAgICAgICAgICAgIGJvYXJkLmRlY3JlYXNlU2hpcHNBbGl2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBib2FyZC5yZW1vdmVGcm9tSGl0c0JvYXJkKFxyXG4gICAgICAgICAgICBzaGlwc0FycmF5W3NoaXBJbmRleF0ucm93LFxyXG4gICAgICAgICAgICBzaGlwc0FycmF5W3NoaXBJbmRleF0uY29sLFxyXG4gICAgICAgICAgICBzaGlwLmdldExlbmd0aCgpLFxyXG4gICAgICAgICAgICBzaGlwc0FycmF5W3NoaXBJbmRleF0uaXNWZXJ0aWNhbCxcclxuICAgICAgICApO1xyXG4gICAgICAgIGJvYXJkLnJlbW92ZUZyb21TaGlwc0JvYXJkKFxyXG4gICAgICAgICAgICBzaGlwc0FycmF5W3NoaXBJbmRleF0ucm93LFxyXG4gICAgICAgICAgICBzaGlwc0FycmF5W3NoaXBJbmRleF0uY29sLFxyXG4gICAgICAgICAgICBzaGlwLmdldExlbmd0aCgpLFxyXG4gICAgICAgICAgICBzaGlwc0FycmF5W3NoaXBJbmRleF0uaXNWZXJ0aWNhbCxcclxuICAgICAgICApO1xyXG4gICAgICAgIGJvYXJkLmluY3JlYXNlQmxvY2tOb3RPY2N1cGllZChzaGlwLmdldExlbmd0aCgpKTtcclxuICAgICAgICBkZWxldGUgc2hpcHNBcnJheVtzaGlwSW5kZXhdLnJvdztcclxuICAgICAgICBkZWxldGUgc2hpcHNBcnJheVtzaGlwSW5kZXhdLmNvbDtcclxuICAgICAgICBkZWxldGUgc2hpcHNBcnJheVtzaGlwSW5kZXhdLmlzVmVydGljYWw7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYXV0b1BsYWNlU2hpcHMoYm9hcmQsIGluZGV4KSB7XHJcbiAgICAgICAgY29uc3QgZHAgPSBuZXcgU2V0KCk7XHJcbiAgICAgICAgYm9hcmQuc29ydFNoaXBzQnlMZW5ndGhEZXNjKCk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgYXV0b1BsYWNlU2hpcHNEUChib2FyZCwgaW5kZXgsIGRwLCBEYXRlLm5vdygpLCA1KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhdXRvUGxhY2VTaGlwc0RQKGJvYXJkLCBpbmRleCwgZHAsIHRpbWUsIHRpbWVsaW1pdCkge1xyXG4gICAgICAgIGluZGV4ID0gaW5kZXggPz8gMDtcclxuICAgICAgICBpZiAoaW5kZXggPT09IGJvYXJkLmdldFNoaXBzQ291bnQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKChEYXRlLm5vdygpIC0gdGltZSkgLyAxMDAwID4gdGltZWxpbWl0KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRpbWUgbGltaXQgZXhjZWVkZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGtleSA9IGAke2NvbnZlcnRTaGlwc0JvYXJkVG9Cb29sZWFuKGJvYXJkLmdldFNoaXBzQm9hcmQoKSl9ICwke2luZGV4fWA7XHJcbiAgICAgICAgaWYgKGRwLmhhcyhrZXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHBsYWNlc0F2YWlsYWJsZSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9hcmQuZ2V0SGVpZ2h0KCk7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJvYXJkLmdldFdpZHRoKCk7IGorKykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGlzVmVydGljYWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChHYW1lYm9hcmRDaGVja2VyLmNhblBsYWNlU2hpcChib2FyZCwgaW5kZXgsIGksIGosIGlzVmVydGljYWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VzQXZhaWxhYmxlLnB1c2goeyByb3c6IGksIGNvbDogaiwgaXNWZXJ0aWNhbCB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlzVmVydGljYWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKEdhbWVib2FyZENoZWNrZXIuY2FuUGxhY2VTaGlwKGJvYXJkLCBpbmRleCwgaSwgaiwgaXNWZXJ0aWNhbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwbGFjZXNBdmFpbGFibGUucHVzaCh7IHJvdzogaSwgY29sOiBqLCBpc1ZlcnRpY2FsIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEFycmF5SGVscGVyLnNodWZmbGUocGxhY2VzQXZhaWxhYmxlKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBsYWNlc0F2YWlsYWJsZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBwbGFjZVNoaXAoXHJcbiAgICAgICAgICAgICAgICBib2FyZCxcclxuICAgICAgICAgICAgICAgIGluZGV4LFxyXG4gICAgICAgICAgICAgICAgcGxhY2VzQXZhaWxhYmxlW2ldLnJvdyxcclxuICAgICAgICAgICAgICAgIHBsYWNlc0F2YWlsYWJsZVtpXS5jb2wsXHJcbiAgICAgICAgICAgICAgICBwbGFjZXNBdmFpbGFibGVbaV0uaXNWZXJ0aWNhbCxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgaWYgKGF1dG9QbGFjZVNoaXBzRFAoYm9hcmQsIGluZGV4ICsgMSwgZHAsIHRpbWUsIHRpbWVsaW1pdCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHVucGxhY2VTaGlwKGJvYXJkLCBpbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRwLmFkZChrZXkpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjb252ZXJ0U2hpcHNCb2FyZFRvQm9vbGVhbihzaGlwc0JvYXJkKSB7XHJcbiAgICAgICAgY29uc3QgYm9vbGVhbkJvYXJkID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwc0JvYXJkLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGJvb2xlYW5Cb2FyZC5wdXNoKHNoaXBzQm9hcmRbaV0ubWFwKChpdGVtKSA9PiAoaXRlbSAhPT0gLTEgPyAxIDogMCkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJvb2xlYW5Cb2FyZDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZWNlaXZlQXR0YWNrKGJvYXJkLCByb3csIGNvbCwgYm9hcmRWaWV3KSB7XHJcbiAgICAgICAgaWYgKEdhbWVib2FyZENoZWNrZXIuaXNIaXQoYm9hcmQsIHJvdywgY29sKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIEFyZ3VtZW50IEV4Y2VwdGlvblwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYm9hcmQuaGl0Qm9hcmRDZWxsKHJvdywgY29sKTtcclxuICAgICAgICBjb25zdCBzaGlwc0JvYXJkID0gYm9hcmQuZ2V0U2hpcHNCb2FyZCgpO1xyXG4gICAgICAgIGlmIChzaGlwc0JvYXJkW3Jvd11bY29sXSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBoaXR0ZWRTaGlwSW5kZXggPSBzaGlwc0JvYXJkW3Jvd11bY29sXTtcclxuICAgICAgICBjb25zdCBoaXRQb2ludE9uU2hpcCA9IGJvYXJkLmlzVmVydGljYWxTaGlwKGhpdHRlZFNoaXBJbmRleClcclxuICAgICAgICAgICAgPyByb3cgLSBib2FyZC5nZXRTaGlwU3RhcnRQb2ludChoaXR0ZWRTaGlwSW5kZXgpLnJvd1xyXG4gICAgICAgICAgICA6IGNvbCAtIGJvYXJkLmdldFNoaXBTdGFydFBvaW50KGhpdHRlZFNoaXBJbmRleCkuY29sO1xyXG4gICAgICAgIGNvbnN0IGhpdHRlZFNoaXAgPSBib2FyZC5nZXRTaGlwKGhpdHRlZFNoaXBJbmRleCk7XHJcbiAgICAgICAgaGl0dGVkU2hpcC5oaXQoaGl0UG9pbnRPblNoaXApO1xyXG4gICAgICAgIGlmIChoaXR0ZWRTaGlwLmlzU3VuaygpKSB7XHJcbiAgICAgICAgICAgIGJvYXJkLmRlY3JlYXNlU2hpcHNBbGl2ZSgpO1xyXG4gICAgICAgICAgICBpZiAoYm9hcmRWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICBQdWJTdWIucHVibGlzaChcIlNoaXBTdW5rXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICBwbGF5ZXJWaWV3OiBib2FyZFZpZXcucGxheWVyVmlldyxcclxuICAgICAgICAgICAgICAgICAgICBzaGlwTGVuZ3RoOiBoaXR0ZWRTaGlwLmdldExlbmd0aCgpLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Tm90RGFtYWdlZENlbGxzKGJvYXJkKSB7XHJcbiAgICAgICAgY29uc3QgY2VsbHMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvYXJkLmdldEhlaWdodCgpOyBpKyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBib2FyZC5nZXRXaWR0aCgpOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICghR2FtZWJvYXJkQ2hlY2tlci5pc0hpdChib2FyZCwgaSwgaikpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxscy5wdXNoKHsgcm93OiBpLCBjb2w6IGogfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNlbGxzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldERhbWFnZWRDZWxscyhib2FyZCkge1xyXG4gICAgICAgIGNvbnN0IGNlbGxzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2FyZC5nZXRIZWlnaHQoKTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYm9hcmQuZ2V0V2lkdGgoKTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoR2FtZWJvYXJkQ2hlY2tlci5pc0hpdChib2FyZCwgaSwgaikpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxscy5wdXNoKHsgcm93OiBpLCBjb2w6IGogfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNlbGxzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldERhbWFnZWRDZWxsc09mQWxpdmVEYW1hZ2VkU2hpcHMoYm9hcmQsIG1pblNoaXBIUERhbWFnZWQsIG1heFNoaXBIUERhbWFnZWQpIHtcclxuICAgICAgICBjb25zdCBjZWxscyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGRhbWFnZWRDZWxscyA9IGdldERhbWFnZWRDZWxscyhib2FyZCk7XHJcbiAgICAgICAgZGFtYWdlZENlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgc2hpcEluZGV4ID0gYm9hcmQuZ2V0U2hpcEluZGV4RnJvbUNvb3JkaW5hdGUoY2VsbC5yb3csIGNlbGwuY29sKTtcclxuICAgICAgICAgICAgaWYgKHNoaXBJbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBib2FyZC5nZXRTaGlwKHNoaXBJbmRleCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgIXNoaXAuaXNTdW5rKCkgJiZcclxuICAgICAgICAgICAgICAgICAgICBzaGlwLmdldEhQRGFtYWdlZCgpID49IG1pblNoaXBIUERhbWFnZWQgJiZcclxuICAgICAgICAgICAgICAgICAgICBzaGlwLmdldEhQRGFtYWdlZCgpIDw9IG1heFNoaXBIUERhbWFnZWRcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3c6IGNlbGwucm93LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2w6IGNlbGwuY29sLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1NoaXBWZXJ0aWNhbDogYm9hcmQuaXNWZXJ0aWNhbFNoaXAoc2hpcEluZGV4KSxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBjZWxscztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhZGRUb1Bvc3NpYmxlVGFyZ2V0cyhib2FyZCwgdGFyZ2V0cywgY2VsbHMpIHtcclxuICAgICAgICBjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICFHYW1lYm9hcmRDaGVja2VyLmlzT3V0c2lkZUJvYXJkKGJvYXJkLCBjZWxsLnJvdywgY2VsbC5jb2wpICYmXHJcbiAgICAgICAgICAgICAgICAhR2FtZWJvYXJkQ2hlY2tlci5pc0hpdChib2FyZCwgY2VsbC5yb3csIGNlbGwuY29sKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldHMucHVzaChjZWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldFNtYXJ0VGFyZ2V0cyhib2FyZCkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldHMgPSBbXTtcclxuICAgICAgICBsZXQgY2VsbHMgPSBnZXREYW1hZ2VkQ2VsbHNPZkFsaXZlRGFtYWdlZFNoaXBzKGJvYXJkLCAyLCAxMCk7XHJcbiAgICAgICAgaWYgKGNlbGxzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNlbGwuaXNTaGlwVmVydGljYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBhZGRUb1Bvc3NpYmxlVGFyZ2V0cyhib2FyZCwgdGFyZ2V0cywgW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHJvdzogY2VsbC5yb3cgLSAxLCBjb2w6IGNlbGwuY29sIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgcm93OiBjZWxsLnJvdyArIDEsIGNvbDogY2VsbC5jb2wgfSxcclxuICAgICAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkVG9Qb3NzaWJsZVRhcmdldHMoYm9hcmQsIHRhcmdldHMsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeyByb3c6IGNlbGwucm93LCBjb2w6IGNlbGwuY29sIC0gMSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHJvdzogY2VsbC5yb3csIGNvbDogY2VsbC5jb2wgKyAxIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNlbGxzID0gZ2V0RGFtYWdlZENlbGxzT2ZBbGl2ZURhbWFnZWRTaGlwcyhib2FyZCwgMSwgMSk7XHJcbiAgICAgICAgY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xyXG4gICAgICAgICAgICBhZGRUb1Bvc3NpYmxlVGFyZ2V0cyhib2FyZCwgdGFyZ2V0cywgW1xyXG4gICAgICAgICAgICAgICAgeyByb3c6IGNlbGwucm93IC0gMSwgY29sOiBjZWxsLmNvbCB9LFxyXG4gICAgICAgICAgICAgICAgeyByb3c6IGNlbGwucm93ICsgMSwgY29sOiBjZWxsLmNvbCB9LFxyXG4gICAgICAgICAgICAgICAgeyByb3c6IGNlbGwucm93LCBjb2w6IGNlbGwuY29sIC0gMSB9LFxyXG4gICAgICAgICAgICAgICAgeyByb3c6IGNlbGwucm93LCBjb2w6IGNlbGwuY29sICsgMSB9LFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0cztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXROb3REYW1hZ2VkU21hcnRUYXJnZXRzKGJvYXJkKSB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0cyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGNlbGxzID0gZ2V0Tm90RGFtYWdlZENlbGxzKGJvYXJkKTtcclxuICAgICAgICBjb25zdCBtaW5TaGlwTGVuZ3RoID0gZ2V0TWluTm90RGFtYWdlZFNoaXBMZW5ndGgoYm9hcmQpO1xyXG4gICAgICAgIGNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcclxuICAgICAgICAgICAgaWYgKGdldEhvcml6b250YWxOb3REYW1hZ2VkTGVuZ3RoKGJvYXJkLCBjZWxsLnJvdywgY2VsbC5jb2wpID49IG1pblNoaXBMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldHMucHVzaChjZWxsKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChnZXRWZXJ0aWNhbE5vdERhbWFnZWRMZW5ndGgoYm9hcmQsIGNlbGwucm93LCBjZWxsLmNvbCkgPj0gbWluU2hpcExlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0cy5wdXNoKGNlbGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldHM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0TWluTm90RGFtYWdlZFNoaXBMZW5ndGgoYm9hcmQpIHtcclxuICAgICAgICBsZXQgbWluTGVuZ3RoID0gbnVsbDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvYXJkLmdldFNoaXBzQ291bnQoKTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBib2FyZC5nZXRTaGlwKGkpO1xyXG4gICAgICAgICAgICBpZiAoc2hpcC5nZXRIUERhbWFnZWQoKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1pbkxlbmd0aCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbkxlbmd0aCA9IHNoaXAuZ2V0TGVuZ3RoKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbkxlbmd0aCA9IE1hdGgubWluKG1pbkxlbmd0aCwgc2hpcC5nZXRMZW5ndGgoKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1pbkxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRIb3Jpem9udGFsTm90RGFtYWdlZExlbmd0aChib2FyZCwgcm93LCBjb2wpIHtcclxuICAgICAgICBsZXQgbGVuZ3RoID0gMTtcclxuICAgICAgICBmb3IgKGxldCBpID0gY29sICsgMTsgaSA8IGJvYXJkLmdldFdpZHRoKCk7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoR2FtZWJvYXJkQ2hlY2tlci5pc0hpdChib2FyZCwgcm93LCBpKSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKytsZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGkgPSBjb2wgLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICBpZiAoR2FtZWJvYXJkQ2hlY2tlci5pc0hpdChib2FyZCwgcm93LCBpKSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKytsZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsZW5ndGg7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBnZXRWZXJ0aWNhbE5vdERhbWFnZWRMZW5ndGgoYm9hcmQsIHJvdywgY29sKSB7XHJcbiAgICAgICAgbGV0IGxlbmd0aCA9IDE7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHJvdyArIDE7IGkgPCBib2FyZC5nZXRIZWlnaHQoKTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChHYW1lYm9hcmRDaGVja2VyLmlzSGl0KGJvYXJkLCBpLCBjb2wpKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICArK2xlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHJvdyAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIGlmIChHYW1lYm9hcmRDaGVja2VyLmlzSGl0KGJvYXJkLCBpLCBjb2wpKSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICArK2xlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGFkZFNoaXAsXHJcbiAgICAgICAgcGxhY2VTaGlwLFxyXG4gICAgICAgIHVucGxhY2VTaGlwLFxyXG4gICAgICAgIHJlY2VpdmVBdHRhY2ssXHJcbiAgICAgICAgYXV0b1BsYWNlU2hpcHMsXHJcbiAgICAgICAgdW5wbGFjZUFsbFNoaXBzLFxyXG4gICAgICAgIHJlbW92ZUFsbFNoaXBzLFxyXG4gICAgICAgIGdldE5vdERhbWFnZWRDZWxscyxcclxuICAgICAgICBnZXREYW1hZ2VkQ2VsbHNPZkFsaXZlRGFtYWdlZFNoaXBzLFxyXG4gICAgICAgIGdldFNtYXJ0VGFyZ2V0cyxcclxuICAgICAgICBnZXRNaW5Ob3REYW1hZ2VkU2hpcExlbmd0aCxcclxuICAgICAgICBnZXROb3REYW1hZ2VkU21hcnRUYXJnZXRzLFxyXG4gICAgfTtcclxufSkoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEdhbWVib2FyZENvbnRyb2xsZXI7XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENvdW50ZXIge1xyXG4gICAgI21pbjtcclxuXHJcbiAgICAjbWF4O1xyXG5cclxuICAgICNjdXJyZW50TnVtYmVyO1xyXG5cclxuICAgICNtaW51c0VsZW1lbnQ7XHJcblxyXG4gICAgI3BsdXNFbGVtZW50O1xyXG5cclxuICAgICNudW1iZXJFbGVtZW50O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvdW50ZXJFbGVtZW50LCBtaW4sIG1heCwgc3RhcnRpbmdOdW1iZXIpIHtcclxuICAgICAgICB0aGlzLiNtaW4gPSBtaW47XHJcbiAgICAgICAgdGhpcy4jbWF4ID0gbWF4O1xyXG4gICAgICAgIHRoaXMuI21pbnVzRWxlbWVudCA9IGNvdW50ZXJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWludXNcIik7XHJcbiAgICAgICAgdGhpcy4jcGx1c0VsZW1lbnQgPSBjb3VudGVyRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnBsdXNcIik7XHJcbiAgICAgICAgdGhpcy4jbnVtYmVyRWxlbWVudCA9IGNvdW50ZXJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubnVtYmVyXCIpO1xyXG4gICAgICAgIHRoaXMuI2N1cnJlbnROdW1iZXIgPSBzdGFydGluZ051bWJlcjtcclxuICAgICAgICB0aGlzLnVwZGF0ZUNvdW50ZXIoKTtcclxuXHJcbiAgICAgICAgdGhpcy4jbWludXNFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIC0tdGhpcy4jY3VycmVudE51bWJlcjtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVDb3VudGVyKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy4jcGx1c0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgKyt0aGlzLiNjdXJyZW50TnVtYmVyO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvdW50ZXIoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVJZkxpbWl0UmVhY2hlZCgpIHtcclxuICAgICAgICBpZiAodGhpcy4jY3VycmVudE51bWJlciA9PT0gdGhpcy4jbWluKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI21pbnVzRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy4jbWludXNFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLiNjdXJyZW50TnVtYmVyID09PSB0aGlzLiNtYXgpIHtcclxuICAgICAgICAgICAgdGhpcy4jcGx1c0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcImRpc2FibGVkXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuI3BsdXNFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlQ291bnRlcigpIHtcclxuICAgICAgICB0aGlzLiNudW1iZXJFbGVtZW50LnRleHRDb250ZW50ID0gdGhpcy4jY3VycmVudE51bWJlcjtcclxuICAgICAgICB0aGlzLnVwZGF0ZUlmTGltaXRSZWFjaGVkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGN1cnJlbnROdW1iZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI2N1cnJlbnROdW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlTWF4KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy4jbWF4ID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy51cGRhdGVJZkxpbWl0UmVhY2hlZCgpO1xyXG4gICAgfVxyXG59XHJcbiIsImNvbnN0IHBsYXllclZpZXdIZWxwZXIgPSAoKCkgPT4ge1xyXG4gICAgZnVuY3Rpb24gY3JlYXRlU2hpcEVsZW1lbnQobGVuZ3RoLCBsaW1pdCkge1xyXG4gICAgICAgIGNvbnN0IHNoaXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5cclxuICAgICAgICBpZiAobGVuZ3RoIDwgbGltaXQpIHtcclxuICAgICAgICAgICAgc2hpcC5jbGFzc0xpc3QuYWRkKFwic2hpcFwiKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2hpcEJsb2NrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgICAgIHNoaXBCbG9jay5jbGFzc0xpc3QuYWRkKFwic2hpcC1ibG9ja1wiKTtcclxuICAgICAgICAgICAgICAgIHNoaXAuYXBwZW5kKHNoaXBCbG9jayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzaGlwLmNsYXNzTGlzdC5hZGQoXCJzaGlwLWNvbXByZXNzZWRcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGxlZnRQYXJlbnRoZXNpcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgICAgICAgICBsZWZ0UGFyZW50aGVzaXMuY2xhc3NMaXN0LmFkZChcInBhcmVudGhlc2lzXCIpO1xyXG4gICAgICAgICAgICBsZWZ0UGFyZW50aGVzaXMudGV4dENvbnRlbnQgPSBcIihcIjtcclxuICAgICAgICAgICAgc2hpcC5hcHBlbmQobGVmdFBhcmVudGhlc2lzKTtcclxuXHJcbiAgICAgICAgICAgIHNoaXAuYXBwZW5kKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGAke2xlbmd0aH0ke1N0cmluZy5mcm9tQ2hhckNvZGUoMTYwKX1gKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNoaXBCbG9jayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgIHNoaXBCbG9jay5jbGFzc0xpc3QuYWRkKFwic2hpcC1ibG9ja1wiKTtcclxuICAgICAgICAgICAgc2hpcC5hcHBlbmQoc2hpcEJsb2NrKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJpZ2h0UGFyZW50aGVzaXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICAgICAgcmlnaHRQYXJlbnRoZXNpcy5jbGFzc0xpc3QuYWRkKFwicGFyZW50aGVzaXNcIik7XHJcbiAgICAgICAgICAgIHJpZ2h0UGFyZW50aGVzaXMudGV4dENvbnRlbnQgPSBcIilcIjtcclxuICAgICAgICAgICAgc2hpcC5hcHBlbmQocmlnaHRQYXJlbnRoZXNpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzaGlwO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZVNoaXBDb250YWluZXJFbGVtZW50KGxlbmd0aCwgY291bnQpIHtcclxuICAgICAgICBjb25zdCBzaGlwQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBzaGlwQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJzaGlwLWNvbnRhaW5lclwiKTtcclxuICAgICAgICBzaGlwQ29udGFpbmVyLmFwcGVuZChjcmVhdGVTaGlwRWxlbWVudChsZW5ndGgsIDQpKTtcclxuXHJcbiAgICAgICAgY29uc3QgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xyXG4gICAgICAgIHAuaW5uZXJUZXh0ID0gXCJ4XCI7XHJcbiAgICAgICAgY29uc3Qgc2hpcHNDb3VudFNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICBzaGlwc0NvdW50U3Bhbi5jbGFzc0xpc3QuYWRkKFwiY291bnRcIik7XHJcbiAgICAgICAgc2hpcHNDb3VudFNwYW4uaW5uZXJUZXh0ID0gY291bnQ7XHJcbiAgICAgICAgcC5hcHBlbmQoc2hpcHNDb3VudFNwYW4pO1xyXG4gICAgICAgIHNoaXBDb250YWluZXIuYXBwZW5kKHApO1xyXG5cclxuICAgICAgICBzaGlwQ29udGFpbmVyLmRhdGFzZXQubGVuZ3RoID0gbGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiBzaGlwQ29udGFpbmVyO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgY3JlYXRlU2hpcENvbnRhaW5lckVsZW1lbnQsXHJcbiAgICAgICAgY3JlYXRlU2hpcEVsZW1lbnQsXHJcbiAgICB9O1xyXG59KSgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcGxheWVyVmlld0hlbHBlcjtcclxuIiwiY29uc3QgRm9ybUhlbHBlciA9ICgoKSA9PiB7XHJcbiAgICBmdW5jdGlvbiBlbmFibGVCdXR0b24oYnV0dG9uKSB7XHJcbiAgICAgICAgYnV0dG9uLnJlbW92ZUF0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZGlzYWJsZUJ1dHRvbihidXR0b24pIHtcclxuICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBlbmFibGVCdXR0b24sXHJcbiAgICAgICAgZGlzYWJsZUJ1dHRvbixcclxuICAgIH07XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGb3JtSGVscGVyO1xyXG4iLCJpbXBvcnQgQ2hvb3NpbmdTaGlwc1RlbXBsYXRlIGZyb20gXCIuLi8uLi9odG1sL3RlbXBsYXRlcy9tb2RhbHMvc2hpcHMtY2hvb3NpbmctdGVtcGxhdGUuaGFuZGxlYmFyc1wiO1xyXG5pbXBvcnQgU2hpcENvbnRhaW5lclRlbXBsYXRlIGZyb20gXCIuLi8uLi9odG1sL3RlbXBsYXRlcy9tb2RhbHMvc2hpcHMtY29udGFpbmVyLXRlbXBsYXRlLmhhbmRsZWJhcnNcIjtcclxuaW1wb3J0IENvdW50ZXIgZnJvbSBcIi4uL1ZpZXdIZWxwZXIvY291bnRlclwiO1xyXG5pbXBvcnQgUGxheWVyVmlld0hlbHBlciBmcm9tIFwiLi4vUGxheWVyL3BsYXllci12aWV3LWhlbHBlclwiO1xyXG5pbXBvcnQgRm9ybUhlbHBlciBmcm9tIFwiLi4vVmlld0hlbHBlci9mb3JtXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaG9vc2luZ1NoaXBzTW9kYWwge1xyXG4gICAgLy8gRE9NIEVsZW1lbnRzXHJcbiAgICAjbW9kYWxDb250YWluZXJFbGVtZW50O1xyXG5cclxuICAgICNtb2RhbEVsZW1lbnQ7XHJcblxyXG4gICAgI3NoaXBzRWxlbWVudDtcclxuXHJcbiAgICAjcGFnZXNDb250YWluZXJFbGVtZW50O1xyXG5cclxuICAgICNjdXJyZW50UGFnZUVsZW1lbnQ7XHJcblxyXG4gICAgI2xlZnRBcnJvd0VsZW1lbnQ7XHJcblxyXG4gICAgI3JpZ2h0QXJyb3dFbGVtZW50O1xyXG5cclxuICAgIC8vIFByb3BlcnRpZXNcclxuICAgICNib2FyZFdpZHRoO1xyXG5cclxuICAgICNib2FyZEhlaWdodDtcclxuXHJcbiAgICAjY291bnRlcnM7XHJcblxyXG4gICAgI3BhZ2VXaWR0aDtcclxuXHJcbiAgICAjY3VycmVudFBhZ2U7XHJcblxyXG4gICAgI3BhZ2VzTnVtO1xyXG5cclxuICAgICNidG5TdWJtaXQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYm9hcmRXaWR0aCwgYm9hcmRIZWlnaHQpIHtcclxuICAgICAgICB0aGlzLmNhY2hlRE9NKCk7XHJcbiAgICAgICAgRm9ybUhlbHBlci5kaXNhYmxlQnV0dG9uKHRoaXMuI2J0blN1Ym1pdCk7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRXaWR0aCA9IGJvYXJkV2lkdGg7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRIZWlnaHQgPSBib2FyZEhlaWdodDtcclxuICAgICAgICB0aGlzLiNjb3VudGVycyA9IHt9O1xyXG4gICAgICAgIHRoaXMuY3JlYXRlU2hpcHNQYWdlcygpO1xyXG4gICAgICAgIHRoaXMuaW5pdFBhZ2luYXRpb24oKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZU1heFNoaXBzQ2hvb3NpbmdOdW1iZXIoKTtcclxuICAgICAgICB0aGlzLmJpbmRFdmVudHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWNoZURPTSgpIHtcclxuICAgICAgICB0aGlzLiNtb2RhbENvbnRhaW5lckVsZW1lbnQgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKFxyXG4gICAgICAgICAgICBDaG9vc2luZ1NoaXBzVGVtcGxhdGUoKSxcclxuICAgICAgICAgICAgXCJ0ZXh0L2h0bWxcIixcclxuICAgICAgICApLmJvZHkuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgdGhpcy4jbW9kYWxFbGVtZW50ID0gdGhpcy4jbW9kYWxDb250YWluZXJFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgIHRoaXMuI3NoaXBzRWxlbWVudCA9IHRoaXMuI21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnNoaXBzXCIpO1xyXG4gICAgICAgIHRoaXMuI3BhZ2VzQ29udGFpbmVyRWxlbWVudCA9IHRoaXMuI3NoaXBzRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnBhZ2VzLWNvbnRhaW5lclwiKTtcclxuICAgICAgICAvLyBQYWdpbmF0aW9uIEVsZW1lbnRzXHJcbiAgICAgICAgdGhpcy4jY3VycmVudFBhZ2VFbGVtZW50ID0gdGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY3VycmVudC1wYWdlXCIpO1xyXG4gICAgICAgIHRoaXMuI2xlZnRBcnJvd0VsZW1lbnQgPSB0aGlzLiNtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5sZWZ0LWFycm93XCIpO1xyXG4gICAgICAgIHRoaXMuI3JpZ2h0QXJyb3dFbGVtZW50ID0gdGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucmlnaHQtYXJyb3dcIik7XHJcbiAgICAgICAgLy8gT3B0aW9ucyBFbGVtZW50c1xyXG4gICAgICAgIHRoaXMuI2J0blN1Ym1pdCA9IHRoaXMuI21vZGFsQ29udGFpbmVyRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ0bi1zdWJtaXRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgYmluZEV2ZW50cygpIHtcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIC4uLnRoaXMuI21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1pbnVzXCIpLFxyXG4gICAgICAgICAgICAuLi50aGlzLiNtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wbHVzXCIpLFxyXG4gICAgICAgIF0uZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU1heFNoaXBzQ2hvb3NpbmdOdW1iZXIoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuYmluZFBhZ2luYXRpb25FdmVudHMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiBQYWdpbmF0aW9uICovXHJcbiAgICBpbml0UGFnaW5hdGlvbigpIHtcclxuICAgICAgICB0aGlzLiNjdXJyZW50UGFnZSA9IDE7XHJcbiAgICAgICAgdGhpcy4jcGFnZXNOdW0gPSB0aGlzLiNwYWdlc0NvbnRhaW5lckVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMuI21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnBhZ2VzLW51bVwiKS50ZXh0Q29udGVudCA9IHRoaXMuI3BhZ2VzTnVtO1xyXG4gICAgICAgIHRoaXMuI3BhZ2VXaWR0aCA9IFwiMTAwJVwiO1xyXG4gICAgICAgIHRoaXMudXBkYXRlUGFnaW5hdGlvblN0eWxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYmluZFBhZ2luYXRpb25FdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYXJyb3ctY29udGFpbmVyXCIpLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY29udGFpbnModGhpcy4jbGVmdEFycm93RWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2luYXRlTGVmdCgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LmNvbnRhaW5zKHRoaXMuI3JpZ2h0QXJyb3dFbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFnaW5hdGVSaWdodCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwYWdpbmF0ZUxlZnQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuI2N1cnJlbnRQYWdlID09PSAxKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgQXJndW1lbnQgRXhjZXB0aW9uXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAtLXRoaXMuI2N1cnJlbnRQYWdlO1xyXG4gICAgICAgIHRoaXMudXBkYXRlUGFnaW5hdGlvblN0eWxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcGFnaW5hdGVSaWdodCgpIHtcclxuICAgICAgICBpZiAodGhpcy4jY3VycmVudFBhZ2UgPT09IHRoaXMuI3BhZ2VzTnVtKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgQXJndW1lbnQgRXhjZXB0aW9uXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICArK3RoaXMuI2N1cnJlbnRQYWdlO1xyXG4gICAgICAgIHRoaXMudXBkYXRlUGFnaW5hdGlvblN0eWxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlUGFnaW5hdGlvblN0eWxlKCkge1xyXG4gICAgICAgIHRoaXMuI3BhZ2VzQ29udGFpbmVyRWxlbWVudC5zdHlsZS5yaWdodCA9IGBjYWxjKCR7dGhpcy4jY3VycmVudFBhZ2UgLSAxfSAqICR7XHJcbiAgICAgICAgICAgIHRoaXMuI3BhZ2VXaWR0aFxyXG4gICAgICAgIH0pYDtcclxuICAgICAgICBpZiAodGhpcy4jY3VycmVudFBhZ2UgPT09IDEpIHtcclxuICAgICAgICAgICAgdGhpcy4jbGVmdEFycm93RWxlbWVudC5jbG9zZXN0KFwiLmFycm93LWNvbnRhaW5lclwiKS5jbGFzc0xpc3QuYWRkKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy4jbGVmdEFycm93RWxlbWVudC5jbG9zZXN0KFwiLmFycm93LWNvbnRhaW5lclwiKS5jbGFzc0xpc3QucmVtb3ZlKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLiNjdXJyZW50UGFnZSA9PT0gdGhpcy4jcGFnZXNOdW0pIHtcclxuICAgICAgICAgICAgdGhpcy4jcmlnaHRBcnJvd0VsZW1lbnQuY2xvc2VzdChcIi5hcnJvdy1jb250YWluZXJcIikuY2xhc3NMaXN0LmFkZChcImRpc2FibGVkXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuI3JpZ2h0QXJyb3dFbGVtZW50LmNsb3Nlc3QoXCIuYXJyb3ctY29udGFpbmVyXCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy4jY3VycmVudFBhZ2VFbGVtZW50LnRleHRDb250ZW50ID0gdGhpcy4jY3VycmVudFBhZ2U7XHJcbiAgICB9XHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAgIC8qIENyZWF0ZSBTaGlwcyBQYWdlcyAqL1xyXG4gICAgY3JlYXRlU2hpcHNQYWdlcygpIHtcclxuICAgICAgICBjb25zdCBzaGlwc1BlclBhZ2UgPSA0O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHRoaXMuZ2V0TWF4U2hpcExlbmd0aCgpOyBpICs9IHNoaXBzUGVyUGFnZSkge1xyXG4gICAgICAgICAgICB0aGlzLiNwYWdlc0NvbnRhaW5lckVsZW1lbnQuYXBwZW5kKHRoaXMuY3JlYXRlUGFnZShpLCBzaGlwc1BlclBhZ2UpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlUGFnZShmaXJzdFNoaXBMZW5ndGgsIHNoaXBzTnVtKSB7XHJcbiAgICAgICAgY29uc3QgcGFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgcGFnZS5jbGFzc0xpc3QuYWRkKFwicGFnZVwiKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBzTnVtOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3Qgc2hpcExlbmd0aCA9IGZpcnN0U2hpcExlbmd0aCArIGk7XHJcbiAgICAgICAgICAgIGlmIChzaGlwTGVuZ3RoID4gdGhpcy5nZXRNYXhTaGlwTGVuZ3RoKCkpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHBhZ2UuYXBwZW5kKHRoaXMuY3JlYXRlU2hpcENvbnRhaW5lcihzaGlwTGVuZ3RoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwYWdlO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVNoaXBDb250YWluZXIoc2hpcExlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IHNoaXBDb250YWluZXIgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKFxyXG4gICAgICAgICAgICBTaGlwQ29udGFpbmVyVGVtcGxhdGUoeyBzaGlwTGVuZ3RoLCBzaGlwQ291bnQ6IDAgfSksXHJcbiAgICAgICAgICAgIFwidGV4dC9odG1sXCIsXHJcbiAgICAgICAgKS5ib2R5LmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgIGNvbnN0IHNoaXBFbGVtZW50ID0gUGxheWVyVmlld0hlbHBlci5jcmVhdGVTaGlwRWxlbWVudChzaGlwTGVuZ3RoLCA1KTtcclxuICAgICAgICBzaGlwQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIuc2hpcFwiKS5yZXBsYWNlV2l0aChzaGlwRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy4jY291bnRlcnNbc2hpcExlbmd0aF0gPSBuZXcgQ291bnRlcihzaGlwQ29udGFpbmVyLCAwLCAwLCAwKTtcclxuICAgICAgICByZXR1cm4gc2hpcENvbnRhaW5lcjtcclxuICAgIH1cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gICAgLyogR2VuZXJhbCBHZXR0ZXJzICovXHJcbiAgICBnZXQgbW9kYWxDb250YWluZXJFbGVtZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNtb2RhbENvbnRhaW5lckVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG1vZGFsRWxlbWVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jbW9kYWxFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGdldFdpZHRoKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNib2FyZFdpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEhlaWdodCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jYm9hcmRIZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TWF4U2hpcExlbmd0aCgpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy4jYm9hcmRXaWR0aCwgdGhpcy4jYm9hcmRIZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFNoaXBzTGlzdCgpIHtcclxuICAgICAgICBjb25zdCBzaGlwc0xpc3QgPSB7fTtcclxuICAgICAgICB0aGlzLiNzaGlwc0VsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5zaGlwLWNvbnRhaW5lclwiKS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNoaXBMZW5ndGggPSBlbGVtZW50LmRhdGFzZXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IHBhcnNlSW50KGVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5udW1iZXJcIikudGV4dENvbnRlbnQsIDEwKTtcclxuICAgICAgICAgICAgaWYgKGNvdW50ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgc2hpcHNMaXN0W3NoaXBMZW5ndGhdID0gY291bnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gc2hpcHNMaXN0O1xyXG4gICAgfVxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbiAgICB1cGRhdGVNYXhTaGlwc0Nob29zaW5nTnVtYmVyKCkge1xyXG4gICAgICAgIGNvbnN0IGJvYXJkU2l6ZSA9IHRoaXMuI2JvYXJkV2lkdGggKiB0aGlzLiNib2FyZEhlaWdodDtcclxuICAgICAgICBsZXQgcGlja2VkU2hpcEJsb2Nrc1N1bSA9IDA7XHJcbiAgICAgICAgQXJyYXkuZnJvbShPYmplY3Qua2V5cyh0aGlzLiNjb3VudGVycykpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgICBwaWNrZWRTaGlwQmxvY2tzU3VtICs9IHRoaXMuI2NvdW50ZXJzW2tleV0uY3VycmVudE51bWJlciAqIGtleTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAocGlja2VkU2hpcEJsb2Nrc1N1bSA+IDApIHtcclxuICAgICAgICAgICAgRm9ybUhlbHBlci5lbmFibGVCdXR0b24odGhpcy4jYnRuU3VibWl0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBGb3JtSGVscGVyLmRpc2FibGVCdXR0b24odGhpcy4jYnRuU3VibWl0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgQXJyYXkuZnJvbShPYmplY3Qua2V5cyh0aGlzLiNjb3VudGVycykpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLiNjb3VudGVyc1trZXldLnVwZGF0ZU1heChcclxuICAgICAgICAgICAgICAgIHRoaXMuI2NvdW50ZXJzW2tleV0uY3VycmVudE51bWJlciArXHJcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcigoYm9hcmRTaXplIC0gcGlja2VkU2hpcEJsb2Nrc1N1bSkgLyBrZXkpLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBSdWxlc1RlbXBsYXRlIGZyb20gXCIuLi8uLi9odG1sL3RlbXBsYXRlcy9tb2RhbHMvcnVsZXMtdGVtcGxhdGUuaGFuZGxlYmFyc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUnVsZXNNb2RhbCB7XHJcbiAgICAvLyBET00gRWxlbWVudHNcclxuICAgICNtb2RhbENvbnRhaW5lckVsZW1lbnQ7XHJcblxyXG4gICAgI21vZGFsRWxlbWVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmNhY2hlRE9NKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FjaGVET00oKSB7XHJcbiAgICAgICAgdGhpcy4jbW9kYWxDb250YWluZXJFbGVtZW50ID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhcclxuICAgICAgICAgICAgUnVsZXNUZW1wbGF0ZSgpLFxyXG4gICAgICAgICAgICBcInRleHQvaHRtbFwiLFxyXG4gICAgICAgICkuYm9keS5maXJzdEVsZW1lbnRDaGlsZDtcclxuICAgICAgICB0aGlzLiNtb2RhbEVsZW1lbnQgPSB0aGlzLiNtb2RhbENvbnRhaW5lckVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyogR2VuZXJhbCBHZXR0ZXJzICovXHJcbiAgICBnZXQgbW9kYWxDb250YWluZXJFbGVtZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNtb2RhbENvbnRhaW5lckVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG1vZGFsRWxlbWVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jbW9kYWxFbGVtZW50O1xyXG4gICAgfVxyXG4gICAgLyogIyMjIyMjIyMjIyMjIyMjIyMjIyMgKi9cclxufVxyXG4iLCJpbXBvcnQgR2FtZVR5cGVUZW1wbGF0ZSBmcm9tIFwiLi4vLi4vaHRtbC90ZW1wbGF0ZXMvbW9kYWxzL2dhbWUtdHlwZS10ZW1wbGF0ZS5oYW5kbGViYXJzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lVHlwZU1vZGFsIHtcclxuICAgIC8vIERPTSBFbGVtZW50c1xyXG4gICAgI21vZGFsQ29udGFpbmVyRWxlbWVudDtcclxuXHJcbiAgICAjbW9kYWxFbGVtZW50O1xyXG5cclxuICAgICNmb3JtO1xyXG5cclxuICAgIC8vIFByb3BlcnRpZXNcclxuICAgICNodW1hbk51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmNhY2hlRE9NKCk7XHJcbiAgICAgICAgdGhpcy5zZXRIdW1hbk51bWJlcigpO1xyXG4gICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhY2hlRE9NKCkge1xyXG4gICAgICAgIHRoaXMuI21vZGFsQ29udGFpbmVyRWxlbWVudCA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoXHJcbiAgICAgICAgICAgIEdhbWVUeXBlVGVtcGxhdGUoKSxcclxuICAgICAgICAgICAgXCJ0ZXh0L2h0bWxcIixcclxuICAgICAgICApLmJvZHkuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgdGhpcy4jbW9kYWxFbGVtZW50ID0gdGhpcy4jbW9kYWxDb250YWluZXJFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgIHRoaXMuI2Zvcm0gPSB0aGlzLiNtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb3JtLWdhbWUtdHlwZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBiaW5kRXZlbnRzKCkge1xyXG4gICAgICAgIHRoaXMuI2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCB0aGlzLnNldEh1bWFuTnVtYmVyLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIEdlbmVyYWwgR2V0dGVycyAqL1xyXG4gICAgZ2V0IG1vZGFsQ29udGFpbmVyRWxlbWVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jbW9kYWxDb250YWluZXJFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBtb2RhbEVsZW1lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI21vZGFsRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRodW1hbk51bWJlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jaHVtYW5OdW1iZXI7XHJcbiAgICB9XHJcbiAgICAvKiAjIyMjIyMjIyMjIyMjIyMjIyMjIyAqL1xyXG5cclxuICAgIHNldEh1bWFuTnVtYmVyKCkge1xyXG4gICAgICAgIHRoaXMuI2h1bWFuTnVtYmVyID0gcGFyc2VJbnQodGhpcy4jZm9ybVtcImdhbWUtdHlwZVwiXS52YWx1ZSwgMTApO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBDb3VudGVyIGZyb20gXCIuLi9WaWV3SGVscGVyL2NvdW50ZXJcIjtcclxuaW1wb3J0IEdyaWRTaXplVGVtcGxhdGUgZnJvbSBcIi4uLy4uL2h0bWwvdGVtcGxhdGVzL21vZGFscy9ncmlkLXNpemUtdGVtcGxhdGUuaGFuZGxlYmFyc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JpZFNpemVNb2RhbCB7XHJcbiAgICAvLyBET00gRWxlbWVudHNcclxuICAgICNtb2RhbENvbnRhaW5lckVsZW1lbnQ7XHJcblxyXG4gICAgI21vZGFsRWxlbWVudDtcclxuXHJcbiAgICAjYm9hcmRFbGVtZW50O1xyXG5cclxuICAgICN3aWR0aE51bWJlckVsZW1lbnQ7XHJcblxyXG4gICAgI2hlaWdodE51bWJlckVsZW1lbnQ7XHJcblxyXG4gICAgLy8gUHJvcGVydGllc1xyXG4gICAgI2JvYXJkV2lkdGg7XHJcblxyXG4gICAgI2JvYXJkSGVpZ2h0O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGJvYXJkV2lkdGgsIGJvYXJkSGVpZ2h0KSB7XHJcbiAgICAgICAgdGhpcy5jYWNoZURPTSgpO1xyXG4gICAgICAgIHRoaXMuI2JvYXJkV2lkdGggPSBib2FyZFdpZHRoO1xyXG4gICAgICAgIHRoaXMuI2JvYXJkSGVpZ2h0ID0gYm9hcmRIZWlnaHQ7XHJcbiAgICAgICAgbmV3IENvdW50ZXIodGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud2lkdGgtY291bnRlclwiKSwgMSwgMTAsIHRoaXMuI2JvYXJkV2lkdGgpO1xyXG4gICAgICAgIG5ldyBDb3VudGVyKHRoaXMuI21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmhlaWdodC1jb3VudGVyXCIpLCAxLCAxMCwgdGhpcy4jYm9hcmRIZWlnaHQpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyQm9hcmQoKTtcclxuICAgICAgICB0aGlzLmJpbmRFdmVudHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWNoZURPTSgpIHtcclxuICAgICAgICB0aGlzLiNtb2RhbENvbnRhaW5lckVsZW1lbnQgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKFxyXG4gICAgICAgICAgICBHcmlkU2l6ZVRlbXBsYXRlKCksXHJcbiAgICAgICAgICAgIFwidGV4dC9odG1sXCIsXHJcbiAgICAgICAgKS5ib2R5LmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgIHRoaXMuI21vZGFsRWxlbWVudCA9IHRoaXMuI21vZGFsQ29udGFpbmVyRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZDtcclxuICAgICAgICB0aGlzLiN3aWR0aE51bWJlckVsZW1lbnQgPSB0aGlzLiNtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi53aWR0aC1jb3VudGVyIC5udW1iZXJcIik7XHJcbiAgICAgICAgdGhpcy4jaGVpZ2h0TnVtYmVyRWxlbWVudCA9IHRoaXMuI21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmhlaWdodC1jb3VudGVyIC5udW1iZXJcIik7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50ID0gdGhpcy4jbW9kYWxDb250YWluZXJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYm9hcmRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgYmluZEV2ZW50cygpIHtcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIC4uLnRoaXMuI21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1pbnVzXCIpLFxyXG4gICAgICAgICAgICAuLi50aGlzLiNtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wbHVzXCIpLFxyXG4gICAgICAgIF0uZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiNib2FyZFdpZHRoID0gcGFyc2VJbnQodGhpcy4jd2lkdGhOdW1iZXJFbGVtZW50LnRleHRDb250ZW50LCAxMCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiNib2FyZEhlaWdodCA9IHBhcnNlSW50KHRoaXMuI2hlaWdodE51bWJlckVsZW1lbnQudGV4dENvbnRlbnQsIDEwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyQm9hcmQoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQm9hcmQoKSB7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgLy8gdGhpcy4jYm9hcmRFbGVtZW50LnN0eWxlW1wiZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zXCJdID0gYHJlcGVhdCgke3RoaXMuI2JvYXJkV2lkdGh9LCBhdXRvKWA7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KFwiLS1ib2FyZC1ob3Jpem9udGFsLWNlbGxzXCIsIHRoaXMuI2JvYXJkV2lkdGgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy4jYm9hcmRXaWR0aCAqIHRoaXMuI2JvYXJkSGVpZ2h0OyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgYmxvY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBibG9jay5jbGFzc0xpc3QuYWRkKFwiYm9hcmQtYmxvY2tcIik7XHJcbiAgICAgICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudC5hcHBlbmQoYmxvY2spO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiBHZW5lcmFsIEdldHRlcnMgKi9cclxuICAgIGdldCBtb2RhbENvbnRhaW5lckVsZW1lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI21vZGFsQ29udGFpbmVyRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbW9kYWxFbGVtZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNtb2RhbEVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0V2lkdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI2JvYXJkV2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SGVpZ2h0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNib2FyZEhlaWdodDtcclxuICAgIH1cclxuICAgIC8qICMjIyMjIyMjIyMjIyMjIyMjIyMjICovXHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2hpcChsZW5ndGgpIHtcclxuICAgIGxldCBocFJlbWFpbmVkID0gbGVuZ3RoO1xyXG4gICAgY29uc3QgaGl0cG9pbnRzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaGl0cG9pbnRzW2ldID0gMDtcclxuICAgIH1cclxuICAgIGNvbnN0IHByb3RvID0ge1xyXG4gICAgICAgIGhpdChpbmRleCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGluZGV4ICE9PSBcIm51bWJlclwiIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKGluZGV4KSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBBcmd1bWVudCBFeGNlcHRpb25cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgQXJndW1lbnQgRXhjZXB0aW9uXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChoaXRwb2ludHNbaW5kZXhdID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAtLWhwUmVtYWluZWQ7XHJcbiAgICAgICAgICAgICAgICBoaXRwb2ludHNbaW5kZXhdID0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNTdW5rKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaHBSZW1haW5lZCA9PT0gMDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldEhQUmVtYWluZWQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBocFJlbWFpbmVkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0SGl0cG9pbnRzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gWy4uLmhpdHBvaW50c107XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXRIUERhbWFnZWQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsZW5ndGggLSBocFJlbWFpbmVkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0TGVuZ3RoKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbGVuZ3RoO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9iamVjdC5jcmVhdGUocHJvdG8pO1xyXG59XHJcbiIsImltcG9ydCBTaGlwIGZyb20gXCIuLi9TaGlwL3NoaXAtY29udHJvbGxlclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gR2FtZWJvYXJkKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgIGNvbnN0IHNoaXBzID0gW107XHJcbiAgICBjb25zdCBoaXRzQm9hcmQgPSBbXTtcclxuICAgIGNvbnN0IHNoaXBzQm9hcmQgPSBbXTtcclxuICAgIGxldCBzaGlwc0FsaXZlID0gMDtcclxuICAgIGxldCBibG9ja3NOb3RPY2N1cGllZCA9IHdpZHRoICogaGVpZ2h0O1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGVpZ2h0OyBpKyspIHtcclxuICAgICAgICBoaXRzQm9hcmQucHVzaChbXSk7XHJcbiAgICAgICAgc2hpcHNCb2FyZC5wdXNoKFtdKTtcclxuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHdpZHRoOyBqKyspIHtcclxuICAgICAgICAgICAgaGl0c0JvYXJkW2ldW2pdID0gMDtcclxuICAgICAgICAgICAgc2hpcHNCb2FyZFtpXVtqXSA9IC0xO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBwcm90byA9IHtcclxuICAgICAgICBnZXRXaWR0aCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHdpZHRoO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEhlaWdodCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGhlaWdodDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRTaGlwcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFsuLi5zaGlwc107XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0U2hpcChzaGlwSW5kZXgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNoaXBzW3NoaXBJbmRleF0uc2hpcDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRTaGlwRnJvbUNvb3JkaW5hdGUocm93LCBjb2wpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2hpcCh0aGlzLmdldFNoaXBJbmRleEZyb21Db29yZGluYXRlKHJvdywgY29sKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0U2hpcEluZGV4RnJvbUNvb3JkaW5hdGUocm93LCBjb2wpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNoaXBzQm9hcmRbcm93XVtjb2xdO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHB1c2hTaGlwKGxlbmd0aCkge1xyXG4gICAgICAgICAgICBzaGlwcy5wdXNoKHsgc2hpcDogbmV3IFNoaXAobGVuZ3RoKSB9KTtcclxuICAgICAgICAgICAgKytzaGlwc0FsaXZlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlbW92ZVNoaXAoc2hpcEluZGV4KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNoaXAgPSB0aGlzLmdldFNoaXAoc2hpcEluZGV4KTtcclxuICAgICAgICAgICAgaWYgKCFzaGlwLmlzU3VuaygpKSB7XHJcbiAgICAgICAgICAgICAgICAtLXNoaXBzQWxpdmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVGcm9tSGl0c0JvYXJkKFxyXG4gICAgICAgICAgICAgICAgc2hpcHNbc2hpcEluZGV4XS5yb3csXHJcbiAgICAgICAgICAgICAgICBzaGlwc1tzaGlwSW5kZXhdLmNvbCxcclxuICAgICAgICAgICAgICAgIHNoaXAuZ2V0TGVuZ3RoKCksXHJcbiAgICAgICAgICAgICAgICBzaGlwc1tzaGlwSW5kZXhdLmlzVmVydGljYWwsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRnJvbVNoaXBzQm9hcmQoXHJcbiAgICAgICAgICAgICAgICBzaGlwc1tzaGlwSW5kZXhdLnJvdyxcclxuICAgICAgICAgICAgICAgIHNoaXBzW3NoaXBJbmRleF0uY29sLFxyXG4gICAgICAgICAgICAgICAgc2hpcC5nZXRMZW5ndGgoKSxcclxuICAgICAgICAgICAgICAgIHNoaXBzW3NoaXBJbmRleF0uaXNWZXJ0aWNhbCxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgaWYgKHNoaXBzW3NoaXBJbmRleF0ucm93ICE9PSB1bmRlZmluZWQgJiYgc2hpcHNbc2hpcEluZGV4XS5jb2wgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbmNyZWFzZUJsb2NrTm90T2NjdXBpZWQoc2hpcC5nZXRMZW5ndGgoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2hpcHMuc3BsaWNlKHNoaXBJbmRleCwgMSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVtb3ZlU2hpcEJ5Q29vcmRpbmF0ZXMocm93LCBjb2wpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNoaXBzW2ldLnJvdyA9PT0gcm93ICYmIHNoaXBzW2ldLmNvbCA9PT0gY29sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTaGlwKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVtb3ZlRnJvbUhpdHNCb2FyZChyb3csIGNvbCwgbGVuZ3RoLCBpc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gcm93OyBpIDwgcm93ICsgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBoaXRzQm9hcmRbaV1bY29sXSA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gY29sOyBqIDwgY29sICsgbGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBoaXRzQm9hcmRbcm93XVtqXSA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICByZW1vdmVGcm9tU2hpcHNCb2FyZChyb3csIGNvbCwgbGVuZ3RoLCBpc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gcm93OyBpIDwgcm93ICsgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFNoaXBCb2FyZENlbGwoaSwgY29sLCAtMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gY29sOyBqIDwgY29sICsgbGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFNoaXBCb2FyZENlbGwocm93LCBqLCAtMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBpc1ZlcnRpY2FsU2hpcChzaGlwSW5kZXgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHNoaXBzW3NoaXBJbmRleF0uaXNWZXJ0aWNhbDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXRTaGlwT3JpZW50YXRpb24oc2hpcEluZGV4LCBpc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgIHNoaXBzW3NoaXBJbmRleF0uaXNWZXJ0aWNhbCA9IGlzVmVydGljYWw7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0U2hpcFN0YXJ0UG9pbnQoc2hpcEluZGV4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHJvdzogc2hpcHNbc2hpcEluZGV4XS5yb3csIGNvbDogc2hpcHNbc2hpcEluZGV4XS5jb2wgfTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXRTaGlwU3RhcnRQb2ludChzaGlwSW5kZXgsIHJvdywgY29sKSB7XHJcbiAgICAgICAgICAgIHNoaXBzW3NoaXBJbmRleF0ucm93ID0gcm93O1xyXG4gICAgICAgICAgICBzaGlwc1tzaGlwSW5kZXhdLmNvbCA9IGNvbDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRTaGlwc0NvdW50KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2hpcHMubGVuZ3RoO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldFNoaXBzQm9hcmQoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvcGllZFNoaXBzQm9hcmQgPSBbXTtcclxuICAgICAgICAgICAgc2hpcHNCb2FyZC5mb3JFYWNoKChyb3cpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvcGllZFNoaXBzQm9hcmQucHVzaChbLi4ucm93XSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gY29waWVkU2hpcHNCb2FyZDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzZXRTaGlwQm9hcmRDZWxsKHJvdywgY29sLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICBzaGlwc0JvYXJkW3Jvd11bY29sXSA9IHZhbHVlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEhpdHNCb2FyZCgpIHtcclxuICAgICAgICAgICAgY29uc3QgY29waWVkSGl0c0JvYXJkID0gW107XHJcbiAgICAgICAgICAgIGhpdHNCb2FyZC5mb3JFYWNoKChyb3cpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvcGllZEhpdHNCb2FyZC5wdXNoKFsuLi5yb3ddKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBjb3BpZWRIaXRzQm9hcmQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaGl0Qm9hcmRDZWxsKHJvdywgY29sKSB7XHJcbiAgICAgICAgICAgICsraGl0c0JvYXJkW3Jvd11bY29sXTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRCbG9ja05vdE9jY3VwaWVkKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gYmxvY2tzTm90T2NjdXBpZWQ7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZGVjcmVhc2VCbG9ja05vdE9jY3VwaWVkKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGJsb2Nrc05vdE9jY3VwaWVkIC09IHZhbHVlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGluY3JlYXNlQmxvY2tOb3RPY2N1cGllZCh2YWx1ZSkge1xyXG4gICAgICAgICAgICBibG9ja3NOb3RPY2N1cGllZCArPSB2YWx1ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRTaGlwc0FsaXZlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2hpcHNBbGl2ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBkZWNyZWFzZVNoaXBzQWxpdmUoKSB7XHJcbiAgICAgICAgICAgIC0tc2hpcHNBbGl2ZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRTaGlwc0xpc3QoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNoaXBzTGlzdCA9IHt9O1xyXG4gICAgICAgICAgICBzaGlwcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb3VudCA9IHNoaXBzTGlzdFtpdGVtLnNoaXAuZ2V0TGVuZ3RoKCldID8/IDA7XHJcbiAgICAgICAgICAgICAgICBzaGlwc0xpc3RbaXRlbS5zaGlwLmdldExlbmd0aCgpXSA9IGNvdW50ICsgMTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBzaGlwc0xpc3Q7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc29ydFNoaXBzQnlMZW5ndGhEZXNjKCkge1xyXG4gICAgICAgICAgICBzaGlwcy5zb3J0KChhLCBiKSA9PiBiLnNoaXAuZ2V0TGVuZ3RoKCkgLSBhLnNoaXAuZ2V0TGVuZ3RoKCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHByb3RvKTtcclxufVxyXG4iLCJjb25zdCBCb2FyZEhlbHBlciA9ICgoKSA9PiB7XHJcbiAgICBmdW5jdGlvbiBnZXRCbG9ja0luZGV4RnJvbUNvb3JkaW5hdGVzKHJvdywgY29sLCBib2FyZFdpZHRoKSB7XHJcbiAgICAgICAgcmV0dXJuIHJvdyAqIGJvYXJkV2lkdGggKyBjb2w7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Q29vcmRpbmF0ZXNGcm9tQmxvY2tJbmRleChibG9ja0luZGV4LCBib2FyZFdpZHRoKSB7XHJcbiAgICAgICAgY29uc3Qgcm93ID0gTWF0aC5mbG9vcihibG9ja0luZGV4IC8gYm9hcmRXaWR0aCk7XHJcbiAgICAgICAgY29uc3QgY29sID0gYmxvY2tJbmRleCAlIGJvYXJkV2lkdGg7XHJcbiAgICAgICAgcmV0dXJuIFtyb3csIGNvbF07XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0QmxvY2tUb3BPZmZzZXQoYm9hcmRFbGVtZW50LCBibG9ja0luZGV4KSB7XHJcbiAgICAgICAgY29uc3QgYmxvY2sgPSBBcnJheS5mcm9tKGJvYXJkRWxlbWVudC5jaGlsZHJlbilbYmxvY2tJbmRleF07XHJcbiAgICAgICAgcmV0dXJuIGJsb2NrLm9mZnNldFRvcDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRCbG9ja0luZGV4RnJvbUJsb2NrRWxlbWVudChib2FyZEVsZW1lbnQsIGJsb2NrRWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGJvYXJkRWxlbWVudC5jaGlsZHJlbikuaW5kZXhPZihibG9ja0VsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldEJsb2NrTGVmdE9mZnNldChib2FyZEVsZW1lbnQsIGJsb2NrSW5kZXgpIHtcclxuICAgICAgICBjb25zdCBibG9jayA9IEFycmF5LmZyb20oYm9hcmRFbGVtZW50LmNoaWxkcmVuKVtibG9ja0luZGV4XTtcclxuICAgICAgICByZXR1cm4gYmxvY2sub2Zmc2V0TGVmdDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjcmVhdGVTaGlwRWxlbWVudChsZW5ndGgsIGlzVmVydGljYWwpIHtcclxuICAgICAgICBjb25zdCBzaGlwRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgc2hpcEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInNoaXBcIik7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBzaGlwQmxvY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBzaGlwQmxvY2suY2xhc3NMaXN0LmFkZChcInNoaXAtYmxvY2tcIik7XHJcbiAgICAgICAgICAgIHNoaXBFbGVtZW50LmFwcGVuZChzaGlwQmxvY2spO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzaGlwRWxlbWVudC5jbGFzc0xpc3QuYWRkKGAke2lzVmVydGljYWwgPyBcInZlcnRpY2FsXCIgOiBcImhvcml6b250YWxcIn1gKTtcclxuICAgICAgICByZXR1cm4gc2hpcEVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlU2hpcE9uQm9hcmQoXHJcbiAgICAgICAgYm9hcmRFbGVtZW50LFxyXG4gICAgICAgIGJvYXJkV2lkdGgsXHJcbiAgICAgICAgcm93LFxyXG4gICAgICAgIGNvbCxcclxuICAgICAgICBsZW5ndGgsXHJcbiAgICAgICAgaXNWZXJ0aWNhbCxcclxuICAgICAgICBpZCxcclxuICAgICAgICBzaGlwRWxlbWVudCxcclxuICAgICkge1xyXG4gICAgICAgIGlmIChzaGlwRWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHNoaXBFbGVtZW50ID0gQm9hcmRIZWxwZXIuY3JlYXRlU2hpcEVsZW1lbnQobGVuZ3RoLCBpc1ZlcnRpY2FsKTtcclxuICAgICAgICAgICAgc2hpcEVsZW1lbnQuZGF0YXNldC5pZCA9IGlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBibG9ja0luZGV4ID0gQm9hcmRIZWxwZXIuZ2V0QmxvY2tJbmRleEZyb21Db29yZGluYXRlcyhyb3csIGNvbCwgYm9hcmRXaWR0aCk7XHJcbiAgICAgICAgc2hpcEVsZW1lbnQuc3R5bGUudG9wID0gYCR7Qm9hcmRIZWxwZXIuZ2V0QmxvY2tUb3BPZmZzZXQoYm9hcmRFbGVtZW50LCBibG9ja0luZGV4KX1weGA7XHJcbiAgICAgICAgc2hpcEVsZW1lbnQuc3R5bGUubGVmdCA9IGAke0JvYXJkSGVscGVyLmdldEJsb2NrTGVmdE9mZnNldChib2FyZEVsZW1lbnQsIGJsb2NrSW5kZXgpfXB4YDtcclxuICAgICAgICBzaGlwRWxlbWVudC5zdHlsZVtcImZsZXgtZGlyZWN0aW9uXCJdID0gYCR7aXNWZXJ0aWNhbCA/IFwiY29sdW1uXCIgOiBcInJvd1wifWA7XHJcbiAgICAgICAgYm9hcmRFbGVtZW50LmFwcGVuZChzaGlwRWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZXRCbG9ja0luZGV4RnJvbUNvb3JkaW5hdGVzLFxyXG4gICAgICAgIGdldENvb3JkaW5hdGVzRnJvbUJsb2NrSW5kZXgsXHJcbiAgICAgICAgZ2V0QmxvY2tJbmRleEZyb21CbG9ja0VsZW1lbnQsXHJcbiAgICAgICAgZ2V0QmxvY2tUb3BPZmZzZXQsXHJcbiAgICAgICAgZ2V0QmxvY2tMZWZ0T2Zmc2V0LFxyXG4gICAgICAgIGNyZWF0ZVNoaXBFbGVtZW50LFxyXG4gICAgICAgIGNyZWF0ZVNoaXBPbkJvYXJkLFxyXG4gICAgfTtcclxufSkoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJvYXJkSGVscGVyO1xyXG4iLCJpbXBvcnQgR2FtZWJvYXJkQ29udHJvbGxlciBmcm9tIFwiLi4vR2FtZWJvYXJkL2dhbWVib2FyZC1jb250cm9sbGVyXCI7XHJcbmltcG9ydCBHYW1lYm9hcmQgZnJvbSBcIi4uL0dhbWVib2FyZC9nYW1lYm9hcmQtbW9kZWxcIjtcclxuaW1wb3J0IHBsYXllclZpZXdIZWxwZXIgZnJvbSBcIi4uL1BsYXllci9wbGF5ZXItdmlldy1oZWxwZXJcIjtcclxuaW1wb3J0IFBsYWNpbmdTaGlwc1RlbXBsYXRlIGZyb20gXCIuLi8uLi9odG1sL3RlbXBsYXRlcy9tb2RhbHMvc2hpcHMtcGxhY2luZy10ZW1wbGF0ZS5oYW5kbGViYXJzXCI7XHJcbmltcG9ydCBTaGlwQ29udGFpbmVyVGVtcGxhdGUgZnJvbSBcIi4uLy4uL2h0bWwvdGVtcGxhdGVzL21vZGFscy9zaGlwcy1jb250YWluZXItcGxhY2luZy1tb2RhbC10ZW1wbGF0ZS5oYW5kbGViYXJzXCI7XHJcbmltcG9ydCBGb3JtSGVscGVyIGZyb20gXCIuLi9WaWV3SGVscGVyL2Zvcm1cIjtcclxuaW1wb3J0IEJvYXJkSGVscGVyIGZyb20gXCIuLi9WaWV3SGVscGVyL2JvYXJkXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGlwc1BsYWNpbmdNb2RhbCB7XHJcbiAgICAvLyBET00gRWxlbWVudHNcclxuICAgICNtb2RhbENvbnRhaW5lckVsZW1lbnQ7XHJcblxyXG4gICAgI21vZGFsRWxlbWVudDtcclxuXHJcbiAgICAjcGF1c2VDb250YWluZXJFbGVtZW50O1xyXG5cclxuICAgICNidG5BdXRvUGxhY2U7XHJcblxyXG4gICAgI2F1dG9QbGFjZUVycm9yRWxlbWVudDtcclxuXHJcbiAgICAjYnRuU3VibWl0O1xyXG5cclxuICAgIC8vIFByb3BlcnRpZXNcclxuICAgICNzaGlwSWQ7XHJcblxyXG4gICAgI2JvYXJkV2lkdGg7XHJcblxyXG4gICAgI2JvYXJkSGVpZ2h0O1xyXG5cclxuICAgICNzaGlwc0xpc3Q7XHJcblxyXG4gICAgI2FsbFNoaXBzTGlzdDtcclxuXHJcbiAgICAjY3VycmVudFBsYXllck51bTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwbGF5ZXJzTnVtLFxyXG4gICAgICAgIGN1cnJlbnRQbGF5ZXJOdW0sXHJcbiAgICAgICAgc2hpcHNMaXN0LFxyXG4gICAgICAgIGJvYXJkV2lkdGgsXHJcbiAgICAgICAgYm9hcmRIZWlnaHQsXHJcbiAgICAgICAgaXNGaXJzdFJvdW5kLFxyXG4gICAgICAgIHBsYXllck5hbWUsXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLiNib2FyZFdpZHRoID0gYm9hcmRXaWR0aDtcclxuICAgICAgICB0aGlzLiNib2FyZEhlaWdodCA9IGJvYXJkSGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuI2N1cnJlbnRQbGF5ZXJOdW0gPSBjdXJyZW50UGxheWVyTnVtO1xyXG4gICAgICAgIGxldCBwbGF5ZXJMYWJlbCA9IGlzRmlyc3RSb3VuZCA/IFwiUGxheWVyXCIgOiBwbGF5ZXJOYW1lO1xyXG4gICAgICAgIGlmIChpc0ZpcnN0Um91bmQgJiYgY3VycmVudFBsYXllck51bSA9PT0gMSAmJiBwbGF5ZXJzTnVtID4gMSkge1xyXG4gICAgICAgICAgICBwbGF5ZXJMYWJlbCA9IFwiRmlyc3QgUGxheWVyXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc0ZpcnN0Um91bmQgJiYgY3VycmVudFBsYXllck51bSA9PT0gMikge1xyXG4gICAgICAgICAgICBwbGF5ZXJMYWJlbCA9IFwiU2Vjb25kIFBsYXllclwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLiNzaGlwc1BsYWNlZCA9IDA7XHJcbiAgICAgICAgdGhpcy4jc2hpcElkID0gMTtcclxuICAgICAgICB0aGlzLiNhbGxTaGlwc0xpc3QgPSBzaGlwc0xpc3Q7XHJcbiAgICAgICAgdGhpcy4jc2hpcHNMaXN0ID0ge307XHJcblxyXG4gICAgICAgIHRoaXMuY2FjaGVET00ocGxheWVyTGFiZWwpO1xyXG4gICAgICAgIHRoaXMuaW5pdFBsYXllckFyZWEoaXNGaXJzdFJvdW5kLCBwbGF5ZXJOYW1lKTtcclxuICAgICAgICB0aGlzLmluaXRTaGlwc0FyZWEoc2hpcHNMaXN0KTtcclxuICAgICAgICB0aGlzLmluaXRQYWdpbmF0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5pbml0Qm9hcmRBcmVhKCk7XHJcbiAgICAgICAgLy8gT3B0aW9ucyBFbGVtZW50c1xyXG4gICAgICAgIEZvcm1IZWxwZXIuZGlzYWJsZUJ1dHRvbih0aGlzLiNidG5TdWJtaXQpO1xyXG5cclxuICAgICAgICAvLyBFdmVudHNcclxuICAgICAgICB0aGlzLmJpbmRFdmVudHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWNoZURPTShwbGF5ZXJMYWJlbCkge1xyXG4gICAgICAgIHRoaXMuI21vZGFsQ29udGFpbmVyRWxlbWVudCA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoXHJcbiAgICAgICAgICAgIFBsYWNpbmdTaGlwc1RlbXBsYXRlKHtcclxuICAgICAgICAgICAgICAgIHBsYXllckxhYmVsLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgXCJ0ZXh0L2h0bWxcIixcclxuICAgICAgICApLmJvZHkuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgdGhpcy4jbW9kYWxFbGVtZW50ID0gdGhpcy4jbW9kYWxDb250YWluZXJFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgIHRoaXMuI3BhdXNlQ29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGF1c2UtY29udGFpbmVyXCIpO1xyXG4gICAgICAgIHRoaXMuI2J0bkF1dG9QbGFjZSA9IHRoaXMuI21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ0bi1hdXRvLXBsYWNlXCIpO1xyXG4gICAgICAgIHRoaXMuI2F1dG9QbGFjZUVycm9yRWxlbWVudCA9IHRoaXMuI2J0bkF1dG9QbGFjZS5uZXh0RWxlbWVudFNpYmxpbmc7XHJcbiAgICAgICAgdGhpcy4jYnRuU3VibWl0ID0gdGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYnRuLXN1Ym1pdFwiKTtcclxuICAgICAgICB0aGlzLmNhY2hlUGxheWVyQXJlYURPTSgpO1xyXG4gICAgICAgIHRoaXMuY2FjaGVTaGlwc0FyZWFET00oKTtcclxuICAgICAgICB0aGlzLmNhY2hlUGFnaW5hdGlvbkRPTSgpO1xyXG4gICAgICAgIHRoaXMuY2FjaGVCb2FyZEFyZWFET00oKTtcclxuICAgIH1cclxuXHJcbiAgICBiaW5kRXZlbnRzKCkge1xyXG4gICAgICAgIHRoaXMuYmluZFBsYXllckFyZWFFdmVudHMoKTtcclxuICAgICAgICB0aGlzLmJpbmRTaGlwc0FyZWFFdmVudHMoKTtcclxuICAgICAgICB0aGlzLmJpbmRQYWdpbmF0aW9uRXZlbnRzKCk7XHJcbiAgICAgICAgdGhpcy5iaW5kQm9hcmRBcmVhRXZlbnRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyogUGxheWVyIEFyZWEgKi9cclxuICAgICNwbGF5ZXJOYW1lU2VjdGlvbkVsZW1lbnQ7XHJcblxyXG4gICAgI3BsYXllck5hbWVFbGVtZW50O1xyXG5cclxuICAgIGluaXRQbGF5ZXJBcmVhKGlzRmlyc3RSb3VuZCwgcGxheWVyTmFtZSkge1xyXG4gICAgICAgIGlmICghaXNGaXJzdFJvdW5kKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhyID0gdGhpcy4jcGxheWVyTmFtZVNlY3Rpb25FbGVtZW50Lm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgdGhpcy4jcGxheWVyTmFtZUVsZW1lbnQudmFsdWUgPSBwbGF5ZXJOYW1lO1xyXG4gICAgICAgICAgICB0aGlzLiNwbGF5ZXJOYW1lU2VjdGlvbkVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIGhyLnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjYWNoZVBsYXllckFyZWFET00oKSB7XHJcbiAgICAgICAgdGhpcy4jcGxheWVyTmFtZVNlY3Rpb25FbGVtZW50ID0gdGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2VjdGlvbi1wbGF5ZXItbmFtZVwiKTtcclxuICAgICAgICB0aGlzLiNwbGF5ZXJOYW1lRWxlbWVudCA9IHRoaXMuI3BsYXllck5hbWVTZWN0aW9uRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXRbbmFtZV1cIik7XHJcbiAgICB9XHJcblxyXG4gICAgYmluZFBsYXllckFyZWFFdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy4jcGxheWVyTmFtZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXByZXNzXCIsIHRoaXMub25LZXlQcmVzc1BsYXllck5hbWUuYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25LZXlQcmVzc1BsYXllck5hbWUoZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrSWZNYXhQbGF5ZXJOYW1lUmVhY2hlZCgpKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2hlY2tJZk1heFBsYXllck5hbWVSZWFjaGVkKCkge1xyXG4gICAgICAgIGNvbnN0IG1heExlbmd0aCA9IDE1O1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRMZW5ndGggPSB0aGlzLiNwbGF5ZXJOYW1lRWxlbWVudC52YWx1ZS5sZW5ndGg7XHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRMZW5ndGggPT09IG1heExlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQbGF5ZXJOYW1lKCkge1xyXG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLiNwbGF5ZXJOYW1lRWxlbWVudC52YWx1ZTtcclxuICAgICAgICByZXR1cm4gbmFtZSA9PT0gXCJcIiA/IGBQbGF5ZXIke3RoaXMuI2N1cnJlbnRQbGF5ZXJOdW19YCA6IG5hbWU7XHJcbiAgICB9XHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAgIC8qIFNoaXBzIEFyZWEgKi9cclxuICAgIC8vIERPTSBFbGVtZW50c1xyXG4gICAgI3NoaXBzQ29udGFpbmVyc0VsZW1lbnRzO1xyXG5cclxuICAgICNzaGlwc051bWJlcnNFbGVtZW50cztcclxuXHJcbiAgICAjYWN0aXZlU2hpcEVsZW1lbnQ7XHJcblxyXG4gICAgLy8gUHJvcGVydGllc1xyXG4gICAgI2FjdGl2ZVNoaXBMZW5ndGg7XHJcblxyXG4gICAgI3RvdGFsU2hpcHM7XHJcblxyXG4gICAgLyogdGhlIHNoaXAgdGhhdHMgaXMgbm90IGNvbmZpcm1lZCB0byBiZSBwbGFjZWQgeWV0XHJcbiAgICAgICAgKGp1c3QgdG8gc2hvdyBob3cgdGhlIHNoaXAgd2lsbCBiZSBwbGFjZWQgb24gYm9hcmQpXHJcbiAgICAqL1xyXG4gICAgI3RlbXBTaGlwO1xyXG5cclxuICAgIGluaXRTaGlwc0FyZWEoc2hpcHNMaXN0KSB7XHJcbiAgICAgICAgdGhpcy4jc2hpcHNDb250YWluZXJzRWxlbWVudHMgPSB7fTtcclxuICAgICAgICB0aGlzLiNzaGlwc051bWJlcnNFbGVtZW50cyA9IHt9O1xyXG4gICAgICAgIHRoaXMuY3JlYXRlU2hpcHNQYWdlcyhzaGlwc0xpc3QpO1xyXG4gICAgICAgIHRoaXMuI3RvdGFsU2hpcHMgPSAwO1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuI3NoaXBzTnVtYmVyc0VsZW1lbnRzKS5mb3JFYWNoKChzaGlwTGVuZ3RoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuI3RvdGFsU2hpcHMgKz0gcGFyc2VJbnQodGhpcy4jc2hpcHNOdW1iZXJzRWxlbWVudHNbc2hpcExlbmd0aF0udGV4dENvbnRlbnQsIDEwKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNldEFjdGl2ZVNoaXAodGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2hpcC1jb21wcmVzc2VkXCIpKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVRlbXBTaGlwKHRoaXMuI2FjdGl2ZVNoaXBMZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuICAgIGJpbmRTaGlwc0FyZWFFdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucGFnZSAuc2hpcC1ibG9ja1wiKS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0QWN0aXZlU2hpcChlbGVtZW50LmNsb3Nlc3QoXCIuc2hpcC1jb21wcmVzc2VkXCIpKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLiNhY3RpdmVPcmllbnRhdGlvbklzVmVydGljYWwgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFBsYWNlT3B0aW9uQWN0aXZlKFwiaFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FjaGVTaGlwc0FyZWFET00oKSB7XHJcbiAgICAgICAgdGhpcy4jcGFnZXNDb250YWluZXJFbGVtZW50ID0gdGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGFnZXMtY29udGFpbmVyXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGluY3JlYXNlU2hpcENvdW50KHNoaXBMZW5ndGgpIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50Q291bnQgPSBwYXJzZUludCh0aGlzLiNzaGlwc051bWJlcnNFbGVtZW50c1tzaGlwTGVuZ3RoXS50ZXh0Q29udGVudCwgMTApO1xyXG4gICAgICAgIHRoaXMuI3NoaXBzTnVtYmVyc0VsZW1lbnRzW3NoaXBMZW5ndGhdLnRleHRDb250ZW50ID0gY3VycmVudENvdW50ICsgMTtcclxuICAgIH1cclxuXHJcbiAgICBkZWNyZWFzZVNoaXBDb3VudChzaGlwTGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudENvdW50ID0gcGFyc2VJbnQodGhpcy4jc2hpcHNOdW1iZXJzRWxlbWVudHNbc2hpcExlbmd0aF0udGV4dENvbnRlbnQsIDEwKTtcclxuICAgICAgICBpZiAoY3VycmVudENvdW50ID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLiNzaGlwc051bWJlcnNFbGVtZW50c1tzaGlwTGVuZ3RoXS50ZXh0Q29udGVudCA9IGN1cnJlbnRDb3VudCAtIDE7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzZXRBbGxTaGlwc0NvdW50KCkge1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuI3NoaXBzTnVtYmVyc0VsZW1lbnRzKS5mb3JFYWNoKChzaGlwTGVuZ3RoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuI3NoaXBzTnVtYmVyc0VsZW1lbnRzW3NoaXBMZW5ndGhdLnRleHRDb250ZW50ID0gMDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRBY3RpdmVTaGlwKHNoaXApIHtcclxuICAgICAgICBpZiAoc2hpcCA9PT0gdGhpcy4jYWN0aXZlU2hpcEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy4jYWN0aXZlU2hpcEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy4jYWN0aXZlU2hpcEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy4jYWN0aXZlU2hpcEVsZW1lbnQgPSBzaGlwLmNsb3Nlc3QoXCIuc2hpcC1jb21wcmVzc2VkXCIpO1xyXG4gICAgICAgIHRoaXMuI2FjdGl2ZVNoaXBFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgY29uc3QgYWN0aXZlU2hpcENvbnRhaW5lciA9IHRoaXMuI2FjdGl2ZVNoaXBFbGVtZW50LmNsb3Nlc3QoXCIuc2hpcC1jb250YWluZXJcIik7XHJcbiAgICAgICAgY29uc3Qgc2hpcExlbmd0aCA9IHBhcnNlSW50KGFjdGl2ZVNoaXBDb250YWluZXIuZGF0YXNldC5sZW5ndGgsIDEwKTtcclxuICAgICAgICB0aGlzLiNhY3RpdmVTaGlwTGVuZ3RoID0gc2hpcExlbmd0aDtcclxuICAgICAgICBjb25zdCBzaGlwQ291bnQgPSBwYXJzZUludCh0aGlzLiNzaGlwc051bWJlcnNFbGVtZW50c1tzaGlwTGVuZ3RoXS50ZXh0Q29udGVudCwgMTApO1xyXG4gICAgICAgIGlmIChzaGlwQ291bnQgIT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVUZW1wU2hpcCh0aGlzLiNhY3RpdmVTaGlwTGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlU2hpcHNQYWdlcyhzaGlwc0xpc3QpIHtcclxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoc2hpcHNMaXN0KS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XHJcbiAgICAgICAgY29uc3Qgc2hpcHNQZXJQYWdlID0gNDtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpICs9IHNoaXBzUGVyUGFnZSkge1xyXG4gICAgICAgICAgICB0aGlzLiNwYWdlc0NvbnRhaW5lckVsZW1lbnQuYXBwZW5kKHRoaXMuY3JlYXRlUGFnZShpLCBzaGlwc1BlclBhZ2UsIGtleXMsIHNoaXBzTGlzdCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVQYWdlKGZpcnN0U2hpcEluZGV4LCBzaGlwc051bSwga2V5cywgc2hpcHNMaXN0KSB7XHJcbiAgICAgICAgY29uc3QgcGFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgcGFnZS5jbGFzc0xpc3QuYWRkKFwicGFnZVwiKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBzTnVtICYmIGZpcnN0U2hpcEluZGV4ICsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3Qgc2hpcExlbmd0aCA9IGtleXNbZmlyc3RTaGlwSW5kZXggKyBpXTtcclxuICAgICAgICAgICAgY29uc3Qgc2hpcENvdW50ID0gc2hpcHNMaXN0W3NoaXBMZW5ndGhdO1xyXG4gICAgICAgICAgICBjb25zdCBzaGlwQ29udGFpbmVyID0gdGhpcy5jcmVhdGVTaGlwQ29udGFpbmVyKHNoaXBMZW5ndGgsIHNoaXBDb3VudCk7XHJcbiAgICAgICAgICAgIHBhZ2UuYXBwZW5kKHNoaXBDb250YWluZXIpO1xyXG4gICAgICAgICAgICB0aGlzLiNzaGlwc0NvbnRhaW5lcnNFbGVtZW50c1tzaGlwTGVuZ3RoXSA9IHNoaXBDb250YWluZXI7XHJcbiAgICAgICAgICAgIHRoaXMuI3NoaXBzTnVtYmVyc0VsZW1lbnRzW3NoaXBMZW5ndGhdID0gc2hpcENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLm51bWJlclwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlU2hpcENvbnRhaW5lcihzaGlwTGVuZ3RoLCBzaGlwQ291bnQpIHtcclxuICAgICAgICBjb25zdCBzaGlwQ29udGFpbmVyID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhcclxuICAgICAgICAgICAgU2hpcENvbnRhaW5lclRlbXBsYXRlKHsgc2hpcExlbmd0aCwgc2hpcENvdW50IH0pLFxyXG4gICAgICAgICAgICBcInRleHQvaHRtbFwiLFxyXG4gICAgICAgICkuYm9keS5maXJzdEVsZW1lbnRDaGlsZDtcclxuICAgICAgICBjb25zdCBzaGlwRWxlbWVudCA9IHBsYXllclZpZXdIZWxwZXIuY3JlYXRlU2hpcEVsZW1lbnQoc2hpcExlbmd0aCwgMSk7XHJcbiAgICAgICAgc2hpcENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLnNoaXBcIikucmVwbGFjZVdpdGgoc2hpcEVsZW1lbnQpO1xyXG4gICAgICAgIHJldHVybiBzaGlwQ29udGFpbmVyO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVRlbXBTaGlwKGxlbmd0aCkge1xyXG4gICAgICAgIHRoaXMuI3RlbXBTaGlwID0gQm9hcmRIZWxwZXIuY3JlYXRlU2hpcEVsZW1lbnQobGVuZ3RoKTtcclxuICAgICAgICB0aGlzLiN0ZW1wU2hpcC5jbGFzc0xpc3QuYWRkKFwidGVtcC1zaGlwXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gICAgLyogIFBsYWNlIFNoaXBzICovXHJcbiAgICAjc2hpcHNQbGFjZWQ7XHJcblxyXG4gICAgYmluZFBsYWNlU2hpcHNFdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBibG9jayA9IGUudGFyZ2V0O1xyXG4gICAgICAgICAgICBpZiAoYmxvY2suY2xhc3NMaXN0LmNvbnRhaW5zKFwiYm9hcmQtYmxvY2tcIikpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25DbGlja1BsYWNlU2hpcE9uQm9hcmQoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5ib2FyZC1ibG9ja1wiKS5mb3JFYWNoKChibG9jaykgPT4ge1xyXG4gICAgICAgICAgICBibG9jay5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCB0aGlzLk9uTW91c2VFbnRlckJvYXJkQmxvY2suYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIGJsb2NrLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHRoaXMub25Nb3VzZUxlYXZlQm9hcmRCbG9jay5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLiNidG5BdXRvUGxhY2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy4jcGF1c2VDb250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIiwgXCJmcm9udFwiKTtcclxuICAgICAgICAgICAgdGhpcy4jcGF1c2VDb250YWluZXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgICAgICAgICBcInRyYW5zaXRpb25lbmRcIixcclxuICAgICAgICAgICAgICAgICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc1BsYWNlZCA9IHRoaXMuYXV0b1BsYWNlU2hpcHMuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUGxhY2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2F1dG9QbGFjZUVycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZC1ub25lXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2F1dG9QbGFjZUVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZC1ub25lXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiNwYXVzZUNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiLCBcImZyb250XCIpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHsgb25jZTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHBsYWNlU2hpcE9uQm9hcmQocm93LCBjb2wsIGxlbmd0aCwgaXNWZXJ0aWNhbCkge1xyXG4gICAgICAgIGlmICghdGhpcy5jYW5QbGFjZVNoaXAobGVuZ3RoLCByb3csIGNvbCwgaXNWZXJ0aWNhbCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRJZCA9IHRoaXMuI3NoaXBJZCsrO1xyXG4gICAgICAgIHRoaXMuI3NoaXBzTGlzdFtjdXJyZW50SWRdID0ge1xyXG4gICAgICAgICAgICByb3csXHJcbiAgICAgICAgICAgIGNvbCxcclxuICAgICAgICAgICAgbGVuZ3RoLFxyXG4gICAgICAgICAgICBpc1ZlcnRpY2FsLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgQm9hcmRIZWxwZXIuY3JlYXRlU2hpcE9uQm9hcmQoXHJcbiAgICAgICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudCxcclxuICAgICAgICAgICAgdGhpcy4jYm9hcmRXaWR0aCxcclxuICAgICAgICAgICAgcm93LFxyXG4gICAgICAgICAgICBjb2wsXHJcbiAgICAgICAgICAgIGxlbmd0aCxcclxuICAgICAgICAgICAgaXNWZXJ0aWNhbCxcclxuICAgICAgICAgICAgY3VycmVudElkLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5kZWNyZWFzZVNoaXBDb3VudChsZW5ndGgpO1xyXG4gICAgICAgIHRoaXMuc2V0RW1wdHlDZWxscyhyb3csIGNvbCwgbGVuZ3RoLCBpc1ZlcnRpY2FsLCBmYWxzZSk7XHJcbiAgICAgICAgKyt0aGlzLiNzaGlwc1BsYWNlZDtcclxuICAgICAgICBpZiAodGhpcy4jc2hpcHNQbGFjZWQgPT09IHRoaXMuI3RvdGFsU2hpcHMpIHtcclxuICAgICAgICAgICAgRm9ybUhlbHBlci5lbmFibGVCdXR0b24odGhpcy4jYnRuU3VibWl0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25DbGlja1BsYWNlU2hpcE9uQm9hcmQoZSkge1xyXG4gICAgICAgIGlmICh0aGlzLiNhY3RpdmVPcmllbnRhdGlvbklzVmVydGljYWwgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBibG9jayA9IGUudGFyZ2V0O1xyXG4gICAgICAgIGNvbnN0IGJsb2NrSW5kZXggPSBCb2FyZEhlbHBlci5nZXRCbG9ja0luZGV4RnJvbUJsb2NrRWxlbWVudCh0aGlzLiNib2FyZEVsZW1lbnQsIGJsb2NrKTtcclxuICAgICAgICBjb25zdCBpc1ZlcnRpY2FsID0gdGhpcy4jYWN0aXZlT3JpZW50YXRpb25Jc1ZlcnRpY2FsO1xyXG4gICAgICAgIGNvbnN0IFtyb3csIGNvbF0gPSBCb2FyZEhlbHBlci5nZXRDb29yZGluYXRlc0Zyb21CbG9ja0luZGV4KGJsb2NrSW5kZXgsIHRoaXMuI2JvYXJkV2lkdGgpO1xyXG4gICAgICAgIGlmICghdGhpcy5jYW5QbGFjZVNoaXAodGhpcy4jYWN0aXZlU2hpcExlbmd0aCwgcm93LCBjb2wsIGlzVmVydGljYWwpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wbGFjZVNoaXBPbkJvYXJkKHJvdywgY29sLCB0aGlzLiNhY3RpdmVTaGlwTGVuZ3RoLCBpc1ZlcnRpY2FsKTtcclxuICAgIH1cclxuXHJcbiAgICBPbk1vdXNlRW50ZXJCb2FyZEJsb2NrKGUpIHtcclxuICAgICAgICBpZiAodGhpcy4jYWN0aXZlT3JpZW50YXRpb25Jc1ZlcnRpY2FsID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYmxvY2sgPSBlLnRhcmdldDtcclxuICAgICAgICBjb25zdCBibG9ja0luZGV4ID0gQm9hcmRIZWxwZXIuZ2V0QmxvY2tJbmRleEZyb21CbG9ja0VsZW1lbnQodGhpcy4jYm9hcmRFbGVtZW50LCBibG9jayk7XHJcbiAgICAgICAgY29uc3QgaXNWZXJ0aWNhbCA9IHRoaXMuI2FjdGl2ZU9yaWVudGF0aW9uSXNWZXJ0aWNhbDtcclxuICAgICAgICBjb25zdCBbcm93LCBjb2xdID0gQm9hcmRIZWxwZXIuZ2V0Q29vcmRpbmF0ZXNGcm9tQmxvY2tJbmRleChibG9ja0luZGV4LCB0aGlzLiNib2FyZFdpZHRoKTtcclxuICAgICAgICBpZiAoIXRoaXMuY2FuUGxhY2VTaGlwKHRoaXMuI2FjdGl2ZVNoaXBMZW5ndGgsIHJvdywgY29sLCBpc1ZlcnRpY2FsKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEJvYXJkSGVscGVyLmNyZWF0ZVNoaXBPbkJvYXJkKFxyXG4gICAgICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnQsXHJcbiAgICAgICAgICAgIHRoaXMuI2JvYXJkV2lkdGgsXHJcbiAgICAgICAgICAgIHJvdyxcclxuICAgICAgICAgICAgY29sLFxyXG4gICAgICAgICAgICB0aGlzLiNhY3RpdmVTaGlwTGVuZ3RoLFxyXG4gICAgICAgICAgICBpc1ZlcnRpY2FsLFxyXG4gICAgICAgICAgICB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgIHRoaXMuI3RlbXBTaGlwLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgb25Nb3VzZUxlYXZlQm9hcmRCbG9jaygpIHtcclxuICAgICAgICBpZiAodGhpcy4jYWN0aXZlT3JpZW50YXRpb25Jc1ZlcnRpY2FsID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuI3RlbXBTaGlwICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI3RlbXBTaGlwLnJlbW92ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjYW5QbGFjZVNoaXAobGVuZ3RoLCByb3csIGNvbCwgaXNWZXJ0aWNhbCkge1xyXG4gICAgICAgIGlmIChwYXJzZUludCh0aGlzLiNzaGlwc051bWJlcnNFbGVtZW50c1tsZW5ndGhdLnRleHRDb250ZW50LCAxMCkgPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNWZXJ0aWNhbCAmJiByb3cgKyBsZW5ndGggLSAxID49IHRoaXMuI2JvYXJkSGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc1ZlcnRpY2FsICYmIGNvbCArIGxlbmd0aCAtIDEgPj0gdGhpcy4jYm9hcmRXaWR0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGlzVmVydGljYWwgJiYgdGhpcy4jZW1wdHlDZWxsc1tyb3cgKyBpXVtjb2xdICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFpc1ZlcnRpY2FsICYmIHRoaXMuI2VtcHR5Q2VsbHNbcm93XVtjb2wgKyBpXSAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGF1dG9QbGFjZVNoaXBzKCkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlQWxsU2hpcHNGcm9tQm9hcmQoKTtcclxuICAgICAgICBjb25zdCB0ZW1wQm9hcmQgPSBHYW1lYm9hcmQodGhpcy4jYm9hcmRXaWR0aCwgdGhpcy4jYm9hcmRIZWlnaHQpO1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuI2FsbFNoaXBzTGlzdCkuZm9yRWFjaCgoc2hpcExlbmd0aCkgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuI2FsbFNoaXBzTGlzdFtzaGlwTGVuZ3RoXTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBHYW1lYm9hcmRDb250cm9sbGVyLmFkZFNoaXAodGVtcEJvYXJkLCBwYXJzZUludChzaGlwTGVuZ3RoLCAxMCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgaXNQbGFjZWQgPSBHYW1lYm9hcmRDb250cm9sbGVyLmF1dG9QbGFjZVNoaXBzKHRlbXBCb2FyZCk7XHJcbiAgICAgICAgaWYgKGlzUGxhY2VkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNoaXBzQXJyYXkgPSB0ZW1wQm9hcmQuZ2V0U2hpcHMoKTtcclxuICAgICAgICAgICAgc2hpcHNBcnJheS5mb3JFYWNoKChlbGVtZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGFjZVNoaXBPbkJvYXJkKFxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucm93LFxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY29sLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBCb2FyZC5nZXRTaGlwKGluZGV4KS5nZXRMZW5ndGgoKSxcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmlzVmVydGljYWwsXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlzUGxhY2VkO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEVtcHR5Q2VsbHMocm93LCBjb2wsIGxlbmd0aCwgaXNWZXJ0aWNhbCwgdmFsdWUpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiNlbXB0eUNlbGxzW3JvdyArIGldW2NvbF0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuI2VtcHR5Q2VsbHNbcm93XVtjb2wgKyBpXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbiAgICAvKiAgUmVtb3ZlIFNoaXBzICovXHJcbiAgICBiaW5kUmVtb3ZlU2hpcHNFdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBibG9jayA9IGUudGFyZ2V0O1xyXG4gICAgICAgICAgICBpZiAoYmxvY2suY2xhc3NMaXN0LmNvbnRhaW5zKFwic2hpcC1ibG9ja1wiKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkNsaWNrUmVtb3ZlU2hpcEZyb21Cb2FyZChlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZVNoaXBGcm9tQm9hcmRCeUlkKGlkKSB7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYC5zaGlwW2RhdGEtaWQ9JyR7aWR9J11gKS5yZW1vdmUoKTtcclxuICAgICAgICB0aGlzLmluY3JlYXNlU2hpcENvdW50KHRoaXMuI3NoaXBzTGlzdFtpZF0ubGVuZ3RoKTtcclxuICAgICAgICB0aGlzLnNldEVtcHR5Q2VsbHMoXHJcbiAgICAgICAgICAgIHRoaXMuI3NoaXBzTGlzdFtpZF0ucm93LFxyXG4gICAgICAgICAgICB0aGlzLiNzaGlwc0xpc3RbaWRdLmNvbCxcclxuICAgICAgICAgICAgdGhpcy4jc2hpcHNMaXN0W2lkXS5sZW5ndGgsXHJcbiAgICAgICAgICAgIHRoaXMuI3NoaXBzTGlzdFtpZF0uaXNWZXJ0aWNhbCxcclxuICAgICAgICAgICAgdHJ1ZSxcclxuICAgICAgICApO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLiNzaGlwc0xpc3RbaWRdO1xyXG4gICAgICAgIC0tdGhpcy4jc2hpcHNQbGFjZWQ7XHJcbiAgICAgICAgRm9ybUhlbHBlci5kaXNhYmxlQnV0dG9uKHRoaXMuI2J0blN1Ym1pdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlQWxsU2hpcHNGcm9tQm9hcmQoKSB7XHJcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy4jc2hpcHNMaXN0KS5mb3JFYWNoKChpZCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZVNoaXBGcm9tQm9hcmRCeUlkKGlkKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNsaWNrUmVtb3ZlU2hpcEZyb21Cb2FyZChlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuI2FjdGl2ZU9yaWVudGF0aW9uSXNWZXJ0aWNhbCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGJsb2NrID0gZS50YXJnZXQ7XHJcbiAgICAgICAgY29uc3Qgc2hpcCA9IGJsb2NrLmNsb3Nlc3QoXCIuc2hpcFwiKTtcclxuICAgICAgICB0aGlzLnJlbW92ZVNoaXBGcm9tQm9hcmRCeUlkKHNoaXAuZGF0YXNldC5pZCk7XHJcbiAgICB9XHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAgIC8qIEJvYXJkIEFyZWEgKi9cclxuICAgIC8vIERPTSBFbGVtZW50c1xyXG4gICAgI2JvYXJkRWxlbWVudDtcclxuXHJcbiAgICAjZW1wdHlDZWxscztcclxuXHJcbiAgICAjcGxhY2VPcHRpb25zRWxlbWVudDtcclxuXHJcbiAgICAjYnRuVmVydGljYWw7XHJcblxyXG4gICAgI2J0bkhvcml6b250YWw7XHJcblxyXG4gICAgI2J0blJlbW92ZTtcclxuXHJcbiAgICAvLyBQcm9wZXJ0aWVzXHJcbiAgICAjYWN0aXZlT3JpZW50YXRpb25Jc1ZlcnRpY2FsO1xyXG5cclxuICAgIGluaXRCb2FyZEFyZWEoKSB7XHJcbiAgICAgICAgdGhpcy4jYWN0aXZlT3JpZW50YXRpb25Jc1ZlcnRpY2FsID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJCb2FyZCgpO1xyXG4gICAgICAgIHRoaXMuI2VtcHR5Q2VsbHMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuI2JvYXJkSGVpZ2h0OyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy4jZW1wdHlDZWxscy5wdXNoKFtdKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLiNib2FyZFdpZHRoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuI2VtcHR5Q2VsbHNbaV0ucHVzaCh0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjYWNoZUJvYXJkQXJlYURPTSgpIHtcclxuICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnQgPSB0aGlzLiNtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5ib2FyZFwiKTtcclxuICAgICAgICB0aGlzLiNwbGFjZU9wdGlvbnNFbGVtZW50ID0gdGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGxhY2Utb3B0aW9uc1wiKTtcclxuICAgICAgICB0aGlzLiNidG5Ib3Jpem9udGFsID0gdGhpcy4jcGxhY2VPcHRpb25zRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ0bi1oXCIpO1xyXG4gICAgICAgIHRoaXMuI2J0blZlcnRpY2FsID0gdGhpcy4jcGxhY2VPcHRpb25zRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ0bi12XCIpO1xyXG4gICAgICAgIHRoaXMuI2J0blJlbW92ZSA9IHRoaXMuI3BsYWNlT3B0aW9uc0VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5idG4tcmVtb3ZlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGJpbmRCb2FyZEFyZWFFdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy4jYnRuSG9yaXpvbnRhbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vbkNsaWNrU2V0UGxhY2VPcHRpb25BY3RpdmUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy4jYnRuVmVydGljYWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMub25DbGlja1NldFBsYWNlT3B0aW9uQWN0aXZlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMuI2J0blJlbW92ZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vbkNsaWNrU2V0UGxhY2VPcHRpb25BY3RpdmUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5iaW5kUGxhY2VTaGlwc0V2ZW50cygpO1xyXG4gICAgICAgIHRoaXMuYmluZFJlbW92ZVNoaXBzRXZlbnRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25DbGlja1NldFBsYWNlT3B0aW9uQWN0aXZlKGUpIHtcclxuICAgICAgICBjb25zdCBidXR0b25FbGVtZW50ID0gZS50YXJnZXQuY2xvc2VzdChcImJ1dHRvblwiKTtcclxuICAgICAgICBpZiAoYnV0dG9uRWxlbWVudCA9PT0gdGhpcy4jYnRuSG9yaXpvbnRhbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFBsYWNlT3B0aW9uQWN0aXZlKFwiaFwiKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvbkVsZW1lbnQgPT09IHRoaXMuI2J0blZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0UGxhY2VPcHRpb25BY3RpdmUoXCJ2XCIpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uRWxlbWVudCA9PT0gdGhpcy4jYnRuUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0UGxhY2VPcHRpb25BY3RpdmUoXCJ4XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRQbGFjZU9wdGlvbkFjdGl2ZShvcHRpb24pIHtcclxuICAgICAgICB0aGlzLiNidG5Ib3Jpem9udGFsLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgdGhpcy4jYnRuVmVydGljYWwuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgICAgICB0aGlzLiNidG5SZW1vdmUuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuXHJcbiAgICAgICAgbGV0IGFjdGl2ZUJ1dHRvbjtcclxuICAgICAgICBpZiAob3B0aW9uID09PSBcImhcIikge1xyXG4gICAgICAgICAgICB0aGlzLiNhY3RpdmVPcmllbnRhdGlvbklzVmVydGljYWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgYWN0aXZlQnV0dG9uID0gdGhpcy4jYnRuSG9yaXpvbnRhbDtcclxuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbiA9PT0gXCJ2XCIpIHtcclxuICAgICAgICAgICAgdGhpcy4jYWN0aXZlT3JpZW50YXRpb25Jc1ZlcnRpY2FsID0gdHJ1ZTtcclxuICAgICAgICAgICAgYWN0aXZlQnV0dG9uID0gdGhpcy4jYnRuVmVydGljYWw7XHJcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb24gPT09IFwieFwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI2FjdGl2ZU9yaWVudGF0aW9uSXNWZXJ0aWNhbCA9IG51bGw7XHJcbiAgICAgICAgICAgIGFjdGl2ZUJ1dHRvbiA9IHRoaXMuI2J0blJlbW92ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWN0aXZlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyQm9hcmQoKSB7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KFwiLS1ib2FyZC1ob3Jpem9udGFsLWNlbGxzXCIsIHRoaXMuI2JvYXJkV2lkdGgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy4jYm9hcmRXaWR0aCAqIHRoaXMuI2JvYXJkSGVpZ2h0OyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgYmxvY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBibG9jay5jbGFzc0xpc3QuYWRkKFwiYm9hcmQtYmxvY2tcIik7XHJcbiAgICAgICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudC5hcHBlbmQoYmxvY2spO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAgIC8qIFBhZ2luYXRpb24gKi9cclxuICAgIC8vIERPTSBFbGVtZW50c1xyXG4gICAgI3BhZ2VzQ29udGFpbmVyRWxlbWVudDtcclxuXHJcbiAgICAjY3VycmVudFBhZ2VFbGVtZW50O1xyXG5cclxuICAgICNsZWZ0QXJyb3dFbGVtZW50O1xyXG5cclxuICAgICNyaWdodEFycm93RWxlbWVudDtcclxuXHJcbiAgICAvLyBQcm9wZXJ0aWVzXHJcbiAgICAjY3VycmVudFBhZ2U7XHJcblxyXG4gICAgI3BhZ2VzTnVtO1xyXG5cclxuICAgICNwYWdlV2lkdGg7XHJcblxyXG4gICAgaW5pdFBhZ2luYXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy4jY3VycmVudFBhZ2UgPSAxO1xyXG4gICAgICAgIHRoaXMuI3BhZ2VzTnVtID0gdGhpcy4jcGFnZXNDb250YWluZXJFbGVtZW50LmNoaWxkcmVuLmxlbmd0aDtcclxuICAgICAgICB0aGlzLiNtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5wYWdlcy1udW1cIikudGV4dENvbnRlbnQgPSB0aGlzLiNwYWdlc051bTtcclxuICAgICAgICB0aGlzLiNwYWdlV2lkdGggPSBcIjEwMCVcIjtcclxuICAgICAgICB0aGlzLnVwZGF0ZVBhZ2luYXRpb25TdHlsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhY2hlUGFnaW5hdGlvbkRPTSgpIHtcclxuICAgICAgICB0aGlzLiNjdXJyZW50UGFnZUVsZW1lbnQgPSB0aGlzLm1vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmN1cnJlbnQtcGFnZVwiKTtcclxuICAgICAgICB0aGlzLiNsZWZ0QXJyb3dFbGVtZW50ID0gdGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubGVmdC1hcnJvd1wiKTtcclxuICAgICAgICB0aGlzLiNyaWdodEFycm93RWxlbWVudCA9IHRoaXMuI21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnJpZ2h0LWFycm93XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGJpbmRQYWdpbmF0aW9uRXZlbnRzKCkge1xyXG4gICAgICAgIHRoaXMuI21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmFycm93LWNvbnRhaW5lclwiKS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmNvbnRhaW5zKHRoaXMuI2xlZnRBcnJvd0VsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWdpbmF0ZUxlZnQoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5jb250YWlucyh0aGlzLiNyaWdodEFycm93RWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2luYXRlUmlnaHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcGFnaW5hdGVMZWZ0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLiNjdXJyZW50UGFnZSA9PT0gMSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIEFyZ3VtZW50IEV4Y2VwdGlvblwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLS10aGlzLiNjdXJyZW50UGFnZTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVBhZ2luYXRpb25TdHlsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHBhZ2luYXRlUmlnaHQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuI2N1cnJlbnRQYWdlID09PSB0aGlzLiNwYWdlc051bSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIEFyZ3VtZW50IEV4Y2VwdGlvblwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgKyt0aGlzLiNjdXJyZW50UGFnZTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVBhZ2luYXRpb25TdHlsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVBhZ2luYXRpb25TdHlsZSgpIHtcclxuICAgICAgICB0aGlzLiNwYWdlc0NvbnRhaW5lckVsZW1lbnQuc3R5bGUucmlnaHQgPSBgY2FsYygke3RoaXMuI2N1cnJlbnRQYWdlIC0gMX0gKiAke1xyXG4gICAgICAgICAgICB0aGlzLiNwYWdlV2lkdGhcclxuICAgICAgICB9KWA7XHJcbiAgICAgICAgaWYgKHRoaXMuI2N1cnJlbnRQYWdlID09PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI2xlZnRBcnJvd0VsZW1lbnQuY2xvc2VzdChcIi5hcnJvdy1jb250YWluZXJcIikuY2xhc3NMaXN0LmFkZChcImRpc2FibGVkXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuI2xlZnRBcnJvd0VsZW1lbnQuY2xvc2VzdChcIi5hcnJvdy1jb250YWluZXJcIikuY2xhc3NMaXN0LnJlbW92ZShcImRpc2FibGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy4jY3VycmVudFBhZ2UgPT09IHRoaXMuI3BhZ2VzTnVtKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI3JpZ2h0QXJyb3dFbGVtZW50LmNsb3Nlc3QoXCIuYXJyb3ctY29udGFpbmVyXCIpLmNsYXNzTGlzdC5hZGQoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLiNyaWdodEFycm93RWxlbWVudC5jbG9zZXN0KFwiLmFycm93LWNvbnRhaW5lclwiKS5jbGFzc0xpc3QucmVtb3ZlKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuI2N1cnJlbnRQYWdlRWxlbWVudC50ZXh0Q29udGVudCA9IHRoaXMuI2N1cnJlbnRQYWdlO1xyXG4gICAgfVxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbiAgICAvKiBHZW5lcmFsIEdldHRlcnMgKi9cclxuICAgIGdldCBtb2RhbENvbnRhaW5lckVsZW1lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI21vZGFsQ29udGFpbmVyRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbW9kYWxFbGVtZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNtb2RhbEVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U2hpcHNMaXN0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNzaGlwc0xpc3Q7XHJcbiAgICB9XHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PSAqL1xyXG59XHJcbiIsImltcG9ydCBQdWJTdWIgZnJvbSBcInB1YnN1Yi1qc1wiO1xyXG5pbXBvcnQgQm9hcmRIZWxwZXIgZnJvbSBcIi4uL1ZpZXdIZWxwZXIvYm9hcmRcIjtcclxuaW1wb3J0IGJvYXJkVGVtcGxhdGUgZnJvbSBcIi4uLy4uL2h0bWwvdGVtcGxhdGVzL2dhbWVib2FyZC10ZW1wbGF0ZS5oYW5kbGViYXJzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lYm9hcmRWaWV3IHtcclxuICAgICN3aWR0aDtcclxuXHJcbiAgICAjaGVpZ2h0O1xyXG5cclxuICAgICNib2FyZEVsZW1lbnQ7XHJcblxyXG4gICAgI3BsYXllclZpZXc7XHJcblxyXG4gICAgI2F1ZGlvU3BsYXNoO1xyXG5cclxuICAgICNhdWRpb0NyYXNoO1xyXG5cclxuICAgICNzaGlwc0xpc3Q7XHJcblxyXG4gICAgI3NoaXBzQmxvY2tzQm9hcmQ7XHJcblxyXG4gICAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCwgcGxheWVyVmlldywgc2hpcHNMaXN0KSB7XHJcbiAgICAgICAgdGhpcy4jd2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLiNoZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgdGhpcy4jcGxheWVyVmlldyA9IHBsYXllclZpZXc7XHJcbiAgICAgICAgdGhpcy4jc2hpcHNMaXN0ID0gc2hpcHNMaXN0O1xyXG4gICAgICAgIHRoaXMuI2F1ZGlvU3BsYXNoID0gbmV3IEF1ZGlvKFwiLi9hc3NldHMvc291bmRzL3NwbGFzaC53YXZcIik7XHJcbiAgICAgICAgdGhpcy4jYXVkaW9DcmFzaCA9IG5ldyBBdWRpbyhcIi4vYXNzZXRzL3NvdW5kcy9leHBsb2RlLWN1dC53YXZcIik7XHJcbiAgICAgICAgdGhpcy4jc2hpcHNCbG9ja3NCb2FyZCA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy4jaGVpZ2h0OyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy4jc2hpcHNCbG9ja3NCb2FyZC5wdXNoKFtdKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLiN3aWR0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiNzaGlwc0Jsb2Nrc0JvYXJkW2ldLnB1c2gobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgICAgICB0aGlzLmJpbmRFdmVudHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRCb2FyZEVsZW1lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI2JvYXJkRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGxheWVyVmlldygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jcGxheWVyVmlldztcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgY29uc3QgYmxvY2tzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLiNoZWlnaHQ7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuI3dpZHRoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGJsb2Nrcy5wdXNoKG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJib2FyZFwiKTtcclxuICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoXCItLWJvYXJkLWhvcml6b250YWwtY2VsbHNcIiwgdGhpcy4jd2lkdGgpO1xyXG4gICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudC5pbm5lckhUTUwgPSBib2FyZFRlbXBsYXRlKHsgYmxvY2tzIH0pO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmFkZFNoaXBzVG9Cb2FyZCgpO1xyXG4gICAgICAgIH0sIDIwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkU2hpcHNUb0JvYXJkKCkge1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuI3NoaXBzTGlzdCkuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMuI3NoaXBzTGlzdFtrZXldLmxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3Qgcm93ID0gdGhpcy4jc2hpcHNMaXN0W2tleV0ucm93O1xyXG4gICAgICAgICAgICBjb25zdCBjb2wgPSB0aGlzLiNzaGlwc0xpc3Rba2V5XS5jb2w7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzVmVydGljYWwgPSB0aGlzLiNzaGlwc0xpc3Rba2V5XS5pc1ZlcnRpY2FsO1xyXG4gICAgICAgICAgICBjb25zdCBzaGlwID0gQm9hcmRIZWxwZXIuY3JlYXRlU2hpcEVsZW1lbnQobGVuZ3RoLCBpc1ZlcnRpY2FsKTtcclxuICAgICAgICAgICAgQXJyYXkuZnJvbShzaGlwLmNoaWxkcmVuKS5mb3JFYWNoKChibG9jaykgPT4ge1xyXG4gICAgICAgICAgICAgICAgYmxvY2suY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHNoaXAuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRTaGlwc0Jsb2Nrc0JvYXJkKHJvdywgY29sLCBsZW5ndGgsIGlzVmVydGljYWwsIHNoaXApO1xyXG4gICAgICAgICAgICBCb2FyZEhlbHBlci5jcmVhdGVTaGlwT25Cb2FyZChcclxuICAgICAgICAgICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudCxcclxuICAgICAgICAgICAgICAgIHRoaXMuI3dpZHRoLFxyXG4gICAgICAgICAgICAgICAgcm93LFxyXG4gICAgICAgICAgICAgICAgY29sLFxyXG4gICAgICAgICAgICAgICAgbGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgaXNWZXJ0aWNhbCxcclxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIHNoaXAsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0U2hpcHNCbG9ja3NCb2FyZChyb3csIGNvbCwgbGVuZ3RoLCBpc1ZlcnRpY2FsLCBzaGlwKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoaXNWZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4jc2hpcHNCbG9ja3NCb2FyZFtyb3cgKyBpXVtjb2xdID0gc2hpcC5jaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuI3NoaXBzQmxvY2tzQm9hcmRbcm93XVtjb2wgKyBpXSA9IHNoaXAuY2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRXZlbnRzIEJpbmRpbmdcclxuICAgIGJpbmRFdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLnJlY2VpdmVBdHRhY2suYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVjZWl2ZUF0dGFjayhlKSB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImJvYXJkLWJsb2NrXCIpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gQXJyYXkuZnJvbSh0aGlzLiNib2FyZEVsZW1lbnQuY2hpbGRyZW4pLmluZGV4T2YoZS50YXJnZXQpO1xyXG4gICAgICAgICAgICBQdWJTdWIucHVibGlzaChcIkF0dGFja1JlY2VpdmVkXCIsIHtcclxuICAgICAgICAgICAgICAgIHJvdzogTWF0aC5mbG9vcihpbmRleCAvIHRoaXMuI3dpZHRoKSxcclxuICAgICAgICAgICAgICAgIGNvbDogaW5kZXggJSB0aGlzLiN3aWR0aCxcclxuICAgICAgICAgICAgICAgIGJvYXJkVmlldzogdGhpcyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGF0dGFja0ZhaWxlZChyb3csIGNvbCkge1xyXG4gICAgICAgIHRoaXMucGxheVNvdW5kKHRoaXMuI2F1ZGlvU3BsYXNoKTtcclxuICAgICAgICBjb25zdCBibG9ja0luZGV4ID0gQm9hcmRIZWxwZXIuZ2V0QmxvY2tJbmRleEZyb21Db29yZGluYXRlcyhyb3csIGNvbCwgdGhpcy4jd2lkdGgpO1xyXG4gICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudC5jaGlsZHJlbltibG9ja0luZGV4XS5jbGFzc0xpc3QuYWRkKFwiZGlzYWJsZWRcIiwgXCJpbmNvcnJlY3RcIik7XHJcbiAgICB9XHJcblxyXG4gICAgYXR0YWNrU3VjY2VkZWQocm93LCBjb2wsIGlzU3Vuaykge1xyXG4gICAgICAgIHRoaXMucGxheVNvdW5kKHRoaXMuI2F1ZGlvQ3Jhc2gpO1xyXG4gICAgICAgIGNvbnN0IGJsb2NrSW5kZXggPSBCb2FyZEhlbHBlci5nZXRCbG9ja0luZGV4RnJvbUNvb3JkaW5hdGVzKHJvdywgY29sLCB0aGlzLiN3aWR0aCk7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50LmNoaWxkcmVuW2Jsb2NrSW5kZXhdLmNsYXNzTGlzdC5hZGQoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICBjb25zdCBibG9jayA9IHRoaXMuI3NoaXBzQmxvY2tzQm9hcmRbcm93XVtjb2xdO1xyXG4gICAgICAgIGJsb2NrLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XHJcbiAgICAgICAgaWYgKGlzU3Vuaykge1xyXG4gICAgICAgICAgICBibG9jay5jbG9zZXN0KFwiLnNoaXBcIikuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcclxuICAgICAgICAgICAgYmxvY2suY2xvc2VzdChcIi5zaGlwXCIpLmNsYXNzTGlzdC5hZGQoXCJkZXN0cm95ZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHBsYXlTb3VuZChhdWRpbykge1xyXG4gICAgICAgIGF1ZGlvLnBhdXNlKCk7XHJcbiAgICAgICAgYXVkaW8uY3VycmVudFRpbWUgPSAwO1xyXG4gICAgICAgIGF1ZGlvLnBsYXkoKTtcclxuICAgIH1cclxuXHJcbiAgICBkaXNhYmxlQm9hcmQoKSB7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkaXNhYmxlZFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBlbmFibGVCb2FyZCgpIHtcclxuICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImRpc2FibGVkXCIpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBHYW1lYm9hcmRWaWV3IGZyb20gXCIuLi9HYW1lYm9hcmQvZ2FtZWJvYXJkLXZpZXdcIjtcclxuaW1wb3J0IHRlbXBsYXRlIGZyb20gXCIuLi8uLi9odG1sL3RlbXBsYXRlcy9wbGF5ZXItdGVtcGxhdGUuaGFuZGxlYmFyc1wiO1xyXG5pbXBvcnQgUGxheWVyVmlld0hlbHBlciBmcm9tIFwiLi9wbGF5ZXItdmlldy1oZWxwZXJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYXllclZpZXcge1xyXG4gICAgLy8gRE9NIEVsZW1lbnRzXHJcbiAgICAjcGxheWVyQXJlYUVsZW1lbnQ7XHJcblxyXG4gICAgLy8gUHJvcGVydGllc1xyXG4gICAgI2dhbWVWaWV3O1xyXG5cclxuICAgICNib2FyZFZpZXc7XHJcblxyXG4gICAgI3BsYXllck5hbWU7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZ2FtZVZpZXcsIHNoaXBzTGlzdCwgYm9hcmRXaWR0aCwgYm9hcmRIZWlnaHQsIHBsYXllck5hbWUpIHtcclxuICAgICAgICB0aGlzLiNnYW1lVmlldyA9IGdhbWVWaWV3O1xyXG4gICAgICAgIHRoaXMuI3BsYXllck5hbWUgPSBwbGF5ZXJOYW1lO1xyXG4gICAgICAgIHRoaXMucmVuZGVyKHNoaXBzTGlzdCk7XHJcbiAgICAgICAgdGhpcy5jYWNoZURPTSgpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlQm9hcmQoYm9hcmRXaWR0aCwgYm9hcmRIZWlnaHQsIHNoaXBzTGlzdCk7XHJcbiAgICAgICAgdGhpcy5pbml0U2hpcHNSZW1haW5lZChzaGlwc0xpc3QpO1xyXG4gICAgICAgIHRoaXMuaW5pdFNjb3JlKCk7XHJcbiAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FjaGVET00oKSB7XHJcbiAgICAgICAgdGhpcy5jYWNoZVR1cm5ET00oKTtcclxuICAgICAgICB0aGlzLmNhY2hlU2hpcHNSZW1haW5lZERPTSgpO1xyXG4gICAgICAgIHRoaXMuY2FjaGVTY29yZURPTSgpO1xyXG4gICAgICAgIHRoaXMuY2FjaGVEYXJrZW5pbmdET00oKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgdGhpcy4jcGxheWVyQXJlYUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIHRoaXMuI3BsYXllckFyZWFFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJwbGF5ZXItYXJlYVwiKTtcclxuICAgICAgICB0aGlzLiNwbGF5ZXJBcmVhRWxlbWVudC5pbm5lckhUTUwgPSB0ZW1wbGF0ZSh7fSk7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlQm9hcmQoYm9hcmRXaWR0aCwgYm9hcmRIZWlnaHQsIHNoaXBzTGlzdCkge1xyXG4gICAgICAgIHRoaXMuI2JvYXJkVmlldyA9IG5ldyBHYW1lYm9hcmRWaWV3KGJvYXJkV2lkdGgsIGJvYXJkSGVpZ2h0LCB0aGlzLCBzaGlwc0xpc3QpO1xyXG4gICAgICAgIHRoaXMuI3BsYXllckFyZWFFbGVtZW50XHJcbiAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKFwiLmJvYXJkXCIpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlV2l0aCh0aGlzLiNib2FyZFZpZXcuZ2V0Qm9hcmRFbGVtZW50KCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGJpbmRFdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy5iaW5kU2hpcHNSZW1haW5lZEV2ZW50cygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIFNoaXBzIFJlbWFpbmVkICovXHJcbiAgICAjc2hpcHNSZW1haW5lZEVsZW1lbnQ7XHJcblxyXG4gICAgI3NoaXBzRWxlbWVudDtcclxuXHJcbiAgICBpbml0U2hpcHNSZW1haW5lZChzaGlwc0xpc3QpIHtcclxuICAgICAgICB0aGlzLmFkZFNoaXBzVG9zaGlwc1JlbWFpbmVkRWxlbWVudChzaGlwc0xpc3QpO1xyXG4gICAgICAgIHRoaXMuaW5pdFNoaXBzUmVtYWluZWRQYWdpbmF0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FjaGVTaGlwc1JlbWFpbmVkRE9NKCkge1xyXG4gICAgICAgIHRoaXMuI3NoaXBzUmVtYWluZWRFbGVtZW50ID0gdGhpcy4jcGxheWVyQXJlYUVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgICAgICAgXCIuc2hpcHMtcmVtYWluZWQtY29udGFpbmVyLXJlc3BvbnNpdmVcIixcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuI3NoaXBzRWxlbWVudCA9IHRoaXMuI3NoaXBzUmVtYWluZWRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2hpcHNcIik7XHJcbiAgICAgICAgdGhpcy5jYWNoZVNoaXBzUmVtYWluZWRQYWdpbmF0aW9uRE9NKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYmluZFNoaXBzUmVtYWluZWRFdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy4jaW5mb0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgdGhpcy5tb3VzZUVudGVySW5mby5iaW5kKHRoaXMpKTtcclxuICAgICAgICB0aGlzLiNpbmZvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCB0aGlzLm1vdXNlTGVhdmVJbmZvLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMuYmluZFNoaXBzUmVtYWluZWRQYWdpbmF0aW9uRXZlbnRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkU2hpcHNUb3NoaXBzUmVtYWluZWRFbGVtZW50KHNoaXBzTGlzdCkge1xyXG4gICAgICAgIGNvbnN0IHNoaXBzTGlzdENvdW50ID0ge307XHJcbiAgICAgICAgT2JqZWN0LmtleXMoc2hpcHNMaXN0KS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gc2hpcHNMaXN0W2tleV0ubGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAoIXNoaXBzTGlzdENvdW50W2xlbmd0aF0pIHtcclxuICAgICAgICAgICAgICAgIHNoaXBzTGlzdENvdW50W2xlbmd0aF0gPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICsrc2hpcHNMaXN0Q291bnRbbGVuZ3RoXTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBzb3J0ZWRTaGlwTGlzdEtleXMgPSBPYmplY3Qua2V5cyhzaGlwc0xpc3RDb3VudCkuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xyXG4gICAgICAgIHNvcnRlZFNoaXBMaXN0S2V5cy5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICAgICAgdGhpcy4jc2hpcHNFbGVtZW50LmFwcGVuZChcclxuICAgICAgICAgICAgICAgIFBsYXllclZpZXdIZWxwZXIuY3JlYXRlU2hpcENvbnRhaW5lckVsZW1lbnQoa2V5LCBzaGlwc0xpc3RDb3VudFtrZXldKSxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzaW5rU2hpcChsZW5ndGgpIHtcclxuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy4jc2hpcHNSZW1haW5lZEVsZW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtbGVuZ3RoPVwiJHtsZW5ndGh9XCJdYCk7XHJcbiAgICAgICAgY29uc3QgY291bnRFbGVtZW50ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNvdW50XCIpO1xyXG4gICAgICAgIGNvbnN0IGxlZnQgPSBwYXJzZUludChjb3VudEVsZW1lbnQudGV4dENvbnRlbnQsIDEwKSAtIDE7XHJcbiAgICAgICAgaWYgKGxlZnQgPT09IDApIHtcclxuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmUoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb3VudEVsZW1lbnQudGV4dENvbnRlbnQgPSBsZWZ0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBtb3VzZUVudGVySW5mbygpIHtcclxuICAgICAgICB0aGlzLiNzaGlwc1JlbWFpbmVkRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaGVscFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBtb3VzZUxlYXZlSW5mbygpIHtcclxuICAgICAgICB0aGlzLiNzaGlwc1JlbWFpbmVkRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiaGVscFwiKTtcclxuICAgIH1cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gICAgLyogU2hpcHMgUmVtYWluZWQgUGFnaW5hdGlvbiAqL1xyXG4gICAgI3N0b3BTY3JvbGxpbmc7XHJcblxyXG4gICAgI2luZm9FbGVtZW50O1xyXG5cclxuICAgICNsZWZ0QXJyb3dDb250YWluZXJFbGVtZW50O1xyXG5cclxuICAgICNsZWZ0QXJyb3dFbGVtZW50O1xyXG5cclxuICAgICNyaWdodEFycm93Q29udGFpbmVyRWxlbWVudDtcclxuXHJcbiAgICAjcmlnaHRBcnJvd0VsZW1lbnQ7XHJcblxyXG4gICAgaW5pdFNoaXBzUmVtYWluZWRQYWdpbmF0aW9uKCkge1xyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlQXJyb3dzU3RhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy50b2dnbGVBcnJvd3NTdGF0ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNhY2hlU2hpcHNSZW1haW5lZFBhZ2luYXRpb25ET00oKSB7XHJcbiAgICAgICAgdGhpcy4jaW5mb0VsZW1lbnQgPSB0aGlzLiNzaGlwc1JlbWFpbmVkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmluZm9cIik7XHJcbiAgICAgICAgdGhpcy4jbGVmdEFycm93RWxlbWVudCA9IHRoaXMuI3NoaXBzUmVtYWluZWRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubGVmdC1hcnJvd1wiKTtcclxuICAgICAgICB0aGlzLiNsZWZ0QXJyb3dDb250YWluZXJFbGVtZW50ID0gdGhpcy4jbGVmdEFycm93RWxlbWVudC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuI3JpZ2h0QXJyb3dFbGVtZW50ID0gdGhpcy4jc2hpcHNSZW1haW5lZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5yaWdodC1hcnJvd1wiKTtcclxuICAgICAgICB0aGlzLiNyaWdodEFycm93Q29udGFpbmVyRWxlbWVudCA9IHRoaXMuI3JpZ2h0QXJyb3dFbGVtZW50LnBhcmVudEVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgYmluZFNoaXBzUmVtYWluZWRQYWdpbmF0aW9uRXZlbnRzKCkge1xyXG4gICAgICAgIGNvbnN0IHNjcm9sbFN0ZXAgPSAxODA7XHJcblxyXG4gICAgICAgIHRoaXMuI2xlZnRBcnJvd0NvbnRhaW5lckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zY3JvbGwoLXNjcm9sbFN0ZXApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLiNyaWdodEFycm93Q29udGFpbmVyRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNjcm9sbChzY3JvbGxTdGVwKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy4jbGVmdEFycm93Q29udGFpbmVyRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zdG9wU2Nyb2xsaW5nKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuI3JpZ2h0QXJyb3dDb250YWluZXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnN0b3BTY3JvbGxpbmcoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzY3JvbGwodmFsdWUpIHtcclxuICAgICAgICBjb25zdCB0YXJnZXREaXN0YW5jZSA9IHRoaXMuZ2V0UmVzcG9uc2l2ZVNjcm9sbCgpICsgdmFsdWU7XHJcbiAgICAgICAgY29uc3Qgc2Nyb2xsRGlyZWN0aW9uID0gdmFsdWUgPiAwID8gXCJyaWdodFwiIDogXCJsZWZ0XCI7XHJcbiAgICAgICAgdGhpcy4jc3RvcFNjcm9sbGluZyA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrSWZTY3JlZW5TbWFsbCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI3NoaXBzRWxlbWVudC5zY3JvbGxUb3AgKz0gdmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy4jc2hpcHNFbGVtZW50LnNjcm9sbExlZnQgKz0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5rZWVwU2Nyb2xsaW5nKHJlc29sdmUsIHJlamVjdCwgdGFyZ2V0RGlzdGFuY2UsIHNjcm9sbERpcmVjdGlvbik7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGwodmFsdWUpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goKCkgPT4ge30pXHJcbiAgICAgICAgICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlQXJyb3dzU3RhdGUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAga2VlcFNjcm9sbGluZyhyZXNvbHZlLCByZWplY3QsIHRhcmdldERpc3RhbmNlLCBzY3JvbGxEaXJlY3Rpb24pIHtcclxuICAgICAgICBpZiAodGhpcy5nZXRSZXNwb25zaXZlU2Nyb2xsKCkgPT09IHRhcmdldERpc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHRoaXMuI3N0b3BTY3JvbGxpbmcgfHxcclxuICAgICAgICAgICAgKHNjcm9sbERpcmVjdGlvbiA9PT0gXCJsZWZ0XCIgJiYgdGhpcy5jaGVja0lmTGVmdE1vc3RSZWFjaGVkKCkpIHx8XHJcbiAgICAgICAgICAgIChzY3JvbGxEaXJlY3Rpb24gPT09IFwicmlnaHRcIiAmJiB0aGlzLmNoZWNrSWZSaWdodE1vc3RSZWFjaGVkKCkpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJlamVjdCgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMua2VlcFNjcm9sbGluZyhyZXNvbHZlLCByZWplY3QsIHRhcmdldERpc3RhbmNlLCBzY3JvbGxEaXJlY3Rpb24pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrSWZMZWZ0TW9zdFJlYWNoZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVzcG9uc2l2ZVNjcm9sbCgpID09PSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrSWZSaWdodE1vc3RSZWFjaGVkKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrSWZTY3JlZW5TbWFsbCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICB0aGlzLiNzaGlwc0VsZW1lbnQuc2Nyb2xsSGVpZ2h0IC0gdGhpcy4jc2hpcHNFbGVtZW50LmNsaWVudEhlaWdodCA9PT1cclxuICAgICAgICAgICAgICAgIHRoaXMuI3NoaXBzRWxlbWVudC5zY3JvbGxUb3BcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgdGhpcy4jc2hpcHNFbGVtZW50LnNjcm9sbFdpZHRoIC0gdGhpcy4jc2hpcHNFbGVtZW50LmNsaWVudFdpZHRoID09PVxyXG4gICAgICAgICAgICB0aGlzLiNzaGlwc0VsZW1lbnQuc2Nyb2xsTGVmdFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlQXJyb3dzU3RhdGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tJZkxlZnRNb3N0UmVhY2hlZCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI2xlZnRBcnJvd0NvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImRpc2FibGVkXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuI2xlZnRBcnJvd0NvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImRpc2FibGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jaGVja0lmUmlnaHRNb3N0UmVhY2hlZCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI3JpZ2h0QXJyb3dDb250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLiNyaWdodEFycm93Q29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0b3BTY3JvbGxpbmcoKSB7XHJcbiAgICAgICAgdGhpcy4jc3RvcFNjcm9sbGluZyA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UmVzcG9uc2l2ZVNjcm9sbCgpIHtcclxuICAgICAgICBpZiAodGhpcy5jaGVja0lmU2NyZWVuU21hbGwoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy4jc2hpcHNFbGVtZW50LnNjcm9sbFRvcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI3NoaXBzRWxlbWVudC5zY3JvbGxMZWZ0O1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrSWZTY3JlZW5TbWFsbCgpIHtcclxuICAgICAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLiNsZWZ0QXJyb3dDb250YWluZXJFbGVtZW50KS50cmFuc2Zvcm0gIT09IFwibm9uZVwiO1xyXG4gICAgfVxyXG5cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gICAgLyogVHVybiAqL1xyXG4gICAgI3R1cm5MYWJlbEVsZW1lbnQ7XHJcblxyXG4gICAgY2FjaGVUdXJuRE9NKCkge1xyXG4gICAgICAgIHRoaXMuI3R1cm5MYWJlbEVsZW1lbnQgPSB0aGlzLiNwbGF5ZXJBcmVhRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnR1cm4tY29udGFpbmVyXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFR1cm4oKSB7XHJcbiAgICAgICAgdGhpcy5zaG93VHVybkxhYmVsKCk7XHJcbiAgICAgICAgdGhpcy5kYXJrZW4oKTtcclxuICAgIH1cclxuXHJcbiAgICB1bnNldFR1cm4oKSB7XHJcbiAgICAgICAgdGhpcy5oaWRlVHVybkxhYmVsKCk7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVEYXJrZW5pbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93VHVybkxhYmVsKCkge1xyXG4gICAgICAgIHRoaXMuI3R1cm5MYWJlbEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBoaWRlVHVybkxhYmVsKCkge1xyXG4gICAgICAgIHRoaXMuI3R1cm5MYWJlbEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgIH1cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gICAgLyogU2NvcmUgKi9cclxuICAgICNzY29yZUVsZW1lbnQ7XHJcblxyXG4gICAgI3BsYXllck5hbWVFbGVtZW50O1xyXG5cclxuICAgICN3aW5zRWxlbWVudDtcclxuXHJcbiAgICAjbG9zc2VzRWxlbWVudDtcclxuXHJcbiAgICBpbml0U2NvcmUoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRQbGF5ZXJOYW1lKHRoaXMuI3BsYXllck5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhY2hlU2NvcmVET00oKSB7XHJcbiAgICAgICAgdGhpcy4jc2NvcmVFbGVtZW50ID0gdGhpcy4jcGxheWVyQXJlYUVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5zY29yZS1jb250YWluZXJcIik7XHJcbiAgICAgICAgdGhpcy4jcGxheWVyTmFtZUVsZW1lbnQgPSB0aGlzLiNzY29yZUVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5uYW1lXCIpO1xyXG4gICAgICAgIHRoaXMuI3dpbnNFbGVtZW50ID0gdGhpcy4jc2NvcmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud2luc1wiKTtcclxuICAgICAgICB0aGlzLiNsb3NzZXNFbGVtZW50ID0gdGhpcy4jc2NvcmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubG9zc2VzXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFBsYXllck5hbWUodmFsdWUpIHtcclxuICAgICAgICB0aGlzLiNwbGF5ZXJOYW1lRWxlbWVudC50ZXh0Q29udGVudCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFdpbnModmFsdWUpIHtcclxuICAgICAgICB0aGlzLiN3aW5zRWxlbWVudC50ZXh0Q29udGVudCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGluY3JlYXNlV2lucygpIHtcclxuICAgICAgICB0aGlzLiN3aW5zRWxlbWVudC50ZXh0Q29udGVudCA9IHBhcnNlSW50KHRoaXMuI3dpbnNFbGVtZW50LnRleHRDb250ZW50LCAxMCkgKyAxO1xyXG4gICAgfVxyXG5cclxuICAgIHNldExvc3Nlcyh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuI2xvc3Nlc0VsZW1lbnQudGV4dENvbnRlbnQgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBpbmNyZWFzZUxvc3NlcygpIHtcclxuICAgICAgICB0aGlzLiNsb3NzZXNFbGVtZW50LnRleHRDb250ZW50ID0gcGFyc2VJbnQodGhpcy4jbG9zc2VzRWxlbWVudC50ZXh0Q29udGVudCwgMTApICsgMTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93U2NvcmUoKSB7XHJcbiAgICAgICAgdGhpcy4jc2NvcmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgaGlkZVNjb3JlKCkge1xyXG4gICAgICAgIHRoaXMuI3Njb3JlRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgfVxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbiAgICAvKiBHZW5lcmFsIEdldHRlcnMgKi9cclxuICAgIGdldCBnYW1lVmlldygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jZ2FtZVZpZXc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGJvYXJkVmlldygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jYm9hcmRWaWV3O1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBsYXllckFyZWFFbGVtZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNwbGF5ZXJBcmVhRWxlbWVudDtcclxuICAgIH1cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gICAgLyogRGFya2VuaW5nICovXHJcbiAgICAjZGFya2VuaW5nRWxlbWVudDtcclxuXHJcbiAgICBjYWNoZURhcmtlbmluZ0RPTSgpIHtcclxuICAgICAgICB0aGlzLiNkYXJrZW5pbmdFbGVtZW50ID0gdGhpcy4jcGxheWVyQXJlYUVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5kYXJrZW5pbmdcIik7XHJcbiAgICB9XHJcblxyXG4gICAgZGFya2VuKCkge1xyXG4gICAgICAgIHRoaXMuI2RhcmtlbmluZ0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVEYXJrZW5pbmcoKSB7XHJcbiAgICAgICAgdGhpcy4jZGFya2VuaW5nRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gICAgc2hvd1dpbkxhYmVsKCkge1xyXG4gICAgICAgIHRoaXMuI3R1cm5MYWJlbEVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQuaW5uZXJUZXh0ID0gXCJZb3UgV29uXCI7XHJcbiAgICAgICAgdGhpcy5zaG93VHVybkxhYmVsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2hvd0xvc2VMYWJlbCgpIHtcclxuICAgICAgICB0aGlzLiN0dXJuTGFiZWxFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkLmlubmVyVGV4dCA9IFwiWW91IExvc3RcIjtcclxuICAgICAgICB0aGlzLnNob3dUdXJuTGFiZWwoKTtcclxuICAgIH1cclxuXHJcbiAgICBkaXNhYmxlQm9hcmQoKSB7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRWaWV3LmRpc2FibGVCb2FyZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGVuYWJsZUJvYXJkKCkge1xyXG4gICAgICAgIHRoaXMuI2JvYXJkVmlldy5lbmFibGVCb2FyZCgpO1xyXG4gICAgfVxyXG59XHJcbiIsImNvbnN0IENvbnRhaW5lckhlbHBlciA9ICgoKSA9PiB7XHJcbiAgICBmdW5jdGlvbiByZW1vdmVXb29kZW5Db250YWluZXIoY29udGFpbmVyRWxlbWVudCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICBjb250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIiwgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChlLnByb3BlcnR5TmFtZSA9PT0gXCJib3R0b21cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkaXNwbGF5V29vZGVuQ29udGFpbmVyKHBhcmVudEVsZW1lbnQsIGNvbnRhaW5lckVsZW1lbnQpIHtcclxuICAgICAgICBwYXJlbnRFbGVtZW50LmFwcGVuZChjb250YWluZXJFbGVtZW50KTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgIH0sIDI1KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjcmVhdGVQYXVzZUNvbnRhaW5lcigpIHtcclxuICAgICAgICBjb25zdCBwYXVzZUNvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIHBhdXNlQ29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwicGF1c2UtY29udGFpbmVyXCIpO1xyXG4gICAgICAgIHJldHVybiBwYXVzZUNvbnRhaW5lckVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZW1vdmVXb29kZW5Db250YWluZXIsXHJcbiAgICAgICAgZGlzcGxheVdvb2RlbkNvbnRhaW5lcixcclxuICAgICAgICBjcmVhdGVQYXVzZUNvbnRhaW5lcixcclxuICAgIH07XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb250YWluZXJIZWxwZXI7XHJcbiIsImltcG9ydCBDaG9vc2luZ1NoaXBzTW9kYWwgZnJvbSBcIi4uL01vZGFscy9zaGlwcy1jaG9vc2luZy1tb2RhbFwiO1xyXG5pbXBvcnQgUnVsZXNNb2RhbCBmcm9tIFwiLi4vTW9kYWxzL3J1bGVzLW1vZGFsXCI7XHJcbmltcG9ydCBHYW1lVHlwZU1vZGFsIGZyb20gXCIuLi9Nb2RhbHMvZ2FtZS10eXBlLW1vZGFsXCI7XHJcbmltcG9ydCBHcmlkU2l6ZU1vZGFsIGZyb20gXCIuLi9Nb2RhbHMvZ3JpZC1zaXplLW1vZGFsXCI7XHJcbmltcG9ydCBTaGlwc1BsYWNpbmdNb2RhbCBmcm9tIFwiLi4vTW9kYWxzL3NoaXBzLXBsYWNpbmctbW9kYWxcIjtcclxuaW1wb3J0IEdhbWVBcmVuYSBmcm9tIFwiLi4vLi4vaHRtbC90ZW1wbGF0ZXMvZ2FtZS1hcmVuYS5oYW5kbGViYXJzXCI7XHJcbmltcG9ydCBQbGF5ZXJWaWV3IGZyb20gXCIuLi9QbGF5ZXIvcGxheWVyLXZpZXdcIjtcclxuaW1wb3J0IEdhbWVDb250cm9sbGVyIGZyb20gXCIuL2dhbWUtY29udHJvbGxlclwiO1xyXG5pbXBvcnQgQ29udGFpbmVySGVscGVyIGZyb20gXCIuLi9WaWV3SGVscGVyL2NvbnRhaW5lclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZVZpZXcge1xyXG4gICAgLy8gRE9NIEVsZW1lbnRzXHJcbiAgICAjZ2FtZTtcclxuXHJcbiAgICAjcm9vdEVsZW1lbnQ7XHJcblxyXG4gICAgI2dhbWVBcmVuYUVsZW1lbnQ7XHJcblxyXG4gICAgI3JvdW5kc0VsZW1lbnQ7XHJcblxyXG4gICAgI3JvdW5kc1RleHRFbGVtZW50O1xyXG5cclxuICAgICNyb3VuZHNOdW1iZXJFbGVtZW50O1xyXG5cclxuICAgICNwYXVzZUNvbnRhaW5lckVsZW1lbnQ7XHJcblxyXG4gICAgLy8gUHJvcGVydGllc1xyXG4gICAgI2lkO1xyXG5cclxuICAgICNwbGF5ZXJzVmlld3M7XHJcblxyXG4gICAgI2h1bWFuTnVtYmVyO1xyXG5cclxuICAgICNib2FyZFdpZHRoO1xyXG5cclxuICAgICNib2FyZEhlaWdodDtcclxuXHJcbiAgICAjc2hpcHNMaXN0O1xyXG5cclxuICAgICNwbGF5ZXJzO1xyXG5cclxuICAgICNjdXJyZW50TW9kYWxJbmRleDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBwYXJlbnQsIGlkKSB7XHJcbiAgICAgICAgdGhpcy4jZ2FtZSA9IGdhbWU7XHJcbiAgICAgICAgdGhpcy4jaWQgPSBpZDtcclxuICAgICAgICB0aGlzLmNyZWF0ZVJvb3RFbGVtZW50KHRoaXMuI2lkKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVBhdXNlQ29udGFpbmVyKCk7XHJcbiAgICAgICAgcGFyZW50LmFwcGVuZCh0aGlzLiNyb290RWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlUm9vdEVsZW1lbnQoKSB7XHJcbiAgICAgICAgdGhpcy4jcm9vdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIHRoaXMuI3Jvb3RFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJnYW1lLWNvbnRhaW5lclwiKTtcclxuICAgICAgICB0aGlzLiNyb290RWxlbWVudC5kYXRhc2V0LmdhbWVJZCA9IHRoaXMuI2lkO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVBhdXNlQ29udGFpbmVyKCkge1xyXG4gICAgICAgIHRoaXMuI3BhdXNlQ29udGFpbmVyRWxlbWVudCA9IENvbnRhaW5lckhlbHBlci5jcmVhdGVQYXVzZUNvbnRhaW5lcigpO1xyXG4gICAgICAgIHRoaXMuI3Jvb3RFbGVtZW50LmFwcGVuZCh0aGlzLiNwYXVzZUNvbnRhaW5lckVsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBnYW1lKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNnYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIEdhbWUgQXJlbmEgKi9cclxuICAgIGNyZWF0ZUdhbWVBcmVuYSgpIHtcclxuICAgICAgICB0aGlzLmNhY2hlR2FtZUFyZW5hRE9NKCk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVQbGF5ZXJzVmlld3MoKTtcclxuICAgICAgICB0aGlzLiNmaXJzdFBsYXllckFyZW5hRWxlbWVudC5hcHBlbmQodGhpcy5nZXRQbGF5ZXJWaWV3KDApLmdldFBsYXllckFyZWFFbGVtZW50KCkpO1xyXG4gICAgICAgIHRoaXMuI3NlY29uZFBsYXllckFyZW5hRWxlbWVudC5hcHBlbmQodGhpcy5nZXRQbGF5ZXJWaWV3KDEpLmdldFBsYXllckFyZWFFbGVtZW50KCkpO1xyXG4gICAgICAgIHRoaXMuI3Jvb3RFbGVtZW50LmFwcGVuZCh0aGlzLiNnYW1lQXJlbmFFbGVtZW50KTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVN0YXJ0R2FtZUxhYmVsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FjaGVHYW1lQXJlbmFET00oKSB7XHJcbiAgICAgICAgdGhpcy4jZ2FtZUFyZW5hRWxlbWVudCA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoXHJcbiAgICAgICAgICAgIEdhbWVBcmVuYSgpLFxyXG4gICAgICAgICAgICBcInRleHQvaHRtbFwiLFxyXG4gICAgICAgICkuYm9keS5maXJzdEVsZW1lbnRDaGlsZDtcclxuICAgICAgICB0aGlzLiNyb3VuZHNFbGVtZW50ID0gdGhpcy4jZ2FtZUFyZW5hRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnJvdW5kcy1jb250YWluZXJcIik7XHJcbiAgICAgICAgdGhpcy4jcm91bmRzVGV4dEVsZW1lbnQgPSB0aGlzLiNyb3VuZHNFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJwXCIpO1xyXG4gICAgICAgIHRoaXMuI3JvdW5kc051bWJlckVsZW1lbnQgPSB0aGlzLiNyb3VuZHNUZXh0RWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnJvdW5kLW51bVwiKTtcclxuICAgICAgICB0aGlzLmNhY2hlUGxheWVyc0FyZWFzRE9NKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT0gKi9cclxuICAgIGVuZEdhbWUod2lubmVySW5kZXgpIHtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLiNwbGF5ZXJzVmlld3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuI3BsYXllcnNWaWV3c1tpXS5oaWRlVHVybkxhYmVsKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiNwbGF5ZXJzVmlld3NbaV0uZGlzYWJsZUJvYXJkKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiNwbGF5ZXJzVmlld3NbaV0ucmVtb3ZlRGFya2VuaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gd2lubmVySW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiNwbGF5ZXJzVmlld3NbaV0uc2hvd1dpbkxhYmVsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jcGxheWVyc1ZpZXdzW2ldLmluY3JlYXNlV2lucygpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiNwbGF5ZXJzVmlld3NbaV0uc2hvd0xvc2VMYWJlbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3BsYXllcnNWaWV3c1tpXS5pbmNyZWFzZUxvc3NlcygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlTmV4dEdhbWVMYWJlbCgpO1xyXG4gICAgICAgICAgICB0aGlzLiNwYXVzZUNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInNlbWktYWN0aXZlXCIpO1xyXG4gICAgICAgIH0sIDMwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyogTmV4dCBHYW1lIEJ1dHRvbiAqL1xyXG4gICAgI25leHRHYW1lQ29udGFpbmVyRWxlbWVudDtcclxuXHJcbiAgICBjcmVhdGVOZXh0R2FtZUxhYmVsKCkge1xyXG4gICAgICAgIHRoaXMuI25leHRHYW1lQ29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy4jbmV4dEdhbWVDb250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJuZXh0LWdhbWUtY29udGFpbmVyXCIpO1xyXG4gICAgICAgIGNvbnN0IGJ0bk5leHRHYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICAgICAgICBidG5OZXh0R2FtZS50ZXh0Q29udGVudCA9IFwiTmV4dCBHYW1lXCI7XHJcbiAgICAgICAgdGhpcy4jbmV4dEdhbWVDb250YWluZXJFbGVtZW50LmFwcGVuZChidG5OZXh0R2FtZSk7XHJcbiAgICAgICAgdGhpcy4jcm9vdEVsZW1lbnQuYXBwZW5kKHRoaXMuI25leHRHYW1lQ29udGFpbmVyRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5iaW5kTmV4dEdhbWVCdXR0b25FdmVudHMoYnRuTmV4dEdhbWUpO1xyXG4gICAgICAgIENvbnRhaW5lckhlbHBlci5kaXNwbGF5V29vZGVuQ29udGFpbmVyKHRoaXMuI3Jvb3RFbGVtZW50LCB0aGlzLiNuZXh0R2FtZUNvbnRhaW5lckVsZW1lbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIGJpbmROZXh0R2FtZUJ1dHRvbkV2ZW50cyhidXR0b24pIHtcclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuTmV4dEdhbWVCdXR0b25DbGljay5iaW5kKHRoaXMpKTtcclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgdGhpcy5kaXNwbGF5U2NvcmVzLmJpbmQodGhpcykpO1xyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCB0aGlzLmhpZGVTY29yZXMuYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgTmV4dEdhbWVCdXR0b25DbGljaygpIHtcclxuICAgICAgICBhd2FpdCBDb250YWluZXJIZWxwZXIucmVtb3ZlV29vZGVuQ29udGFpbmVyKHRoaXMuI25leHRHYW1lQ29udGFpbmVyRWxlbWVudCk7XHJcbiAgICAgICAgR2FtZUNvbnRyb2xsZXIuZ2VuZXJhdGVOZXh0Um91bmQodGhpcy4jZ2FtZSwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbiAgICAvKiBTdGFydCBHYW1lIEJ1dHRvbiAqL1xyXG4gICAgI3N0YXJ0R2FtZUNvbnRhaW5lckVsZW1lbnQ7XHJcblxyXG4gICAgY3JlYXRlU3RhcnRHYW1lTGFiZWwoKSB7XHJcbiAgICAgICAgdGhpcy4jc3RhcnRHYW1lQ29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy4jc3RhcnRHYW1lQ29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwic3RhcnQtZ2FtZS1jb250YWluZXJcIik7XHJcbiAgICAgICAgY29uc3QgYnRuU3RhcnRHYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcclxuICAgICAgICBidG5TdGFydEdhbWUudGV4dENvbnRlbnQgPSBcIlN0YXJ0IEdhbWVcIjtcclxuICAgICAgICB0aGlzLiNzdGFydEdhbWVDb250YWluZXJFbGVtZW50LmFwcGVuZChidG5TdGFydEdhbWUpO1xyXG4gICAgICAgIHRoaXMuI3Jvb3RFbGVtZW50LmFwcGVuZCh0aGlzLiNzdGFydEdhbWVDb250YWluZXJFbGVtZW50KTtcclxuICAgICAgICB0aGlzLmJpbmRTdGFydEdhbWVCdXR0b25FdmVudHMoYnRuU3RhcnRHYW1lKTtcclxuICAgICAgICBDb250YWluZXJIZWxwZXIuZGlzcGxheVdvb2RlbkNvbnRhaW5lcih0aGlzLiNyb290RWxlbWVudCwgdGhpcy4jc3RhcnRHYW1lQ29udGFpbmVyRWxlbWVudCk7XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5U2NvcmVzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYmluZFN0YXJ0R2FtZUJ1dHRvbkV2ZW50cyhidXR0b24pIHtcclxuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuc3RhcnRHYW1lQnV0dG9uQ2xpY2suYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc3RhcnRHYW1lQnV0dG9uQ2xpY2soKSB7XHJcbiAgICAgICAgdGhpcy5oaWRlU2NvcmVzKCk7XHJcbiAgICAgICAgYXdhaXQgQ29udGFpbmVySGVscGVyLnJlbW92ZVdvb2RlbkNvbnRhaW5lcih0aGlzLiNzdGFydEdhbWVDb250YWluZXJFbGVtZW50KTtcclxuICAgICAgICBHYW1lQ29udHJvbGxlci5zdGFydEdhbWUodGhpcy4jZ2FtZSwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5zY3JvbGxUb0VuZW15QXJlYSh0aGlzLiNnYW1lLmN1cnJlbnRFbmVteUluZGV4KTtcclxuICAgIH1cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gICAgLyogUGxheWVycyBBcmVhcyAqL1xyXG4gICAgI2ZpcnN0UGxheWVyQXJlbmFFbGVtZW50O1xyXG5cclxuICAgICNzZWNvbmRQbGF5ZXJBcmVuYUVsZW1lbnQ7XHJcblxyXG4gICAgY2FjaGVQbGF5ZXJzQXJlYXNET00oKSB7XHJcbiAgICAgICAgdGhpcy4jZmlyc3RQbGF5ZXJBcmVuYUVsZW1lbnQgPSB0aGlzLiNnYW1lQXJlbmFFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZmlyc3QtcGxheWVyLWFyZW5hXCIpO1xyXG4gICAgICAgIHRoaXMuI3NlY29uZFBsYXllckFyZW5hRWxlbWVudCA9XHJcbiAgICAgICAgICAgIHRoaXMuI2dhbWVBcmVuYUVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5zZWNvbmQtcGxheWVyLWFyZW5hXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVBsYXllcnNWaWV3cygpIHtcclxuICAgICAgICB0aGlzLiNwbGF5ZXJzVmlld3MgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuI3BsYXllcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgcGxheWVyVmlldyA9IG5ldyBQbGF5ZXJWaWV3KFxyXG4gICAgICAgICAgICAgICAgdGhpcyxcclxuICAgICAgICAgICAgICAgIHRoaXMuI3BsYXllcnNbaV0uc2hpcHMsXHJcbiAgICAgICAgICAgICAgICB0aGlzLiNib2FyZFdpZHRoLFxyXG4gICAgICAgICAgICAgICAgdGhpcy4jYm9hcmRIZWlnaHQsXHJcbiAgICAgICAgICAgICAgICB0aGlzLiNwbGF5ZXJzW2ldLm5hbWUsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuI3BsYXllcnNWaWV3cy5wdXNoKHBsYXllclZpZXcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhZGRQbGF5ZXJWaWV3KHBsYXllclZpZXcpIHtcclxuICAgICAgICB0aGlzLiNwbGF5ZXJzVmlld3MucHVzaChwbGF5ZXJWaWV3KTtcclxuICAgIH1cclxuXHJcbiAgICBkaXNwbGF5U2NvcmVzKCkge1xyXG4gICAgICAgIHRoaXMuI3BhdXNlQ29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgIHRoaXMuI3BhdXNlQ29udGFpbmVyRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICAgICAgICBcInRyYW5zaXRpb25lbmRcIixcclxuICAgICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLiNwbGF5ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jcGxheWVyc1ZpZXdzW2ldLnNob3dTY29yZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7IG9uY2U6IHRydWUgfSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGhpZGVTY29yZXMoKSB7XHJcbiAgICAgICAgdGhpcy4jcGF1c2VDb250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLiNwbGF5ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI3BsYXllcnNWaWV3c1tpXS5oaWRlU2NvcmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlU2NvcmVzKHNjb3Jlcykge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy4jcGxheWVyc1ZpZXdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI3BsYXllcnNWaWV3c1tpXS5zZXRXaW5zKHNjb3Jlc1tpXS53aW5zKTtcclxuICAgICAgICAgICAgdGhpcy4jcGxheWVyc1ZpZXdzW2ldLnNldExvc3NlcyhzY29yZXNbaV0ubG9zc2VzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBsYXllcnNWaWV3cygpIHtcclxuICAgICAgICByZXR1cm4gWy4uLnRoaXMuI3BsYXllcnNWaWV3c107XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UGxheWVyVmlldyhwbGF5ZXJJbmRleCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNwbGF5ZXJzVmlld3NbcGxheWVySW5kZXhdO1xyXG4gICAgfVxyXG5cclxuICAgIHNjcm9sbFRvRW5lbXlBcmVhKGVuZW15SW5kZXgpIHtcclxuICAgICAgICBpZiAoZW5lbXlJbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLiNmaXJzdFBsYXllckFyZW5hRWxlbWVudC5zY3JvbGxJbnRvVmlldygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuI3NlY29uZFBsYXllckFyZW5hRWxlbWVudC5zY3JvbGxJbnRvVmlldygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAgIGNoYW5nZVR1cm4obmV3VHVybiwgZW5lbXlJbmRleCkge1xyXG4gICAgICAgIHRoaXMuI3JvdW5kc051bWJlckVsZW1lbnQuaW5uZXJUZXh0ID0gbmV3VHVybjtcclxuICAgICAgICBjb25zdCByb3RhdGlvbiA9IGdldENvbXB1dGVkU3R5bGUodGhpcy4jcm91bmRzRWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZShcIi0tYW5nbGVcIik7XHJcbiAgICAgICAgaWYgKHJvdGF0aW9uLnRyaW0oKSA9PT0gXCIwZGVnXCIpIHtcclxuICAgICAgICAgICAgdGhpcy4jcm91bmRzRWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tYW5nbGVcIiwgXCIxODBkZWdcIik7XHJcbiAgICAgICAgICAgIC8vIFRleHQgcm90YXRlcyB3aXRoIHBhcmVudCBzbyB3ZSBhZGQgMTgwIGRlZyBhZnRlciAxODAgZGVnIGZyb20gcGFyZW50J3Mgcm9hdGF0aW9uXHJcbiAgICAgICAgICAgIHRoaXMuI3JvdW5kc1RleHRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KFwiLS1hbmdsZVwiLCBcIjE4MGRlZ1wiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLiNyb3VuZHNFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KFwiLS1hbmdsZVwiLCBcIjBkZWdcIik7XHJcbiAgICAgICAgICAgIHRoaXMuI3JvdW5kc1RleHRFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KFwiLS1hbmdsZVwiLCBcIjBkZWdcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2Nyb2xsVG9FbmVteUFyZWEoZW5lbXlJbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgbmV3R2FtZShmcmVzaFN0YXJ0ID0gdHJ1ZSwgcGxheWVyc05hbWVzID0gW10pIHtcclxuICAgICAgICB0aGlzLiNwbGF5ZXJzID0gW107XHJcbiAgICAgICAgdGhpcy4jcGxheWVyc1ZpZXdzID0gW107XHJcbiAgICAgICAgdGhpcy4jY3VycmVudE1vZGFsSW5kZXggPSAwO1xyXG4gICAgICAgIGlmIChmcmVzaFN0YXJ0KSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlUnVsZXNNb2RhbCgpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNyZWF0ZUdhbWVUeXBlTW9kYWwoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLiNnYW1lQXJlbmFFbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLiNwYXVzZUNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInNlbWktYWN0aXZlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtb2RhbHNPcmRlciA9IFt0aGlzLmNyZWF0ZUdyaWRTaXplTW9kYWwsIHRoaXMuY3JlYXRlU2hpcHNDaG9vc2luZ01vZGFsXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8PSB0aGlzLiNodW1hbk51bWJlcjsgaSsrKSB7XHJcbiAgICAgICAgICAgIG1vZGFsc09yZGVyLnB1c2godGhpcy5jcmVhdGVTaGlwc1BsYWNpbmdNb2RhbC5iaW5kKHRoaXMsIGksIGZyZXNoU3RhcnQsIHBsYXllcnNOYW1lcykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aGlsZSAodGhpcy4jY3VycmVudE1vZGFsSW5kZXggPCBtb2RhbHNPcmRlci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgYXdhaXQgbW9kYWxzT3JkZXJbdGhpcy4jY3VycmVudE1vZGFsSW5kZXgrK10uY2FsbCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuI2h1bWFuTnVtYmVyID09PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI3BsYXllcnMucHVzaChcclxuICAgICAgICAgICAgICAgIEdhbWVDb250cm9sbGVyLmdlbmVyYXRlQ29tcHV0ZXJQbGF5ZXIoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jYm9hcmRXaWR0aCxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiNib2FyZEhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiNzaGlwc0xpc3QsXHJcbiAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNyZWF0ZUdhbWVBcmVuYSgpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGh1bWFuTnVtYmVyOiB0aGlzLiNodW1hbk51bWJlcixcclxuICAgICAgICAgICAgYm9hcmRXaWR0aDogdGhpcy4jYm9hcmRXaWR0aCxcclxuICAgICAgICAgICAgYm9hcmRIZWlnaHQ6IHRoaXMuI2JvYXJkSGVpZ2h0LFxyXG4gICAgICAgICAgICBwbGF5ZXJzOiB0aGlzLiNwbGF5ZXJzLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyogUnVsZXMgTW9kYWwgKi9cclxuICAgIGFzeW5jIGNyZWF0ZVJ1bGVzTW9kYWwoKSB7XHJcbiAgICAgICAgY29uc3QgbW9kYWxJbnN0YW5jZSA9IG5ldyBSdWxlc01vZGFsKCk7XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5TW9kYWwobW9kYWxJbnN0YW5jZSk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5ydWxlc01vZGFsU3VibWl0KG1vZGFsSW5zdGFuY2UpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMucmVtb3ZlTW9kYWwobW9kYWxJbnN0YW5jZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcnVsZXNNb2RhbFN1Ym1pdChtb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ0blN1Ym1pdCA9IG1vZGFsSW5zdGFuY2UubW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYnRuLXN0YXJ0XCIpO1xyXG4gICAgICAgICAgICBidG5TdWJtaXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAgIC8qIEdhbWUgVHlwZSBNb2RhbCAqL1xyXG4gICAgYXN5bmMgY3JlYXRlR2FtZVR5cGVNb2RhbCgpIHtcclxuICAgICAgICBjb25zdCBtb2RhbEluc3RhbmNlID0gbmV3IEdhbWVUeXBlTW9kYWwoKTtcclxuICAgICAgICB0aGlzLmRpc3BsYXlNb2RhbChtb2RhbEluc3RhbmNlKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmdhbWVUeXBlTW9kYWxTdWJtaXQobW9kYWxJbnN0YW5jZSk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5yZW1vdmVNb2RhbChtb2RhbEluc3RhbmNlKTtcclxuICAgIH1cclxuXHJcbiAgICBnYW1lVHlwZU1vZGFsU3VibWl0KG1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYnRuU3VibWl0ID0gbW9kYWxJbnN0YW5jZS5tb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5idG4tcGxheVwiKTtcclxuICAgICAgICAgICAgYnRuU3VibWl0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiNodW1hbk51bWJlciA9IG1vZGFsSW5zdGFuY2UuZ2V0aHVtYW5OdW1iZXIoKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAgIC8qIEdyaWQgU2l6ZSBNb2RhbCAqL1xyXG4gICAgYXN5bmMgY3JlYXRlR3JpZFNpemVNb2RhbCgpIHtcclxuICAgICAgICBjb25zdCBtb2RhbEluc3RhbmNlID0gbmV3IEdyaWRTaXplTW9kYWwodGhpcy4jYm9hcmRXaWR0aCA/PyAxMCwgdGhpcy4jYm9hcmRIZWlnaHQgPz8gMTApO1xyXG4gICAgICAgIHRoaXMuZGlzcGxheU1vZGFsKG1vZGFsSW5zdGFuY2UpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuZ3JpZFNpemVNb2RhbFN1Ym1pdChtb2RhbEluc3RhbmNlKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnJlbW92ZU1vZGFsKG1vZGFsSW5zdGFuY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGdyaWRTaXplTW9kYWxTdWJtaXQobW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBidG5TdWJtaXQgPSBtb2RhbEluc3RhbmNlLm1vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ0bi1uZXh0XCIpO1xyXG4gICAgICAgICAgICBidG5TdWJtaXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuI2JvYXJkV2lkdGggPSBtb2RhbEluc3RhbmNlLmdldFdpZHRoKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiNib2FyZEhlaWdodCA9IG1vZGFsSW5zdGFuY2UuZ2V0SGVpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbiAgICAvKiBTaGlwcyBDaG9vc2luZyBNb2RhbCAqL1xyXG4gICAgYXN5bmMgY3JlYXRlU2hpcHNDaG9vc2luZ01vZGFsKCkge1xyXG4gICAgICAgIGNvbnN0IG1vZGFsSW5zdGFuY2UgPSBuZXcgQ2hvb3NpbmdTaGlwc01vZGFsKHRoaXMuI2JvYXJkV2lkdGgsIHRoaXMuI2JvYXJkSGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmRpc3BsYXlNb2RhbChtb2RhbEluc3RhbmNlKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnNoaXBzQ2hvb3NpbmdNb2RhbFN1Ym1pdChtb2RhbEluc3RhbmNlKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnJlbW92ZU1vZGFsKG1vZGFsSW5zdGFuY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHNoaXBzQ2hvb3NpbmdNb2RhbFN1Ym1pdChtb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ0bkJhY2sgPSBtb2RhbEluc3RhbmNlLm1vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ0bi1iYWNrXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBidG5TdWJtaXQgPSBtb2RhbEluc3RhbmNlLm1vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ0bi1zdWJtaXRcIik7XHJcbiAgICAgICAgICAgIGJ0blN1Ym1pdC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4jc2hpcHNMaXN0ID0gbW9kYWxJbnN0YW5jZS5nZXRTaGlwc0xpc3QoKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJ0bkJhY2suYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuI2N1cnJlbnRNb2RhbEluZGV4IC09IDI7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbiAgICAvKiBTaGlwcyBQbGFjaW5nIE1vZGFsICovXHJcbiAgICBhc3luYyBjcmVhdGVTaGlwc1BsYWNpbmdNb2RhbChwbGF5ZXJOdW1iZXIsIGlzRmlyc3RSb3VuZCwgcGxheWVyc05hbWVzKSB7XHJcbiAgICAgICAgY29uc3QgbW9kYWxJbnN0YW5jZSA9IG5ldyBTaGlwc1BsYWNpbmdNb2RhbChcclxuICAgICAgICAgICAgdGhpcy4jaHVtYW5OdW1iZXIsXHJcbiAgICAgICAgICAgIHBsYXllck51bWJlcixcclxuICAgICAgICAgICAgdGhpcy4jc2hpcHNMaXN0LFxyXG4gICAgICAgICAgICB0aGlzLiNib2FyZFdpZHRoLFxyXG4gICAgICAgICAgICB0aGlzLiNib2FyZEhlaWdodCxcclxuICAgICAgICAgICAgaXNGaXJzdFJvdW5kLFxyXG4gICAgICAgICAgICBwbGF5ZXJzTmFtZXNbcGxheWVyTnVtYmVyIC0gMV0sXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmRpc3BsYXlNb2RhbChtb2RhbEluc3RhbmNlKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnNoaXBzUGxhY2luZ01vZGFsU3VibWl0KG1vZGFsSW5zdGFuY2UsIHBsYXllck51bWJlcik7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5yZW1vdmVNb2RhbChtb2RhbEluc3RhbmNlKTtcclxuICAgIH1cclxuXHJcbiAgICBzaGlwc1BsYWNpbmdNb2RhbFN1Ym1pdChtb2RhbEluc3RhbmNlLCBwbGF5ZXJOdW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYnRuQmFjayA9IG1vZGFsSW5zdGFuY2UubW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYnRuLWJhY2tcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ0blN1Ym1pdCA9IG1vZGFsSW5zdGFuY2UubW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYnRuLXN1Ym1pdFwiKTtcclxuICAgICAgICAgICAgYnRuU3VibWl0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiNwbGF5ZXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG1vZGFsSW5zdGFuY2UuZ2V0UGxheWVyTmFtZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIHNoaXBzOiBtb2RhbEluc3RhbmNlLmdldFNoaXBzTGlzdCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzQm90OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYnRuQmFjay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4jY3VycmVudE1vZGFsSW5kZXggLT0gMjtcclxuICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJOdW1iZXIgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jcGxheWVycy5wb3AoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAgIC8qIEZvciBhbGwgbW9kYWxzICovXHJcbiAgICBkaXNwbGF5TW9kYWwobW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgIGlmICghbW9kYWxJbnN0YW5jZS5tb2RhbENvbnRhaW5lckVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTW9kYWwgaW5zdGFuY2UgZG9lcyBub3QgaGF2ZSBtb2RhbCBjb250YWluZXIgZWxlbWVudCBwcm9wZXJ0eVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFtb2RhbEluc3RhbmNlLm1vZGFsRWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNb2RhbCBpbnN0YW5jZSBkb2VzIG5vdCBoYXZlIG1vZGFsIGVsZW1lbnQgcHJvcGVydHlcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuI3Jvb3RFbGVtZW50LmFwcGVuZChtb2RhbEluc3RhbmNlLm1vZGFsQ29udGFpbmVyRWxlbWVudCk7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UubW9kYWxDb250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UubW9kYWxFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgfSwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlTW9kYWwobW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgIGlmICghbW9kYWxJbnN0YW5jZS5tb2RhbENvbnRhaW5lckVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTW9kYWwgaW5zdGFuY2UgZG9lcyBub3QgaGF2ZSBtb2RhbCBjb250YWluZXIgZWxlbWVudCBwcm9wZXJ0eVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFtb2RhbEluc3RhbmNlLm1vZGFsRWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNb2RhbCBpbnN0YW5jZSBkb2VzIG5vdCBoYXZlIG1vZGFsIGVsZW1lbnQgcHJvcGVydHlcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICBtb2RhbEluc3RhbmNlLm1vZGFsQ29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICBtb2RhbEluc3RhbmNlLm1vZGFsRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICBtb2RhbEluc3RhbmNlLm1vZGFsRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUucHJvcGVydHlOYW1lID09PSBcImJvdHRvbVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5tb2RhbENvbnRhaW5lckVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09ICovXHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZSB7XHJcbiAgICAjcnVubmluZztcclxuXHJcbiAgICAjcGxheWVycztcclxuXHJcbiAgICAjY3VycmVudFJvdW5kO1xyXG5cclxuICAgICNjdXJyZW50VHVybjtcclxuXHJcbiAgICAjY3VycmVudFBsYXllckluZGV4O1xyXG5cclxuICAgICNjdXJyZW50RW5lbXlJbmRleDtcclxuXHJcbiAgICAjd2lubmVycztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLiNwbGF5ZXJzID0gW107XHJcbiAgICAgICAgdGhpcy4jY3VycmVudFJvdW5kID0gMDtcclxuICAgICAgICB0aGlzLiNjdXJyZW50VHVybiA9IDA7XHJcbiAgICAgICAgdGhpcy4jY3VycmVudFBsYXllckluZGV4ID0gLTE7XHJcbiAgICAgICAgdGhpcy4jd2lubmVycyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBydW5uaW5nKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy4jcnVubmluZyA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBydW5uaW5nKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNydW5uaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFBsYXllcihwbGF5ZXIpIHtcclxuICAgICAgICB0aGlzLiNwbGF5ZXJzLnB1c2gocGxheWVyKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQbGF5ZXIocGxheWVySW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jcGxheWVyc1twbGF5ZXJJbmRleF07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UGxheWVycygpIHtcclxuICAgICAgICByZXR1cm4gWy4uLnRoaXMuI3BsYXllcnNdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBsYXllcnNDb3VudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jcGxheWVycy5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgaW5jcmVhc2VDdXJyZW50Um91bmQoKSB7XHJcbiAgICAgICAgKyt0aGlzLiNjdXJyZW50Um91bmQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGN1cnJlbnRSb3VuZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jY3VycmVudFJvdW5kO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBjdXJyZW50UGxheWVySW5kZXgodmFsdWUpIHtcclxuICAgICAgICB0aGlzLiNjdXJyZW50UGxheWVySW5kZXggPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY3VycmVudFBsYXllckluZGV4KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNjdXJyZW50UGxheWVySW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGN1cnJlbnRFbmVteUluZGV4KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy4jY3VycmVudEVuZW15SW5kZXggPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY3VycmVudEVuZW15SW5kZXgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI2N1cnJlbnRFbmVteUluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIGdldEN1cnJlbnRQbGF5ZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI3BsYXllcnNbdGhpcy4jY3VycmVudFBsYXllckluZGV4XTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDdXJyZW50RW5lbXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI3BsYXllcnNbdGhpcy4jY3VycmVudEVuZW15SW5kZXhdO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFdpbm5lcihwbGF5ZXJJbmRleCkge1xyXG4gICAgICAgIHRoaXMuI3dpbm5lcnMucHVzaChwbGF5ZXJJbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHdpbm5lcnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFsuLi50aGlzLiN3aW5uZXJzXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRMYXN0V2lubmVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiN3aW5uZXJzW3RoaXMuI3dpbm5lcnMubGVuZ3RoIC0gMV07XHJcbiAgICB9XHJcblxyXG4gICAgaW5jcmVhc2VDdXJyZW50VHVybigpIHtcclxuICAgICAgICArK3RoaXMuI2N1cnJlbnRUdXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc2V0Q3VycmVudFR1cm4oKSB7XHJcbiAgICAgICAgdGhpcy4jY3VycmVudFR1cm4gPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjdXJyZW50VHVybigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jY3VycmVudFR1cm47XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IEdhbWVib2FyZCBmcm9tIFwiLi4vR2FtZWJvYXJkL2dhbWVib2FyZC1tb2RlbFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheWVyIHtcclxuICAgICNuYW1lO1xyXG5cclxuICAgICNib2FyZDtcclxuXHJcbiAgICAjd2luUm91bmRzO1xyXG5cclxuICAgICNwbGF5ZWRSb3VuZHM7XHJcblxyXG4gICAgI2lzQm90O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGlzQm90KSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLiNpc0JvdCA9IGlzQm90O1xyXG4gICAgICAgIHRoaXMuI3dpblJvdW5kcyA9IDA7XHJcbiAgICAgICAgdGhpcy4jcGxheWVkUm91bmRzID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgbmFtZSh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuI25hbWUgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaXNCb3QoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI2lzQm90O1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUJvYXJkKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgICAgICB0aGlzLiNib2FyZCA9IEdhbWVib2FyZCh3aWR0aCwgaGVpZ2h0KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgYm9hcmQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI2JvYXJkO1xyXG4gICAgfVxyXG5cclxuICAgIGluY3JlYXNlUGxheWVyUm91bmRzKCkge1xyXG4gICAgICAgICsrdGhpcy4jcGxheWVkUm91bmRzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwbGF5ZWRSb3VuZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI3BsYXllZFJvdW5kcztcclxuICAgIH1cclxuXHJcbiAgICBpbmNyZWFzZVdpblJvdW5kcygpIHtcclxuICAgICAgICArK3RoaXMuI3dpblJvdW5kcztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgd2luUm91bmRzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiN3aW5Sb3VuZHM7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IFB1YlN1YiBmcm9tIFwicHVic3ViLWpzXCI7XHJcbmltcG9ydCBHYW1lYm9hcmRDb250cm9sbGVyIGZyb20gXCIuLi9HYW1lYm9hcmQvZ2FtZWJvYXJkLWNvbnRyb2xsZXJcIjtcclxuaW1wb3J0IEdhbWVib2FyZENoZWNrZXIgZnJvbSBcIi4uL0dhbWVib2FyZC9nYW1lYm9hcmQtY2hlY2tlclwiO1xyXG5pbXBvcnQgR2FtZVZpZXcgZnJvbSBcIi4vZ2FtZS12aWV3XCI7XHJcbmltcG9ydCBHYW1lIGZyb20gXCIuL2dhbWUtbW9kZWxcIjtcclxuaW1wb3J0IFBsYXllciBmcm9tIFwiLi4vUGxheWVyL3BsYXllci1tb2RlbFwiO1xyXG5pbXBvcnQgR2FtZWJvYXJkIGZyb20gXCIuLi9HYW1lYm9hcmQvZ2FtZWJvYXJkLW1vZGVsXCI7XHJcblxyXG5jb25zdCBHYW1lQ29udHJvbGxlciA9ICgoKSA9PiB7XHJcbiAgICBmdW5jdGlvbiBnZW5lcmF0ZVJhbmRvbVBsYXllckluZGV4KGdhbWUpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZ2FtZS5nZXRQbGF5ZXJzQ291bnQoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVHYW1lKGdhbWVzQ29udGFpbmVyLCBpZCkge1xyXG4gICAgICAgIGNvbnN0IGdhbWUgPSBuZXcgR2FtZSgpO1xyXG4gICAgICAgIGNvbnN0IGdhbWVWaWV3ID0gR2FtZUNvbnRyb2xsZXIuY3JlYXRlR2FtZVZpZXcoZ2FtZSwgZ2FtZXNDb250YWluZXIsIGlkKTtcclxuICAgICAgICBnYW1lVmlldy5uZXdHYW1lKCkudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEucGxheWVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGxheWVyRGF0YSA9IGRhdGEucGxheWVyc1tpXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBsYXllciA9IG5ldyBQbGF5ZXIocGxheWVyRGF0YS5uYW1lLCBkYXRhLnBsYXllcnNbaV0uaXNCb3QpO1xyXG4gICAgICAgICAgICAgICAgcGxheWVyLmNyZWF0ZUJvYXJkKGRhdGEuYm9hcmRXaWR0aCwgZGF0YS5ib2FyZEhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhwbGF5ZXJEYXRhLnNoaXBzKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzaGlwID0gcGxheWVyRGF0YS5zaGlwc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFkZGVkU2hpcEluZGV4ID0gR2FtZWJvYXJkQ29udHJvbGxlci5hZGRTaGlwKHBsYXllci5ib2FyZCwgc2hpcC5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIEdhbWVib2FyZENvbnRyb2xsZXIucGxhY2VTaGlwKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuYm9hcmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZGVkU2hpcEluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGlwLnJvdyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hpcC5jb2wsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoaXAuaXNWZXJ0aWNhbCxcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBnYW1lLmFkZFBsYXllcihwbGF5ZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVDb21wdXRlclBsYXllcihib2FyZFdpZHRoLCBib2FyZEhlaWdodCwgc2hpcHNMaXN0KSB7XHJcbiAgICAgICAgY29uc3QgY29tcHV0ZXJQbGF5ZXIgPSB7fTtcclxuICAgICAgICBjb21wdXRlclBsYXllci5uYW1lID0gXCJDb21wdXRlclwiO1xyXG4gICAgICAgIGNvbXB1dGVyUGxheWVyLmlzQm90ID0gdHJ1ZTtcclxuICAgICAgICBjb25zdCB0ZW1wQm9hcmQgPSBHYW1lYm9hcmQoYm9hcmRXaWR0aCwgYm9hcmRIZWlnaHQpO1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHNoaXBzTGlzdCkuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNoaXBMZW5ndGggPSBwYXJzZUludChrZXksIDEwKTtcclxuICAgICAgICAgICAgY29uc3QgY291bnQgPSBzaGlwc0xpc3Rbc2hpcExlbmd0aF07XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgR2FtZWJvYXJkQ29udHJvbGxlci5hZGRTaGlwKHRlbXBCb2FyZCwgc2hpcExlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBHYW1lYm9hcmRDb250cm9sbGVyLmF1dG9QbGFjZVNoaXBzKHRlbXBCb2FyZCk7XHJcbiAgICAgICAgY29tcHV0ZXJQbGF5ZXIuc2hpcHMgPSB7fTtcclxuICAgICAgICBjb25zdCBib2FyZFNoaXBzID0gdGVtcEJvYXJkLmdldFNoaXBzKCk7XHJcbiAgICAgICAgT2JqZWN0LmtleXMoYm9hcmRTaGlwcykuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbXB1dGVyUGxheWVyLnNoaXBzW2tleV0gPSB7fTtcclxuICAgICAgICAgICAgY29tcHV0ZXJQbGF5ZXIuc2hpcHNba2V5XS5sZW5ndGggPSB0ZW1wQm9hcmQuZ2V0U2hpcChrZXkpLmdldExlbmd0aCgpO1xyXG4gICAgICAgICAgICBjb21wdXRlclBsYXllci5zaGlwc1trZXldLnJvdyA9IGJvYXJkU2hpcHNba2V5XS5yb3c7XHJcbiAgICAgICAgICAgIGNvbXB1dGVyUGxheWVyLnNoaXBzW2tleV0uY29sID0gYm9hcmRTaGlwc1trZXldLmNvbDtcclxuICAgICAgICAgICAgY29tcHV0ZXJQbGF5ZXIuc2hpcHNba2V5XS5pc1ZlcnRpY2FsID0gYm9hcmRTaGlwc1trZXldLmlzVmVydGljYWw7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGNvbXB1dGVyUGxheWVyO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlTmV4dFJvdW5kKGdhbWUsIGdhbWVWaWV3KSB7XHJcbiAgICAgICAgY29uc3Qgc2NvcmVzID0gW107XHJcbiAgICAgICAgY29uc3QgcGxheWVyc05hbWVzID0gW107XHJcbiAgICAgICAgZ2FtZS5nZXRQbGF5ZXJzKCkuZm9yRWFjaCgocGxheWVyKSA9PiB7XHJcbiAgICAgICAgICAgIHBsYXllcnNOYW1lcy5wdXNoKHBsYXllci5uYW1lKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBnYW1lVmlldy5uZXdHYW1lKGZhbHNlLCBwbGF5ZXJzTmFtZXMpLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLnBsYXllcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBsYXllckRhdGEgPSBkYXRhLnBsYXllcnNbaV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwbGF5ZXIgPSBnYW1lLmdldFBsYXllcihpKTtcclxuICAgICAgICAgICAgICAgIHBsYXllci5jcmVhdGVCb2FyZChkYXRhLmJvYXJkV2lkdGgsIGRhdGEuYm9hcmRIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMocGxheWVyRGF0YS5zaGlwcykuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2hpcCA9IHBsYXllckRhdGEuc2hpcHNba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhZGRlZFNoaXBJbmRleCA9IEdhbWVib2FyZENvbnRyb2xsZXIuYWRkU2hpcChwbGF5ZXIuYm9hcmQsIHNoaXAubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICBHYW1lYm9hcmRDb250cm9sbGVyLnBsYWNlU2hpcChcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLmJvYXJkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRlZFNoaXBJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hpcC5yb3csXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoaXAuY29sLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGlwLmlzVmVydGljYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgc2NvcmVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbnM6IHBsYXllci53aW5Sb3VuZHMsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9zc2VzOiBwbGF5ZXIucGxheWVkUm91bmRzIC0gcGxheWVyLndpblJvdW5kcyxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdhbWVWaWV3LnVwZGF0ZVNjb3JlcyhzY29yZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHN0YXJ0R2FtZShnYW1lLCBnYW1lVmlldykge1xyXG4gICAgICAgIGlmIChnYW1lLnJ1bm5pbmcgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZ2FtZS5nZXRQbGF5ZXJzQ291bnQoKSA8IDIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVG9vIGZldyBwbGF5ZXJzXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBnYW1lLnJ1bm5pbmcgPSB0cnVlO1xyXG4gICAgICAgIGdhbWUuaW5jcmVhc2VDdXJyZW50Um91bmQoKTtcclxuICAgICAgICBzZXRTdGFydGluZ1BsYXllcihnYW1lKTtcclxuICAgICAgICBnYW1lLmN1cnJlbnRFbmVteUluZGV4ID0gKGdhbWUuY3VycmVudFBsYXllckluZGV4ICsgMSkgJSBnYW1lLmdldFBsYXllcnNDb3VudCgpO1xyXG4gICAgICAgIGdhbWUuaW5jcmVhc2VDdXJyZW50VHVybigpO1xyXG4gICAgICAgIGlmIChnYW1lVmlldykge1xyXG4gICAgICAgICAgICBQdWJTdWIucHVibGlzaChcIlN3aXRjaFBsYXllclR1cm5cIiwge1xyXG4gICAgICAgICAgICAgICAgZ2FtZSxcclxuICAgICAgICAgICAgICAgIGdhbWVWaWV3LFxyXG4gICAgICAgICAgICAgICAgZmlyc3RUdXJuOiB0cnVlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2V0U3RhcnRpbmdQbGF5ZXIoZ2FtZSkge1xyXG4gICAgICAgIGxldCBzdGFydGluZ1BsYXllckluZGV4O1xyXG4gICAgICAgIGlmIChnYW1lLmN1cnJlbnRSb3VuZCA9PT0gMSkge1xyXG4gICAgICAgICAgICBzdGFydGluZ1BsYXllckluZGV4ID0gZ2VuZXJhdGVSYW5kb21QbGF5ZXJJbmRleChnYW1lKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzdGFydGluZ1BsYXllckluZGV4ID0gZ2FtZS5nZXRMYXN0V2lubmVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdhbWUuY3VycmVudFBsYXllckluZGV4ID0gc3RhcnRpbmdQbGF5ZXJJbmRleDtcclxuICAgICAgICByZXR1cm4gc3RhcnRpbmdQbGF5ZXJJbmRleDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBlbmRHYW1lKGdhbWUpIHtcclxuICAgICAgICBpZiAoZ2FtZS5ydW5uaW5nID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdhbWUucnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgIGdhbWUuZ2V0Q3VycmVudFBsYXllcigpLmluY3JlYXNlV2luUm91bmRzKCk7XHJcbiAgICAgICAgZ2FtZS5nZXRQbGF5ZXJzKCkuZm9yRWFjaCgocGxheWVyKSA9PiB7XHJcbiAgICAgICAgICAgIHBsYXllci5pbmNyZWFzZVBsYXllclJvdW5kcygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGdhbWUuYWRkV2lubmVyKGdhbWUuY3VycmVudFBsYXllckluZGV4KTtcclxuICAgICAgICBnYW1lLnJlc2V0Q3VycmVudFR1cm4oKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjdXJyZW50UGxheWVyVHVybkVuZChnYW1lLCBnYW1lVmlldykge1xyXG4gICAgICAgIGdhbWUuY3VycmVudFBsYXllckluZGV4ID0gKGdhbWUuY3VycmVudFBsYXllckluZGV4ICsgMSkgJSBnYW1lLmdldFBsYXllcnNDb3VudCgpO1xyXG4gICAgICAgIGdhbWUuY3VycmVudEVuZW15SW5kZXggPSAoZ2FtZS5jdXJyZW50RW5lbXlJbmRleCArIDEpICUgZ2FtZS5nZXRQbGF5ZXJzQ291bnQoKTtcclxuXHJcbiAgICAgICAgZ2FtZS5pbmNyZWFzZUN1cnJlbnRUdXJuKCk7XHJcbiAgICAgICAgaWYgKGdhbWVWaWV3KSB7XHJcbiAgICAgICAgICAgIFB1YlN1Yi5wdWJsaXNoKFwiU3dpdGNoUGxheWVyVHVyblwiLCB7XHJcbiAgICAgICAgICAgICAgICBnYW1lLFxyXG4gICAgICAgICAgICAgICAgZ2FtZVZpZXcsXHJcbiAgICAgICAgICAgICAgICBmaXJzdFR1cm46IGZhbHNlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgUHViU3ViLnB1Ymxpc2goXCJUdXJuSW5jcmVhc2VkXCIsIHtcclxuICAgICAgICAgICAgICAgIG5ld1R1cm46IGdhbWUuY3VycmVudFR1cm4sXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50RW5lbXlJbmRleDogZ2FtZS5jdXJyZW50RW5lbXlJbmRleCxcclxuICAgICAgICAgICAgICAgIGdhbWVWaWV3LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc3RhcnRNb3ZlKGdhbWUsIGdhbWVWaWV3KSB7XHJcbiAgICAgICAgaWYgKGdhbWUuZ2V0Q3VycmVudFBsYXllcigpLmlzQm90KSB7XHJcbiAgICAgICAgICAgIGdhbWVWaWV3LnBsYXllcnNWaWV3cy5mb3JFYWNoKCh2aWV3KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2aWV3LmRpc2FibGVCb2FyZCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29tcHV0ZXJBdHRhY2soXHJcbiAgICAgICAgICAgICAgICBnYW1lLmdldEN1cnJlbnRFbmVteSgpLmJvYXJkLFxyXG4gICAgICAgICAgICAgICAgZ2FtZVZpZXcuZ2V0UGxheWVyVmlldyhnYW1lLmN1cnJlbnRFbmVteUluZGV4KS5ib2FyZFZpZXcsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNvbXB1dGVyQXR0YWNrKGJvYXJkLCBib2FyZFZpZXcpIHtcclxuICAgICAgICBsZXQgY2VsbHMgPSBHYW1lYm9hcmRDb250cm9sbGVyLmdldFNtYXJ0VGFyZ2V0cyhib2FyZCk7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ZWRDZWxsID0ge307XHJcbiAgICAgICAgaWYgKGNlbGxzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjZWxscyA9IEdhbWVib2FyZENvbnRyb2xsZXIuZ2V0Tm90RGFtYWdlZFNtYXJ0VGFyZ2V0cyhib2FyZCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2VsbHMubGVuZ3RoKTtcclxuICAgICAgICAgICAgdGFyZ2V0ZWRDZWxsLnJvdyA9IGNlbGxzW2luZGV4XS5yb3c7XHJcbiAgICAgICAgICAgIHRhcmdldGVkQ2VsbC5jb2wgPSBjZWxsc1tpbmRleF0uY29sO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRhcmdldGVkQ2VsbC5yb3cgPSBjZWxsc1swXS5yb3c7XHJcbiAgICAgICAgICAgIHRhcmdldGVkQ2VsbC5jb2wgPSBjZWxsc1swXS5jb2w7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBQdWJTdWIucHVibGlzaChcIkF0dGFja1JlY2VpdmVkXCIsIHtcclxuICAgICAgICAgICAgICAgIHJvdzogdGFyZ2V0ZWRDZWxsLnJvdyxcclxuICAgICAgICAgICAgICAgIGNvbDogdGFyZ2V0ZWRDZWxsLmNvbCxcclxuICAgICAgICAgICAgICAgIGJvYXJkVmlldyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSwgMTAwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYXR0YWNrKGdhbWUsIHJvdywgY29sLCBib2FyZFZpZXcpIHtcclxuICAgICAgICBpZiAoIWdhbWUucnVubmluZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGF0dGFja1N1Y2NlZGVkID0gR2FtZWJvYXJkQ29udHJvbGxlci5yZWNlaXZlQXR0YWNrKFxyXG4gICAgICAgICAgICBnYW1lLmdldEN1cnJlbnRFbmVteSgpLmJvYXJkLFxyXG4gICAgICAgICAgICByb3csXHJcbiAgICAgICAgICAgIGNvbCxcclxuICAgICAgICAgICAgYm9hcmRWaWV3LFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKCFhdHRhY2tTdWNjZWRlZCkge1xyXG4gICAgICAgICAgICBpZiAoYm9hcmRWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICBQdWJTdWIucHVibGlzaChcIkF0dGFja0ZhaWxlZFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9hcmRWaWV3LFxyXG4gICAgICAgICAgICAgICAgICAgIHJvdyxcclxuICAgICAgICAgICAgICAgICAgICBjb2wsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXJyZW50UGxheWVyVHVybkVuZChcclxuICAgICAgICAgICAgICAgIGdhbWUsXHJcbiAgICAgICAgICAgICAgICBib2FyZFZpZXcgIT09IHVuZGVmaW5lZCA/IGJvYXJkVmlldy5wbGF5ZXJWaWV3LmdhbWVWaWV3IDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChib2FyZFZpZXcpIHtcclxuICAgICAgICAgICAgICAgIFB1YlN1Yi5wdWJsaXNoKFwiQXR0YWNrU3VjY2VkZWRcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIGJvYXJkVmlldyxcclxuICAgICAgICAgICAgICAgICAgICByb3csXHJcbiAgICAgICAgICAgICAgICAgICAgY29sLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzU3VuazogZ2FtZS5nZXRDdXJyZW50RW5lbXkoKS5ib2FyZC5nZXRTaGlwRnJvbUNvb3JkaW5hdGUocm93LCBjb2wpLmlzU3VuaygpLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKEdhbWVib2FyZENoZWNrZXIuYXJlQWxsU2hpcHNTdW5rKGdhbWUuZ2V0Q3VycmVudEVuZW15KCkuYm9hcmQpKSB7XHJcbiAgICAgICAgICAgICAgICBlbmRHYW1lKGdhbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJvYXJkVmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgIFB1YlN1Yi5wdWJsaXNoKFwiR2FtZUVuZGVkXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZVZpZXc6IGJvYXJkVmlldy5wbGF5ZXJWaWV3LmdhbWVWaWV3LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5uZXJJbmRleDogZ2FtZS5jdXJyZW50UGxheWVySW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYm9hcmRWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydE1vdmUoZ2FtZSwgYm9hcmRWaWV3LnBsYXllclZpZXcuZ2FtZVZpZXcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZUdhbWVWaWV3KGdhbWUsIGdhbWVzQ29udGFpbmVyLCBpZCkge1xyXG4gICAgICAgIGNvbnN0IGdhbWVWaWV3ID0gbmV3IEdhbWVWaWV3KGdhbWUsIGdhbWVzQ29udGFpbmVyLCBpZCk7XHJcbiAgICAgICAgcmV0dXJuIGdhbWVWaWV3O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ2VuZXJhdGVHYW1lLFxyXG4gICAgICAgIHN0YXJ0R2FtZSxcclxuICAgICAgICBhdHRhY2ssXHJcbiAgICAgICAgZW5kR2FtZSxcclxuICAgICAgICBjcmVhdGVHYW1lVmlldyxcclxuICAgICAgICBnZW5lcmF0ZU5leHRSb3VuZCxcclxuICAgICAgICBnZW5lcmF0ZUNvbXB1dGVyUGxheWVyLFxyXG4gICAgICAgIHN0YXJ0TW92ZSxcclxuICAgICAgICBjb21wdXRlckF0dGFjayxcclxuICAgIH07XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBHYW1lQ29udHJvbGxlcjtcclxuIiwiaW1wb3J0IEdhbWVDb250cm9sbGVyIGZyb20gXCIuL0dhbWUvZ2FtZS1jb250cm9sbGVyXCI7XHJcbmltcG9ydCBHYW1lRXZlbnRIYW5kbGVyIGZyb20gXCIuL0dhbWUvZ2FtZS1ldmVudC1oYW5kbGVyXCI7XHJcblxyXG5jb25zdCBnYW1lc0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2FtZXNcIik7XHJcbkdhbWVDb250cm9sbGVyLmdlbmVyYXRlR2FtZShnYW1lc0NvbnRhaW5lciwgMSk7XHJcbiIsImltcG9ydCBQdWJTdWIgZnJvbSBcInB1YnN1Yi1qc1wiO1xyXG5pbXBvcnQgR2FtZUNvbnJvbGxlciBmcm9tIFwiLi9nYW1lLWNvbnRyb2xsZXJcIjtcclxuXHJcbmNvbnN0IEdhbWVFdmVudEhhbmRsZXIgPSAoKCkgPT4ge1xyXG4gICAgLy8gQmluZCBFdmVudHNcclxuICAgIFB1YlN1Yi5zdWJzY3JpYmUoXCJBdHRhY2tSZWNlaXZlZFwiLCBhdHRhY2tSZWNlaXZlZCk7XHJcbiAgICBQdWJTdWIuc3Vic2NyaWJlKFwiQXR0YWNrRmFpbGVkXCIsIGF0dGFja0ZhaWxlZCk7XHJcbiAgICBQdWJTdWIuc3Vic2NyaWJlKFwiQXR0YWNrU3VjY2VkZWRcIiwgYXR0YWNrU3VjY2VkZWQpO1xyXG4gICAgUHViU3ViLnN1YnNjcmliZShcIlN3aXRjaFBsYXllclR1cm5cIiwgc3dpdGNoUGxheWVyVHVybik7XHJcbiAgICBQdWJTdWIuc3Vic2NyaWJlKFwiR2FtZUVuZGVkXCIsIGdhbWVFbmRlZCk7XHJcbiAgICBQdWJTdWIuc3Vic2NyaWJlKFwiVHVybkluY3JlYXNlZFwiLCB0dXJuSW5jcmVhc2VkKTtcclxuICAgIFB1YlN1Yi5zdWJzY3JpYmUoXCJTaGlwU3Vua1wiLCBzaGlwU3Vuayk7XHJcblxyXG4gICAgLy8gRXZlbnRzIEhhbmRsZXJzXHJcbiAgICBmdW5jdGlvbiBhdHRhY2tSZWNlaXZlZChtc2csIGRhdGEpIHtcclxuICAgICAgICBHYW1lQ29ucm9sbGVyLmF0dGFjayhcclxuICAgICAgICAgICAgZGF0YS5ib2FyZFZpZXcucGxheWVyVmlldy5nYW1lVmlldy5nYW1lLFxyXG4gICAgICAgICAgICBkYXRhLnJvdyxcclxuICAgICAgICAgICAgZGF0YS5jb2wsXHJcbiAgICAgICAgICAgIGRhdGEuYm9hcmRWaWV3LFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYXR0YWNrRmFpbGVkKG1zZywgZGF0YSkge1xyXG4gICAgICAgIGRhdGEuYm9hcmRWaWV3LmF0dGFja0ZhaWxlZChkYXRhLnJvdywgZGF0YS5jb2wpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGF0dGFja1N1Y2NlZGVkKG1zZywgZGF0YSkge1xyXG4gICAgICAgIGRhdGEuYm9hcmRWaWV3LmF0dGFja1N1Y2NlZGVkKGRhdGEucm93LCBkYXRhLmNvbCwgZGF0YS5pc1N1bmspO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHN3aXRjaFBsYXllclR1cm4obXNnLCBkYXRhKSB7XHJcbiAgICAgICAgY29uc3QgcGxheWVyVmlldyA9IGRhdGEuZ2FtZVZpZXcuZ2V0UGxheWVyVmlldyhkYXRhLmdhbWUuY3VycmVudFBsYXllckluZGV4KTtcclxuICAgICAgICBwbGF5ZXJWaWV3LnNldFR1cm4oKTtcclxuICAgICAgICBwbGF5ZXJWaWV3LmRpc2FibGVCb2FyZCgpO1xyXG4gICAgICAgIGlmICghZGF0YS5maXJzdFR1cm4pIHtcclxuICAgICAgICAgICAgY29uc3QgcHJldmlvdXNQbGF5ZXJWaWV3ID0gZGF0YS5nYW1lVmlldy5nZXRQbGF5ZXJWaWV3KGRhdGEuZ2FtZS5jdXJyZW50RW5lbXlJbmRleCk7XHJcbiAgICAgICAgICAgIHByZXZpb3VzUGxheWVyVmlldy51bnNldFR1cm4oKTtcclxuICAgICAgICAgICAgcHJldmlvdXNQbGF5ZXJWaWV3LmVuYWJsZUJvYXJkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEdhbWVDb25yb2xsZXIuc3RhcnRNb3ZlKGRhdGEuZ2FtZSwgZGF0YS5nYW1lVmlldyk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2FtZUVuZGVkKG1zZywgZGF0YSkge1xyXG4gICAgICAgIGRhdGEuZ2FtZVZpZXcuZW5kR2FtZShkYXRhLndpbm5lckluZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB0dXJuSW5jcmVhc2VkKG1zZywgZGF0YSkge1xyXG4gICAgICAgIGRhdGEuZ2FtZVZpZXcuY2hhbmdlVHVybihkYXRhLm5ld1R1cm4sIGRhdGEuY3VycmVudEVuZW15SW5kZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNoaXBTdW5rKG1zZywgZGF0YSkge1xyXG4gICAgICAgIGRhdGEucGxheWVyVmlldy5zaW5rU2hpcChkYXRhLnNoaXBMZW5ndGgpO1xyXG4gICAgfVxyXG59KSgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgR2FtZUV2ZW50SGFuZGxlcjtcclxuIl0sIm5hbWVzIjpbIkhhbmRsZWJhcnMiLCJtb2R1bGUiLCJleHBvcnRzIiwidGVtcGxhdGUiLCJjb250YWluZXIiLCJkZXB0aDAiLCJoZWxwZXJzIiwicGFydGlhbHMiLCJkYXRhIiwic3RhY2sxIiwibG9va3VwUHJvcGVydHkiLCJwYXJlbnQiLCJwcm9wZXJ0eU5hbWUiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJudWxsQ29udGV4dCIsInByb2dyYW0iLCJub29wIiwiaGVscGVyIiwiYWxpYXMxIiwiYWxpYXMyIiwiaG9va3MiLCJoZWxwZXJNaXNzaW5nIiwiYWxpYXMzIiwiYWxpYXM0IiwiZXNjYXBlRXhwcmVzc2lvbiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJuZXdPYmoiLCJrZXkiLCJiYXNlIiwiX2hhbmRsZWJhcnNTYWZlU3RyaW5nMiIsIl9oYW5kbGViYXJzRXhjZXB0aW9uMiIsIlV0aWxzIiwicnVudGltZSIsIl9oYW5kbGViYXJzTm9Db25mbGljdDIiLCJjcmVhdGUiLCJoYiIsIkhhbmRsZWJhcnNFbnZpcm9ubWVudCIsImV4dGVuZCIsIlNhZmVTdHJpbmciLCJFeGNlcHRpb24iLCJWTSIsInNwZWMiLCJpbnN0IiwiX3V0aWxzIiwiX2V4Y2VwdGlvbjIiLCJfaGVscGVycyIsIl9kZWNvcmF0b3JzIiwiX2xvZ2dlcjIiLCJfaW50ZXJuYWxQcm90b0FjY2VzcyIsIlZFUlNJT04iLCJDT01QSUxFUl9SRVZJU0lPTiIsIkxBU1RfQ09NUEFUSUJMRV9DT01QSUxFUl9SRVZJU0lPTiIsIlJFVklTSU9OX0NIQU5HRVMiLCJvYmplY3RUeXBlIiwiZGVjb3JhdG9ycyIsInRoaXMiLCJyZWdpc3RlckRlZmF1bHRIZWxwZXJzIiwicmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycyIsImNvbnN0cnVjdG9yIiwibG9nZ2VyIiwibG9nIiwicmVnaXN0ZXJIZWxwZXIiLCJuYW1lIiwiZm4iLCJ0b1N0cmluZyIsInVucmVnaXN0ZXJIZWxwZXIiLCJyZWdpc3RlclBhcnRpYWwiLCJwYXJ0aWFsIiwidW5yZWdpc3RlclBhcnRpYWwiLCJyZWdpc3RlckRlY29yYXRvciIsInVucmVnaXN0ZXJEZWNvcmF0b3IiLCJyZXNldExvZ2dlZFByb3BlcnR5QWNjZXNzZXMiLCJyZXNldExvZ2dlZFByb3BlcnRpZXMiLCJjcmVhdGVGcmFtZSIsImluc3RhbmNlIiwiX2RlY29yYXRvcnNJbmxpbmUyIiwicHJvcHMiLCJvcHRpb25zIiwicmV0IiwiY29udGV4dCIsIm9yaWdpbmFsIiwiYXJncyIsImVycm9yUHJvcHMiLCJtZXNzYWdlIiwibm9kZSIsImxvYyIsImxpbmUiLCJ1bmRlZmluZWQiLCJlbmRMaW5lTnVtYmVyIiwiY29sdW1uIiwiZW5kQ29sdW1uIiwic3RhcnQiLCJlbmQiLCJ0bXAiLCJFcnJvciIsImlkeCIsImxlbmd0aCIsImNhcHR1cmVTdGFja1RyYWNlIiwibGluZU51bWJlciIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwibm9wIiwiX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmcyIiwiX2hlbHBlcnNFYWNoMiIsIl9oZWxwZXJzSGVscGVyTWlzc2luZzIiLCJfaGVscGVyc0lmMiIsIl9oZWxwZXJzTG9nMiIsIl9oZWxwZXJzTG9va3VwMiIsIl9oZWxwZXJzV2l0aDIiLCJtb3ZlSGVscGVyVG9Ib29rcyIsImhlbHBlck5hbWUiLCJrZWVwSGVscGVyIiwiaW52ZXJzZSIsImlzQXJyYXkiLCJpZHMiLCJlYWNoIiwiY29udGV4dFBhdGgiLCJhcHBlbmRDb250ZXh0UGF0aCIsInByaW9yS2V5IiwiaSIsImV4ZWNJdGVyYXRpb24iLCJmaWVsZCIsImluZGV4IiwibGFzdCIsImZpcnN0IiwiYmxvY2tQYXJhbXMiLCJpc0Z1bmN0aW9uIiwiaiIsImciLCJTeW1ib2wiLCJpdGVyYXRvciIsIm5ld0NvbnRleHQiLCJpdCIsIm5leHQiLCJkb25lIiwicHVzaCIsImtleXMiLCJmb3JFYWNoIiwiYXJndW1lbnRzIiwiY29uZGl0aW9uYWwiLCJoYXNoIiwiaW5jbHVkZVplcm8iLCJpc0VtcHR5IiwibGV2ZWwiLCJhcHBseSIsImNyZWF0ZU5ld0xvb2t1cE9iamVjdCIsIl9sZW4iLCJzb3VyY2VzIiwiQXJyYXkiLCJfa2V5IiwiY29uY2F0IiwiY3JlYXRlUHJvdG9BY2Nlc3NDb250cm9sIiwicnVudGltZU9wdGlvbnMiLCJkZWZhdWx0TWV0aG9kV2hpdGVMaXN0IiwiZGVmYXVsdFByb3BlcnR5V2hpdGVMaXN0IiwicHJvcGVydGllcyIsIndoaXRlbGlzdCIsIl9jcmVhdGVOZXdMb29rdXBPYmplY3QiLCJhbGxvd2VkUHJvdG9Qcm9wZXJ0aWVzIiwiZGVmYXVsdFZhbHVlIiwiYWxsb3dQcm90b1Byb3BlcnRpZXNCeURlZmF1bHQiLCJtZXRob2RzIiwiYWxsb3dlZFByb3RvTWV0aG9kcyIsImFsbG93UHJvdG9NZXRob2RzQnlEZWZhdWx0IiwicmVzdWx0SXNBbGxvd2VkIiwicmVzdWx0IiwicHJvdG9BY2Nlc3NDb250cm9sIiwicHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZSIsImxvZ2dlZFByb3BlcnRpZXMiLCJsb2dVbmV4cGVjZWRQcm9wZXJ0eUFjY2Vzc09uY2UiLCJjaGVja1doaXRlTGlzdCIsIndyYXBIZWxwZXIiLCJ0cmFuc2Zvcm1PcHRpb25zRm4iLCJtZXRob2RNYXAiLCJsb29rdXBMZXZlbCIsImxldmVsTWFwIiwiaW5kZXhPZiIsInRvTG93ZXJDYXNlIiwicGFyc2VJbnQiLCJjb25zb2xlIiwibWV0aG9kIiwicm9vdCIsIndpbmRvdyIsIiRIYW5kbGViYXJzIiwibm9Db25mbGljdCIsImNoZWNrUmV2aXNpb24iLCJjb21waWxlckluZm8iLCJjb21waWxlclJldmlzaW9uIiwiY3VycmVudFJldmlzaW9uIiwiX2Jhc2UiLCJydW50aW1lVmVyc2lvbnMiLCJjb21waWxlclZlcnNpb25zIiwidGVtcGxhdGVTcGVjIiwiZW52IiwibWFpbiIsImRlY29yYXRvciIsIm1haW5fZCIsImNvbXBpbGVyIiwidGVtcGxhdGVXYXNQcmVjb21waWxlZFdpdGhDb21waWxlclY3Iiwic3RyaWN0IiwibG9va3VwIiwiZGVwdGhzIiwibGVuIiwibGFtYmRhIiwiY3VycmVudCIsImludm9rZVBhcnRpYWwiLCJyZXNvbHZlUGFydGlhbCIsImV4dGVuZGVkT3B0aW9ucyIsImNvbXBpbGUiLCJjb21waWxlck9wdGlvbnMiLCJpbmRlbnQiLCJsaW5lcyIsInNwbGl0IiwibCIsImpvaW4iLCJwcm9ncmFtcyIsImRlY2xhcmVkQmxvY2tQYXJhbXMiLCJwcm9ncmFtV3JhcHBlciIsIndyYXBQcm9ncmFtIiwiZGVwdGgiLCJfcGFyZW50IiwibWVyZ2VJZk5lZWRlZCIsInBhcmFtIiwiY29tbW9uIiwic2VhbCIsIl9zZXR1cCIsInVzZURhdGEiLCJpbml0RGF0YSIsInVzZUJsb2NrUGFyYW1zIiwidXNlRGVwdGhzIiwiZXhlY3V0ZURlY29yYXRvcnMiLCJpc1RvcCIsIm1lcmdlZEhlbHBlcnMiLCJfaW50ZXJuYWxXcmFwSGVscGVyIiwicGFzc0xvb2t1cFByb3BlcnR5T3B0aW9uIiwid3JhcEhlbHBlcnNUb1Bhc3NMb29rdXBQcm9wZXJ0eSIsInVzZVBhcnRpYWwiLCJ1c2VEZWNvcmF0b3JzIiwia2VlcEhlbHBlckluSGVscGVycyIsImFsbG93Q2FsbHNUb0hlbHBlck1pc3NpbmciLCJfY2hpbGQiLCJjdXJyZW50UGFydGlhbEJsb2NrIiwicGFydGlhbEJsb2NrIiwiRnVuY3Rpb24iLCJwcm9nIiwiY3VycmVudERlcHRocyIsInN0cmluZyIsInRvSFRNTCIsImFycmF5IiwicG9zc2libGUiLCJ0ZXN0IiwicmVwbGFjZSIsImJhZENoYXJzIiwiZXNjYXBlQ2hhciIsIm9iamVjdCIsImZyYW1lIiwicGFyYW1zIiwicGF0aCIsImlkIiwiZXNjYXBlIiwiY2hyIiwiZmFjdG9yeSIsIlB1YlN1YiIsIndhcm4iLCJtZXNzYWdlcyIsImxhc3RVaWQiLCJjYWxsU3Vic2NyaWJlcldpdGhEZWxheWVkRXhjZXB0aW9ucyIsInN1YnNjcmliZXIiLCJleCIsInNldFRpbWVvdXQiLCJ0aHJvd0V4Y2VwdGlvbiIsImNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMiLCJkZWxpdmVyTWVzc2FnZSIsIm9yaWdpbmFsTWVzc2FnZSIsIm1hdGNoZWRNZXNzYWdlIiwiaW1tZWRpYXRlRXhjZXB0aW9ucyIsInMiLCJzdWJzY3JpYmVycyIsImNhbGxTdWJzY3JpYmVyIiwiaGFzRGlyZWN0U3Vic2NyaWJlcnNGb3IiLCJ0b3BpYyIsIlN0cmluZyIsIkJvb2xlYW4iLCJoYXNLZXlzIiwicHVibGlzaCIsInN5bmMiLCJkZWxpdmVyIiwicG9zaXRpb24iLCJsYXN0SW5kZXhPZiIsInN1YnN0ciIsImNyZWF0ZURlbGl2ZXJ5RnVuY3Rpb24iLCJmb3VuZCIsIm1lc3NhZ2VIYXNTdWJzY3JpYmVycyIsInB1Ymxpc2hTeW5jIiwic3Vic2NyaWJlIiwiZnVuYyIsInRva2VuIiwic3Vic2NyaWJlQWxsIiwic3Vic2NyaWJlT25jZSIsInVuc3Vic2NyaWJlIiwiY2xlYXJBbGxTdWJzY3JpcHRpb25zIiwiY2xlYXJTdWJzY3JpcHRpb25zIiwibSIsImNvdW50U3Vic2NyaXB0aW9ucyIsImNvdW50IiwiZ2V0U3Vic2NyaXB0aW9ucyIsImxpc3QiLCJ0IiwiaXNUb3BpYyIsImRlc2NlbmRhbnRUb3BpY0V4aXN0cyIsImlzVG9rZW4iLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJsb2FkZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibiIsImdldHRlciIsImQiLCJhIiwiZGVmaW5pdGlvbiIsIm8iLCJnZXQiLCJnbG9iYWxUaGlzIiwiZSIsInByb3AiLCJubWQiLCJwYXRocyIsImNoaWxkcmVuIiwicmFuZG9tSW5kZXgiLCJjdXJyZW50SW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJHYW1lYm9hcmRHZXR0ZXIiLCJtYXhIb3Jpem9udGFsTGVuZ3RoQ2FuQmVPY2N1cGllZCIsImJvYXJkIiwiaG9yaXpvbnRhbExlbmd0aCIsInNoaXBzQm9hcmQiLCJnZXRTaGlwc0JvYXJkIiwiZ2V0SGVpZ2h0IiwiZ2V0V2lkdGgiLCJjbnQiLCJtYXgiLCJtYXhWZXJ0aWNhbExlbmd0aENhbkJlT2NjdXBpZWQiLCJ2ZXJ0aWNhbExlbmd0aCIsImNoZWNrSWZXaG9sZU51bWJlciIsIm51bSIsIk51bWJlciIsImlzSW50ZWdlciIsImNoZWNrSWZQb3NpdGl2ZU51bWJlciIsIkdhbWVib2FyZENoZWNrZXIiLCJpc091dHNpZGVCb2FyZCIsInJvdyIsImNvbCIsImNhbkFkZFNoaXAiLCJub3RQbGFjZWRMZW5ndGgiLCJnZXRTaGlwcyIsIml0ZW0iLCJzaGlwIiwiZ2V0TGVuZ3RoIiwiZ2V0QmxvY2tOb3RPY2N1cGllZCIsImNhblBsYWNlU2hpcCIsInNoaXBJbmRleCIsImlzVmVydGljYWwiLCJzaGlwVG9QbGFjZSIsImdldFNoaXAiLCJpc0hpdCIsImdldEhpdHNCb2FyZCIsImFyZUFsbFNoaXBzU3VuayIsImdldFNoaXBzQWxpdmUiLCJjaGVja0lmQWxsU2hpcHNQbGFjZWQiLCJzaGlwc0FycmF5IiwiY2hlY2tJZk5vbk9mU2hpcHNQbGFjZWQiLCJHYW1lYm9hcmRDb250cm9sbGVyIiwicGxhY2VTaGlwIiwic2V0U2hpcE9yaWVudGF0aW9uIiwic2V0U2hpcFN0YXJ0UG9pbnQiLCJzZXRTaGlwQm9hcmRDZWxsIiwiZGVjcmVhc2VCbG9ja05vdE9jY3VwaWVkIiwidW5wbGFjZVNoaXAiLCJpc1N1bmsiLCJkZWNyZWFzZVNoaXBzQWxpdmUiLCJyZW1vdmVGcm9tSGl0c0JvYXJkIiwicmVtb3ZlRnJvbVNoaXBzQm9hcmQiLCJpbmNyZWFzZUJsb2NrTm90T2NjdXBpZWQiLCJhdXRvUGxhY2VTaGlwc0RQIiwiZHAiLCJ0aW1lIiwidGltZWxpbWl0IiwiZ2V0U2hpcHNDb3VudCIsIkRhdGUiLCJub3ciLCJib29sZWFuQm9hcmQiLCJtYXAiLCJjb252ZXJ0U2hpcHNCb2FyZFRvQm9vbGVhbiIsImhhcyIsInBsYWNlc0F2YWlsYWJsZSIsImFkZCIsImdldE5vdERhbWFnZWRDZWxscyIsImNlbGxzIiwiZ2V0RGFtYWdlZENlbGxzT2ZBbGl2ZURhbWFnZWRTaGlwcyIsIm1pblNoaXBIUERhbWFnZWQiLCJtYXhTaGlwSFBEYW1hZ2VkIiwiZGFtYWdlZENlbGxzIiwiZ2V0RGFtYWdlZENlbGxzIiwiY2VsbCIsImdldFNoaXBJbmRleEZyb21Db29yZGluYXRlIiwiZ2V0SFBEYW1hZ2VkIiwiaXNTaGlwVmVydGljYWwiLCJpc1ZlcnRpY2FsU2hpcCIsImFkZFRvUG9zc2libGVUYXJnZXRzIiwidGFyZ2V0cyIsImdldE1pbk5vdERhbWFnZWRTaGlwTGVuZ3RoIiwibWluTGVuZ3RoIiwibWluIiwiYWRkU2hpcCIsInB1c2hTaGlwIiwicmVjZWl2ZUF0dGFjayIsImJvYXJkVmlldyIsImhpdEJvYXJkQ2VsbCIsImhpdHRlZFNoaXBJbmRleCIsImhpdFBvaW50T25TaGlwIiwiZ2V0U2hpcFN0YXJ0UG9pbnQiLCJoaXR0ZWRTaGlwIiwiaGl0IiwicGxheWVyVmlldyIsInNoaXBMZW5ndGgiLCJhdXRvUGxhY2VTaGlwcyIsIlNldCIsInNvcnRTaGlwc0J5TGVuZ3RoRGVzYyIsImVycm9yIiwidW5wbGFjZUFsbFNoaXBzIiwicmVtb3ZlQWxsU2hpcHMiLCJyZW1vdmVTaGlwIiwiZ2V0U21hcnRUYXJnZXRzIiwiZ2V0Tm90RGFtYWdlZFNtYXJ0VGFyZ2V0cyIsIm1pblNoaXBMZW5ndGgiLCJnZXRIb3Jpem9udGFsTm90RGFtYWdlZExlbmd0aCIsImdldFZlcnRpY2FsTm90RGFtYWdlZExlbmd0aCIsIkNvdW50ZXIiLCJjb3VudGVyRWxlbWVudCIsInN0YXJ0aW5nTnVtYmVyIiwicXVlcnlTZWxlY3RvciIsInVwZGF0ZUNvdW50ZXIiLCJhZGRFdmVudExpc3RlbmVyIiwidXBkYXRlSWZMaW1pdFJlYWNoZWQiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJ0ZXh0Q29udGVudCIsImN1cnJlbnROdW1iZXIiLCJ1cGRhdGVNYXgiLCJjcmVhdGVTaGlwRWxlbWVudCIsImxpbWl0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2hpcEJsb2NrIiwiYXBwZW5kIiwibGVmdFBhcmVudGhlc2lzIiwiY3JlYXRlVGV4dE5vZGUiLCJmcm9tQ2hhckNvZGUiLCJyaWdodFBhcmVudGhlc2lzIiwiY3JlYXRlU2hpcENvbnRhaW5lckVsZW1lbnQiLCJzaGlwQ29udGFpbmVyIiwicCIsImlubmVyVGV4dCIsInNoaXBzQ291bnRTcGFuIiwiZGF0YXNldCIsImJ1dHRvbiIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsIkNob29zaW5nU2hpcHNNb2RhbCIsImJvYXJkV2lkdGgiLCJib2FyZEhlaWdodCIsImNhY2hlRE9NIiwiY3JlYXRlU2hpcHNQYWdlcyIsImluaXRQYWdpbmF0aW9uIiwidXBkYXRlTWF4U2hpcHNDaG9vc2luZ051bWJlciIsImJpbmRFdmVudHMiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJib2R5IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWxlbWVudCIsImJpbmRQYWdpbmF0aW9uRXZlbnRzIiwidXBkYXRlUGFnaW5hdGlvblN0eWxlIiwiY29udGFpbnMiLCJwYWdpbmF0ZUxlZnQiLCJwYWdpbmF0ZVJpZ2h0Iiwic3R5bGUiLCJyaWdodCIsImNsb3Nlc3QiLCJnZXRNYXhTaGlwTGVuZ3RoIiwiY3JlYXRlUGFnZSIsImZpcnN0U2hpcExlbmd0aCIsInNoaXBzTnVtIiwicGFnZSIsImNyZWF0ZVNoaXBDb250YWluZXIiLCJzaGlwQ291bnQiLCJzaGlwRWxlbWVudCIsInJlcGxhY2VXaXRoIiwibW9kYWxDb250YWluZXJFbGVtZW50IiwibW9kYWxFbGVtZW50IiwiZ2V0U2hpcHNMaXN0Iiwic2hpcHNMaXN0IiwiYm9hcmRTaXplIiwicGlja2VkU2hpcEJsb2Nrc1N1bSIsImZyb20iLCJSdWxlc01vZGFsIiwiR2FtZVR5cGVNb2RhbCIsInNldEh1bWFuTnVtYmVyIiwiYmluZCIsImdldGh1bWFuTnVtYmVyIiwiR3JpZFNpemVNb2RhbCIsInJlbmRlckJvYXJkIiwiaW5uZXJIVE1MIiwic2V0UHJvcGVydHkiLCJibG9jayIsIlNoaXAiLCJocFJlbWFpbmVkIiwiaGl0cG9pbnRzIiwicHJvdG8iLCJnZXRIUFJlbWFpbmVkIiwiZ2V0SGl0cG9pbnRzIiwiR2FtZWJvYXJkIiwid2lkdGgiLCJoZWlnaHQiLCJzaGlwcyIsImhpdHNCb2FyZCIsInNoaXBzQWxpdmUiLCJibG9ja3NOb3RPY2N1cGllZCIsImdldFNoaXBGcm9tQ29vcmRpbmF0ZSIsInNwbGljZSIsInJlbW92ZVNoaXBCeUNvb3JkaW5hdGVzIiwiY29waWVkU2hpcHNCb2FyZCIsImNvcGllZEhpdHNCb2FyZCIsInNvcnQiLCJiIiwiQm9hcmRIZWxwZXIiLCJnZXRCbG9ja0luZGV4RnJvbUNvb3JkaW5hdGVzIiwiZ2V0Q29vcmRpbmF0ZXNGcm9tQmxvY2tJbmRleCIsImJsb2NrSW5kZXgiLCJnZXRCbG9ja0luZGV4RnJvbUJsb2NrRWxlbWVudCIsImJvYXJkRWxlbWVudCIsImJsb2NrRWxlbWVudCIsImdldEJsb2NrVG9wT2Zmc2V0Iiwib2Zmc2V0VG9wIiwiZ2V0QmxvY2tMZWZ0T2Zmc2V0Iiwib2Zmc2V0TGVmdCIsImNyZWF0ZVNoaXBPbkJvYXJkIiwidG9wIiwibGVmdCIsIlNoaXBzUGxhY2luZ01vZGFsIiwicGxheWVyc051bSIsImN1cnJlbnRQbGF5ZXJOdW0iLCJpc0ZpcnN0Um91bmQiLCJwbGF5ZXJOYW1lIiwicGxheWVyTGFiZWwiLCJpbml0UGxheWVyQXJlYSIsImluaXRTaGlwc0FyZWEiLCJpbml0Qm9hcmRBcmVhIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiY2FjaGVQbGF5ZXJBcmVhRE9NIiwiY2FjaGVTaGlwc0FyZWFET00iLCJjYWNoZVBhZ2luYXRpb25ET00iLCJjYWNoZUJvYXJkQXJlYURPTSIsImJpbmRQbGF5ZXJBcmVhRXZlbnRzIiwiYmluZFNoaXBzQXJlYUV2ZW50cyIsImJpbmRCb2FyZEFyZWFFdmVudHMiLCJociIsIm9uS2V5UHJlc3NQbGF5ZXJOYW1lIiwiY2hlY2tJZk1heFBsYXllck5hbWVSZWFjaGVkIiwicHJldmVudERlZmF1bHQiLCJnZXRQbGF5ZXJOYW1lIiwic2V0QWN0aXZlU2hpcCIsImNyZWF0ZVRlbXBTaGlwIiwic2V0UGxhY2VPcHRpb25BY3RpdmUiLCJpbmNyZWFzZVNoaXBDb3VudCIsImN1cnJlbnRDb3VudCIsImRlY3JlYXNlU2hpcENvdW50IiwicmVzZXRBbGxTaGlwc0NvdW50IiwiYWN0aXZlU2hpcENvbnRhaW5lciIsImZpcnN0U2hpcEluZGV4IiwiYmluZFBsYWNlU2hpcHNFdmVudHMiLCJ0YXJnZXQiLCJvbkNsaWNrUGxhY2VTaGlwT25Cb2FyZCIsIk9uTW91c2VFbnRlckJvYXJkQmxvY2siLCJvbk1vdXNlTGVhdmVCb2FyZEJsb2NrIiwib25jZSIsInBsYWNlU2hpcE9uQm9hcmQiLCJjdXJyZW50SWQiLCJzZXRFbXB0eUNlbGxzIiwicmVtb3ZlQWxsU2hpcHNGcm9tQm9hcmQiLCJ0ZW1wQm9hcmQiLCJpc1BsYWNlZCIsImJpbmRSZW1vdmVTaGlwc0V2ZW50cyIsIm9uQ2xpY2tSZW1vdmVTaGlwRnJvbUJvYXJkIiwicmVtb3ZlU2hpcEZyb21Cb2FyZEJ5SWQiLCJvbkNsaWNrU2V0UGxhY2VPcHRpb25BY3RpdmUiLCJidXR0b25FbGVtZW50Iiwib3B0aW9uIiwiYWN0aXZlQnV0dG9uIiwiR2FtZWJvYXJkVmlldyIsIkF1ZGlvIiwicmVuZGVyIiwiZ2V0Qm9hcmRFbGVtZW50IiwiYmxvY2tzIiwiYWRkU2hpcHNUb0JvYXJkIiwic2V0U2hpcHNCbG9ja3NCb2FyZCIsImF0dGFja0ZhaWxlZCIsInBsYXlTb3VuZCIsImF0dGFja1N1Y2NlZGVkIiwiYXVkaW8iLCJwYXVzZSIsImN1cnJlbnRUaW1lIiwicGxheSIsImRpc2FibGVCb2FyZCIsImVuYWJsZUJvYXJkIiwiUGxheWVyVmlldyIsImdhbWVWaWV3IiwiY3JlYXRlQm9hcmQiLCJpbml0U2hpcHNSZW1haW5lZCIsImluaXRTY29yZSIsImNhY2hlVHVybkRPTSIsImNhY2hlU2hpcHNSZW1haW5lZERPTSIsImNhY2hlU2NvcmVET00iLCJjYWNoZURhcmtlbmluZ0RPTSIsImJpbmRTaGlwc1JlbWFpbmVkRXZlbnRzIiwiYWRkU2hpcHNUb3NoaXBzUmVtYWluZWRFbGVtZW50IiwiaW5pdFNoaXBzUmVtYWluZWRQYWdpbmF0aW9uIiwiY2FjaGVTaGlwc1JlbWFpbmVkUGFnaW5hdGlvbkRPTSIsIm1vdXNlRW50ZXJJbmZvIiwibW91c2VMZWF2ZUluZm8iLCJiaW5kU2hpcHNSZW1haW5lZFBhZ2luYXRpb25FdmVudHMiLCJzaGlwc0xpc3RDb3VudCIsInNpbmtTaGlwIiwiY291bnRFbGVtZW50IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidG9nZ2xlQXJyb3dzU3RhdGUiLCJwYXJlbnRFbGVtZW50Iiwic2Nyb2xsIiwic3RvcFNjcm9sbGluZyIsInRhcmdldERpc3RhbmNlIiwiZ2V0UmVzcG9uc2l2ZVNjcm9sbCIsInNjcm9sbERpcmVjdGlvbiIsImNoZWNrSWZTY3JlZW5TbWFsbCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImtlZXBTY3JvbGxpbmciLCJ0aGVuIiwiY2F0Y2giLCJmaW5hbGx5IiwiY2hlY2tJZkxlZnRNb3N0UmVhY2hlZCIsImNoZWNrSWZSaWdodE1vc3RSZWFjaGVkIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0Iiwic2Nyb2xsV2lkdGgiLCJjbGllbnRXaWR0aCIsImdldENvbXB1dGVkU3R5bGUiLCJ0cmFuc2Zvcm0iLCJzZXRUdXJuIiwic2hvd1R1cm5MYWJlbCIsImRhcmtlbiIsInVuc2V0VHVybiIsImhpZGVUdXJuTGFiZWwiLCJyZW1vdmVEYXJrZW5pbmciLCJzZXRQbGF5ZXJOYW1lIiwic2V0V2lucyIsImluY3JlYXNlV2lucyIsInNldExvc3NlcyIsImluY3JlYXNlTG9zc2VzIiwic2hvd1Njb3JlIiwiaGlkZVNjb3JlIiwiZ2V0UGxheWVyQXJlYUVsZW1lbnQiLCJzaG93V2luTGFiZWwiLCJzaG93TG9zZUxhYmVsIiwiY29udGFpbmVyRWxlbWVudCIsInBhdXNlQ29udGFpbmVyRWxlbWVudCIsIkdhbWVWaWV3IiwiZ2FtZSIsImNyZWF0ZVJvb3RFbGVtZW50IiwiY3JlYXRlUGF1c2VDb250YWluZXIiLCJnYW1lSWQiLCJjcmVhdGVHYW1lQXJlbmEiLCJjYWNoZUdhbWVBcmVuYURPTSIsImNyZWF0ZVBsYXllcnNWaWV3cyIsImdldFBsYXllclZpZXciLCJjcmVhdGVTdGFydEdhbWVMYWJlbCIsImNhY2hlUGxheWVyc0FyZWFzRE9NIiwiZW5kR2FtZSIsIndpbm5lckluZGV4IiwiY3JlYXRlTmV4dEdhbWVMYWJlbCIsImJ0bk5leHRHYW1lIiwiYmluZE5leHRHYW1lQnV0dG9uRXZlbnRzIiwiTmV4dEdhbWVCdXR0b25DbGljayIsImRpc3BsYXlTY29yZXMiLCJoaWRlU2NvcmVzIiwiYXN5bmMiLCJidG5TdGFydEdhbWUiLCJiaW5kU3RhcnRHYW1lQnV0dG9uRXZlbnRzIiwic3RhcnRHYW1lQnV0dG9uQ2xpY2siLCJzY3JvbGxUb0VuZW15QXJlYSIsImN1cnJlbnRFbmVteUluZGV4IiwiYWRkUGxheWVyVmlldyIsInVwZGF0ZVNjb3JlcyIsInNjb3JlcyIsIndpbnMiLCJsb3NzZXMiLCJwbGF5ZXJzVmlld3MiLCJwbGF5ZXJJbmRleCIsImVuZW15SW5kZXgiLCJzY3JvbGxJbnRvVmlldyIsImNoYW5nZVR1cm4iLCJuZXdUdXJuIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInRyaW0iLCJmcmVzaFN0YXJ0IiwicGxheWVyc05hbWVzIiwiY3JlYXRlUnVsZXNNb2RhbCIsImNyZWF0ZUdhbWVUeXBlTW9kYWwiLCJtb2RhbHNPcmRlciIsImNyZWF0ZUdyaWRTaXplTW9kYWwiLCJjcmVhdGVTaGlwc0Nob29zaW5nTW9kYWwiLCJjcmVhdGVTaGlwc1BsYWNpbmdNb2RhbCIsImh1bWFuTnVtYmVyIiwicGxheWVycyIsIm1vZGFsSW5zdGFuY2UiLCJkaXNwbGF5TW9kYWwiLCJydWxlc01vZGFsU3VibWl0IiwicmVtb3ZlTW9kYWwiLCJnYW1lVHlwZU1vZGFsU3VibWl0IiwiZ3JpZFNpemVNb2RhbFN1Ym1pdCIsInNoaXBzQ2hvb3NpbmdNb2RhbFN1Ym1pdCIsImJ0bkJhY2siLCJwbGF5ZXJOdW1iZXIiLCJzaGlwc1BsYWNpbmdNb2RhbFN1Ym1pdCIsImlzQm90IiwicG9wIiwiR2FtZSIsInJ1bm5pbmciLCJhZGRQbGF5ZXIiLCJwbGF5ZXIiLCJnZXRQbGF5ZXIiLCJnZXRQbGF5ZXJzIiwiZ2V0UGxheWVyc0NvdW50IiwiaW5jcmVhc2VDdXJyZW50Um91bmQiLCJjdXJyZW50Um91bmQiLCJjdXJyZW50UGxheWVySW5kZXgiLCJnZXRDdXJyZW50UGxheWVyIiwiZ2V0Q3VycmVudEVuZW15IiwiYWRkV2lubmVyIiwid2lubmVycyIsImdldExhc3RXaW5uZXIiLCJpbmNyZWFzZUN1cnJlbnRUdXJuIiwicmVzZXRDdXJyZW50VHVybiIsImN1cnJlbnRUdXJuIiwiUGxheWVyIiwiaW5jcmVhc2VQbGF5ZXJSb3VuZHMiLCJwbGF5ZWRSb3VuZHMiLCJpbmNyZWFzZVdpblJvdW5kcyIsIndpblJvdW5kcyIsIkdhbWVDb250cm9sbGVyIiwic3RhcnRNb3ZlIiwidmlldyIsImNvbXB1dGVyQXR0YWNrIiwidGFyZ2V0ZWRDZWxsIiwiZ2VuZXJhdGVHYW1lIiwiZ2FtZXNDb250YWluZXIiLCJjcmVhdGVHYW1lVmlldyIsIm5ld0dhbWUiLCJwbGF5ZXJEYXRhIiwiYWRkZWRTaGlwSW5kZXgiLCJzdGFydEdhbWUiLCJzdGFydGluZ1BsYXllckluZGV4IiwiZ2VuZXJhdGVSYW5kb21QbGF5ZXJJbmRleCIsInNldFN0YXJ0aW5nUGxheWVyIiwiZmlyc3RUdXJuIiwiYXR0YWNrIiwiY3VycmVudFBsYXllclR1cm5FbmQiLCJnZW5lcmF0ZU5leHRSb3VuZCIsImdlbmVyYXRlQ29tcHV0ZXJQbGF5ZXIiLCJjb21wdXRlclBsYXllciIsImJvYXJkU2hpcHMiLCJtc2ciLCJwcmV2aW91c1BsYXllclZpZXciLCJnZXRFbGVtZW50QnlJZCJdLCJzb3VyY2VSb290IjoiIn0=