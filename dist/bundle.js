/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={6727:(e,n,r)=>{"use strict";r.d(n,{Z:()=>O});var t=r(7537),i=r.n(t),a=r(3645),o=r.n(a),s=r(3538),l=r(1667),c=r.n(l),d=new URL(r(7608),r.b),u=new URL(r(777),r.b),h=new URL(r(1285),r.b),A=new URL(r(7278),r.b),p=new URL(r(8999),r.b),m=new URL(r(5650),r.b),f=new URL(r(9153),r.b),g=new URL(r(9367),r.b),v=new URL(r(7807),r.b),b=new URL(r(3651),r.b),C=new URL(r(7594),r.b),w=o()(i());w.i(s.Z);var y=c()(d),k=c()(u),x=c()(h),B=c()(A),E=c()(p),S=c()(m),I=c()(f),M=c()(g),z=c()(v),L=c()(b),P=c()(C);w.push([e.id,'.outline-small,.outline-orange,.ships-placing-modal .ships .pages-container .page .ship-container .ship-compressed.active .ship-block,.outline-blue,.ships-placing-modal .board-container .place-options button.active,.ships-placing-modal section.place-ships .auto-place-container .btn-auto-place:active,.pagination .arrow-container-button:active,.counter .minus:active,.grid-size-modal section.section-grid-size .width-counter .minus:active,.grid-size-modal section.section-grid-size .height-counter .minus:active,.counter .plus:active,.grid-size-modal section.section-grid-size .width-counter .plus:active,.grid-size-modal section.section-grid-size .height-counter .plus:active,input[type=radio]:checked+span{outline-width:2px;outline-style:solid}.outline-medium,.ships-placing-modal .ships .pages-container .page .ship-container .ship-compressed.active .ship-block{outline-width:3px;outline-style:solid}.outline-thick,.ships-placing-modal .board-container .place-options button.active,.ships-placing-modal section.place-ships .auto-place-container .btn-auto-place:active,input[type=radio]:checked+span{outline-width:4px;outline-style:solid}.outline-blue,.ships-placing-modal .board-container .place-options button.active,.ships-placing-modal section.place-ships .auto-place-container .btn-auto-place:active,.pagination .arrow-container-button:active,.counter .minus:active,.grid-size-modal section.section-grid-size .width-counter .minus:active,.grid-size-modal section.section-grid-size .height-counter .minus:active,.counter .plus:active,.grid-size-modal section.section-grid-size .width-counter .plus:active,.grid-size-modal section.section-grid-size .height-counter .plus:active,input[type=radio]:checked+span{outline-color:#383a8a}.outline-orange,.ships-placing-modal .ships .pages-container .page .ship-container .ship-compressed.active .ship-block{outline-color:#f5562e}.border-small,.border-white,.ships-remained-container::before,.ships-remained-container-responsive::before,.rounds-container,.ship-block,.border-grey,.board-block,.wooden-container,.ships-placing-modal .board-container .place-options button,.ships-placing-modal section.place-ships .auto-place-container .btn-auto-place,.grid-size-modal section.section-grid-size .width-label,.grid-size-modal section.section-grid-size .height-label,.pagination .arrow-container-button,.counter .minus,.grid-size-modal section.section-grid-size .width-counter .minus,.grid-size-modal section.section-grid-size .height-counter .minus,.counter .plus,.grid-size-modal section.section-grid-size .width-counter .plus,.grid-size-modal section.section-grid-size .height-counter .plus,input[type=radio]+span,.modal-body header h3{border-width:1px;border-style:solid}.border-medium,.ships-remained-container::before,.ships-remained-container-responsive::before,.rounds-container{border-width:3px;border-style:solid}.border-grey,.board-block,.wooden-container,.ships-placing-modal .board-container .place-options button,.ships-placing-modal section.place-ships .auto-place-container .btn-auto-place,.grid-size-modal section.section-grid-size .width-label,.grid-size-modal section.section-grid-size .height-label,.pagination .arrow-container-button,.counter .minus,.grid-size-modal section.section-grid-size .width-counter .minus,.grid-size-modal section.section-grid-size .height-counter .minus,.counter .plus,.grid-size-modal section.section-grid-size .width-counter .plus,.grid-size-modal section.section-grid-size .height-counter .plus,input[type=radio]+span,.modal-body header h3{border-color:#95989a}.border-white,.ships-remained-container::before,.ships-remained-container-responsive::before,.rounds-container,.ship-block{border-color:#fff}.bdrs-1,.modal-header h2,.wooden-container,.ships-placing-modal .board-container .place-options button,.ships-placing-modal section.place-ships .auto-place-container .btn-auto-place,.grid-size-modal section.section-grid-size .width-label,.grid-size-modal section.section-grid-size .height-label,.pagination .arrow-container-button,.counter .minus,.grid-size-modal section.section-grid-size .width-counter .minus,.grid-size-modal section.section-grid-size .height-counter .minus,.counter .plus,.grid-size-modal section.section-grid-size .width-counter .plus,.grid-size-modal section.section-grid-size .height-counter .plus,input[type=radio]+span,.modal-body header h3{border-radius:.5rem}.bdrs-2,input{border-radius:.75rem}.bdrs-3{border-radius:1rem}.bdrs-4,.modal-options button{border-radius:1.5rem}button{padding:1rem 2rem;background-color:rgba(0,0,0,0);border:none;color:inherit}button[disabled]{position:relative;overflow:hidden}button[disabled]::before{content:"";background-color:rgba(0,0,0,.5)}.chained-container,.next-game-container,.start-game-container,.player-area .turn-row .turn-container,.modal,.ships-placing-modal,.ships-choosing-modal,.rules-modal,.grid-size-modal,.game-type-modal{position:absolute;transition:bottom .3s linear}.chained-container::before,.next-game-container::before,.start-game-container::before,.player-area .turn-row .turn-container::before,.modal::before,.ships-placing-modal::before,.ships-choosing-modal::before,.rules-modal::before,.grid-size-modal::before,.game-type-modal::before,.chained-container::after,.next-game-container::after,.start-game-container::after,.player-area .turn-row .turn-container::after,.modal::after,.ships-placing-modal::after,.ships-choosing-modal::after,.rules-modal::after,.grid-size-modal::after,.game-type-modal::after{background-image:url('+y+');background-size:100% auto;background-position:center;background-repeat:repeat-y;content:"";position:absolute;top:0;height:100vh;width:15px;transform-origin:50% 0;transform:rotate(180deg)}.chained-container::before,.next-game-container::before,.start-game-container::before,.player-area .turn-row .turn-container::before,.modal::before,.ships-placing-modal::before,.ships-choosing-modal::before,.rules-modal::before,.grid-size-modal::before,.game-type-modal::before{left:20px}.chained-container::after,.next-game-container::after,.start-game-container::after,.player-area .turn-row .turn-container::after,.modal::after,.ships-placing-modal::after,.ships-choosing-modal::after,.rules-modal::after,.grid-size-modal::after,.game-type-modal::after{right:20px}.light-wood-container,.player-area .turn-row .turn-container,.modal,.ships-placing-modal,.ships-choosing-modal,.rules-modal,.grid-size-modal,.game-type-modal{background-image:url('+k+");background-size:100% auto;background-position:0 90%;background-repeat:repeat-y}.dark-wood-container,.next-game-container,.start-game-container,.modal-header h2{background-image:url("+x+");background-size:100% auto;background-position:0 90%;background-repeat:repeat-y}.smooth-dark-wood-container,.modal-options button,.wooden-container,.ships-placing-modal .board-container .place-options button,.ships-placing-modal section.place-ships .auto-place-container .btn-auto-place,.grid-size-modal section.section-grid-size .width-label,.grid-size-modal section.section-grid-size .height-label,.pagination .arrow-container-button,.counter .minus,.grid-size-modal section.section-grid-size .width-counter .minus,.grid-size-modal section.section-grid-size .height-counter .minus,.counter .plus,.grid-size-modal section.section-grid-size .width-counter .plus,.grid-size-modal section.section-grid-size .height-counter .plus,input[type=radio]+span,.modal-body header h3{background-image:url("+B+");background-size:cover;background-position:center;background-repeat:no-repeat}.wooden-container,.ships-placing-modal .board-container .place-options button,.ships-placing-modal section.place-ships .auto-place-container .btn-auto-place,.grid-size-modal section.section-grid-size .width-label,.grid-size-modal section.section-grid-size .height-label,.pagination .arrow-container-button,.counter .minus,.grid-size-modal section.section-grid-size .width-counter .minus,.grid-size-modal section.section-grid-size .height-counter .minus,.counter .plus,.grid-size-modal section.section-grid-size .width-counter .plus,.grid-size-modal section.section-grid-size .height-counter .plus,input[type=radio]+span,.modal-body header h3{padding:1rem 3.5rem;font-weight:bold}.flex-center,.middle-bisector,.player-area .score-container,.player-area .turn-row,.ships-placing-modal section.place-ships .auto-place-container,.game-type-modal .modal-body #form-game-type,.ship-compressed,.pagination,.counter,.grid-size-modal section.section-grid-size .width-counter,.grid-size-modal section.section-grid-size .height-counter,.ships-remained-container::before,.ships-remained-container-responsive::before,.rounds-container,.modal-options,.modal-container,.btn-icon,.ships-placing-modal .board-container .place-options .btn-remove{display:flex;align-items:center;justify-content:center}.absolute-100,.player-area .darkening,.player-area .score-container,.counter .minus.disabled::before,.grid-size-modal section.section-grid-size .width-counter .minus.disabled::before,.grid-size-modal section.section-grid-size .height-counter .minus.disabled::before,.counter .plus.disabled::before,.grid-size-modal section.section-grid-size .width-counter .plus.disabled::before,.grid-size-modal section.section-grid-size .height-counter .plus.disabled::before,.pause-container,.ships-remained-container::before,.ships-remained-container-responsive::before,.game-block:hover:not(.hit)::after,.ship-block:hover:not(.hit)::after,.board-block:hover:not(.hit)::after,.game-block-small:hover:not(.hit)::after,.ships-remained-container .ships .ship-container .ship-block:hover:not(.hit)::after,.ships-remained-container-responsive .ships .ship-container .ship-block:hover:not(.hit)::after,button[disabled]::before{position:absolute;top:0;left:0;width:100%;height:100%}.floating-label-input{position:relative}.floating-label-input input{padding:3rem 1.5rem 1rem}.floating-label-input input:focus+label,.floating-label-input input:not(:placeholder-shown)+label{top:5px;transform:translateY(0);font-size:.75em}.floating-label-input label{position:absolute;top:50%;transform:translateY(-50%);left:1.5rem;color:#cecece;cursor:text;transition:all .25s}.modal-container{width:100%;height:100%;position:fixed;z-index:10}.modal-container.active{overflow-y:auto}.modal,.ships-placing-modal,.ships-choosing-modal,.rules-modal,.grid-size-modal,.game-type-modal{padding:0;font-size:2rem;border-radius:2.5rem;position:absolute;bottom:130%;transition-property:bottom,transform;transition-timing-function:ease-out;transition-duration:.5s}.modal::before,.ships-placing-modal::before,.ships-choosing-modal::before,.rules-modal::before,.grid-size-modal::before,.game-type-modal::before,.modal::after,.ships-placing-modal::after,.ships-choosing-modal::after,.rules-modal::after,.grid-size-modal::after,.game-type-modal::after{width:30px}.modal::before,.ships-placing-modal::before,.ships-choosing-modal::before,.rules-modal::before,.grid-size-modal::before,.game-type-modal::before{left:60px}.modal::after,.ships-placing-modal::after,.ships-choosing-modal::after,.rules-modal::after,.grid-size-modal::after,.game-type-modal::after{right:60px}.modal.active,.active.ships-placing-modal,.active.ships-choosing-modal,.active.rules-modal,.active.grid-size-modal,.active.game-type-modal{bottom:50%;transform:translateY(calc(100% - 200px))}.modal-header{position:absolute;width:100%;top:-60px;text-align:center}.modal-header h2{display:inline-block;padding:1.5rem 2rem;font-size:calc(1em + 1rem)}.modal-body{min-width:30vw;padding-top:1rem}@media(max-width: 1100px){.modal-body{min-width:40vw}}@media(max-width: 768px){.modal-body{min-width:60vw}}@media(max-width: 575px){.modal-body{min-width:80vw}}.modal-body header{text-align:center}.modal-body header h3{display:inline-block}.modal-body label{display:inline-block}.modal-body section{padding:3rem;display:flex;flex-direction:column;gap:2rem}.modal-options{padding-top:2.5rem;padding-bottom:2rem;padding-left:2rem;padding-right:2rem;gap:3rem}.modal-options button{padding:1.25rem 6rem;font-weight:bold}.modal-spacer{height:50px;margin-bottom:-50px;width:100%}.icy-hr{height:10px;background-image:url("+E+");background-repeat:no-repeat;background-position:center;background-size:cover;margin:0;width:100%}.text-error{color:#e0cc18;font-size:1.6rem}.opacity-100{opacity:100% !important}.d-none{display:none !important}input{padding:1rem 2rem;background:#fff;border:none}input[type=radio]{appearance:none}input[type=radio]+span{cursor:pointer;display:inline-block}*,*::before,*::after{box-sizing:border-box}html{font-size:10px;scroll-behavior:smooth}body{background-image:url("+S+');background-size:cover;background-position:center;background-repeat:no-repeat;display:flex;flex-direction:column;min-height:100vh;font-size:1.6rem;line-height:1.6;font-family:Lato,Geneva,Tahoma,sans-serif;color:#fff;user-select:none}main{display:flex;flex-direction:column;flex-grow:1}h1,h2{font-weight:bold}h1{font-size:3.5rem}h2{font-size:3rem}svg{user-select:none}.game-block,.ship-block,.board-block,.game-block-small,.ships-remained-container .ships .ship-container .ship-block,.ships-remained-container-responsive .ships .ship-container .ship-block{width:35px;height:35px;position:relative;cursor:pointer}.game-block:hover:not(.hit)::after,.ship-block:hover:not(.hit)::after,.board-block:hover:not(.hit)::after,.game-block-small:hover:not(.hit)::after,.ships-remained-container .ships .ship-container .ship-block:hover:not(.hit)::after,.ships-remained-container-responsive .ships .ship-container .ship-block:hover:not(.hit)::after{content:"";background-color:rgba(0,0,0,.25)}.game-block-small,.ships-remained-container .ships .ship-container .ship-block,.ships-remained-container-responsive .ships .ship-container .ship-block{width:20px;height:20px}.board-block{background-image:url('+I+");background-size:cover;background-position:center;background-repeat:no-repeat}.board-block.disabled{pointer-events:none}.board-block.incorrect{background-image:url("+M+");background-size:contain;background-position:center;background-repeat:no-repeat;background-color:#8b1f1f}.ship-block{background-color:#29b84f}.ship-block.hidden{z-index:-1;visibility:hidden}.board{--board-horizontal-cells: 10;display:inline-grid;grid-template-columns:repeat(var(--board-horizontal-cells), auto);align-content:center}.board.disabled{pointer-events:none}.rounds-container{--angle: 0deg;border-radius:50%;padding:1rem;width:112px;aspect-ratio:1;background-image:url("+z+");transform:rotateY(var(--angle));transition:transform 1s}.rounds-container p{font-weight:bold;font-size:2rem;text-align:center;transform:rotateY(var(--angle));transition:inherit}.ships-remained-container,.ships-remained-container-responsive{background-image:url("+k+');background-repeat:repeat-y;padding:2rem 3rem 1rem;display:inline-grid;grid-template-columns:repeat(3, 1fr);gap:1rem;grid-template-areas:"ships ships ships" ". pagination info";align-items:center;position:relative;width:100%;max-width:calc(350px + 20%)}.ships-remained-container .ships,.ships-remained-container-responsive .ships{grid-area:ships;display:flex;gap:2rem;height:45px;overflow:hidden;font-size:2rem;font-weight:bold;scroll-behavior:smooth}.ships-remained-container .ships .ship-container,.ships-remained-container-responsive .ships .ship-container{display:flex;align-items:center;gap:10px}.ships-remained-container .ships .ship-container:not(:first-child)::before,.ships-remained-container-responsive .ships .ship-container:not(:first-child)::before{content:"";width:3px;height:100%;background-color:#fff}.ships-remained-container .pagination,.ships-remained-container-responsive .pagination{grid-area:pagination;justify-self:center;align-self:center}.ships-remained-container .info,.ships-remained-container-responsive .info{grid-area:info;justify-self:end;margin-right:-2rem;z-index:2}.ships-remained-container::before,.ships-remained-container-responsive::before{content:"Ships Remained";border-style:dashed;width:0;height:0;font-weight:bold;font-size:2rem;background-color:rgba(0,0,0,.8);overflow:hidden;z-index:1;opacity:0%}.ships-remained-container.help::before,.help.ships-remained-container-responsive::before{opacity:100%;width:100%;height:100%;transition:opacity .3s}@media(min-width: 575px)and (max-width: 1100px){.ships-remained-container-responsive{align-self:stretch;grid-template-rows:1fr auto auto;grid-template-columns:auto;grid-template-areas:"ships" "pagination" "info"}.ships-remained-container-responsive .ships{flex-direction:column;align-items:stretch;height:100%}.ships-remained-container-responsive .ships .ship-container{display:grid;grid-template-columns:auto auto}.ships-remained-container-responsive .ships .ship-container p{justify-self:end}.ships-remained-container-responsive .ships .ship-container:not(:first-child)::before{grid-column-start:1;grid-column-end:3;width:100%;height:3px}.ships-remained-container-responsive .pagination{flex-direction:column;gap:10px !important}.ships-remained-container-responsive .pagination .arrow-container{transform:rotate(90deg)}}.pause-container{background-color:rgba(0,0,0,.75);z-index:-1;opacity:0%;transition:all .25s ease-in}.pause-container.semi-active{z-index:3;opacity:30%;transition-property:opacity}.pause-container.active{z-index:3;opacity:80%;transition-property:opacity}.pause-container.front{z-index:20}.counter,.grid-size-modal section.section-grid-size .width-counter,.grid-size-modal section.section-grid-size .height-counter{gap:1.5rem;font-weight:bold}.counter .minus,.grid-size-modal section.section-grid-size .width-counter .minus,.grid-size-modal section.section-grid-size .height-counter .minus,.counter .plus,.grid-size-modal section.section-grid-size .width-counter .plus,.grid-size-modal section.section-grid-size .height-counter .plus{padding:.25rem;line-height:1;border:none;cursor:pointer}.counter .minus.disabled,.grid-size-modal section.section-grid-size .width-counter .minus.disabled,.grid-size-modal section.section-grid-size .height-counter .minus.disabled,.counter .plus.disabled,.grid-size-modal section.section-grid-size .width-counter .plus.disabled,.grid-size-modal section.section-grid-size .height-counter .plus.disabled{cursor:default;pointer-events:none;position:relative}.counter .minus.disabled::before,.grid-size-modal section.section-grid-size .width-counter .minus.disabled::before,.grid-size-modal section.section-grid-size .height-counter .minus.disabled::before,.counter .plus.disabled::before,.grid-size-modal section.section-grid-size .width-counter .plus.disabled::before,.grid-size-modal section.section-grid-size .height-counter .plus.disabled::before{content:"";background-color:rgba(0,0,0,.25)}.counter .minus svg,.grid-size-modal section.section-grid-size .width-counter .minus svg,.grid-size-modal section.section-grid-size .height-counter .minus svg,.counter .plus svg,.grid-size-modal section.section-grid-size .width-counter .plus svg,.grid-size-modal section.section-grid-size .height-counter .plus svg{color:#fff;width:30px;height:30px}.counter .number,.grid-size-modal section.section-grid-size .width-counter .number,.grid-size-modal section.section-grid-size .height-counter .number{font-size:calc(1em + .5rem)}.pagination{gap:10px}.pagination .arrow-container{border:none;cursor:pointer;color:#fff}.pagination .arrow-container.disabled{cursor:default;pointer-events:none}.pagination .arrow-container.disabled svg{cursor:default;color:#ccc}.pagination .arrow-container-button{padding:0 1rem}.ship{display:flex}.ship.vertical:not(.hidden){flex-direction:column}.ship.vertical:not(.hidden) .ship-block:not(:last-child){border-bottom-width:0}.ship.vertical:not(.hidden) .ship-block:not(:first-child){border-top-width:0}.ship.horizontal:not(.hidden){flex-direction:row}.ship.horizontal:not(.hidden) .ship-block:not(:last-child){border-right-width:0}.ship.horizontal:not(.hidden) .ship-block:not(:first-child){border-left-width:0}.ship.destroyed .ship-block{border-color:#f5562e}.ship-compressed{gap:.25rem}.ship-compressed .parenthesis{display:inline-block;font-size:2.75rem}.game-type-modal{transform:translateY(50%) !important}.game-type-modal .modal-body #form-game-type{gap:10rem}@media(max-width: 575px){.game-type-modal .modal-body #form-game-type{flex-direction:column;gap:3rem}}.grid-size-modal .modal-body{min-width:35vw}@media(max-width: 1100px){.grid-size-modal .modal-body{min-width:50vw}}@media(max-width: 768px){.grid-size-modal .modal-body{min-width:70vw}}.grid-size-modal section.section-grid-size{display:grid;grid-template-columns:1fr 1fr;grid-template-areas:"header header" "width height" "width-counter height-counter" "board board";justify-items:center;row-gap:3rem}.grid-size-modal section.section-grid-size header{grid-area:header}.grid-size-modal section.section-grid-size .width-label{grid-area:width}.grid-size-modal section.section-grid-size .height-label{grid-area:height}.grid-size-modal section.section-grid-size .width-counter{grid-area:width-counter}.grid-size-modal section.section-grid-size .height-counter{grid-area:height-counter}.grid-size-modal section.section-grid-size .width-label,.grid-size-modal section.section-grid-size .height-label{background-image:url('+L+');padding-left:1.3rem;padding-right:1.3rem}.grid-size-modal section.section-grid-size .board{grid-area:board;height:350px}.grid-size-modal section.section-grid-size .board .board-block{cursor:default}.rules-modal .modal-body{max-width:40vw}@media(max-width: 1100px){.rules-modal .modal-body{max-width:60vw}}@media(max-width: 1100px){.rules-modal .modal-body{max-width:50vw}}@media(max-width: 768px){.rules-modal .modal-body{max-width:70vw}}.section-gameplay{padding-top:0 !important}.section-gameplay ol,.section-gameplay ul{margin-left:2rem;display:flex;flex-direction:column;gap:2rem}.section-gameplay ol{list-style-type:decimal}.section-gameplay ol ul{margin-top:2rem;gap:1rem}.section-gameplay ul{list-style-type:disc}.ships-choosing-modal .modal-body .ships{display:flex;overflow:hidden;padding-top:.25rem}.ships-choosing-modal .modal-body .ships .pages-container{display:flex;position:relative;right:0;transition:right .3s linear;width:30vw}@media(max-width: 1100px){.ships-choosing-modal .modal-body .ships .pages-container{width:40vw}}@media(max-width: 768px){.ships-choosing-modal .modal-body .ships .pages-container{width:60vw}}@media(max-width: 575px){.ships-choosing-modal .modal-body .ships .pages-container{width:80vw}}.ships-choosing-modal .modal-body .ships .page{flex-shrink:0;display:flex;flex-direction:column;gap:2rem;padding-left:2.5rem;width:100%}.ships-choosing-modal .modal-body .ships .ship-container{display:flex;justify-content:space-between}.ships-choosing-modal .modal-body .ships .ship-container .count{font-weight:bold;font-size:calc(1em + .25rem)}.ships-choosing-modal .modal-body .ships .ship-container .ship-block{width:30px;height:30px}.ships-placing-modal .form-player-name input{width:100%}.ships-placing-modal .form-player-name input:focus+label::before,.ships-placing-modal .form-player-name input:not(:placeholder-shown)+label::before{content:"Player name"}.ships-placing-modal .form-player-name label::before{content:"Player name (Optional)"}.ships-placing-modal section.place-ships{padding-left:0;padding-right:0}.ships-placing-modal section.place-ships .auto-place-container{flex-direction:column;gap:1rem}.ships-placing-modal section.place-ships .auto-place-container .btn-auto-place{margin-top:2rem}.ships-placing-modal section.place-ships .auto-place-container .text-error{font-weight:bold}.ships-placing-modal .ships{background-image:url('+L+");background-size:cover;background-position:center;background-repeat:no-repeat;padding:2rem 0;overflow:hidden;display:flex;flex-direction:column;gap:2.5rem}.ships-placing-modal .ships .pages-container{display:flex;max-width:500px;position:relative;right:0;transition:right .3s linear}.ships-placing-modal .ships .pages-container .page{width:100%;flex-shrink:0;display:grid;grid-template-columns:repeat(4, 1fr);justify-items:center;align-items:center}.ships-placing-modal .ships .pages-container .page .ship-container{display:flex;flex-direction:column;align-items:center;gap:1rem}.ships-placing-modal .ships .pages-container .page .ship-container .ship-block{cursor:pointer}.ships-placing-modal .ships .pages-container .page .ship-container .ship-compressed.active .ship-block{outline-offset:-1px}.ships-placing-modal .board-container{display:grid;grid-template-columns:1fr auto;justify-items:center;gap:20px;padding:0 20px}@media(max-width: 575px){.ships-placing-modal .board-container{grid-template-columns:auto}}.ships-placing-modal .board-container .board{position:relative}.ships-placing-modal .board-container .board .ship{position:absolute;gap:0}.ships-placing-modal .board-container .board .ship.temp-ship{pointer-events:none;opacity:40%}.ships-placing-modal .board-container .board .ship .ship-block:hover::after{content:none}.ships-placing-modal .board-container .place-options{display:flex;flex-direction:column;justify-content:space-evenly;align-items:center;gap:3rem}@media(max-width: 575px){.ships-placing-modal .board-container .place-options{width:100%;flex-direction:row}}.ships-placing-modal .board-container .place-options button{padding:1rem 2rem}.ships-placing-modal .board-container .place-options .btn-remove{padding-top:1.15rem;padding-bottom:1.15rem}.game-container{flex-grow:1;display:flex;flex-direction:column;position:relative}.game-arena{flex-grow:1;display:grid;grid-template-columns:1fr auto 1fr;position:relative}@media(max-width: 1100px){.game-arena{grid-template-columns:auto}}.player-area{background-image:url("+S+');background-size:cover;background-position:center;background-repeat:no-repeat;overflow:hidden;display:grid;grid-template-rows:120px auto auto;grid-template-areas:"turn-label" "board" "ships";justify-items:center;height:100%;padding:0 4rem;position:relative}@media(min-width: 575px)and (max-width: 1100px){.player-area{padding:0;grid-template-rows:120px auto;grid-template-columns:auto 1fr;grid-template-areas:"ships turn-label" "ships board"}}@media(max-width: 1100px){.player-area{row-gap:3rem}}.player-area .turn-row{width:100%;height:100%}.player-area .turn-row .turn-container{bottom:100%;padding-top:1.5rem;padding-bottom:1.5rem;width:100%;max-width:300px}.player-area .turn-row .turn-container p{font-weight:bold;font-size:2.5rem;text-align:center}.player-area .turn-row .turn-container.active{bottom:calc(100% - 70px - 50px)}.player-area .board{margin:auto;grid-area:board;position:relative}@media(min-width: 575px)and (max-width: 1100px){.player-area .board{margin-bottom:2rem}}.player-area .board .ship{pointer-events:none;position:absolute}.player-area .ships-remained-container-responsive{margin-top:auto;grid-area:ships}@media(min-width: 575px)and (max-width: 1100px){.player-area .ships-remained-container-responsive{margin-top:0}}.player-area .ships-remained-container-responsive .pagination{gap:40px}.player-area .score-container{flex-direction:column;gap:1.5rem;font-weight:bold;font-size:4rem;z-index:-1;background-color:rgba(0,0,0,.75);transition:opacity .25s ease-in;opacity:0}.player-area .score-container .name{font-size:7rem}.player-area .score-container.active{z-index:4;opacity:100%}.player-area .darkening{transition:opacity .25s ease-in;opacity:0;background-color:rgba(0,0,0,.5);z-index:-1}.player-area .darkening.active{opacity:45%;z-index:3}.middle-bisector{background-image:url('+P+");padding:1rem 3rem}.next-game-container,.start-game-container{padding:0;left:50%;transform:translate(-50%, 0);bottom:130%;transition-property:bottom,transform;transition-timing-function:ease-out;transition-duration:.5s;z-index:5}.next-game-container.active,.start-game-container.active{bottom:50%;transform:translate(-50%, 50%)}.next-game-container button,.start-game-container button{padding:2.5rem 4rem;font-size:2.5rem;font-weight:bold}","",{version:3,sources:["webpack://./src/sass/utilities/_borders.scss","webpack://./src/sass/variables/_colors.scss","webpack://./src/sass/utilities/_buttons.scss","webpack://./src/sass/utilities/_containers.scss","webpack://./src/sass/mixins/_images.scss","webpack://./src/sass/utilities/_display.scss","webpack://./src/sass/utilities/_forms.scss","webpack://./src/sass/utilities/_modals.scss","webpack://./src/sass/utilities/_seperators.scss","webpack://./src/sass/utilities/_text.scss","webpack://./src/sass/utilities/_visiblity.scss","webpack://./src/sass/layout/_forms.scss","webpack://./src/sass/layout/_general.scss","webpack://./src/sass/components/_blocks.scss","webpack://./src/sass/variables/_dimensions.scss","webpack://./src/sass/components/_board.scss","webpack://./src/sass/components/_containers.scss","webpack://./src/sass/components/_counter.scss","webpack://./src/sass/components/_pagination.scss","webpack://./src/sass/components/_ships.scss","webpack://./src/sass/components/modals/game-type-modal.scss","webpack://./src/sass/components/modals/grid-size-modal.scss","webpack://./src/sass/components/modals/rules-modal.scss","webpack://./src/sass/components/modals/ships-choosing-modal.scss","webpack://./src/sass/components/modals/ships-placing-modal.scss","webpack://./src/sass/pages/index.scss"],names:[],mappings:"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",sourcesContent:["/* ||Outlines */\r\n.outline-small {\r\n    outline-width: 2px;\r\n    outline-style: solid;\r\n}\r\n\r\n.outline-medium {\r\n    outline-width: 3px;\r\n    outline-style: solid;\r\n}\r\n\r\n.outline-thick {\r\n    outline-width: 4px;\r\n    outline-style: solid;\r\n}\r\n\r\n.outline-blue {\r\n    @extend .outline-small;\r\n    outline-color: $blue;\r\n}\r\n\r\n.outline-orange {\r\n    @extend .outline-small;\r\n    outline-color: $orange;\r\n}\r\n/* ************************************************** */\r\n\r\n/* ||Borders */\r\n.border-small {\r\n    border-width: 1px;\r\n    border-style: solid;\r\n}\r\n\r\n.border-medium {\r\n    border-width: 3px;\r\n    border-style: solid;\r\n}\r\n\r\n.border-grey {\r\n    @extend .border-small;\r\n    border-color: $grey;\r\n}\r\n\r\n.border-white {\r\n    @extend .border-small;\r\n    border-color: #fff;\r\n}\r\n\r\n.bdrs-1 {\r\n    border-radius: 0.5rem;\r\n}\r\n\r\n.bdrs-2 {\r\n    border-radius: 0.75rem;\r\n}\r\n\r\n.bdrs-3 {\r\n    border-radius: 1rem;\r\n}\r\n\r\n.bdrs-4 {\r\n    border-radius: 1.5rem;\r\n}\r\n/* ************************************************** */","$blue: #383a8a;\r\n$danger: #8b1f1f;\r\n$grey: #95989a;\r\n$lime: #29b84f;\r\n$orange: #f5562e;\r\n$error: #e0ccc2;",'button {\r\n    padding: 1rem 2rem;\r\n    background-color: transparent;\r\n    border: none;\r\n    color: inherit;\r\n}\r\n\r\n.btn-icon {\r\n    @extend .flex-center;\r\n}\r\n\r\nbutton[disabled] {\r\n    position: relative;\r\n    overflow: hidden;\r\n    &::before {\r\n        content: "";\r\n        @extend .absolute-100;\r\n        background-color: rgba(0, 0, 0, 0.5);\r\n    }\r\n}\r\n','.chained-container {\r\n    position: absolute;\r\n    transition: bottom 0.3s linear;\r\n    &::before,\r\n    &::after {\r\n        @include bg-image("/assets/img/chain.png", 100% auto, center, repeat-y);\r\n        content: "";\r\n        position: absolute;\r\n        top: 0;\r\n        height: 100vh;\r\n        width: 15px;\r\n        // Image file is horizontal chain, this will switch it to vertical\r\n        transform-origin: 50% 0;\r\n        transform: rotate(180deg);\r\n    }\r\n    &::before {\r\n        left: 20px;\r\n    }\r\n    &::after {\r\n        right: 20px;\r\n    }\r\n}\r\n\r\n.light-wood-container {\r\n    @include bg-image("/assets/img/light-wood.jpg", 100% auto, 0 90%, repeat-y);\r\n}\r\n\r\n.dark-wood-container {\r\n    @include bg-image("/assets/img/dark-wood.jpg", 100% auto, 0 90%, repeat-y);\r\n}\r\n\r\n.smooth-dark-wood-container {\r\n    @include bg-image("/assets/img/smooth-dark-wood.jpg");\r\n}\r\n\r\n.wooden-container {\r\n    @extend .border-grey;\r\n    @extend .bdrs-1;\r\n    @extend .smooth-dark-wood-container;\r\n    padding: 1rem 3.5rem;\r\n    font-weight: bold;\r\n}\r\n',"@mixin bg-image($url, $size: cover, $position: center, $repeat: no-repeat ) {\r\n    background-image: url($url);\r\n    background-size: $size;\r\n    background-position: $position;\r\n    background-repeat: $repeat;\r\n}",".flex-center {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.absolute-100 {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n",".floating-label-input {\r\n    position: relative;\r\n    input {\r\n        padding: 3rem 1.5rem 1rem;\r\n        &:focus, &:not(:placeholder-shown) {\r\n            + label {\r\n                top: 5px;\r\n                transform: translateY(0);\r\n                font-size: 0.75em;\r\n            }\r\n        }\r\n    }\r\n    label {\r\n        position: absolute;\r\n        top: 50%;\r\n        transform: translateY(-50%);\r\n        left: 1.5rem;\r\n        color: #cecece;\r\n        cursor: text;\r\n        transition: all 0.25s;\r\n    }\r\n}",".modal-container {\r\n    @extend .flex-center;\r\n    width: 100%;\r\n    height: 100%;\r\n    position: fixed;\r\n    z-index: 10;\r\n    &.active {\r\n        overflow-y: auto;\r\n    }\r\n}\r\n\r\n.modal {\r\n    @extend .chained-container;\r\n    @extend .light-wood-container;\r\n    padding: 0;\r\n    font-size: 2rem;\r\n    border-radius: 2.5rem;\r\n    position: absolute;\r\n    bottom: 130%;\r\n    transition-property: bottom, transform;\r\n    transition-timing-function: ease-out;\r\n    transition-duration: 0.5s ;\r\n    &::before,\r\n    &::after {\r\n        width: 30px;\r\n    }\r\n    &::before {\r\n        left: 60px;\r\n    }\r\n    &::after {\r\n        right: 60px;\r\n    }\r\n    &.active {\r\n        bottom: 50%;\r\n        transform: translateY(calc(100% - 200px));\r\n    }\r\n}\r\n\r\n.modal-header {\r\n    position: absolute;\r\n    width: 100%;\r\n    top: -60px;\r\n    text-align: center;\r\n    h2 {\r\n        @extend .bdrs-1;\r\n        @extend .dark-wood-container;\r\n        display: inline-block;\r\n        padding: 1.5rem 2rem;\r\n        font-size: calc(1em + 1rem);\r\n    }\r\n}\r\n\r\n.modal-body {\r\n    min-width: 30vw;\r\n    padding-top: 1rem;\r\n    @media (max-width: $lg) {\r\n        min-width: 40vw;\r\n    }\r\n    @media (max-width: $md) {\r\n        min-width: 60vw;\r\n    }\r\n    @media (max-width: $sm) {\r\n        min-width: 80vw;\r\n    }\r\n    header {\r\n        text-align: center;\r\n        h3 {\r\n            @extend .wooden-container;\r\n            display: inline-block;\r\n        }\r\n    }\r\n    label {\r\n        display: inline-block;\r\n    }\r\n    section {\r\n        padding: 3rem;\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 2rem;\r\n    }\r\n}\r\n\r\n.modal-options {\r\n    @extend .flex-center;\r\n    padding: {\r\n        top: 2.5rem;\r\n        bottom: 2rem;\r\n        left: 2rem;\r\n        right: 2rem;\r\n    }\r\n    gap: 3rem;\r\n    button {        \r\n        @extend .smooth-dark-wood-container;\r\n        @extend .bdrs-4;\r\n        padding: 1.25rem 6rem;\r\n        font-weight: bold;\r\n    }\r\n}\r\n\r\n// Adding empty space under modal container\r\n.modal-spacer {\r\n    height: 50px;\r\n    margin-bottom: -50px;\r\n    width: 100%;\r\n}",'.icy-hr {\r\n    height: 10px;\r\n    background-image: url("/assets/img/icy.jpg");\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n    background-size: cover;\r\n    margin: 0;\r\n    width: 100%;\r\n}',".text-error {\r\n    color: rgb(224, 204, 24);\r\n    font-size: 1.6rem;\r\n}",".opacity-100 {\r\n    opacity: 100% !important;\r\n}\r\n\r\n.d-none {\r\n    display: none !important;\r\n}","input {\r\n    @extend .bdrs-2;\r\n    padding: 1rem 2rem;\r\n    background: #fff;\r\n    border: none;\r\n}\r\n\r\ninput[type = radio] {\r\n    appearance: none;\r\n    & + span {\r\n        @extend .wooden-container;\r\n        cursor: pointer;\r\n        display: inline-block;\r\n    }\r\n    &:checked + span {\r\n        @extend .outline-blue;\r\n        @extend .outline-thick;\r\n    }\r\n}",'\r\n*, *::before, *::after {\r\n    box-sizing: border-box;\r\n}\r\n\r\nhtml {\r\n    font-size: 10px;\r\n    scroll-behavior: smooth;\r\n}\r\n\r\nbody {\r\n    @include bg-image("/assets/img/stone.jpg");\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-height: 100vh;\r\n    font-size: 1.6rem;\r\n    line-height: 1.6;\r\n    font-family: Lato, Geneva, Tahoma, sans-serif;\r\n    color: #fff;\r\n    user-select: none;\r\n}\r\n\r\nmain {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex-grow: 1;\r\n}\r\n\r\nh1, h2 {\r\n    font-weight: bold;\r\n}\r\n\r\nh1 {\r\n    font-size: 3.5rem;\r\n}\r\n\r\nh2 {\r\n    font-size: 3rem;\r\n}\r\n\r\nsvg {\r\n    user-select: none;\r\n}','.game-block {\r\n    width: $game-block-size;\r\n    height: $game-block-size;\r\n    position: relative;\r\n    cursor: pointer;\r\n    &:hover:not(.hit) {\r\n        &::after {\r\n            @extend .absolute-100;\r\n            content: "";\r\n            background-color: rgba(0, 0, 0, 0.25);\r\n        }\r\n    }\r\n}\r\n\r\n.game-block-small {\r\n    @extend .game-block;\r\n    width: $game-block-size-sm;\r\n    height: $game-block-size-sm;\r\n}\r\n\r\n.board-block {\r\n    @extend .game-block;\r\n    @extend .border-grey;\r\n    @include bg-image("/assets/img/water.jpg");\r\n    &.disabled {\r\n        pointer-events: none;\r\n    }\r\n    &.incorrect {\r\n        @include bg-image("/assets/img/cross.png", contain);\r\n        background-color: $danger;\r\n    }\r\n}\r\n\r\n.ship-block {\r\n    @extend .game-block;\r\n    @extend .border-white;\r\n    background-color: $lime;\r\n    &.hidden {\r\n        z-index: -1;\r\n        visibility: hidden;\r\n    }\r\n}\r\n',"$game-block-size: 35px;\r\n$game-block-size-md: 30px;\r\n$game-block-size-sm: 20px;",".board {\r\n    --board-horizontal-cells: 10;\r\n    display: inline-grid;\r\n    grid-template-columns: repeat(var(--board-horizontal-cells), auto);\r\n    align-content: center;\r\n    &.disabled {\r\n        pointer-events: none;\r\n    }\r\n}",'.rounds-container {\r\n    @extend .border-white;\r\n    @extend .border-medium;\r\n    @extend .flex-center;\r\n    --angle: 0deg;\r\n    border-radius: 50%;\r\n    padding: 1rem;\r\n    width: 112px;\r\n    aspect-ratio: 1;\r\n    background-image: url("/assets/img/grey.jpg");\r\n    transform: rotateY(var(--angle));\r\n    transition: transform 1s;\r\n    p {\r\n        font-weight: bold;\r\n        font-size: 2rem;\r\n        text-align: center;\r\n        transform: rotateY(var(--angle));\r\n        transition: inherit;\r\n    }\r\n}\r\n\r\n.ships-remained-container {\r\n    background-image: url("/assets/img/light-wood.jpg");\r\n    background-repeat: repeat-y;\r\n    padding: 2rem 3rem 1rem;\r\n    display: inline-grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    gap: 1rem;\r\n    grid-template-areas:\r\n        "ships ships ships"\r\n        ". pagination info";\r\n    align-items: center;\r\n    position: relative;\r\n    width: 100%;\r\n    max-width: calc($game-block-size * 10 + 20%);\r\n    .ships {\r\n        grid-area: ships;\r\n        display: flex;\r\n        gap: 2rem;\r\n        height: 45px;\r\n        overflow: hidden;\r\n        font-size: 2rem;\r\n        font-weight: bold;\r\n        scroll-behavior: smooth;\r\n        .ship-container {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 10px;\r\n            &:not(:first-child)::before {\r\n                content: "";\r\n                width: 3px;\r\n                height: 100%;\r\n                background-color: #fff;\r\n            }\r\n            .ship-block {\r\n                @extend .game-block-small;\r\n            }\r\n        }\r\n    }\r\n    .pagination {\r\n        grid-area: pagination;\r\n        justify-self: center;\r\n        align-self: center;\r\n    }\r\n    .info {\r\n        grid-area: info;\r\n        justify-self: end;\r\n        margin-right: -2rem;\r\n        z-index: 2;\r\n    }\r\n\r\n    &::before {\r\n        @extend .border-white;\r\n        @extend .border-medium;\r\n        @extend .flex-center;\r\n        @extend .absolute-100;\r\n        content: "Ships Remained";\r\n        border-style: dashed;\r\n        width: 0;\r\n        height: 0;\r\n        font-weight: bold;\r\n        font-size: 2rem;\r\n        background-color: rgba(0, 0, 0, 0.8);\r\n        overflow: hidden;\r\n        z-index: 1;\r\n        opacity: 0%;\r\n    }\r\n    &.help::before {\r\n        opacity: 100%;\r\n        width: 100%;\r\n        height: 100%;\r\n        transition: opacity 0.3s;\r\n    }\r\n}\r\n\r\n.ships-remained-container-responsive {\r\n    @extend .ships-remained-container;\r\n    @media (min-width: $sm) and (max-width: $lg) {\r\n        align-self: stretch;\r\n        grid-template-rows: 1fr auto auto;\r\n        grid-template-columns: auto;\r\n        grid-template-areas: "ships" "pagination" "info";\r\n        .ships {\r\n            flex-direction: column;\r\n            align-items: stretch;\r\n            height: 100%;\r\n            .ship-container {\r\n                display: grid;\r\n                grid-template-columns: auto auto;\r\n                p {\r\n                    justify-self: end;\r\n                }\r\n                &:not(:first-child)::before {\r\n                    grid-column-start: 1;\r\n                    grid-column-end: 3;\r\n                    width: 100%;\r\n                    height: 3px;\r\n                }\r\n            }\r\n        }\r\n        .pagination {\r\n            flex-direction: column;\r\n            gap: 10px !important;\r\n            .arrow-container {\r\n                transform: rotate(90deg);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n.pause-container {\r\n    @extend .absolute-100;\r\n    background-color: rgba(0, 0, 0, 0.75);\r\n    z-index: -1;\r\n    opacity: 0%;\r\n    transition: all 0.25s ease-in;\r\n    &.semi-active {\r\n        z-index: 3;\r\n        opacity: 30%;\r\n        transition-property: opacity;\r\n    }\r\n    &.active {\r\n        z-index: 3;\r\n        opacity: 80%;\r\n        transition-property: opacity;\r\n    }\r\n    &.front {\r\n        z-index: 20;\r\n    }\r\n}','.counter {\r\n    @extend .flex-center;\r\n    gap: 1.5rem;\r\n    font-weight: bold;\r\n    .minus,\r\n    .plus {\r\n        @extend .wooden-container;\r\n        padding: 0.25rem;\r\n        line-height: 1;\r\n        border: none;\r\n        cursor: pointer;\r\n        &:active {\r\n            @extend .outline-blue;\r\n        }\r\n        &.disabled {\r\n            cursor: default;\r\n            pointer-events: none;\r\n            position: relative;\r\n            &::before {\r\n                content: "";\r\n                @extend .absolute-100;\r\n                background-color: rgba(0, 0, 0, 0.25);\r\n            }\r\n        }\r\n        svg {\r\n            color: #fff;\r\n            width: 30px;\r\n            height: 30px;\r\n        }\r\n    }\r\n    .number {\r\n        font-size: calc(1em + 0.5rem);\r\n    }\r\n}\r\n',".pagination {\r\n    @extend .flex-center;\r\n    gap: 10px;\r\n    .arrow-container {\r\n        border: none;\r\n        cursor: pointer;\r\n        color: #fff;\r\n        &.disabled {\r\n            cursor: default;\r\n            pointer-events: none;\r\n            svg {\r\n                cursor: default;\r\n                color: #cccccc;\r\n            }\r\n        }\r\n    }\r\n\r\n    .arrow-container-button {\r\n        @extend .wooden-container;\r\n        padding: 0 1rem;\r\n        &:active {\r\n            @extend .outline-blue;\r\n        }\r\n    }\r\n}\r\n",".ship {\r\n    display: flex;\r\n    &.vertical:not(.hidden) {\r\n        flex-direction: column;\r\n        .ship-block {\r\n            &:not(:last-child) {\r\n                border-bottom-width: 0;\r\n            }\r\n            &:not(:first-child) {\r\n                border-top-width: 0;\r\n            }\r\n        }\r\n    }\r\n    &.horizontal:not(.hidden) {\r\n        flex-direction: row;\r\n        .ship-block {\r\n            &:not(:last-child) {\r\n                border-right-width: 0;\r\n            }\r\n            &:not(:first-child) {\r\n                border-left-width: 0;\r\n            }\r\n        }\r\n    }\r\n    &.destroyed {\r\n        .ship-block {\r\n            border-color: $orange;\r\n        }\r\n    }\r\n}\r\n\r\n.ship-compressed {\r\n    @extend .flex-center;\r\n    gap: 0.25rem;\r\n    .parenthesis {\r\n        display: inline-block;\r\n        font-size: 2.75rem;\r\n    }\r\n}",".game-type-modal {\r\n    @extend .modal;\r\n    transform: translateY(50%) !important;\r\n    .modal-body {\r\n        #form-game-type {\r\n            @extend .flex-center;\r\n            gap: 10rem;\r\n            @media (max-width: $sm) {\r\n                flex-direction: column;\r\n                gap: 3rem;\r\n            }\r\n        }\r\n    }\r\n}",'.grid-size-modal {\r\n    @extend .modal;\r\n    .modal-body {\r\n        min-width: 35vw;\r\n        @media (max-width: $lg) {\r\n            min-width: 50vw;\r\n        }\r\n        @media (max-width: $md) {\r\n            min-width: 70vw;\r\n        }\r\n    }\r\n    section.section-grid-size {\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr;\r\n        grid-template-areas:\r\n            "header header"\r\n            "width height"\r\n            "width-counter height-counter"\r\n            "board board";\r\n        justify-items: center;\r\n        row-gap: 3rem;\r\n        header {\r\n            grid-area: header;\r\n        }\r\n        .width-label {\r\n            grid-area: width;\r\n        }\r\n        .height-label {\r\n            grid-area: height;\r\n        }\r\n        .width-counter {\r\n            grid-area: width-counter;\r\n        }\r\n        .height-counter {\r\n            grid-area: height-counter;\r\n        }\r\n        .width-label,\r\n        .height-label {\r\n            @extend .wooden-container;\r\n            background-image: url("/assets/img/black-wood.jpg");\r\n            padding: {\r\n                left: 1.3rem;\r\n                right: 1.3rem;\r\n            }\r\n        }\r\n        .width-counter,\r\n        .height-counter {\r\n            @extend .counter;\r\n        }\r\n        .board {\r\n            grid-area: board;\r\n            height: calc(10 * $game-block-size);\r\n            .board-block {\r\n                cursor: default;\r\n            }\r\n        }\r\n    }\r\n}',".rules-modal {\r\n    @extend .modal;\r\n    .modal-body {\r\n        max-width: 40vw;\r\n        @media (max-width: $lg) {\r\n            max-width: 60vw;\r\n        }\r\n        @media (max-width: $lg) {\r\n            max-width: 50vw;\r\n        }\r\n        @media (max-width: $md) {\r\n            max-width: 70vw;\r\n        }\r\n    }\r\n}\r\n\r\n.section-gameplay {\r\n    padding-top: 0 !important;\r\n    ol,\r\n    ul {\r\n        margin-left: 2rem;\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 2rem;\r\n    }\r\n    ol {\r\n        list-style-type: decimal;\r\n        ul {\r\n            margin-top: 2rem;\r\n            gap: 1rem;\r\n        }\r\n    }\r\n    ul {\r\n        list-style-type: disc;\r\n    }\r\n}\r\n",".ships-choosing-modal {\r\n    @extend .modal;\r\n    .modal-body {\r\n        .ships {\r\n            display: flex;\r\n            overflow: hidden;\r\n            padding-top: 0.25rem;\r\n            .pages-container {\r\n                display: flex;\r\n                position: relative;\r\n                right: 0;\r\n                transition: right 0.3s linear;\r\n                width: 30vw;\r\n                @media (max-width: $lg) {\r\n                    width: 40vw;\r\n                }\r\n                @media (max-width: $md) {\r\n                    width: 60vw;\r\n                }\r\n                @media (max-width: $sm) {\r\n                    width: 80vw;\r\n                }\r\n            }\r\n            .page {\r\n                flex-shrink: 0;\r\n                display: flex;\r\n                flex-direction: column;\r\n                gap: 2rem;\r\n                padding-left: 2.5rem;\r\n                width: 100%;\r\n            }\r\n            .ship-container {\r\n                display: flex;\r\n                justify-content: space-between;\r\n                .count {\r\n                    font-weight: bold;\r\n                    font-size: calc(1em + 0.25rem);\r\n                }\r\n                .ship-block {\r\n                    width: $game-block-size-md;\r\n                    height: $game-block-size-md;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",'.ships-placing-modal {\r\n    @extend .modal;\r\n    .form-player-name {\r\n        input {\r\n            width: 100%;\r\n            &:focus,\r\n            &:not(:placeholder-shown) {\r\n                + label::before {\r\n                    content: "Player name";\r\n                }\r\n            }\r\n        }\r\n        label {\r\n            &::before {\r\n                content: "Player name (Optional)";\r\n            }\r\n        }\r\n    }\r\n    section.place-ships {\r\n        padding: {\r\n            left: 0;\r\n            right: 0;\r\n        }\r\n        .auto-place-container {\r\n            @extend .flex-center;\r\n            flex-direction: column;\r\n            gap: 1rem;\r\n            .btn-auto-place {\r\n                @extend .wooden-container;\r\n                margin-top: 2rem;\r\n                &:active {\r\n                    @extend .outline-blue;\r\n                    @extend .outline-thick;\r\n                }\r\n            }\r\n            .text-error {\r\n                font-weight: bold;\r\n            }\r\n        }\r\n    }\r\n    .ships {\r\n        @include bg-image("/assets/img/black-wood.jpg");\r\n        padding: 2rem 0;\r\n        overflow: hidden;\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 2.5rem;\r\n        .pages-container {\r\n            display: flex;\r\n            max-width: 500px;\r\n            position: relative;\r\n            right: 0;\r\n            transition: right 0.3s linear;\r\n            .page {\r\n                width: 100%;\r\n                flex-shrink: 0;\r\n                display: grid;\r\n                grid-template-columns: repeat(4, 1fr);\r\n                justify-items: center;\r\n                align-items: center;\r\n                .ship-container {\r\n                    display: flex;\r\n                    flex-direction: column;\r\n                    align-items: center;\r\n                    gap: 1rem;\r\n                    .ship-block {\r\n                        cursor: pointer;\r\n                    }\r\n                    .ship-compressed.active {\r\n                        .ship-block {\r\n                            @extend .outline-orange;\r\n                            @extend .outline-medium;\r\n                            outline-offset: -1px;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    .board-container {\r\n        display: grid;\r\n        grid-template-columns: 1fr auto;\r\n        justify-items: center;\r\n        gap: 20px;\r\n        padding: 0 20px;\r\n        @media (max-width: $sm) {\r\n            grid-template-columns: auto;\r\n        }\r\n        .board {\r\n            position: relative;\r\n            .ship {\r\n                position: absolute;\r\n                gap: 0;\r\n                &.temp-ship {\r\n                    pointer-events: none;\r\n                    opacity: 40%;\r\n                }\r\n                .ship-block {\r\n                    &:hover::after {\r\n                        content: none;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        .place-options {\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: space-evenly;\r\n            align-items: center;\r\n            gap: 3rem;\r\n            @media (max-width: $sm) {\r\n                width: 100%;\r\n                flex-direction: row;\r\n            }\r\n            button {\r\n                @extend .wooden-container;\r\n                padding: 1rem 2rem;\r\n                &.active {\r\n                    @extend .outline-blue;\r\n                    @extend .outline-thick;\r\n                }\r\n            }\r\n            .btn-remove {\r\n                @extend .btn-icon;\r\n                padding: {\r\n                    top: 1.15rem;\r\n                    bottom: 1.15rem;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n','.game-container {\r\n    flex-grow: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    position: relative;\r\n}\r\n\r\n.game-arena {\r\n    flex-grow: 1;\r\n    display: grid;\r\n    grid-template-columns: 1fr auto 1fr;\r\n    position: relative;\r\n    @media (max-width: $lg) {\r\n        grid-template-columns: auto;\r\n    }\r\n}\r\n\r\n.player-area {\r\n    @include bg-image("/assets/img/stone.jpg");\r\n    overflow: hidden;\r\n    display: grid;\r\n    grid-template-rows: 120px auto auto;\r\n    grid-template-areas: "turn-label" "board" "ships";\r\n    justify-items: center;\r\n    height: 100%;\r\n    padding: 0 4rem;\r\n    position: relative;\r\n    @media (min-width: $sm) and (max-width: $lg) {\r\n        padding: 0;\r\n        grid-template-rows: 120px auto;\r\n        grid-template-columns: auto 1fr;\r\n        grid-template-areas: "ships turn-label" "ships board";\r\n    }\r\n    @media (max-width: $lg) {\r\n        row-gap: 3rem;\r\n    }\r\n    .turn-row {\r\n        width: 100%;\r\n        height: 100%;\r\n        @extend .flex-center;\r\n        .turn-container {\r\n            @extend .chained-container;\r\n            @extend .light-wood-container;\r\n            bottom: 100%;\r\n            padding-top: 1.5rem;\r\n            padding-bottom: 1.5rem;\r\n            width: 100%;\r\n            max-width: 300px;\r\n            p {\r\n                font-weight: bold;\r\n                font-size: 2.5rem;\r\n                text-align: center;\r\n            }\r\n            &.active {\r\n                bottom: calc(100% - 70px - 50px);\r\n            }\r\n        }\r\n    }\r\n    .board {\r\n        margin: auto;\r\n        grid-area: board;\r\n        position: relative;\r\n        @media (min-width: $sm) and (max-width: $lg) {\r\n            margin-bottom: 2rem;\r\n        }\r\n        .ship {\r\n            pointer-events: none;\r\n            position: absolute;\r\n        }\r\n    }\r\n    .ships-remained-container-responsive {\r\n        margin-top: auto;\r\n        grid-area: ships;\r\n        @media (min-width: $sm) and (max-width: $lg) {\r\n            margin-top: 0;\r\n        }\r\n        .pagination {\r\n            gap: 40px;\r\n        }\r\n    }\r\n    .score-container {\r\n        @extend .absolute-100;\r\n        @extend .flex-center;\r\n        flex-direction: column;\r\n        gap: 1.5rem;\r\n        font-weight: bold;\r\n        font-size: 4rem;\r\n        z-index: -1;\r\n        background-color: rgba(0, 0, 0, 0.75);\r\n        transition: opacity 0.25s ease-in;\r\n        opacity: 0;\r\n        .name {\r\n            font-size: 7rem;\r\n        }\r\n        &.active {\r\n            z-index: 4;\r\n            opacity: 100%;\r\n        }\r\n    }\r\n\r\n    .darkening {\r\n        @extend .absolute-100;\r\n        transition: opacity 0.25s ease-in;\r\n        opacity: 0;\r\n        background-color: rgba(0, 0, 0, 0.5);\r\n        z-index: -1;\r\n        &.active {\r\n            opacity: 45%;\r\n            z-index: 3;\r\n        }\r\n    }\r\n}\r\n\r\n.middle-bisector {\r\n    @extend .flex-center;\r\n    background-image: url("/assets/img/solid-wood.jpg");\r\n    padding: 1rem 3rem;\r\n}\r\n\r\n.next-game-container,\r\n.start-game-container {\r\n    @extend .chained-container;\r\n    @extend .dark-wood-container;\r\n    padding: 0;\r\n    left: 50%;\r\n    transform: translate(-50%, 0);\r\n    bottom: 130%;\r\n    transition-property: bottom, transform;\r\n    transition-timing-function: ease-out;\r\n    transition-duration: 0.5s;\r\n    z-index: 5;\r\n    &.active {\r\n        bottom: 50%;\r\n        transform: translate(-50%, 50%);\r\n    }\r\n    button {\r\n        padding: 2.5rem 4rem;\r\n        font-size: 2.5rem;\r\n        font-weight: bold;\r\n    }\r\n}\r\n'],sourceRoot:""}]);const O=w},3538:(e,n,r)=>{"use strict";r.d(n,{Z:()=>s});var t=r(7537),i=r.n(t),a=r(3645),o=r.n(a)()(i());o.push([e.id,'/* http://meyerweb.com/eric/tools/css/reset/\r\n   v2.0-modified | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n\r\n/* make sure to set some focus styles for accessibility */\r\n:focus {\r\n    outline: 0;\r\n}\r\n\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\n\r\nbody {\r\n\tline-height: 1;\r\n}\r\n\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\n\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\n\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: \'\';\r\n\tcontent: none;\r\n}\r\n\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n\r\ninput[type=search]::-webkit-search-cancel-button,\r\ninput[type=search]::-webkit-search-decoration,\r\ninput[type=search]::-webkit-search-results-button,\r\ninput[type=search]::-webkit-search-results-decoration {\r\n    -webkit-appearance: none;\r\n    -moz-appearance: none;\r\n}\r\n\r\ninput[type=search] {\r\n    -webkit-appearance: none;\r\n    -moz-appearance: none;\r\n    -webkit-box-sizing: content-box;\r\n    -moz-box-sizing: content-box;\r\n    box-sizing: content-box;\r\n}\r\n\r\ntextarea {\r\n    overflow: auto;\r\n    vertical-align: top;\r\n    resize: vertical;\r\n}\r\n\r\n/**\r\n * Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.\r\n */\r\n\r\naudio,\r\ncanvas,\r\nvideo {\r\n    display: inline-block;\r\n    *display: inline;\r\n    *zoom: 1;\r\n    max-width: 100%;\r\n}\r\n\r\n/**\r\n * Prevent modern browsers from displaying `audio` without controls.\r\n * Remove excess height in iOS 5 devices.\r\n */\r\n\r\naudio:not([controls]) {\r\n    display: none;\r\n    height: 0;\r\n}\r\n\r\n/**\r\n * Address styling not present in IE 7/8/9, Firefox 3, and Safari 4.\r\n * Known issue: no IE 6 support.\r\n */\r\n\r\n[hidden] {\r\n    display: none;\r\n}\r\n\r\n/**\r\n * 1. Correct text resizing oddly in IE 6/7 when body `font-size` is set using\r\n *    `em` units.\r\n * 2. Prevent iOS text size adjust after orientation change, without disabling\r\n *    user zoom.\r\n */\r\n\r\nhtml {\r\n    font-size: 100%; /* 1 */\r\n    -webkit-text-size-adjust: 100%; /* 2 */\r\n    -ms-text-size-adjust: 100%; /* 2 */\r\n}\r\n\r\n/**\r\n * Address `outline` inconsistency between Chrome and other browsers.\r\n */\r\n\r\na:focus {\r\n    outline: thin dotted;\r\n}\r\n\r\n/**\r\n * Improve readability when focused and also mouse hovered in all browsers.\r\n */\r\n\r\na:active,\r\na:hover {\r\n    outline: 0;\r\n}\r\n\r\n/**\r\n * 1. Remove border when inside `a` element in IE 6/7/8/9 and Firefox 3.\r\n * 2. Improve image quality when scaled in IE 7.\r\n */\r\n\r\nimg {\r\n    border: 0; /* 1 */\r\n    -ms-interpolation-mode: bicubic; /* 2 */\r\n}\r\n\r\n/**\r\n * Address margin not present in IE 6/7/8/9, Safari 5, and Opera 11.\r\n */\r\n\r\nfigure {\r\n    margin: 0;\r\n}\r\n\r\n/**\r\n * Correct margin displayed oddly in IE 6/7.\r\n */\r\n\r\nform {\r\n    margin: 0;\r\n}\r\n\r\n/**\r\n * Define consistent border, margin, and padding.\r\n */\r\n\r\nfieldset {\r\n    border: 1px solid #c0c0c0;\r\n    margin: 0 2px;\r\n    padding: 0.35em 0.625em 0.75em;\r\n}\r\n\r\n/**\r\n * 1. Correct color not being inherited in IE 6/7/8/9.\r\n * 2. Correct text not wrapping in Firefox 3.\r\n * 3. Correct alignment displayed oddly in IE 6/7.\r\n */\r\n\r\nlegend {\r\n    border: 0; /* 1 */\r\n    padding: 0;\r\n    white-space: normal; /* 2 */\r\n    *margin-left: -7px; /* 3 */\r\n}\r\n\r\n/**\r\n * 1. Correct font size not being inherited in all browsers.\r\n * 2. Address margins set differently in IE 6/7, Firefox 3+, Safari 5,\r\n *    and Chrome.\r\n * 3. Improve appearance and consistency in all browsers.\r\n */\r\n\r\nbutton,\r\ninput,\r\nselect,\r\ntextarea {\r\n    font-size: 100%; /* 1 */\r\n    margin: 0; /* 2 */\r\n    vertical-align: baseline; /* 3 */\r\n    *vertical-align: middle; /* 3 */\r\n}\r\n\r\n/**\r\n * Address Firefox 3+ setting `line-height` on `input` using `!important` in\r\n * the UA stylesheet.\r\n */\r\n\r\nbutton,\r\ninput {\r\n    line-height: normal;\r\n}\r\n\r\n/**\r\n * Address inconsistent `text-transform` inheritance for `button` and `select`.\r\n * All other form control elements do not inherit `text-transform` values.\r\n * Correct `button` style inheritance in Chrome, Safari 5+, and IE 6+.\r\n * Correct `select` style inheritance in Firefox 4+ and Opera.\r\n */\r\n\r\nbutton,\r\nselect {\r\n    text-transform: none;\r\n}\r\n\r\n/**\r\n * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`\r\n *    and `video` controls.\r\n * 2. Correct inability to style clickable `input` types in iOS.\r\n * 3. Improve usability and consistency of cursor style between image-type\r\n *    `input` and others.\r\n * 4. Remove inner spacing in IE 7 without affecting normal text inputs.\r\n *    Known issue: inner spacing remains in IE 6.\r\n */\r\n\r\nbutton,\r\nhtml input[type="button"], /* 1 */\r\ninput[type="reset"],\r\ninput[type="submit"] {\r\n    -webkit-appearance: button; /* 2 */\r\n    cursor: pointer; /* 3 */\r\n    *overflow: visible;  /* 4 */\r\n}\r\n\r\n/**\r\n * Re-set default cursor for disabled elements.\r\n */\r\n\r\nbutton[disabled],\r\nhtml input[disabled] {\r\n    cursor: default;\r\n}\r\n\r\n/**\r\n * 1. Address box sizing set to content-box in IE 8/9.\r\n * 2. Remove excess padding in IE 8/9.\r\n * 3. Remove excess padding in IE 7.\r\n *    Known issue: excess padding remains in IE 6.\r\n */\r\n\r\ninput[type="checkbox"],\r\ninput[type="radio"] {\r\n    box-sizing: border-box; /* 1 */\r\n    padding: 0; /* 2 */\r\n    *height: 13px; /* 3 */\r\n    *width: 13px; /* 3 */\r\n}\r\n\r\n/**\r\n * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.\r\n * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome\r\n *    (include `-moz` to future-proof).\r\n */\r\n\r\ninput[type="search"] {\r\n    -webkit-appearance: textfield; /* 1 */\r\n    -moz-box-sizing: content-box;\r\n    -webkit-box-sizing: content-box; /* 2 */\r\n    box-sizing: content-box;\r\n}\r\n\r\n/**\r\n * Remove inner padding and search cancel button in Safari 5 and Chrome\r\n * on OS X.\r\n */\r\n\r\ninput[type="search"]::-webkit-search-cancel-button,\r\ninput[type="search"]::-webkit-search-decoration {\r\n    -webkit-appearance: none;\r\n}\r\n\r\n/**\r\n * Remove inner padding and border in Firefox 3+.\r\n */\r\n\r\nbutton::-moz-focus-inner,\r\ninput::-moz-focus-inner {\r\n    border: 0;\r\n    padding: 0;\r\n}\r\n\r\n/**\r\n * 1. Remove default vertical scrollbar in IE 6/7/8/9.\r\n * 2. Improve readability and alignment in all browsers.\r\n */\r\n\r\ntextarea {\r\n    overflow: auto; /* 1 */\r\n    vertical-align: top; /* 2 */\r\n}\r\n\r\n/**\r\n * Remove most spacing between table cells.\r\n */\r\n\r\ntable {\r\n    border-collapse: collapse;\r\n    border-spacing: 0;\r\n}\r\n\r\nhtml,\r\nbutton,\r\ninput,\r\nselect,\r\ntextarea {\r\n    color: #222;\r\n}\r\n\r\n\r\n::-moz-selection {\r\n    background: #b3d4fc;\r\n    text-shadow: none;\r\n}\r\n\r\n::selection {\r\n    background: #b3d4fc;\r\n    text-shadow: none;\r\n}\r\n\r\nimg {\r\n    vertical-align: middle;\r\n}\r\n\r\nfieldset {\r\n    border: 0;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\ntextarea {\r\n    resize: vertical;\r\n}\r\n\r\n.chromeframe {\r\n    margin: 0.2em 0;\r\n    background: #ccc;\r\n    color: #000;\r\n    padding: 0.2em 0;\r\n}\r\n\r\n',"",{version:3,sources:["webpack://./src/css/reset.css"],names:[],mappings:"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",sourcesContent:['/* http://meyerweb.com/eric/tools/css/reset/\r\n   v2.0-modified | 20110126\r\n   License: none (public domain)\r\n*/\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n\r\n/* make sure to set some focus styles for accessibility */\r\n:focus {\r\n    outline: 0;\r\n}\r\n\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\n\r\nbody {\r\n\tline-height: 1;\r\n}\r\n\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\n\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\n\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: \'\';\r\n\tcontent: none;\r\n}\r\n\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\n\r\ninput[type=search]::-webkit-search-cancel-button,\r\ninput[type=search]::-webkit-search-decoration,\r\ninput[type=search]::-webkit-search-results-button,\r\ninput[type=search]::-webkit-search-results-decoration {\r\n    -webkit-appearance: none;\r\n    -moz-appearance: none;\r\n}\r\n\r\ninput[type=search] {\r\n    -webkit-appearance: none;\r\n    -moz-appearance: none;\r\n    -webkit-box-sizing: content-box;\r\n    -moz-box-sizing: content-box;\r\n    box-sizing: content-box;\r\n}\r\n\r\ntextarea {\r\n    overflow: auto;\r\n    vertical-align: top;\r\n    resize: vertical;\r\n}\r\n\r\n/**\r\n * Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.\r\n */\r\n\r\naudio,\r\ncanvas,\r\nvideo {\r\n    display: inline-block;\r\n    *display: inline;\r\n    *zoom: 1;\r\n    max-width: 100%;\r\n}\r\n\r\n/**\r\n * Prevent modern browsers from displaying `audio` without controls.\r\n * Remove excess height in iOS 5 devices.\r\n */\r\n\r\naudio:not([controls]) {\r\n    display: none;\r\n    height: 0;\r\n}\r\n\r\n/**\r\n * Address styling not present in IE 7/8/9, Firefox 3, and Safari 4.\r\n * Known issue: no IE 6 support.\r\n */\r\n\r\n[hidden] {\r\n    display: none;\r\n}\r\n\r\n/**\r\n * 1. Correct text resizing oddly in IE 6/7 when body `font-size` is set using\r\n *    `em` units.\r\n * 2. Prevent iOS text size adjust after orientation change, without disabling\r\n *    user zoom.\r\n */\r\n\r\nhtml {\r\n    font-size: 100%; /* 1 */\r\n    -webkit-text-size-adjust: 100%; /* 2 */\r\n    -ms-text-size-adjust: 100%; /* 2 */\r\n}\r\n\r\n/**\r\n * Address `outline` inconsistency between Chrome and other browsers.\r\n */\r\n\r\na:focus {\r\n    outline: thin dotted;\r\n}\r\n\r\n/**\r\n * Improve readability when focused and also mouse hovered in all browsers.\r\n */\r\n\r\na:active,\r\na:hover {\r\n    outline: 0;\r\n}\r\n\r\n/**\r\n * 1. Remove border when inside `a` element in IE 6/7/8/9 and Firefox 3.\r\n * 2. Improve image quality when scaled in IE 7.\r\n */\r\n\r\nimg {\r\n    border: 0; /* 1 */\r\n    -ms-interpolation-mode: bicubic; /* 2 */\r\n}\r\n\r\n/**\r\n * Address margin not present in IE 6/7/8/9, Safari 5, and Opera 11.\r\n */\r\n\r\nfigure {\r\n    margin: 0;\r\n}\r\n\r\n/**\r\n * Correct margin displayed oddly in IE 6/7.\r\n */\r\n\r\nform {\r\n    margin: 0;\r\n}\r\n\r\n/**\r\n * Define consistent border, margin, and padding.\r\n */\r\n\r\nfieldset {\r\n    border: 1px solid #c0c0c0;\r\n    margin: 0 2px;\r\n    padding: 0.35em 0.625em 0.75em;\r\n}\r\n\r\n/**\r\n * 1. Correct color not being inherited in IE 6/7/8/9.\r\n * 2. Correct text not wrapping in Firefox 3.\r\n * 3. Correct alignment displayed oddly in IE 6/7.\r\n */\r\n\r\nlegend {\r\n    border: 0; /* 1 */\r\n    padding: 0;\r\n    white-space: normal; /* 2 */\r\n    *margin-left: -7px; /* 3 */\r\n}\r\n\r\n/**\r\n * 1. Correct font size not being inherited in all browsers.\r\n * 2. Address margins set differently in IE 6/7, Firefox 3+, Safari 5,\r\n *    and Chrome.\r\n * 3. Improve appearance and consistency in all browsers.\r\n */\r\n\r\nbutton,\r\ninput,\r\nselect,\r\ntextarea {\r\n    font-size: 100%; /* 1 */\r\n    margin: 0; /* 2 */\r\n    vertical-align: baseline; /* 3 */\r\n    *vertical-align: middle; /* 3 */\r\n}\r\n\r\n/**\r\n * Address Firefox 3+ setting `line-height` on `input` using `!important` in\r\n * the UA stylesheet.\r\n */\r\n\r\nbutton,\r\ninput {\r\n    line-height: normal;\r\n}\r\n\r\n/**\r\n * Address inconsistent `text-transform` inheritance for `button` and `select`.\r\n * All other form control elements do not inherit `text-transform` values.\r\n * Correct `button` style inheritance in Chrome, Safari 5+, and IE 6+.\r\n * Correct `select` style inheritance in Firefox 4+ and Opera.\r\n */\r\n\r\nbutton,\r\nselect {\r\n    text-transform: none;\r\n}\r\n\r\n/**\r\n * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`\r\n *    and `video` controls.\r\n * 2. Correct inability to style clickable `input` types in iOS.\r\n * 3. Improve usability and consistency of cursor style between image-type\r\n *    `input` and others.\r\n * 4. Remove inner spacing in IE 7 without affecting normal text inputs.\r\n *    Known issue: inner spacing remains in IE 6.\r\n */\r\n\r\nbutton,\r\nhtml input[type="button"], /* 1 */\r\ninput[type="reset"],\r\ninput[type="submit"] {\r\n    -webkit-appearance: button; /* 2 */\r\n    cursor: pointer; /* 3 */\r\n    *overflow: visible;  /* 4 */\r\n}\r\n\r\n/**\r\n * Re-set default cursor for disabled elements.\r\n */\r\n\r\nbutton[disabled],\r\nhtml input[disabled] {\r\n    cursor: default;\r\n}\r\n\r\n/**\r\n * 1. Address box sizing set to content-box in IE 8/9.\r\n * 2. Remove excess padding in IE 8/9.\r\n * 3. Remove excess padding in IE 7.\r\n *    Known issue: excess padding remains in IE 6.\r\n */\r\n\r\ninput[type="checkbox"],\r\ninput[type="radio"] {\r\n    box-sizing: border-box; /* 1 */\r\n    padding: 0; /* 2 */\r\n    *height: 13px; /* 3 */\r\n    *width: 13px; /* 3 */\r\n}\r\n\r\n/**\r\n * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.\r\n * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome\r\n *    (include `-moz` to future-proof).\r\n */\r\n\r\ninput[type="search"] {\r\n    -webkit-appearance: textfield; /* 1 */\r\n    -moz-box-sizing: content-box;\r\n    -webkit-box-sizing: content-box; /* 2 */\r\n    box-sizing: content-box;\r\n}\r\n\r\n/**\r\n * Remove inner padding and search cancel button in Safari 5 and Chrome\r\n * on OS X.\r\n */\r\n\r\ninput[type="search"]::-webkit-search-cancel-button,\r\ninput[type="search"]::-webkit-search-decoration {\r\n    -webkit-appearance: none;\r\n}\r\n\r\n/**\r\n * Remove inner padding and border in Firefox 3+.\r\n */\r\n\r\nbutton::-moz-focus-inner,\r\ninput::-moz-focus-inner {\r\n    border: 0;\r\n    padding: 0;\r\n}\r\n\r\n/**\r\n * 1. Remove default vertical scrollbar in IE 6/7/8/9.\r\n * 2. Improve readability and alignment in all browsers.\r\n */\r\n\r\ntextarea {\r\n    overflow: auto; /* 1 */\r\n    vertical-align: top; /* 2 */\r\n}\r\n\r\n/**\r\n * Remove most spacing between table cells.\r\n */\r\n\r\ntable {\r\n    border-collapse: collapse;\r\n    border-spacing: 0;\r\n}\r\n\r\nhtml,\r\nbutton,\r\ninput,\r\nselect,\r\ntextarea {\r\n    color: #222;\r\n}\r\n\r\n\r\n::-moz-selection {\r\n    background: #b3d4fc;\r\n    text-shadow: none;\r\n}\r\n\r\n::selection {\r\n    background: #b3d4fc;\r\n    text-shadow: none;\r\n}\r\n\r\nimg {\r\n    vertical-align: middle;\r\n}\r\n\r\nfieldset {\r\n    border: 0;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\ntextarea {\r\n    resize: vertical;\r\n}\r\n\r\n.chromeframe {\r\n    margin: 0.2em 0;\r\n    background: #ccc;\r\n    color: #000;\r\n    padding: 0.2em 0;\r\n}\r\n\r\n'],sourceRoot:""}]);const s=o},3645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r="",t=void 0!==n[5];return n[4]&&(r+="@supports (".concat(n[4],") {")),n[2]&&(r+="@media ".concat(n[2]," {")),t&&(r+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),r+=e(n),t&&(r+="}"),n[2]&&(r+="}"),n[4]&&(r+="}"),r})).join("")},n.i=function(e,r,t,i,a){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(t)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(o[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);t&&o[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),n.push(d))}},n}},1667:e=>{"use strict";e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},7537:e=>{"use strict";e.exports=function(e){var n=e[1],r=e[3];if(!r)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(i," */"),o=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([a]).join("\n")}return[n].join("\n")}},4082:(e,n,r)=>{var t=r(202);e.exports=(t.default||t).template({compiler:[8,">= 4.3.0"],main:function(e,n,r,t,i){return'<div class="game-arena">\r\n    <div class="first-player-arena"></div>\r\n    <div class="middle-bisector">\r\n        <div class="rounds-container">\r\n            <p>Round <span class="round-num">1</span></p>\r\n        </div>\r\n    </div>\r\n    <div class="second-player-arena"></div>\r\n</div>'},useData:!0})},6134:(e,n,r)=>{var t=r(202);e.exports=(t.default||t).template({1:function(e,n,r,t,i){return'    <div class="board-block"></div>\r\n'},compiler:[8,">= 4.3.0"],main:function(e,n,r,t,i){var a,o=e.lookupProperty||function(e,n){if(Object.prototype.hasOwnProperty.call(e,n))return e[n]};return null!=(a=o(r,"each").call(null!=n?n:e.nullContext||{},null!=n?o(n,"blocks"):n,{name:"each",hash:{},fn:e.program(1,i,0),inverse:e.noop,data:i,loc:{start:{line:1,column:0},end:{line:3,column:9}}}))?a:""},useData:!0})},8661:(e,n,r)=>{var t=r(202);e.exports=(t.default||t).template({compiler:[8,">= 4.3.0"],main:function(e,n,r,t,i){return'<div class="modal-container">\r\n    <div class="game-type-modal">\r\n        <div class="modal-header">\r\n            <h2>Game Type</h2>\r\n        </div>\r\n        <div class="modal-body">\r\n            <section class="section-type-options">\r\n                <form id="form-game-type">\r\n                    <label for="single-player">\r\n                        <input\r\n                            type="radio"\r\n                            id="single-player"\r\n                            name="game-type"\r\n                            value="1"\r\n                            checked\r\n                        />\r\n                        <span>Single Player</span>\r\n                    </label>\r\n\r\n                    <label for="multiplayer">\r\n                        <input\r\n                            type="radio"\r\n                            id="multiplayer"\r\n                            name="game-type"\r\n                            value="2"\r\n                        />\r\n                        <span>Multiplayer</span>\r\n                    </label>\r\n                </form>\r\n            </section>\r\n        </div>\r\n        <hr class="icy-hr" />\r\n        <div class="modal-options">\r\n            <button class="btn-play">Play</button>\r\n        </div>\r\n    </div>\r\n</div>'},useData:!0})},9508:(e,n,r)=>{var t=r(202);e.exports=(t.default||t).template({compiler:[8,">= 4.3.0"],main:function(e,n,r,t,i){return'<div class="modal-container">\r\n    <div class="grid-size-modal">\r\n        <div class="modal-header">\r\n            <h2>Options</h2>\r\n        </div>\r\n        <div class="modal-body">\r\n            <section class="section-grid-size">\r\n                <header>\r\n                    <h3>Grid Size</h3>\r\n                </header>\r\n                <span class="width-label">Width</span>\r\n                <div class="width-counter">\r\n                    <span class="minus">\r\n                        <svg\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-dash-lg"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                fill-rule="evenodd"\r\n                                d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8Z"\r\n                            ></path>\r\n                        </svg>\r\n                    </span>\r\n                    <span class="number"></span>\r\n                    <span class="plus"><svg\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-plus-lg"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                fill-rule="evenodd"\r\n                                d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z"\r\n                            ></path>\r\n                        </svg></span>\r\n                </div>\r\n                <span class="height-label">Height</span>\r\n                <div class="height-counter">\r\n                    <span class="minus"><svg\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-dash-lg"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                fill-rule="evenodd"\r\n                                d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8Z"\r\n                            ></path>\r\n                        </svg></span>\r\n                    <span class="number">1</span>\r\n                    <span class="plus"><svg\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-plus-lg"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                fill-rule="evenodd"\r\n                                d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z"\r\n                            ></path>\r\n                        </svg></span>\r\n                </div>\r\n                <div class="board"></div>\r\n            </section>\r\n        </div>\r\n        <hr class="icy-hr" />\r\n        <div class="modal-options">\r\n            <button class="btn-next">Next</button>\r\n        </div>\r\n        <div class="modal-spacer"></div>\r\n    </div>\r\n</div>'},useData:!0})},4129:(e,n,r)=>{var t=r(202);e.exports=(t.default||t).template({compiler:[8,">= 4.3.0"],main:function(e,n,r,t,i){return'<div class="modal-container">\r\n    <div class="rules-modal">\r\n        <div class="modal-header">\r\n            <h2>Rules</h2>\r\n        </div>\r\n        <div class="modal-body">\r\n            <section class="section-overview">\r\n                <header>\r\n                    <h3>Overview</h3>\r\n                </header>\r\n                <p>\r\n                    Battleship is a war-themed board game for two players in which the opponents try\r\n                    to guess the location of their opponent\'s warships and sink them.\r\n                </p>\r\n            </section>\r\n            <section class="section-gameplay">\r\n                <header>\r\n                    <h3>Gameplay</h3>\r\n                </header>\r\n                <ol>\r\n                    <li>Both players agree on the size of their boards.</li>\r\n                    <li>Both players agree on the number of the ships and their length which will be\r\n                        placed on the boards.</li>\r\n                    <li>\r\n                        Each player hides their ships in their board. Note: Make sure that the other\r\n                        player can not see the screen while your are placing the ships.\r\n                    </li>\r\n                    <li>\r\n                        When the game starts players take turns attacking their enemy board, this is\r\n                        done by choosing a cell on the board.\r\n                        <ul>\r\n                            <li>\r\n                                If there is a part of the ship under the attacked cell then the\r\n                                attack succeded and the player continue to attack another cell.\r\n                            </li>\r\n                            <li>\r\n                                Otherwise the attack failed and the other player starts his turn.\r\n                            </li>\r\n                        </ul>\r\n                    </li>\r\n                    <li>\r\n                        The winner is the first to reveal all the hidden ships in their enemy\'s\r\n                        board.\r\n                    </li>\r\n                </ol>\r\n            </section>\r\n        </div>\r\n        <hr class="icy-hr" />\r\n        <div class="modal-options">\r\n            <button class="btn-start">Start</button>\r\n        </div>\r\n        <div class="modal-spacer"></div>\r\n    </div>\r\n</div>'},useData:!0})},1569:(e,n,r)=>{var t=r(202);e.exports=(t.default||t).template({compiler:[8,">= 4.3.0"],main:function(e,n,r,t,i){return'<div class="modal-container">\r\n    <div class="ships-choosing-modal">\r\n        <div class="modal-header">\r\n            <h2>Options</h2>\r\n        </div>\r\n        <div class="modal-body">\r\n            <section class="section-choose-ships">\r\n                <header>\r\n                    <h3>Choose Ships</h3>\r\n                </header>\r\n                <div class="ships">\r\n                    <div class="pages-container"></div>\r\n                </div>\r\n                <div class="pagination">\r\n                    <div class="arrow-container arrow-container-button">\r\n                        <svg\r\n                            class="left-arrow"\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-caret-left-fill"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z"\r\n                            ></path>\r\n                        </svg>\r\n                    </div>\r\n                    <p><span class="current-page">1</span>\r\n                        /\r\n                        <span class="pages-num"></span></p>\r\n                    <div class="arrow-container arrow-container-button">\r\n                        <svg\r\n                            class="right-arrow"\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-caret-right-fill"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"\r\n                            ></path>\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n        <hr class="icy-hr" />\r\n        <div class="modal-options">\r\n            <button class="btn-back">Back</button>\r\n            <button class="btn-submit">Next</button>\r\n        </div>\r\n        <div class="modal-spacer"></div>\r\n    </div>\r\n</div>'},useData:!0})},4257:(e,n,r)=>{var t=r(202);e.exports=(t.default||t).template({compiler:[8,">= 4.3.0"],main:function(e,n,r,t,i){var a,o=null!=n?n:e.nullContext||{},s=e.hooks.helperMissing,l="function",c=e.escapeExpression,d=e.lookupProperty||function(e,n){if(Object.prototype.hasOwnProperty.call(e,n))return e[n]};return'<div class="ship-container" data-length="'+c(typeof(a=null!=(a=d(r,"shipLength")||(null!=n?d(n,"shipLength"):n))?a:s)===l?a.call(o,{name:"shipLength",hash:{},data:i,loc:{start:{line:1,column:41},end:{line:1,column:55}}}):a)+'">\r\n    <div class="ship active">\r\n        <div class="ship-block"></div>\r\n    </div>\r\n    <div class="count">\r\n        x\r\n        <span class="number">'+c(typeof(a=null!=(a=d(r,"shipCount")||(null!=n?d(n,"shipCount"):n))?a:s)===l?a.call(o,{name:"shipCount",hash:{},data:i,loc:{start:{line:7,column:29},end:{line:7,column:42}}}):a)+"</span>\r\n    </div>\r\n</div>"},useData:!0})},5460:(e,n,r)=>{var t=r(202);e.exports=(t.default||t).template({compiler:[8,">= 4.3.0"],main:function(e,n,r,t,i){var a,o=null!=n?n:e.nullContext||{},s=e.hooks.helperMissing,l="function",c=e.escapeExpression,d=e.lookupProperty||function(e,n){if(Object.prototype.hasOwnProperty.call(e,n))return e[n]};return'<div class="ship-container" data-length="'+c(typeof(a=null!=(a=d(r,"shipLength")||(null!=n?d(n,"shipLength"):n))?a:s)===l?a.call(o,{name:"shipLength",hash:{},data:i,loc:{start:{line:1,column:41},end:{line:1,column:55}}}):a)+'">\r\n    <div class="counter">\r\n        <span class="minus">\r\n            <svg\r\n                xmlns="http://www.w3.org/2000/svg"\r\n                width="16"\r\n                height="16"\r\n                fill="currentColor"\r\n                class="bi bi-dash-lg"\r\n                viewBox="0 0 16 16"\r\n            >\r\n                <path\r\n                    fill-rule="evenodd"\r\n                    d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8Z"\r\n                ></path>\r\n            </svg>\r\n        </span>\r\n        <div class="ship">\r\n            \r\n        </div>\r\n        <span class="plus"><svg\r\n                xmlns="http://www.w3.org/2000/svg"\r\n                width="16"\r\n                height="16"\r\n                fill="currentColor"\r\n                class="bi bi-plus-lg"\r\n                viewBox="0 0 16 16"\r\n            >\r\n                <path\r\n                    fill-rule="evenodd"\r\n                    d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z"\r\n                ></path>\r\n            </svg></span>\r\n    </div>\r\n    <div class="count">\r\n        x\r\n        <span class="number">'+c(typeof(a=null!=(a=d(r,"shipCount")||(null!=n?d(n,"shipCount"):n))?a:s)===l?a.call(o,{name:"shipCount",hash:{},data:i,loc:{start:{line:37,column:29},end:{line:37,column:42}}}):a)+"</span>\r\n    </div>\r\n</div>"},useData:!0})},6072:(e,n,r)=>{var t=r(202);e.exports=(t.default||t).template({compiler:[8,">= 4.3.0"],main:function(e,n,r,t,i){var a,o=e.lookupProperty||function(e,n){if(Object.prototype.hasOwnProperty.call(e,n))return e[n]};return'<div class="modal-container">\r\n        <div class="ships-placing-modal">\r\n            <div class="modal-header">\r\n                <h2>'+e.escapeExpression("function"==typeof(a=null!=(a=o(r,"playerLabel")||(null!=n?o(n,"playerLabel"):n))?a:e.hooks.helperMissing)?a.call(null!=n?n:e.nullContext||{},{name:"playerLabel",hash:{},data:i,loc:{start:{line:4,column:20},end:{line:4,column:35}}}):a)+'</h2>\r\n            </div>\r\n            <div class="modal-body">\r\n                <section class="section-player-name">\r\n                    <header>\r\n                        <h3>Player Name</h3>\r\n                    </header>\r\n                    <form class="form-player-name">\r\n                        <div class="floating-label-input">\r\n                            <input\r\n                                type="text"\r\n                                name="name"\r\n                                id="name"\r\n                                placeholder=" "\r\n                                autocomplete="off"\r\n                            />\r\n                            <label for="name">\r\n                            </label>\r\n                        </div>\r\n                    </form>\r\n                </section>\r\n                <hr class="icy-hr" />\r\n                <section class="place-ships">\r\n                    <header>\r\n                        <h3>Place Ships</h3>\r\n                    </header>\r\n                    <div class="ships">\r\n                        <div class="pages-container">\r\n\r\n                        </div>\r\n                        <div class="pagination">\r\n                            <div class="arrow-container arrow-container-button">\r\n                                <svg\r\n                                    class="left-arrow"\r\n                                    xmlns="http://www.w3.org/2000/svg"\r\n                                    width="16"\r\n                                    height="16"\r\n                                    fill="currentColor"\r\n                                    class="bi bi-caret-left-fill"\r\n                                    viewBox="0 0 16 16"\r\n                                >\r\n                                    <path\r\n                                        d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z"\r\n                                    ></path>\r\n                                </svg>\r\n                            </div>\r\n                            <p><span class="current-page">1</span>\r\n                                /\r\n                                <span class="pages-num"></span></p>\r\n                            <div class="arrow-container arrow-container-button">\r\n                                <svg\r\n                                    class="right-arrow"\r\n                                    xmlns="http://www.w3.org/2000/svg"\r\n                                    width="16"\r\n                                    height="16"\r\n                                    fill="currentColor"\r\n                                    class="bi bi-caret-right-fill"\r\n                                    viewBox="0 0 16 16"\r\n                                >\r\n                                    <path\r\n                                        d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"\r\n                                    ></path>\r\n                                </svg>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class="board-container">\r\n                        <div class="board"></div>\r\n                        <div class="place-options">\r\n                            <button class="btn-h active">H</button>\r\n                            <button class="btn-v">V</button>\r\n                            <button class="btn-remove">\r\n                                <svg\r\n                                    xmlns="http://www.w3.org/2000/svg"\r\n                                    width="20"\r\n                                    height="20"\r\n                                    fill="white"\r\n                                    class="bi bi-trash-fill"\r\n                                    viewBox="0 0 16 16"\r\n                                >\r\n                                    <path\r\n                                        d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z"\r\n                                    ></path>\r\n                                </svg>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div class="auto-place-container">\r\n                        <button class="btn-auto-place">Random Placing</button>\r\n                        <p class="text-error d-none">*Couldn\'t place ships</p>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n            <hr class="icy-hr" />\r\n            <div class="modal-options">\r\n                <button class="btn-back">Back</button>\r\n                <button class="btn-submit">Next</button>\r\n            </div>\r\n            <div class="modal-spacer"></div>\r\n    </div>\r\n</div>'},useData:!0})},344:(e,n,r)=>{var t=r(202);e.exports=(t.default||t).template({compiler:[8,">= 4.3.0"],main:function(e,n,r,t,i){return'<div class="turn-row">\r\n    <div class="turn-container">\r\n        <p>Your Turn</p>\r\n    </div>\r\n</div>\r\n\r\n<div class="board">\r\n\r\n</div>\r\n\r\n<div class="ships-remained-container-responsive">\r\n    <div class="ships">\r\n\r\n    </div>\r\n    <div class="pagination">\r\n        <div class="arrow-container">\r\n            <svg\r\n                class="left-arrow"\r\n                xmlns="http://www.w3.org/2000/svg"\r\n                width="16"\r\n                height="16"\r\n                fill="currentColor"\r\n                class="bi bi-caret-left-fill"\r\n                viewBox="0 0 16 16"\r\n            >\r\n                <path\r\n                    d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z"\r\n                ></path>\r\n            </svg>\r\n        </div>\r\n        <div class="arrow-container">\r\n            <svg\r\n                class="right-arrow"\r\n                xmlns="http://www.w3.org/2000/svg"\r\n                width="16"\r\n                height="16"\r\n                fill="currentColor"\r\n                class="bi bi-caret-right-fill"\r\n                viewBox="0 0 16 16"\r\n            >\r\n                <path\r\n                    d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"\r\n                ></path>\r\n            </svg>\r\n        </div>\r\n    </div>\r\n    <div class="info">\r\n        <img src="../assets/img/info-circle-fill.svg" alt="" />\r\n    </div>\r\n</div>\r\n\r\n<div class="score-container">\r\n    <p class="name"></p>\r\n    <p>Wins: <span class="wins">0</span></p>\r\n    <p>Losses: <span class="losses">0</span></p>\r\n</div>\r\n\r\n<div class="darkening"></div>'},useData:!0})},6834:(e,n,r)=>{"use strict";function t(e){return e&&e.__esModule?e:{default:e}}function i(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n.default=e,n}n.__esModule=!0;var a=i(r(2067)),o=t(r(5558)),s=t(r(8728)),l=i(r(2392)),c=i(r(1628)),d=t(r(3982));function u(){var e=new a.HandlebarsEnvironment;return l.extend(e,a),e.SafeString=o.default,e.Exception=s.default,e.Utils=l,e.escapeExpression=l.escapeExpression,e.VM=c,e.template=function(n){return c.template(n,e)},e}var h=u();h.create=u,d.default(h),h.default=h,n.default=h,e.exports=n.default},2067:(e,n,r)=>{"use strict";function t(e){return e&&e.__esModule?e:{default:e}}n.__esModule=!0,n.HandlebarsEnvironment=u;var i=r(2392),a=t(r(8728)),o=r(2638),s=r(881),l=t(r(8037)),c=r(6293);n.VERSION="4.7.7",n.COMPILER_REVISION=8,n.LAST_COMPATIBLE_COMPILER_REVISION=7,n.REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0 <4.3.0",8:">= 4.3.0"};var d="[object Object]";function u(e,n,r){this.helpers=e||{},this.partials=n||{},this.decorators=r||{},o.registerDefaultHelpers(this),s.registerDefaultDecorators(this)}u.prototype={constructor:u,logger:l.default,log:l.default.log,registerHelper:function(e,n){if(i.toString.call(e)===d){if(n)throw new a.default("Arg not supported with multiple helpers");i.extend(this.helpers,e)}else this.helpers[e]=n},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,n){if(i.toString.call(e)===d)i.extend(this.partials,e);else{if(void 0===n)throw new a.default('Attempting to register a partial called "'+e+'" as undefined');this.partials[e]=n}},unregisterPartial:function(e){delete this.partials[e]},registerDecorator:function(e,n){if(i.toString.call(e)===d){if(n)throw new a.default("Arg not supported with multiple decorators");i.extend(this.decorators,e)}else this.decorators[e]=n},unregisterDecorator:function(e){delete this.decorators[e]},resetLoggedPropertyAccesses:function(){c.resetLoggedProperties()}};var h=l.default.log;n.log=h,n.createFrame=i.createFrame,n.logger=l.default},881:(e,n,r)=>{"use strict";n.__esModule=!0,n.registerDefaultDecorators=function(e){i.default(e)};var t,i=(t=r(5670))&&t.__esModule?t:{default:t}},5670:(e,n,r)=>{"use strict";n.__esModule=!0;var t=r(2392);n.default=function(e){e.registerDecorator("inline",(function(e,n,r,i){var a=e;return n.partials||(n.partials={},a=function(i,a){var o=r.partials;r.partials=t.extend({},o,n.partials);var s=e(i,a);return r.partials=o,s}),n.partials[i.args[0]]=i.fn,a}))},e.exports=n.default},8728:(e,n)=>{"use strict";n.__esModule=!0;var r=["description","fileName","lineNumber","endLineNumber","message","name","number","stack"];function t(e,n){var i=n&&n.loc,a=void 0,o=void 0,s=void 0,l=void 0;i&&(a=i.start.line,o=i.end.line,s=i.start.column,l=i.end.column,e+=" - "+a+":"+s);for(var c=Error.prototype.constructor.call(this,e),d=0;d<r.length;d++)this[r[d]]=c[r[d]];Error.captureStackTrace&&Error.captureStackTrace(this,t);try{i&&(this.lineNumber=a,this.endLineNumber=o,Object.defineProperty?(Object.defineProperty(this,"column",{value:s,enumerable:!0}),Object.defineProperty(this,"endColumn",{value:l,enumerable:!0})):(this.column=s,this.endColumn=l))}catch(e){}}t.prototype=new Error,n.default=t,e.exports=n.default},2638:(e,n,r)=>{"use strict";function t(e){return e&&e.__esModule?e:{default:e}}n.__esModule=!0,n.registerDefaultHelpers=function(e){i.default(e),a.default(e),o.default(e),s.default(e),l.default(e),c.default(e),d.default(e)},n.moveHelperToHooks=function(e,n,r){e.helpers[n]&&(e.hooks[n]=e.helpers[n],r||delete e.helpers[n])};var i=t(r(7342)),a=t(r(6822)),o=t(r(4905)),s=t(r(7405)),l=t(r(5702)),c=t(r(7593)),d=t(r(3978))},7342:(e,n,r)=>{"use strict";n.__esModule=!0;var t=r(2392);n.default=function(e){e.registerHelper("blockHelperMissing",(function(n,r){var i=r.inverse,a=r.fn;if(!0===n)return a(this);if(!1===n||null==n)return i(this);if(t.isArray(n))return n.length>0?(r.ids&&(r.ids=[r.name]),e.helpers.each(n,r)):i(this);if(r.data&&r.ids){var o=t.createFrame(r.data);o.contextPath=t.appendContextPath(r.data.contextPath,r.name),r={data:o}}return a(n,r)}))},e.exports=n.default},6822:(e,n,r)=>{"use strict";n.__esModule=!0;var t,i=r(2392),a=(t=r(8728))&&t.__esModule?t:{default:t};n.default=function(e){e.registerHelper("each",(function(e,n){if(!n)throw new a.default("Must pass iterator to #each");var t,o=n.fn,s=n.inverse,l=0,c="",d=void 0,u=void 0;function h(n,r,t){d&&(d.key=n,d.index=r,d.first=0===r,d.last=!!t,u&&(d.contextPath=u+n)),c+=o(e[n],{data:d,blockParams:i.blockParams([e[n],n],[u+n,null])})}if(n.data&&n.ids&&(u=i.appendContextPath(n.data.contextPath,n.ids[0])+"."),i.isFunction(e)&&(e=e.call(this)),n.data&&(d=i.createFrame(n.data)),e&&"object"==typeof e)if(i.isArray(e))for(var A=e.length;l<A;l++)l in e&&h(l,l,l===e.length-1);else if(r.g.Symbol&&e[r.g.Symbol.iterator]){for(var p=[],m=e[r.g.Symbol.iterator](),f=m.next();!f.done;f=m.next())p.push(f.value);for(A=(e=p).length;l<A;l++)h(l,l,l===e.length-1)}else t=void 0,Object.keys(e).forEach((function(e){void 0!==t&&h(t,l-1),t=e,l++})),void 0!==t&&h(t,l-1,!0);return 0===l&&(c=s(this)),c}))},e.exports=n.default},4905:(e,n,r)=>{"use strict";n.__esModule=!0;var t,i=(t=r(8728))&&t.__esModule?t:{default:t};n.default=function(e){e.registerHelper("helperMissing",(function(){if(1!==arguments.length)throw new i.default('Missing helper: "'+arguments[arguments.length-1].name+'"')}))},e.exports=n.default},7405:(e,n,r)=>{"use strict";n.__esModule=!0;var t,i=r(2392),a=(t=r(8728))&&t.__esModule?t:{default:t};n.default=function(e){e.registerHelper("if",(function(e,n){if(2!=arguments.length)throw new a.default("#if requires exactly one argument");return i.isFunction(e)&&(e=e.call(this)),!n.hash.includeZero&&!e||i.isEmpty(e)?n.inverse(this):n.fn(this)})),e.registerHelper("unless",(function(n,r){if(2!=arguments.length)throw new a.default("#unless requires exactly one argument");return e.helpers.if.call(this,n,{fn:r.inverse,inverse:r.fn,hash:r.hash})}))},e.exports=n.default},5702:(e,n)=>{"use strict";n.__esModule=!0,n.default=function(e){e.registerHelper("log",(function(){for(var n=[void 0],r=arguments[arguments.length-1],t=0;t<arguments.length-1;t++)n.push(arguments[t]);var i=1;null!=r.hash.level?i=r.hash.level:r.data&&null!=r.data.level&&(i=r.data.level),n[0]=i,e.log.apply(e,n)}))},e.exports=n.default},7593:(e,n)=>{"use strict";n.__esModule=!0,n.default=function(e){e.registerHelper("lookup",(function(e,n,r){return e?r.lookupProperty(e,n):e}))},e.exports=n.default},3978:(e,n,r)=>{"use strict";n.__esModule=!0;var t,i=r(2392),a=(t=r(8728))&&t.__esModule?t:{default:t};n.default=function(e){e.registerHelper("with",(function(e,n){if(2!=arguments.length)throw new a.default("#with requires exactly one argument");i.isFunction(e)&&(e=e.call(this));var r=n.fn;if(i.isEmpty(e))return n.inverse(this);var t=n.data;return n.data&&n.ids&&((t=i.createFrame(n.data)).contextPath=i.appendContextPath(n.data.contextPath,n.ids[0])),r(e,{data:t,blockParams:i.blockParams([e],[t&&t.contextPath])})}))},e.exports=n.default},8572:(e,n,r)=>{"use strict";n.__esModule=!0,n.createNewLookupObject=function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.extend.apply(void 0,[Object.create(null)].concat(n))};var t=r(2392)},6293:(e,n,r)=>{"use strict";n.__esModule=!0,n.createProtoAccessControl=function(e){var n=Object.create(null);n.constructor=!1,n.__defineGetter__=!1,n.__defineSetter__=!1,n.__lookupGetter__=!1;var r=Object.create(null);return r.__proto__=!1,{properties:{whitelist:t.createNewLookupObject(r,e.allowedProtoProperties),defaultValue:e.allowProtoPropertiesByDefault},methods:{whitelist:t.createNewLookupObject(n,e.allowedProtoMethods),defaultValue:e.allowProtoMethodsByDefault}}},n.resultIsAllowed=function(e,n,r){return function(e,n){return void 0!==e.whitelist[n]?!0===e.whitelist[n]:void 0!==e.defaultValue?e.defaultValue:(function(e){!0!==a[e]&&(a[e]=!0,i.log("error",'Handlebars: Access has been denied to resolve the property "'+e+'" because it is not an "own property" of its parent.\nYou can add a runtime option to disable the check or this warning:\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details'))}(n),!1)}("function"==typeof e?n.methods:n.properties,r)},n.resetLoggedProperties=function(){Object.keys(a).forEach((function(e){delete a[e]}))};var t=r(8572),i=function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n.default=e,n}(r(8037)),a=Object.create(null)},5005:(e,n)=>{"use strict";n.__esModule=!0,n.wrapHelper=function(e,n){return"function"!=typeof e?e:function(){return arguments[arguments.length-1]=n(arguments[arguments.length-1]),e.apply(this,arguments)}}},8037:(e,n,r)=>{"use strict";n.__esModule=!0;var t=r(2392),i={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(e){if("string"==typeof e){var n=t.indexOf(i.methodMap,e.toLowerCase());e=n>=0?n:parseInt(e,10)}return e},log:function(e){if(e=i.lookupLevel(e),"undefined"!=typeof console&&i.lookupLevel(i.level)<=e){var n=i.methodMap[e];console[n]||(n="log");for(var r=arguments.length,t=Array(r>1?r-1:0),a=1;a<r;a++)t[a-1]=arguments[a];console[n].apply(console,t)}}};n.default=i,e.exports=n.default},3982:(e,n,r)=>{"use strict";n.__esModule=!0,n.default=function(e){var n=void 0!==r.g?r.g:window,t=n.Handlebars;e.noConflict=function(){return n.Handlebars===e&&(n.Handlebars=t),e}},e.exports=n.default},1628:(e,n,r)=>{"use strict";n.__esModule=!0,n.checkRevision=function(e){var n=e&&e[0]||1,r=o.COMPILER_REVISION;if(!(n>=o.LAST_COMPATIBLE_COMPILER_REVISION&&n<=o.COMPILER_REVISION)){if(n<o.LAST_COMPATIBLE_COMPILER_REVISION){var t=o.REVISION_CHANGES[r],i=o.REVISION_CHANGES[n];throw new a.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+t+") or downgrade your runtime to an older version ("+i+").")}throw new a.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")}},n.template=function(e,n){if(!n)throw new a.default("No environment passed to template");if(!e||!e.main)throw new a.default("Unknown template object: "+typeof e);e.main.decorator=e.main_d,n.VM.checkRevision(e.compiler);var r=e.compiler&&7===e.compiler[0],t={strict:function(e,n,r){if(!e||!(n in e))throw new a.default('"'+n+'" not defined in '+e,{loc:r});return t.lookupProperty(e,n)},lookupProperty:function(e,n){var r=e[n];return null==r||Object.prototype.hasOwnProperty.call(e,n)||c.resultIsAllowed(r,t.protoAccessControl,n)?r:void 0},lookup:function(e,n){for(var r=e.length,i=0;i<r;i++)if(null!=(e[i]&&t.lookupProperty(e[i],n)))return e[i][n]},lambda:function(e,n){return"function"==typeof e?e.call(n):e},escapeExpression:i.escapeExpression,invokePartial:function(r,t,o){o.hash&&(t=i.extend({},t,o.hash),o.ids&&(o.ids[0]=!0)),r=n.VM.resolvePartial.call(this,r,t,o);var s=i.extend({},o,{hooks:this.hooks,protoAccessControl:this.protoAccessControl}),l=n.VM.invokePartial.call(this,r,t,s);if(null==l&&n.compile&&(o.partials[o.name]=n.compile(r,e.compilerOptions,n),l=o.partials[o.name](t,s)),null!=l){if(o.indent){for(var c=l.split("\n"),d=0,u=c.length;d<u&&(c[d]||d+1!==u);d++)c[d]=o.indent+c[d];l=c.join("\n")}return l}throw new a.default("The partial "+o.name+" could not be compiled when running in runtime-only mode")},fn:function(n){var r=e[n];return r.decorator=e[n+"_d"],r},programs:[],program:function(e,n,r,t,i){var a=this.programs[e],o=this.fn(e);return n||i||t||r?a=d(this,e,o,n,r,t,i):a||(a=this.programs[e]=d(this,e,o)),a},data:function(e,n){for(;e&&n--;)e=e._parent;return e},mergeIfNeeded:function(e,n){var r=e||n;return e&&n&&e!==n&&(r=i.extend({},n,e)),r},nullContext:Object.seal({}),noop:n.VM.noop,compilerInfo:e.compiler};function o(n){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],i=r.data;o._setup(r),!r.partial&&e.useData&&(i=h(n,i));var a=void 0,s=e.useBlockParams?[]:void 0;function l(n){return""+e.main(t,n,t.helpers,t.partials,i,s,a)}return e.useDepths&&(a=r.depths?n!=r.depths[0]?[n].concat(r.depths):r.depths:[n]),(l=A(e.main,l,t,r.depths||[],i,s))(n,r)}return o.isTop=!0,o._setup=function(a){if(a.partial)t.protoAccessControl=a.protoAccessControl,t.helpers=a.helpers,t.partials=a.partials,t.decorators=a.decorators,t.hooks=a.hooks;else{var o=i.extend({},n.helpers,a.helpers);!function(e,n){Object.keys(e).forEach((function(r){var t=e[r];e[r]=function(e,n){var r=n.lookupProperty;return l.wrapHelper(e,(function(e){return i.extend({lookupProperty:r},e)}))}(t,n)}))}(o,t),t.helpers=o,e.usePartial&&(t.partials=t.mergeIfNeeded(a.partials,n.partials)),(e.usePartial||e.useDecorators)&&(t.decorators=i.extend({},n.decorators,a.decorators)),t.hooks={},t.protoAccessControl=c.createProtoAccessControl(a);var d=a.allowCallsToHelperMissing||r;s.moveHelperToHooks(t,"helperMissing",d),s.moveHelperToHooks(t,"blockHelperMissing",d)}},o._child=function(n,r,i,o){if(e.useBlockParams&&!i)throw new a.default("must pass block params");if(e.useDepths&&!o)throw new a.default("must pass parent depths");return d(t,n,e[n],r,0,i,o)},o},n.wrapProgram=d,n.resolvePartial=function(e,n,r){return e?e.call||r.name||(r.name=e,e=r.partials[e]):e="@partial-block"===r.name?r.data["partial-block"]:r.partials[r.name],e},n.invokePartial=function(e,n,r){var t=r.data&&r.data["partial-block"];r.partial=!0,r.ids&&(r.data.contextPath=r.ids[0]||r.data.contextPath);var s=void 0;if(r.fn&&r.fn!==u&&function(){r.data=o.createFrame(r.data);var e=r.fn;s=r.data["partial-block"]=function(n){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return r.data=o.createFrame(r.data),r.data["partial-block"]=t,e(n,r)},e.partials&&(r.partials=i.extend({},r.partials,e.partials))}(),void 0===e&&s&&(e=s),void 0===e)throw new a.default("The partial "+r.name+" could not be found");if(e instanceof Function)return e(n,r)},n.noop=u;var t,i=function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n.default=e,n}(r(2392)),a=(t=r(8728))&&t.__esModule?t:{default:t},o=r(2067),s=r(2638),l=r(5005),c=r(6293);function d(e,n,r,t,i,a,o){function s(n){var i=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],s=o;return!o||n==o[0]||n===e.nullContext&&null===o[0]||(s=[n].concat(o)),r(e,n,e.helpers,e.partials,i.data||t,a&&[i.blockParams].concat(a),s)}return(s=A(r,s,e,o,t,a)).program=n,s.depth=o?o.length:0,s.blockParams=i||0,s}function u(){return""}function h(e,n){return n&&"root"in n||((n=n?o.createFrame(n):{}).root=e),n}function A(e,n,r,t,a,o){if(e.decorator){var s={};n=e.decorator(n,s,r,t&&t[0],a,o,t),i.extend(n,s)}return n}},5558:(e,n)=>{"use strict";function r(e){this.string=e}n.__esModule=!0,r.prototype.toString=r.prototype.toHTML=function(){return""+this.string},n.default=r,e.exports=n.default},2392:(e,n)=>{"use strict";n.__esModule=!0,n.extend=o,n.indexOf=function(e,n){for(var r=0,t=e.length;r<t;r++)if(e[r]===n)return r;return-1},n.escapeExpression=function(e){if("string"!=typeof e){if(e&&e.toHTML)return e.toHTML();if(null==e)return"";if(!e)return e+"";e=""+e}return i.test(e)?e.replace(t,a):e},n.isEmpty=function(e){return!e&&0!==e||!(!c(e)||0!==e.length)},n.createFrame=function(e){var n=o({},e);return n._parent=e,n},n.blockParams=function(e,n){return e.path=n,e},n.appendContextPath=function(e,n){return(e?e+".":"")+n};var r={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},t=/[&<>"'`=]/g,i=/[&<>"'`=]/;function a(e){return r[e]}function o(e){for(var n=1;n<arguments.length;n++)for(var r in arguments[n])Object.prototype.hasOwnProperty.call(arguments[n],r)&&(e[r]=arguments[n][r]);return e}var s=Object.prototype.toString;n.toString=s;var l=function(e){return"function"==typeof e};l(/x/)&&(n.isFunction=l=function(e){return"function"==typeof e&&"[object Function]"===s.call(e)}),n.isFunction=l;var c=Array.isArray||function(e){return!(!e||"object"!=typeof e)&&"[object Array]"===s.call(e)};n.isArray=c},202:(e,n,r)=>{e.exports=r(6834).default},1798:function(e,n,r){e=r.nmd(e),function(r,t){"use strict";var i={};r.PubSub?(i=r.PubSub,console.warn("PubSub already loaded, using existing version")):(r.PubSub=i,function(e){var n={},r=-1;function t(e,n,r){try{e(n,r)}catch(e){setTimeout(function(e){return function(){throw e}}(e),0)}}function i(e,n,r){e(n,r)}function a(e,r,a,o){var s,l=n[r],c=o?i:t;if(Object.prototype.hasOwnProperty.call(n,r))for(s in l)Object.prototype.hasOwnProperty.call(l,s)&&c(l[s],e,a)}function o(e){var r=String(e);return Boolean(Object.prototype.hasOwnProperty.call(n,r)&&function(e){var n;for(n in e)if(Object.prototype.hasOwnProperty.call(e,n))return!0;return!1}(n[r]))}function s(e,n,r,t){var i=function(e,n,r){return function(){var t=String(e),i=t.lastIndexOf(".");for(a(e,e,n,r);-1!==i;)i=(t=t.substr(0,i)).lastIndexOf("."),a(e,t,n,r);a(e,"*",n,r)}}(e="symbol"==typeof e?e.toString():e,n,t);return!!function(e){for(var n=String(e),r=o(n)||o("*"),t=n.lastIndexOf(".");!r&&-1!==t;)t=(n=n.substr(0,t)).lastIndexOf("."),r=o(n);return r}(e)&&(!0===r?i():setTimeout(i,0),!0)}e.publish=function(n,r){return s(n,r,!1,e.immediateExceptions)},e.publishSync=function(n,r){return s(n,r,!0,e.immediateExceptions)},e.subscribe=function(e,t){if("function"!=typeof t)return!1;e="symbol"==typeof e?e.toString():e,Object.prototype.hasOwnProperty.call(n,e)||(n[e]={});var i="uid_"+String(++r);return n[e][i]=t,i},e.subscribeAll=function(n){return e.subscribe("*",n)},e.subscribeOnce=function(n,r){var t=e.subscribe(n,(function(){e.unsubscribe(t),r.apply(this,arguments)}));return e},e.clearAllSubscriptions=function(){n={}},e.clearSubscriptions=function(e){var r;for(r in n)Object.prototype.hasOwnProperty.call(n,r)&&0===r.indexOf(e)&&delete n[r]},e.countSubscriptions=function(e){var r,t,i=0;for(r in n)if(Object.prototype.hasOwnProperty.call(n,r)&&0===r.indexOf(e)){for(t in n[r])i++;break}return i},e.getSubscriptions=function(e){var r,t=[];for(r in n)Object.prototype.hasOwnProperty.call(n,r)&&0===r.indexOf(e)&&t.push(r);return t},e.unsubscribe=function(r){var t,i,a,o="string"==typeof r&&(Object.prototype.hasOwnProperty.call(n,r)||function(e){var r;for(r in n)if(Object.prototype.hasOwnProperty.call(n,r)&&0===r.indexOf(e))return!0;return!1}(r)),s=!o&&"string"==typeof r,l="function"==typeof r,c=!1;if(!o){for(t in n)if(Object.prototype.hasOwnProperty.call(n,t)){if(i=n[t],s&&i[r]){delete i[r],c=r;break}if(l)for(a in i)Object.prototype.hasOwnProperty.call(i,a)&&i[a]===r&&(delete i[a],c=!0)}return c}e.clearSubscriptions(r)}}(i)),void 0!==e&&e.exports&&(n=e.exports=i),n.PubSub=i,e.exports=n=i}("object"==typeof window&&window||this)},3379:e=>{"use strict";var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var a={},o=[],s=0;s<e.length;s++){var l=e[s],c=t.base?l[0]+t.base:l[0],d=a[c]||0,u="".concat(c," ").concat(d);a[c]=d+1;var h=r(u),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)n[h].references++,n[h].updater(A);else{var p=i(A,t);t.byIndex=s,n.splice(s,0,{identifier:u,updater:p,references:1})}o.push(u)}return o}function i(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;r.update(e=n)}else r.remove()}}e.exports=function(e,i){var a=t(e=e||[],i=i||{});return function(e){e=e||[];for(var o=0;o<a.length;o++){var s=r(a[o]);n[s].references--}for(var l=t(e,i),c=0;c<a.length;c++){var d=r(a[c]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=l}}},569:e=>{"use strict";var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},9216:e=>{"use strict";e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},3565:(e,n,r)=>{"use strict";e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},7795:e=>{"use strict";e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var i=void 0!==r.layer;i&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,i&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},4589:e=>{"use strict";e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},3651:(e,n,r)=>{"use strict";e.exports=r.p+"d3f5380af086e8b3cb6e.jpg"},7608:(e,n,r)=>{"use strict";e.exports=r.p+"9f71436bff8f61c7f537.png"},9367:(e,n,r)=>{"use strict";e.exports=r.p+"16dc0a87aa1a9e403931.png"},1285:(e,n,r)=>{"use strict";e.exports=r.p+"7a457d2bbf0c9dbb3d8f.jpg"},7807:(e,n,r)=>{"use strict";e.exports=r.p+"5266df54fbc754adb76f.jpg"},8999:(e,n,r)=>{"use strict";e.exports=r.p+"6b20751bbb4d96c43187.jpg"},777:(e,n,r)=>{"use strict";e.exports=r.p+"097b49a85df1231c21e4.jpg"},7278:(e,n,r)=>{"use strict";e.exports=r.p+"c2dd8c37a7476aafb8df.jpg"},7594:(e,n,r)=>{"use strict";e.exports=r.p+"3792204bf5b2a8381bab.jpg"},5650:(e,n,r)=>{"use strict";e.exports=r.p+"2654b3ee25d3bd12e071.jpg"},9153:(e,n,r)=>{"use strict";e.exports=r.p+"a1615734101fcbc7e2ba.jpg"},7061:(e,n,r)=>{var t=r(8698).default;function i(){"use strict";e.exports=i=function(){return n},e.exports.__esModule=!0,e.exports.default=e.exports;var n={},r=Object.prototype,a=r.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},s=o.iterator||"@@iterator",l=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function d(e,n,r){return Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[n]}try{d({},"")}catch(e){d=function(e,n,r){return e[n]=r}}function u(e,n,r,t){var i=n&&n.prototype instanceof p?n:p,a=Object.create(i.prototype),o=new E(t||[]);return a._invoke=function(e,n,r){var t="suspendedStart";return function(i,a){if("executing"===t)throw new Error("Generator is already running");if("completed"===t){if("throw"===i)throw a;return{value:void 0,done:!0}}for(r.method=i,r.arg=a;;){var o=r.delegate;if(o){var s=k(o,r);if(s){if(s===A)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===t)throw t="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);t="executing";var l=h(e,n,r);if("normal"===l.type){if(t=r.done?"completed":"suspendedYield",l.arg===A)continue;return{value:l.arg,done:r.done}}"throw"===l.type&&(t="completed",r.method="throw",r.arg=l.arg)}}}(e,r,o),a}function h(e,n,r){try{return{type:"normal",arg:e.call(n,r)}}catch(e){return{type:"throw",arg:e}}}n.wrap=u;var A={};function p(){}function m(){}function f(){}var g={};d(g,s,(function(){return this}));var v=Object.getPrototypeOf,b=v&&v(v(S([])));b&&b!==r&&a.call(b,s)&&(g=b);var C=f.prototype=p.prototype=Object.create(g);function w(e){["next","throw","return"].forEach((function(n){d(e,n,(function(e){return this._invoke(n,e)}))}))}function y(e,n){function r(i,o,s,l){var c=h(e[i],e,o);if("throw"!==c.type){var d=c.arg,u=d.value;return u&&"object"==t(u)&&a.call(u,"__await")?n.resolve(u.__await).then((function(e){r("next",e,s,l)}),(function(e){r("throw",e,s,l)})):n.resolve(u).then((function(e){d.value=e,s(d)}),(function(e){return r("throw",e,s,l)}))}l(c.arg)}var i;this._invoke=function(e,t){function a(){return new n((function(n,i){r(e,t,n,i)}))}return i=i?i.then(a,a):a()}}function k(e,n){var r=e.iterator[n.method];if(void 0===r){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=void 0,k(e,n),"throw"===n.method))return A;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return A}var t=h(r,e.iterator,n.arg);if("throw"===t.type)return n.method="throw",n.arg=t.arg,n.delegate=null,A;var i=t.arg;return i?i.done?(n[e.resultName]=i.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,A):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,A)}function x(e){var n={tryLoc:e[0]};1 in e&&(n.catchLoc=e[1]),2 in e&&(n.finallyLoc=e[2],n.afterLoc=e[3]),this.tryEntries.push(n)}function B(e){var n=e.completion||{};n.type="normal",delete n.arg,e.completion=n}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(x,this),this.reset(!0)}function S(e){if(e){var n=e[s];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,t=function n(){for(;++r<e.length;)if(a.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return t.next=t}}return{next:I}}function I(){return{value:void 0,done:!0}}return m.prototype=f,d(C,"constructor",f),d(f,"constructor",m),m.displayName=d(f,c,"GeneratorFunction"),n.isGeneratorFunction=function(e){var n="function"==typeof e&&e.constructor;return!!n&&(n===m||"GeneratorFunction"===(n.displayName||n.name))},n.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,f):(e.__proto__=f,d(e,c,"GeneratorFunction")),e.prototype=Object.create(C),e},n.awrap=function(e){return{__await:e}},w(y.prototype),d(y.prototype,l,(function(){return this})),n.AsyncIterator=y,n.async=function(e,r,t,i,a){void 0===a&&(a=Promise);var o=new y(u(e,r,t,i),a);return n.isGeneratorFunction(r)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},w(C),d(C,c,"Generator"),d(C,s,(function(){return this})),d(C,"toString",(function(){return"[object Generator]"})),n.keys=function(e){var n=[];for(var r in e)n.push(r);return n.reverse(),function r(){for(;n.length;){var t=n.pop();if(t in e)return r.value=t,r.done=!1,r}return r.done=!0,r}},n.values=S,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(B),!e)for(var n in this)"t"===n.charAt(0)&&a.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(r,t){return o.type="throw",o.arg=e,n.next=r,t&&(n.method="next",n.arg=void 0),!!t}for(var t=this.tryEntries.length-1;t>=0;--t){var i=this.tryEntries[t],o=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var s=a.call(i,"catchLoc"),l=a.call(i,"finallyLoc");if(s&&l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,n){for(var r=this.tryEntries.length-1;r>=0;--r){var t=this.tryEntries[r];if(t.tryLoc<=this.prev&&a.call(t,"finallyLoc")&&this.prev<t.finallyLoc){var i=t;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=e,o.arg=n,i?(this.method="next",this.next=i.finallyLoc,A):this.complete(o)},complete:function(e,n){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&n&&(this.next=n),A},finish:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),B(r),A}},catch:function(e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc===e){var t=r.completion;if("throw"===t.type){var i=t.arg;B(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:S(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=void 0),A}},n}e.exports=i,e.exports.__esModule=!0,e.exports.default=e.exports},8698:e=>{function n(r){return e.exports=n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,n(r)}e.exports=n,e.exports.__esModule=!0,e.exports.default=e.exports},4687:(e,n,r)=>{var t=r(7061)();e.exports=t;try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}}},n={};function r(t){var i=n[t];if(void 0!==i)return i.exports;var a=n[t]={id:t,loaded:!1,exports:{}};return e[t].call(a.exports,a,a.exports,r),a.loaded=!0,a.exports}r.m=e,r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var n=r.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),r.b=document.baseURI||self.location.href,r.nc=void 0,(()=>{"use strict";var e=r(1798),n=r.n(e);const t=function(e){for(var n,r=e.length;0!==r;){n=Math.floor(Math.random()*r),r--;var t=[e[n],e[r]];e[r]=t[0],e[n]=t[1]}return e};var i={maxHorizontalLengthCanBeOccupied:function(e){for(var n=0,r=e.getShipsBoard(),t=0;t<e.getHeight();t++)for(var i=0;i<e.getWidth();i++)if(-1===r[t][i])for(var a=1;;){if(i+1===e.getWidth()||-1!==r[t][i+1]){n=Math.max(n,a);break}++a,++i}return n},maxVerticalLengthCanBeOccupied:function(e){for(var n=0,r=e.getShipsBoard(),t=0;t<e.getWidth();t++)for(var i=0;i<e.getHeight();i++)if(-1===r[i][t])for(var a=1;;){if(i+1===e.getHeight()||-1!==r[i+1][t]){n=Math.max(n,a);break}++a,++i}return n}};const a=i,o=function(){function e(e){return"number"==typeof e&&Number.isInteger(e)&&e>=0}return{checkIfWholeNumber:e,checkIfPositiveNumber:function(n){return e(n)&&n>0}}}();var s=function(){function e(e,n,r){return n<0||n>=e.getHeight()||r<0||r>=e.getWidth()}return{canAddShip:function(e,n){if(!o.checkIfPositiveNumber(n))throw new Error("Illegal Argument Exception");if(n>Math.max(a.maxHorizontalLengthCanBeOccupied(e),a.maxVerticalLengthCanBeOccupied(e)))return!1;var r=0;return e.getShips().forEach((function(e){void 0===e.row&&void 0===e.col&&(r+=e.ship.getLength())})),!(e.getBlockNotOccupied()-r-n<0)},isOutsideBoard:e,canPlaceShip:function(n,r,t,i,a){if(!o.checkIfWholeNumber(r)||!o.checkIfWholeNumber(t)||!o.checkIfWholeNumber(i)||"boolean"!=typeof a)throw new Error("Illegal Argument Exception");if(e(n,t,i))throw new Error("Illegal Argument Exception");if(r>=n.getShips().length)throw new Error("Illegal Argument Exception");var s=n.getShip(r);if(a&&t+s.getLength()-1>=n.getHeight())return!1;if(!a&&i+s.getLength()-1>=n.getWidth())return!1;for(var l=n.getShipsBoard(),c=0;c<s.getLength();c++){if(a&&-1!==l[t+c][i])return!1;if(!a&&-1!==l[t][i+c])return!1}return!0},isHit:function(n,r,t){if(!o.checkIfWholeNumber(r)||!o.checkIfWholeNumber(t))throw new Error("Illegal Argument Exception");if(e(n,r,t))throw new Error("Illegal Argument Exception");return 0!==n.getHitsBoard()[r][t]},areAllShipsSunk:function(e){return 0===e.getShipsAlive()},checkIfAllShipsPlaced:function(e){for(var n=e.getShips(),r=0;r<n.length;r++)if(void 0===n[r].row||void 0===n[r].col)return!1;return!0},checkIfNonOfShipsPlaced:function(e){for(var n=e.getShips(),r=0;r<n.length;r++)if(void 0!==n[r].row||void 0!==n[r].col)return!1;return!0}}}();const l=s;var c=function(){function e(e,n,r,t,i){if(!l.canPlaceShip(e,n,r,t,i))return!1;var a=e.getShip(n);e.setShipOrientation(n,i),e.setShipStartPoint(n,r,t);for(var o=0;o<a.getLength();o++)i?e.setShipBoardCell(r+o,t,n):e.setShipBoardCell(r,t+o,n);return e.decreaseBlockNotOccupied(a.getLength()),!0}function r(e,n){var r=e.getShips();if(void 0===r[n].row||void 0===r[n].col||void 0===r[n].isVertical)throw new Error("Ship is not placed");var t=e.getShip(n);t.isSunk()||e.decreaseShipsAlive(),e.removeFromHitsBoard(r[n].row,r[n].col,t.getLength(),r[n].isVertical),e.removeFromShipsBoard(r[n].row,r[n].col,t.getLength(),r[n].isVertical),e.increaseBlockNotOccupied(t.getLength()),delete r[n].row,delete r[n].col,delete r[n].isVertical}function i(n,a,o,s,c){var d;if((a=null!==(d=a)&&void 0!==d?d:0)===n.getShipsCount())return!0;if((Date.now()-s)/1e3>c)throw new Error("Time limit exceeded");var u="".concat(function(e){for(var n=[],r=0;r<e.length;r++)n.push(e[r].map((function(e){return-1!==e?1:0})));return n}(n.getShipsBoard())," ,").concat(a);if(o.has(u))return!1;for(var h=[],A=0;A<n.getHeight();A++)for(var p=0;p<n.getWidth();p++){var m=!1;l.canPlaceShip(n,a,A,p,m)&&h.push({row:A,col:p,isVertical:m}),m=!0,l.canPlaceShip(n,a,A,p,m)&&h.push({row:A,col:p,isVertical:m})}t(h);for(var f=0;f<h.length;f++){if(e(n,a,h[f].row,h[f].col,h[f].isVertical),i(n,a+1,o,s,c))return!0;r(n,a)}return o.add(u),!1}function a(e){for(var n=[],r=0;r<e.getHeight();r++)for(var t=0;t<e.getWidth();t++)l.isHit(e,r,t)||n.push({row:r,col:t});return n}function o(e,n,r){var t=[],i=function(e){for(var n=[],r=0;r<e.getHeight();r++)for(var t=0;t<e.getWidth();t++)l.isHit(e,r,t)&&n.push({row:r,col:t});return n}(e);return i.forEach((function(i){var a=e.getShipIndexFromCoordinate(i.row,i.col);if(-1!==a){var o=e.getShip(a);!o.isSunk()&&o.getHPDamaged()>=n&&o.getHPDamaged()<=r&&t.push({row:i.row,col:i.col,isShipVertical:e.isVerticalShip(a)})}})),t}function s(e,n,r){r.forEach((function(r){l.isOutsideBoard(e,r.row,r.col)||l.isHit(e,r.row,r.col)||n.push(r)}))}function c(e){for(var n=null,r=0;r<e.getShipsCount();r++){var t=e.getShip(r);0===t.getHPDamaged()&&(n=null===n?t.getLength():Math.min(n,t.getLength()))}return n}return{addShip:function(e,n){if(!l.canAddShip(e,n))throw new Error("Illegal Argument Exception");return e.pushShip(n),e.getShipsCount()-1},placeShip:e,unplaceShip:r,receiveAttack:function(e,r,t,i){if(l.isHit(e,r,t))throw new Error("Illegal Argument Exception");e.hitBoardCell(r,t);var a=e.getShipsBoard();if(-1===a[r][t])return!1;var o=a[r][t],s=e.isVerticalShip(o)?r-e.getShipStartPoint(o).row:t-e.getShipStartPoint(o).col,c=e.getShip(o);return c.hit(s),c.isSunk()&&(e.decreaseShipsAlive(),i&&n().publish("ShipSunk",{playerView:i.playerView,shipLength:c.getLength()})),!0},autoPlaceShips:function(e,n){var r=new Set;e.sortShipsByLengthDesc();try{return i(e,n,r,Date.now(),5),!0}catch(e){return!1}},unplaceAllShips:function(e){for(var n=0;n<e.getShipsCount();n++)r(e,n)},removeAllShips:function(e){for(var n=e.getShipsCount()-1;n>=0;n--)r(e,n),e.removeShip(n)},getNotDamagedCells:a,getDamagedCellsOfAliveDamagedShips:o,getSmartTargets:function(e){var n=[],r=o(e,2,10);return r.length>0?(r.forEach((function(r){r.isShipVertical?s(e,n,[{row:r.row-1,col:r.col},{row:r.row+1,col:r.col}]):s(e,n,[{row:r.row,col:r.col-1},{row:r.row,col:r.col+1}])})),n):((r=o(e,1,1)).forEach((function(r){s(e,n,[{row:r.row-1,col:r.col},{row:r.row+1,col:r.col},{row:r.row,col:r.col-1},{row:r.row,col:r.col+1}])})),n)},getMinNotDamagedShipLength:c,getNotDamagedSmartTargets:function(e){var n=[],r=a(e),t=c(e);return r.forEach((function(r){(function(e,n,r){for(var t=1,i=r+1;i<e.getWidth()&&!l.isHit(e,n,i);i++)++t;for(var a=r-1;a>=0&&!l.isHit(e,n,a);a--)++t;return t}(e,r.row,r.col)>=t||function(e,n,r){for(var t=1,i=n+1;i<e.getHeight()&&!l.isHit(e,i,r);i++)++t;for(var a=n-1;a>=0&&!l.isHit(e,a,r);a--)++t;return t}(e,r.row,r.col)>=t)&&n.push(r)})),n}}}();const d=c;function u(e,n){(null==n||n>e.length)&&(n=e.length);for(var r=0,t=new Array(n);r<n;r++)t[r]=e[r];return t}function h(e,n){if(e){if("string"==typeof e)return u(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?u(e,n):void 0}}function A(e){return function(e){if(Array.isArray(e))return u(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||h(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(e,n,r,t,i,a,o){try{var s=e[a](o),l=s.value}catch(e){return void r(e)}s.done?n(l):Promise.resolve(l).then(t,i)}function m(e){return function(){var n=this,r=arguments;return new Promise((function(t,i){var a=e.apply(n,r);function o(e){p(a,t,i,o,s,"next",e)}function s(e){p(a,t,i,o,s,"throw",e)}o(void 0)}))}}function f(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function g(e,n){for(var r=0;r<n.length;r++){var t=n[r];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}function v(e,n,r){return n&&g(e.prototype,n),r&&g(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function b(e,n,r){if(!n.has(e))throw new TypeError("attempted to "+r+" private field on non-instance");return n.get(e)}function C(e,n){return function(e,n){return n.get?n.get.call(e):n.value}(e,b(e,n,"get"))}function w(e,n,r){return function(e,n,r){if(n.set)n.set.call(e,r);else{if(!n.writable)throw new TypeError("attempted to set read only private field");n.value=r}}(e,b(e,n,"set"),r),r}var y=r(4687),k=r.n(y),x=r(1569),B=r.n(x),E=r(5460),S=r.n(E);function I(e,n,r){!function(e,n){if(n.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,n),n.set(e,r)}var M=new WeakMap,z=new WeakMap,L=new WeakMap,P=new WeakMap,O=new WeakMap,W=new WeakMap,D=function(){function e(n,r,t,i){var a=this;f(this,e),I(this,M,{writable:!0,value:void 0}),I(this,z,{writable:!0,value:void 0}),I(this,L,{writable:!0,value:void 0}),I(this,P,{writable:!0,value:void 0}),I(this,O,{writable:!0,value:void 0}),I(this,W,{writable:!0,value:void 0}),w(this,M,r),w(this,z,t),w(this,P,n.querySelector(".minus")),w(this,O,n.querySelector(".plus")),w(this,W,n.querySelector(".number")),w(this,L,i),this.updateCounter(),C(this,P).addEventListener("click",(function(){var e;w(a,L,(e=C(a,L),--e)),a.updateCounter()})),C(this,O).addEventListener("click",(function(){var e;w(a,L,(e=C(a,L),++e)),a.updateCounter()}))}return v(e,[{key:"updateIfLimitReached",value:function(){C(this,L)===C(this,M)?C(this,P).classList.add("disabled"):C(this,P).classList.remove("disabled"),C(this,L)===C(this,z)?C(this,O).classList.add("disabled"):C(this,O).classList.remove("disabled")}},{key:"updateCounter",value:function(){C(this,W).textContent=C(this,L),this.updateIfLimitReached()}},{key:"currentNumber",get:function(){return C(this,L)}},{key:"updateMax",value:function(e){w(this,z,e),this.updateIfLimitReached()}}]),e}();const R=function(){function e(e,n){var r=document.createElement("div");if(e<n){r.classList.add("ship");for(var t=0;t<e;t++){var i=document.createElement("div");i.classList.add("ship-block"),r.append(i)}}else{r.classList.add("ship-compressed");var a=document.createElement("span");a.classList.add("parenthesis"),a.textContent="(",r.append(a),r.append(document.createTextNode("".concat(e).concat(String.fromCharCode(160))));var o=document.createElement("div");o.classList.add("ship-block"),r.append(o);var s=document.createElement("span");s.classList.add("parenthesis"),s.textContent=")",r.append(s)}return r}return{createShipContainerElement:function(n,r){var t=document.createElement("div");t.classList.add("ship-container"),t.append(e(n,4));var i=document.createElement("p");i.innerText="x";var a=document.createElement("span");return a.classList.add("count"),a.innerText=r,i.append(a),t.append(i),t.dataset.length=n,t},createShipElement:e}}(),j=function(e){e.removeAttribute("disabled")},T=function(e){e.setAttribute("disabled","")};function _(e,n,r){!function(e,n){if(n.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,n),n.set(e,r)}var q=new WeakMap,G=new WeakMap,F=new WeakMap,J=new WeakMap,H=new WeakMap,V=new WeakMap,N=new WeakMap,U=new WeakMap,Y=new WeakMap,$=new WeakMap,Q=new WeakMap,K=new WeakMap,Z=new WeakMap,X=new WeakMap,ee=function(){function e(n,r){f(this,e),_(this,q,{writable:!0,value:void 0}),_(this,G,{writable:!0,value:void 0}),_(this,F,{writable:!0,value:void 0}),_(this,J,{writable:!0,value:void 0}),_(this,H,{writable:!0,value:void 0}),_(this,V,{writable:!0,value:void 0}),_(this,N,{writable:!0,value:void 0}),_(this,U,{writable:!0,value:void 0}),_(this,Y,{writable:!0,value:void 0}),_(this,$,{writable:!0,value:void 0}),_(this,Q,{writable:!0,value:void 0}),_(this,K,{writable:!0,value:void 0}),_(this,Z,{writable:!0,value:void 0}),_(this,X,{writable:!0,value:void 0}),this.cacheDOM(),T(C(this,X)),w(this,U,n),w(this,Y,r),w(this,$,{}),this.createShipsPages(),this.initPagination(),this.updateMaxShipsChoosingNumber(),this.bindEvents()}return v(e,[{key:"cacheDOM",value:function(){w(this,q,(new DOMParser).parseFromString(B()(),"text/html").body.firstElementChild),w(this,G,C(this,q).firstElementChild),w(this,F,C(this,G).querySelector(".ships")),w(this,J,C(this,F).querySelector(".pages-container")),w(this,H,C(this,G).querySelector(".current-page")),w(this,V,C(this,G).querySelector(".left-arrow")),w(this,N,C(this,G).querySelector(".right-arrow")),w(this,X,C(this,q).querySelector(".btn-submit"))}},{key:"bindEvents",value:function(){var e=this;[].concat(A(C(this,G).querySelectorAll(".minus")),A(C(this,G).querySelectorAll(".plus"))).forEach((function(n){n.addEventListener("click",(function(){e.updateMaxShipsChoosingNumber()}))})),this.bindPaginationEvents()}},{key:"initPagination",value:function(){w(this,K,1),w(this,Z,C(this,J).children.length),C(this,G).querySelector(".pages-num").textContent=C(this,Z),w(this,Q,"100%"),this.updatePaginationStyle()}},{key:"bindPaginationEvents",value:function(){var e=this;C(this,G).querySelectorAll(".arrow-container").forEach((function(n){n.addEventListener("click",(function(){n.contains(C(e,V))?e.paginateLeft():n.contains(C(e,N))&&e.paginateRight()}))}))}},{key:"paginateLeft",value:function(){var e;if(1===C(this,K))throw new Error("Illegal Argument Exception");w(this,K,(e=C(this,K),--e)),this.updatePaginationStyle()}},{key:"paginateRight",value:function(){var e;if(C(this,K)===C(this,Z))throw new Error("Illegal Argument Exception");w(this,K,(e=C(this,K),++e)),this.updatePaginationStyle()}},{key:"updatePaginationStyle",value:function(){C(this,J).style.right="calc(".concat(C(this,K)-1," * ").concat(C(this,Q),")"),1===C(this,K)?C(this,V).closest(".arrow-container").classList.add("disabled"):C(this,V).closest(".arrow-container").classList.remove("disabled"),C(this,K)===C(this,Z)?C(this,N).closest(".arrow-container").classList.add("disabled"):C(this,N).closest(".arrow-container").classList.remove("disabled"),C(this,H).textContent=C(this,K)}},{key:"createShipsPages",value:function(){for(var e=1;e<=this.getMaxShipLength();e+=4)C(this,J).append(this.createPage(e,4))}},{key:"createPage",value:function(e,n){var r=document.createElement("div");r.classList.add("page");for(var t=0;t<n;t++){var i=e+t;if(i>this.getMaxShipLength())break;r.append(this.createShipContainer(i))}return r}},{key:"createShipContainer",value:function(e){var n=(new DOMParser).parseFromString(S()({shipLength:e,shipCount:0}),"text/html").body.firstElementChild,r=R.createShipElement(e,5);return n.querySelector(".ship").replaceWith(r),C(this,$)[e]=new D(n,0,0,0),n}},{key:"modalContainerElement",get:function(){return C(this,q)}},{key:"modalElement",get:function(){return C(this,G)}},{key:"getWidth",value:function(){return C(this,U)}},{key:"getHeight",value:function(){return C(this,Y)}},{key:"getMaxShipLength",value:function(){return Math.max(C(this,U),C(this,Y))}},{key:"getShipsList",value:function(){var e={};return C(this,F).querySelectorAll(".ship-container").forEach((function(n){var r=n.dataset.length,t=parseInt(n.querySelector(".number").textContent,10);t>0&&(e[r]=t)})),e}},{key:"updateMaxShipsChoosingNumber",value:function(){var e=this,n=C(this,U)*C(this,Y),r=0;Array.from(Object.keys(C(this,$))).forEach((function(n){r+=C(e,$)[n].currentNumber*n})),r>0?j(C(this,X)):T(C(this,X)),Array.from(Object.keys(C(this,$))).forEach((function(t){C(e,$)[t].updateMax(C(e,$)[t].currentNumber+Math.floor((n-r)/t))}))}}]),e}(),ne=r(4129),re=r.n(ne);function te(e,n,r){!function(e,n){if(n.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,n),n.set(e,r)}var ie=new WeakMap,ae=new WeakMap,oe=function(){function e(){f(this,e),te(this,ie,{writable:!0,value:void 0}),te(this,ae,{writable:!0,value:void 0}),this.cacheDOM()}return v(e,[{key:"cacheDOM",value:function(){w(this,ie,(new DOMParser).parseFromString(re()(),"text/html").body.firstElementChild),w(this,ae,C(this,ie).firstElementChild)}},{key:"modalContainerElement",get:function(){return C(this,ie)}},{key:"modalElement",get:function(){return C(this,ae)}}]),e}(),se=r(8661),le=r.n(se);function ce(e,n,r){!function(e,n){if(n.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,n),n.set(e,r)}var de=new WeakMap,ue=new WeakMap,he=new WeakMap,Ae=new WeakMap,pe=function(){function e(){f(this,e),ce(this,de,{writable:!0,value:void 0}),ce(this,ue,{writable:!0,value:void 0}),ce(this,he,{writable:!0,value:void 0}),ce(this,Ae,{writable:!0,value:void 0}),this.cacheDOM(),this.setHumanNumber(),this.bindEvents()}return v(e,[{key:"cacheDOM",value:function(){w(this,de,(new DOMParser).parseFromString(le()(),"text/html").body.firstElementChild),w(this,ue,C(this,de).firstElementChild),w(this,he,C(this,ue).querySelector("#form-game-type"))}},{key:"bindEvents",value:function(){C(this,he).addEventListener("change",this.setHumanNumber.bind(this))}},{key:"modalContainerElement",get:function(){return C(this,de)}},{key:"modalElement",get:function(){return C(this,ue)}},{key:"gethumanNumber",value:function(){return C(this,Ae)}},{key:"setHumanNumber",value:function(){w(this,Ae,parseInt(C(this,he)["game-type"].value,10))}}]),e}(),me=r(9508),fe=r.n(me);function ge(e,n,r){!function(e,n){if(n.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,n),n.set(e,r)}var ve=new WeakMap,be=new WeakMap,Ce=new WeakMap,we=new WeakMap,ye=new WeakMap,ke=new WeakMap,xe=new WeakMap,Be=function(){function e(n,r){f(this,e),ge(this,ve,{writable:!0,value:void 0}),ge(this,be,{writable:!0,value:void 0}),ge(this,Ce,{writable:!0,value:void 0}),ge(this,we,{writable:!0,value:void 0}),ge(this,ye,{writable:!0,value:void 0}),ge(this,ke,{writable:!0,value:void 0}),ge(this,xe,{writable:!0,value:void 0}),this.cacheDOM(),w(this,ke,n),w(this,xe,r),new D(C(this,be).querySelector(".width-counter"),1,10,C(this,ke)),new D(C(this,be).querySelector(".height-counter"),1,10,C(this,xe)),this.renderBoard(),this.bindEvents()}return v(e,[{key:"cacheDOM",value:function(){w(this,ve,(new DOMParser).parseFromString(fe()(),"text/html").body.firstElementChild),w(this,be,C(this,ve).firstElementChild),w(this,we,C(this,be).querySelector(".width-counter .number")),w(this,ye,C(this,be).querySelector(".height-counter .number")),w(this,Ce,C(this,ve).querySelector(".board"))}},{key:"bindEvents",value:function(){var e=this;[].concat(A(C(this,be).querySelectorAll(".minus")),A(C(this,be).querySelectorAll(".plus"))).forEach((function(n){n.addEventListener("click",(function(){w(e,ke,parseInt(C(e,we).textContent,10)),w(e,xe,parseInt(C(e,ye).textContent,10)),e.renderBoard()}))}))}},{key:"renderBoard",value:function(){C(this,Ce).innerHTML="",C(this,Ce).style.setProperty("--board-horizontal-cells",C(this,ke));for(var e=0;e<C(this,ke)*C(this,xe);e++){var n=document.createElement("div");n.classList.add("board-block"),C(this,Ce).append(n)}}},{key:"modalContainerElement",get:function(){return C(this,ve)}},{key:"modalElement",get:function(){return C(this,be)}},{key:"getWidth",value:function(){return C(this,ke)}},{key:"getHeight",value:function(){return C(this,xe)}}]),e}();function Ee(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var t,i,a=[],o=!0,s=!1;try{for(r=r.call(e);!(o=(t=r.next()).done)&&(a.push(t.value),!n||a.length!==n);o=!0);}catch(e){s=!0,i=e}finally{try{o||null==r.return||r.return()}finally{if(s)throw i}}return a}}(e,n)||h(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Se(e){for(var n=e,r=[],t=0;t<e;t++)r[t]=0;var i={hit:function(t){if("number"!=typeof t||!Number.isInteger(t))throw new Error("Illegal Argument Exception");if(t<0||t>=e)throw new Error("Illegal Argument Exception");0===r[t]&&(--n,r[t]=1)},isSunk:function(){return 0===n},getHPRemained:function(){return n},getHitpoints:function(){return[].concat(r)},getHPDamaged:function(){return e-n},getLength:function(){return e}};return Object.create(i)}function Ie(e,n){for(var r=[],t=[],i=[],a=0,o=e*n,s=0;s<n;s++){t.push([]),i.push([]);for(var l=0;l<e;l++)t[s][l]=0,i[s][l]=-1}var c={getWidth:function(){return e},getHeight:function(){return n},getShips:function(){return[].concat(r)},getShip:function(e){return r[e].ship},getShipFromCoordinate:function(e,n){return this.getShip(this.getShipIndexFromCoordinate(e,n))},getShipIndexFromCoordinate:function(e,n){return i[e][n]},pushShip:function(e){r.push({ship:new Se(e)}),++a},removeShip:function(e){var n=this.getShip(e);n.isSunk()||--a,this.removeFromHitsBoard(r[e].row,r[e].col,n.getLength(),r[e].isVertical),this.removeFromShipsBoard(r[e].row,r[e].col,n.getLength(),r[e].isVertical),void 0!==r[e].row&&void 0!==r[e].col&&this.increaseBlockNotOccupied(n.getLength()),r.splice(e,1)},removeShipByCoordinates:function(e,n){for(var t=0;t<r.length;t++)if(r[t].row===e&&r[t].col===n){this.removeShip(t);break}},removeFromHitsBoard:function(e,n,r,i){if(i)for(var a=e;a<e+r;a++)t[a][n]=0;else for(var o=n;o<n+r;o++)t[e][o]=0},removeFromShipsBoard:function(e,n,r,t){if(t)for(var i=e;i<e+r;i++)this.setShipBoardCell(i,n,-1);else for(var a=n;a<n+r;a++)this.setShipBoardCell(e,a,-1)},isVerticalShip:function(e){return r[e].isVertical},setShipOrientation:function(e,n){r[e].isVertical=n},getShipStartPoint:function(e){return{row:r[e].row,col:r[e].col}},setShipStartPoint:function(e,n,t){r[e].row=n,r[e].col=t},getShipsCount:function(){return r.length},getShipsBoard:function(){var e=[];return i.forEach((function(n){e.push(A(n))})),e},setShipBoardCell:function(e,n,r){i[e][n]=r},getHitsBoard:function(){var e=[];return t.forEach((function(n){e.push(A(n))})),e},hitBoardCell:function(e,n){++t[e][n]},getBlockNotOccupied:function(){return o},decreaseBlockNotOccupied:function(e){o-=e},increaseBlockNotOccupied:function(e){o+=e},getShipsAlive:function(){return a},decreaseShipsAlive:function(){--a},getShipsList:function(){var e={};return r.forEach((function(n){var r,t=null!==(r=e[n.ship.getLength()])&&void 0!==r?r:0;e[n.ship.getLength()]=t+1})),e},sortShipsByLengthDesc:function(){r.sort((function(e,n){return n.ship.getLength()-e.ship.getLength()}))}};return Object.create(c)}var Me=r(6072),ze=r.n(Me),Le=r(4257),Pe=r.n(Le),Oe={getBlockIndexFromCoordinates:function(e,n,r){return e*r+n},getCoordinatesFromBlockIndex:function(e,n){return[Math.floor(e/n),e%n]},getBlockIndexFromBlockElement:function(e,n){return Array.from(e.children).indexOf(n)},getBlockTopOffset:function(e,n){return Array.from(e.children)[n].offsetTop},getBlockLeftOffset:function(e,n){return Array.from(e.children)[n].offsetLeft},createShipElement:function(e,n){var r=document.createElement("div");r.classList.add("ship");for(var t=0;t<e;t++){var i=document.createElement("div");i.classList.add("ship-block"),r.append(i)}return r.classList.add("".concat(n?"vertical":"horizontal")),r},createShipOnBoard:function(e,n,r,t,i,a,o,s){void 0===s&&((s=Oe.createShipElement(i,a)).dataset.id=o);var l=Oe.getBlockIndexFromCoordinates(r,t,n);s.style.top="".concat(Oe.getBlockTopOffset(e,l),"px"),s.style.left="".concat(Oe.getBlockLeftOffset(e,l),"px"),s.style["flex-direction"]="".concat(a?"column":"row"),e.append(s)}};const We=Oe;function De(e,n,r){!function(e,n){if(n.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,n),n.set(e,r)}var Re=new WeakMap,je=new WeakMap,Te=new WeakMap,_e=new WeakMap,qe=new WeakMap,Ge=new WeakMap,Fe=new WeakMap,Je=new WeakMap,He=new WeakMap,Ve=new WeakMap,Ne=new WeakMap,Ue=new WeakMap,Ye=new WeakMap,$e=new WeakMap,Qe=new WeakMap,Ke=new WeakMap,Ze=new WeakMap,Xe=new WeakMap,en=new WeakMap,nn=new WeakMap,rn=new WeakMap,tn=new WeakMap,an=new WeakMap,on=new WeakMap,sn=new WeakMap,ln=new WeakMap,cn=new WeakMap,dn=new WeakMap,un=new WeakMap,hn=new WeakMap,An=new WeakMap,pn=new WeakMap,mn=new WeakMap,fn=new WeakMap,gn=new WeakMap,vn=function(){function e(n,r,t,i,a,o,s){f(this,e),De(this,Re,{writable:!0,value:void 0}),De(this,je,{writable:!0,value:void 0}),De(this,Te,{writable:!0,value:void 0}),De(this,_e,{writable:!0,value:void 0}),De(this,qe,{writable:!0,value:void 0}),De(this,Ge,{writable:!0,value:void 0}),De(this,Fe,{writable:!0,value:void 0}),De(this,Je,{writable:!0,value:void 0}),De(this,He,{writable:!0,value:void 0}),De(this,Ve,{writable:!0,value:void 0}),De(this,Ne,{writable:!0,value:void 0}),De(this,Ue,{writable:!0,value:void 0}),De(this,Ye,{writable:!0,value:void 0}),De(this,$e,{writable:!0,value:void 0}),De(this,Qe,{writable:!0,value:void 0}),De(this,Ke,{writable:!0,value:void 0}),De(this,Ze,{writable:!0,value:void 0}),De(this,Xe,{writable:!0,value:void 0}),De(this,en,{writable:!0,value:void 0}),De(this,nn,{writable:!0,value:void 0}),De(this,rn,{writable:!0,value:void 0}),De(this,tn,{writable:!0,value:void 0}),De(this,an,{writable:!0,value:void 0}),De(this,on,{writable:!0,value:void 0}),De(this,sn,{writable:!0,value:void 0}),De(this,ln,{writable:!0,value:void 0}),De(this,cn,{writable:!0,value:void 0}),De(this,dn,{writable:!0,value:void 0}),De(this,un,{writable:!0,value:void 0}),De(this,hn,{writable:!0,value:void 0}),De(this,An,{writable:!0,value:void 0}),De(this,pn,{writable:!0,value:void 0}),De(this,mn,{writable:!0,value:void 0}),De(this,fn,{writable:!0,value:void 0}),De(this,gn,{writable:!0,value:void 0}),w(this,Je,i),w(this,He,a),w(this,Ue,r);var l=o?"Player":s;o&&1===r&&n>1&&(l="First Player"),o&&2===r&&(l="Second Player"),w(this,rn,0),w(this,Fe,1),w(this,Ne,t),w(this,Ve,{}),this.cacheDOM(l),this.initPlayerArea(o,s),this.initShipsArea(t),this.initPagination(),this.initBoardArea(),T(C(this,Ge)),this.bindEvents()}return v(e,[{key:"cacheDOM",value:function(e){w(this,Re,(new DOMParser).parseFromString(ze()({playerLabel:e}),"text/html").body.firstElementChild),w(this,je,C(this,Re).firstElementChild),w(this,Te,document.querySelector(".pause-container")),w(this,_e,C(this,je).querySelector(".btn-auto-place")),w(this,qe,C(this,_e).nextElementSibling),w(this,Ge,C(this,je).querySelector(".btn-submit")),this.cachePlayerAreaDOM(),this.cacheShipsAreaDOM(),this.cachePaginationDOM(),this.cacheBoardAreaDOM()}},{key:"bindEvents",value:function(){this.bindPlayerAreaEvents(),this.bindShipsAreaEvents(),this.bindPaginationEvents(),this.bindBoardAreaEvents()}},{key:"initPlayerArea",value:function(e,n){if(!e){var r=C(this,Ye).nextElementSibling;C(this,$e).value=n,C(this,Ye).remove(),r.remove()}}},{key:"cachePlayerAreaDOM",value:function(){w(this,Ye,C(this,je).querySelector(".section-player-name")),w(this,$e,C(this,Ye).querySelector("input[name]"))}},{key:"bindPlayerAreaEvents",value:function(){C(this,$e).addEventListener("keypress",this.onKeyPressPlayerName.bind(this))}},{key:"onKeyPressPlayerName",value:function(e){this.checkIfMaxPlayerNameReached()&&e.preventDefault()}},{key:"checkIfMaxPlayerNameReached",value:function(){return 15===C(this,$e).value.length}},{key:"getPlayerName",value:function(){var e=C(this,$e).value;return""===e?"Player".concat(C(this,Ue)):e}},{key:"initShipsArea",value:function(e){var n=this;w(this,Qe,{}),w(this,Ke,{}),this.createShipsPages(e),w(this,en,0),Object.keys(C(this,Ke)).forEach((function(e){w(n,en,C(n,en)+parseInt(C(n,Ke)[e].textContent,10))})),this.setActiveShip(C(this,je).querySelector(".ship-compressed")),this.createTempShip(C(this,Xe))}},{key:"bindShipsAreaEvents",value:function(){var e=this;C(this,je).querySelectorAll(".page .ship-block").forEach((function(n){n.addEventListener("click",(function(){e.setActiveShip(n.closest(".ship-compressed")),null===C(e,dn)&&e.setPlaceOptionActive("h")}))}))}},{key:"cacheShipsAreaDOM",value:function(){w(this,un,C(this,je).querySelector(".pages-container"))}},{key:"increaseShipCount",value:function(e){var n=parseInt(C(this,Ke)[e].textContent,10);C(this,Ke)[e].textContent=n+1}},{key:"decreaseShipCount",value:function(e){var n=parseInt(C(this,Ke)[e].textContent,10);if(0===n)throw new Error;C(this,Ke)[e].textContent=n-1}},{key:"resetAllShipsCount",value:function(){var e=this;Object.keys(C(this,Ke)).forEach((function(n){C(e,Ke)[n].textContent=0}))}},{key:"setActiveShip",value:function(e){if(e!==C(this,Ze)){C(this,Ze)&&C(this,Ze).classList.remove("active"),w(this,Ze,e.closest(".ship-compressed")),C(this,Ze).classList.add("active");var n=C(this,Ze).closest(".ship-container"),r=parseInt(n.dataset.length,10);w(this,Xe,r),0!==parseInt(C(this,Ke)[r].textContent,10)&&this.createTempShip(C(this,Xe))}}},{key:"createShipsPages",value:function(e){for(var n=Object.keys(e).sort((function(e,n){return e-n})),r=0;r<n.length;r+=4)C(this,un).append(this.createPage(r,4,n,e))}},{key:"createPage",value:function(e,n,r,t){var i=document.createElement("div");i.classList.add("page");for(var a=0;a<n&&e+a<r.length;a++){var o=r[e+a],s=t[o],l=this.createShipContainer(o,s);i.append(l),C(this,Qe)[o]=l,C(this,Ke)[o]=l.querySelector(".number")}return i}},{key:"createShipContainer",value:function(e,n){var r=(new DOMParser).parseFromString(Pe()({shipLength:e,shipCount:n}),"text/html").body.firstElementChild,t=R.createShipElement(e,1);return r.querySelector(".ship").replaceWith(t),r}},{key:"createTempShip",value:function(e){w(this,nn,We.createShipElement(e)),C(this,nn).classList.add("temp-ship")}},{key:"bindPlaceShipsEvents",value:function(){var e=this;C(this,tn).addEventListener("click",(function(n){n.target.classList.contains("board-block")&&e.onClickPlaceShipOnBoard(n)})),C(this,tn).querySelectorAll(".board-block").forEach((function(n){n.addEventListener("mouseenter",e.OnMouseEnterBoardBlock.bind(e)),n.addEventListener("mouseleave",e.onMouseLeaveBoardBlock.bind(e))})),C(this,_e).addEventListener("click",(function(){C(e,Te).classList.add("active","front"),C(e,Te).addEventListener("transitionend",(function(){e.autoPlaceShips.call(e)?C(e,qe).classList.add("d-none"):C(e,qe).classList.remove("d-none"),C(e,Te).classList.remove("active","front")}),{once:!0})}))}},{key:"placeShipOnBoard",value:function(e,n,r,t){var i,a,o;if(!this.canPlaceShip(r,e,n,t))throw new Error;var s=(w(this,Fe,(i=C(this,Fe),a=i++,i)),a);C(this,Ve)[s]={row:e,col:n,length:r,isVertical:t},We.createShipOnBoard(C(this,tn),C(this,Je),e,n,r,t,s),this.decreaseShipCount(r),this.setEmptyCells(e,n,r,t,!1),w(this,rn,(o=C(this,rn),++o)),C(this,rn)===C(this,en)&&j(C(this,Ge))}},{key:"onClickPlaceShipOnBoard",value:function(e){if(null!==C(this,dn)){var n=e.target,r=We.getBlockIndexFromBlockElement(C(this,tn),n),t=C(this,dn),i=Ee(We.getCoordinatesFromBlockIndex(r,C(this,Je)),2),a=i[0],o=i[1];this.canPlaceShip(C(this,Xe),a,o,t)&&this.placeShipOnBoard(a,o,C(this,Xe),t)}}},{key:"OnMouseEnterBoardBlock",value:function(e){if(null!==C(this,dn)){var n=e.target,r=We.getBlockIndexFromBlockElement(C(this,tn),n),t=C(this,dn),i=Ee(We.getCoordinatesFromBlockIndex(r,C(this,Je)),2),a=i[0],o=i[1];this.canPlaceShip(C(this,Xe),a,o,t)&&We.createShipOnBoard(C(this,tn),C(this,Je),a,o,C(this,Xe),t,void 0,C(this,nn))}}},{key:"onMouseLeaveBoardBlock",value:function(){null!==C(this,dn)&&null!==C(this,nn)&&C(this,nn).remove()}},{key:"canPlaceShip",value:function(e,n,r,t){if(0===parseInt(C(this,Ke)[e].textContent,10))return!1;if(t&&n+e-1>=C(this,He))return!1;if(!t&&r+e-1>=C(this,Je))return!1;for(var i=0;i<e;i++){if(t&&!0!==C(this,an)[n+i][r])return!1;if(!t&&!0!==C(this,an)[n][r+i])return!1}return!0}},{key:"autoPlaceShips",value:function(){var e=this;this.removeAllShipsFromBoard();var n=Ie(C(this,Je),C(this,He));Object.keys(C(this,Ne)).forEach((function(r){for(var t=0;t<C(e,Ne)[r];t++)d.addShip(n,parseInt(r,10))}));var r=d.autoPlaceShips(n);return r&&n.getShips().forEach((function(r,t){e.placeShipOnBoard(r.row,r.col,n.getShip(t).getLength(),r.isVertical)})),r}},{key:"setEmptyCells",value:function(e,n,r,t,i){for(var a=0;a<r;a++)t?C(this,an)[e+a][n]=i:C(this,an)[e][n+a]=i}},{key:"bindRemoveShipsEvents",value:function(){var e=this;C(this,tn).addEventListener("click",(function(n){n.target.classList.contains("ship-block")&&e.onClickRemoveShipFromBoard(n)}))}},{key:"removeShipFromBoardById",value:function(e){var n;C(this,tn).querySelector(".ship[data-id='".concat(e,"']")).remove(),this.increaseShipCount(C(this,Ve)[e].length),this.setEmptyCells(C(this,Ve)[e].row,C(this,Ve)[e].col,C(this,Ve)[e].length,C(this,Ve)[e].isVertical,!0),delete C(this,Ve)[e],w(this,rn,(n=C(this,rn),--n)),T(C(this,Ge))}},{key:"removeAllShipsFromBoard",value:function(){var e=this;Object.keys(C(this,Ve)).forEach((function(n){e.removeShipFromBoardById(n)}))}},{key:"onClickRemoveShipFromBoard",value:function(e){if(null===C(this,dn)){var n=e.target.closest(".ship");this.removeShipFromBoardById(n.dataset.id)}}},{key:"initBoardArea",value:function(){w(this,dn,!1),this.renderBoard(),w(this,an,[]);for(var e=0;e<C(this,He);e++){C(this,an).push([]);for(var n=0;n<C(this,Je);n++)C(this,an)[e].push(!0)}}},{key:"cacheBoardAreaDOM",value:function(){w(this,tn,C(this,je).querySelector(".board")),w(this,on,C(this,je).querySelector(".place-options")),w(this,ln,C(this,on).querySelector(".btn-h")),w(this,sn,C(this,on).querySelector(".btn-v")),w(this,cn,C(this,on).querySelector(".btn-remove"))}},{key:"bindBoardAreaEvents",value:function(){C(this,ln).addEventListener("click",this.onClickSetPlaceOptionActive.bind(this)),C(this,sn).addEventListener("click",this.onClickSetPlaceOptionActive.bind(this)),C(this,cn).addEventListener("click",this.onClickSetPlaceOptionActive.bind(this)),this.bindPlaceShipsEvents(),this.bindRemoveShipsEvents()}},{key:"onClickSetPlaceOptionActive",value:function(e){var n=e.target.closest("button");n===C(this,ln)?this.setPlaceOptionActive("h"):n===C(this,sn)?this.setPlaceOptionActive("v"):n===C(this,cn)&&this.setPlaceOptionActive("x")}},{key:"setPlaceOptionActive",value:function(e){var n;C(this,ln).classList.remove("active"),C(this,sn).classList.remove("active"),C(this,cn).classList.remove("active"),"h"===e?(w(this,dn,!1),n=C(this,ln)):"v"===e?(w(this,dn,!0),n=C(this,sn)):"x"===e&&(w(this,dn,null),n=C(this,cn)),n.classList.add("active")}},{key:"renderBoard",value:function(){C(this,tn).style.setProperty("--board-horizontal-cells",C(this,Je));for(var e=0;e<C(this,Je)*C(this,He);e++){var n=document.createElement("div");n.classList.add("board-block"),C(this,tn).append(n)}}},{key:"initPagination",value:function(){w(this,mn,1),w(this,fn,C(this,un).children.length),C(this,je).querySelector(".pages-num").textContent=C(this,fn),w(this,gn,"100%"),this.updatePaginationStyle()}},{key:"cachePaginationDOM",value:function(){w(this,hn,this.modalElement.querySelector(".current-page")),w(this,An,C(this,je).querySelector(".left-arrow")),w(this,pn,C(this,je).querySelector(".right-arrow"))}},{key:"bindPaginationEvents",value:function(){var e=this;C(this,je).querySelectorAll(".arrow-container").forEach((function(n){n.addEventListener("click",(function(){n.contains(C(e,An))?e.paginateLeft():n.contains(C(e,pn))&&e.paginateRight()}))}))}},{key:"paginateLeft",value:function(){var e;if(1===C(this,mn))throw new Error("Illegal Argument Exception");w(this,mn,(e=C(this,mn),--e)),this.updatePaginationStyle()}},{key:"paginateRight",value:function(){var e;if(C(this,mn)===C(this,fn))throw new Error("Illegal Argument Exception");w(this,mn,(e=C(this,mn),++e)),this.updatePaginationStyle()}},{key:"updatePaginationStyle",value:function(){C(this,un).style.right="calc(".concat(C(this,mn)-1," * ").concat(C(this,gn),")"),1===C(this,mn)?C(this,An).closest(".arrow-container").classList.add("disabled"):C(this,An).closest(".arrow-container").classList.remove("disabled"),C(this,mn)===C(this,fn)?C(this,pn).closest(".arrow-container").classList.add("disabled"):C(this,pn).closest(".arrow-container").classList.remove("disabled"),C(this,hn).textContent=C(this,mn)}},{key:"modalContainerElement",get:function(){return C(this,Re)}},{key:"modalElement",get:function(){return C(this,je)}},{key:"getShipsList",value:function(){return C(this,Ve)}}]),e}(),bn=r(4082),Cn=r.n(bn),wn=r(6134),yn=r.n(wn);function kn(e,n,r){!function(e,n){if(n.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,n),n.set(e,r)}var xn=new WeakMap,Bn=new WeakMap,En=new WeakMap,Sn=new WeakMap,In=new WeakMap,Mn=new WeakMap,zn=new WeakMap,Ln=new WeakMap,Pn=function(){function e(n,r,t,i){f(this,e),kn(this,xn,{writable:!0,value:void 0}),kn(this,Bn,{writable:!0,value:void 0}),kn(this,En,{writable:!0,value:void 0}),kn(this,Sn,{writable:!0,value:void 0}),kn(this,In,{writable:!0,value:void 0}),kn(this,Mn,{writable:!0,value:void 0}),kn(this,zn,{writable:!0,value:void 0}),kn(this,Ln,{writable:!0,value:void 0}),w(this,xn,n),w(this,Bn,r),w(this,Sn,t),w(this,zn,i),w(this,In,new Audio("./assets/sounds/splash.wav")),w(this,Mn,new Audio("./assets/sounds/explode-cut.wav")),w(this,Ln,[]);for(var a=0;a<C(this,Bn);a++){C(this,Ln).push([]);for(var o=0;o<C(this,xn);o++)C(this,Ln)[a].push(null)}this.render(),this.bindEvents()}return v(e,[{key:"getBoardElement",value:function(){return C(this,En)}},{key:"playerView",get:function(){return C(this,Sn)}},{key:"render",value:function(){for(var e=this,n=[],r=0;r<C(this,Bn);r++)for(var t=0;t<C(this,xn);t++)n.push(null);w(this,En,document.createElement("div")),C(this,En).classList.add("board"),C(this,En).style.setProperty("--board-horizontal-cells",C(this,xn)),C(this,En).innerHTML=yn()({blocks:n}),setTimeout((function(){e.addShipsToBoard()}),200)}},{key:"addShipsToBoard",value:function(){var e=this;Object.keys(C(this,zn)).forEach((function(n){var r=C(e,zn)[n].length,t=C(e,zn)[n].row,i=C(e,zn)[n].col,a=C(e,zn)[n].isVertical,o=We.createShipElement(r,a);Array.from(o.children).forEach((function(e){e.classList.add("hidden")})),o.classList.add("hidden"),e.setShipsBlocksBoard(t,i,r,a,o),We.createShipOnBoard(C(e,En),C(e,xn),t,i,r,a,void 0,o)}))}},{key:"setShipsBlocksBoard",value:function(e,n,r,t,i){for(var a=0;a<r;a++)t?C(this,Ln)[e+a][n]=i.children[a]:C(this,Ln)[e][n+a]=i.children[a]}},{key:"bindEvents",value:function(){C(this,En).addEventListener("click",this.receiveAttack.bind(this))}},{key:"receiveAttack",value:function(e){if(e.target.classList.contains("board-block")){var r=Array.from(C(this,En).children).indexOf(e.target);n().publish("AttackReceived",{row:Math.floor(r/C(this,xn)),col:r%C(this,xn),boardView:this})}}},{key:"attackFailed",value:function(e,n){this.playSound(C(this,In));var r=We.getBlockIndexFromCoordinates(e,n,C(this,xn));C(this,En).children[r].classList.add("disabled","incorrect")}},{key:"attackSucceded",value:function(e,n,r){this.playSound(C(this,Mn));var t=We.getBlockIndexFromCoordinates(e,n,C(this,xn));C(this,En).children[t].classList.add("disabled");var i=C(this,Ln)[e][n];i.classList.remove("hidden"),r&&(i.closest(".ship").classList.remove("hidden"),i.closest(".ship").classList.add("destroyed"))}},{key:"playSound",value:function(e){e.pause(),e.currentTime=0,e.play()}},{key:"disableBoard",value:function(){C(this,En).classList.add("disabled")}},{key:"enableBoard",value:function(){C(this,En).classList.remove("disabled")}}]),e}(),On=r(344),Wn=r.n(On);function Dn(e,n,r){!function(e,n){if(n.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,n),n.set(e,r)}var Rn=new WeakMap,jn=new WeakMap,Tn=new WeakMap,_n=new WeakMap,qn=new WeakMap,Gn=new WeakMap,Fn=new WeakMap,Jn=new WeakMap,Hn=new WeakMap,Vn=new WeakMap,Nn=new WeakMap,Un=new WeakMap,Yn=new WeakMap,$n=new WeakMap,Qn=new WeakMap,Kn=new WeakMap,Zn=new WeakMap,Xn=new WeakMap,er=function(){function e(n,r,t,i,a){f(this,e),Dn(this,Rn,{writable:!0,value:void 0}),Dn(this,jn,{writable:!0,value:void 0}),Dn(this,Tn,{writable:!0,value:void 0}),Dn(this,_n,{writable:!0,value:void 0}),Dn(this,qn,{writable:!0,value:void 0}),Dn(this,Gn,{writable:!0,value:void 0}),Dn(this,Fn,{writable:!0,value:void 0}),Dn(this,Jn,{writable:!0,value:void 0}),Dn(this,Hn,{writable:!0,value:void 0}),Dn(this,Vn,{writable:!0,value:void 0}),Dn(this,Nn,{writable:!0,value:void 0}),Dn(this,Un,{writable:!0,value:void 0}),Dn(this,Yn,{writable:!0,value:void 0}),Dn(this,$n,{writable:!0,value:void 0}),Dn(this,Qn,{writable:!0,value:void 0}),Dn(this,Kn,{writable:!0,value:void 0}),Dn(this,Zn,{writable:!0,value:void 0}),Dn(this,Xn,{writable:!0,value:void 0}),w(this,jn,n),w(this,_n,a),this.render(r),this.cacheDOM(),this.createBoard(t,i,r),this.initShipsRemained(r),this.initScore(),this.bindEvents()}return v(e,[{key:"cacheDOM",value:function(){this.cacheTurnDOM(),this.cacheShipsRemainedDOM(),this.cacheScoreDOM(),this.cacheDarkeningDOM()}},{key:"render",value:function(){w(this,Rn,document.createElement("div")),C(this,Rn).classList.add("player-area"),C(this,Rn).innerHTML=Wn()({})}},{key:"createBoard",value:function(e,n,r){w(this,Tn,new Pn(e,n,this,r)),C(this,Rn).querySelector(".board").replaceWith(C(this,Tn).getBoardElement())}},{key:"bindEvents",value:function(){this.bindShipsRemainedEvents()}},{key:"initShipsRemained",value:function(e){this.addShipsToshipsRemainedElement(e),this.initShipsRemainedPagination()}},{key:"cacheShipsRemainedDOM",value:function(){w(this,qn,C(this,Rn).querySelector(".ships-remained-container-responsive")),w(this,Gn,C(this,qn).querySelector(".ships")),this.cacheShipsRemainedPaginationDOM()}},{key:"bindShipsRemainedEvents",value:function(){C(this,Jn).addEventListener("mouseenter",this.mouseEnterInfo.bind(this)),C(this,Jn).addEventListener("mouseleave",this.mouseLeaveInfo.bind(this)),this.bindShipsRemainedPaginationEvents()}},{key:"addShipsToshipsRemainedElement",value:function(e){var n=this,r={};Object.keys(e).forEach((function(n){var t=e[n].length;r[t]||(r[t]=0),++r[t]})),Object.keys(r).sort((function(e,n){return e-n})).forEach((function(e){C(n,Gn).append(R.createShipContainerElement(e,r[e]))}))}},{key:"sinkShip",value:function(e){var n=C(this,qn).querySelector('[data-length="'.concat(e,'"]')),r=n.querySelector(".count"),t=parseInt(r.textContent,10)-1;0===t?n.remove():r.textContent=t}},{key:"mouseEnterInfo",value:function(){C(this,qn).classList.add("help")}},{key:"mouseLeaveInfo",value:function(){C(this,qn).classList.remove("help")}},{key:"initShipsRemainedPagination",value:function(){var e=this;requestAnimationFrame((function(){e.toggleArrowsState(),e.toggleArrowsState()}))}},{key:"cacheShipsRemainedPaginationDOM",value:function(){w(this,Jn,C(this,qn).querySelector(".info")),w(this,Vn,C(this,qn).querySelector(".left-arrow")),w(this,Hn,C(this,Vn).parentElement),w(this,Un,C(this,qn).querySelector(".right-arrow")),w(this,Nn,C(this,Un).parentElement)}},{key:"bindShipsRemainedPaginationEvents",value:function(){var e=this;C(this,Hn).addEventListener("pointerdown",(function(){e.scroll(-180)})),C(this,Nn).addEventListener("pointerdown",(function(){e.scroll(180)})),C(this,Hn).addEventListener("pointerup",(function(){e.stopScrolling()})),C(this,Nn).addEventListener("pointerup",(function(){e.stopScrolling()}))}},{key:"scroll",value:function(e){var n=this,r=this.getResponsiveScroll()+e,t=e>0?"right":"left";w(this,Fn,!1),this.checkIfScreenSmall()?C(this,Gn).scrollTop+=e:C(this,Gn).scrollLeft+=e,new Promise((function(e,i){n.keepScrolling(e,i,r,t)})).then((function(){n.scroll(e)})).catch((function(){})).finally((function(){n.toggleArrowsState()}))}},{key:"keepScrolling",value:function(e,n,r,t){var i=this;this.getResponsiveScroll()!==r?C(this,Fn)||"left"===t&&this.checkIfLeftMostReached()||"right"===t&&this.checkIfRightMostReached()?n():requestAnimationFrame((function(){i.keepScrolling(e,n,r,t)})):e()}},{key:"checkIfLeftMostReached",value:function(){return 0===this.getResponsiveScroll()}},{key:"checkIfRightMostReached",value:function(){return this.checkIfScreenSmall()?C(this,Gn).scrollHeight-C(this,Gn).clientHeight===C(this,Gn).scrollTop:C(this,Gn).scrollWidth-C(this,Gn).clientWidth===C(this,Gn).scrollLeft}},{key:"toggleArrowsState",value:function(){this.checkIfLeftMostReached()?C(this,Hn).classList.add("disabled"):C(this,Hn).classList.remove("disabled"),this.checkIfRightMostReached()?C(this,Nn).classList.add("disabled"):C(this,Nn).classList.remove("disabled")}},{key:"stopScrolling",value:function(){w(this,Fn,!0)}},{key:"getResponsiveScroll",value:function(){return this.checkIfScreenSmall()?C(this,Gn).scrollTop:C(this,Gn).scrollLeft}},{key:"checkIfScreenSmall",value:function(){return"none"!==getComputedStyle(C(this,Hn)).transform}},{key:"cacheTurnDOM",value:function(){w(this,Yn,C(this,Rn).querySelector(".turn-container"))}},{key:"setTurn",value:function(){this.showTurnLabel(),this.darken()}},{key:"unsetTurn",value:function(){this.hideTurnLabel(),this.removeDarkening()}},{key:"showTurnLabel",value:function(){C(this,Yn).classList.add("active")}},{key:"hideTurnLabel",value:function(){C(this,Yn).classList.remove("active")}},{key:"initScore",value:function(){this.setPlayerName(C(this,_n))}},{key:"cacheScoreDOM",value:function(){w(this,$n,C(this,Rn).querySelector(".score-container")),w(this,Qn,C(this,$n).querySelector(".name")),w(this,Kn,C(this,$n).querySelector(".wins")),w(this,Zn,C(this,$n).querySelector(".losses"))}},{key:"setPlayerName",value:function(e){C(this,Qn).textContent=e}},{key:"setWins",value:function(e){C(this,Kn).textContent=e}},{key:"increaseWins",value:function(){C(this,Kn).textContent=parseInt(C(this,Kn).textContent,10)+1}},{key:"setLosses",value:function(e){C(this,Zn).textContent=e}},{key:"increaseLosses",value:function(){C(this,Zn).textContent=parseInt(C(this,Zn).textContent,10)+1}},{key:"showScore",value:function(){C(this,$n).classList.add("active")}},{key:"hideScore",value:function(){C(this,$n).classList.remove("active")}},{key:"gameView",get:function(){return C(this,jn)}},{key:"boardView",get:function(){return C(this,Tn)}},{key:"getPlayerAreaElement",value:function(){return C(this,Rn)}},{key:"cacheDarkeningDOM",value:function(){w(this,Xn,C(this,Rn).querySelector(".darkening"))}},{key:"darken",value:function(){C(this,Xn).classList.add("active")}},{key:"removeDarkening",value:function(){C(this,Xn).classList.remove("active")}},{key:"showWinLabel",value:function(){C(this,Yn).firstElementChild.innerText="You Won",this.showTurnLabel()}},{key:"showLoseLabel",value:function(){C(this,Yn).firstElementChild.innerText="You Lost",this.showTurnLabel()}},{key:"disableBoard",value:function(){C(this,Tn).disableBoard()}},{key:"enableBoard",value:function(){C(this,Tn).enableBoard()}}]),e}();const nr=function(e){return new Promise((function(n){e.classList.remove("active"),e.addEventListener("transitionend",(function(r){"bottom"===r.propertyName&&(e.remove(),n())}))}))},rr=function(e,n){e.append(n),setTimeout((function(){n.classList.add("active")}),25)},tr=function(){var e=document.createElement("div");return e.classList.add("pause-container"),e};function ir(e,n,r){!function(e,n){if(n.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,n),n.set(e,r)}var ar=new WeakMap,or=new WeakMap,sr=new WeakMap,lr=new WeakMap,cr=new WeakMap,dr=new WeakMap,ur=new WeakMap,hr=new WeakMap,Ar=new WeakMap,pr=new WeakMap,mr=new WeakMap,fr=new WeakMap,gr=new WeakMap,vr=new WeakMap,br=new WeakMap,Cr=new WeakMap,wr=new WeakMap,yr=new WeakMap,kr=new WeakMap,xr=function(){function e(n,r,t){f(this,e),ir(this,ar,{writable:!0,value:void 0}),ir(this,or,{writable:!0,value:void 0}),ir(this,sr,{writable:!0,value:void 0}),ir(this,lr,{writable:!0,value:void 0}),ir(this,cr,{writable:!0,value:void 0}),ir(this,dr,{writable:!0,value:void 0}),ir(this,ur,{writable:!0,value:void 0}),ir(this,hr,{writable:!0,value:void 0}),ir(this,Ar,{writable:!0,value:void 0}),ir(this,pr,{writable:!0,value:void 0}),ir(this,mr,{writable:!0,value:void 0}),ir(this,fr,{writable:!0,value:void 0}),ir(this,gr,{writable:!0,value:void 0}),ir(this,vr,{writable:!0,value:void 0}),ir(this,br,{writable:!0,value:void 0}),ir(this,Cr,{writable:!0,value:void 0}),ir(this,wr,{writable:!0,value:void 0}),ir(this,yr,{writable:!0,value:void 0}),ir(this,kr,{writable:!0,value:void 0}),w(this,ar,n),w(this,hr,t),this.createRootElement(C(this,hr)),this.createPauseContainer(),r.append(C(this,or))}var n,r,t,i,a,o,s,l;return v(e,[{key:"createRootElement",value:function(){w(this,or,document.createElement("div")),C(this,or).classList.add("game-container"),C(this,or).dataset.gameId=C(this,hr)}},{key:"createPauseContainer",value:function(){w(this,ur,tr()),C(this,or).append(C(this,ur))}},{key:"game",get:function(){return C(this,ar)}},{key:"createGameArena",value:function(){this.cacheGameArenaDOM(),this.createPlayersViews(),C(this,yr).append(this.getPlayerView(0).getPlayerAreaElement()),C(this,kr).append(this.getPlayerView(1).getPlayerAreaElement()),C(this,or).append(C(this,sr)),this.createStartGameLabel()}},{key:"cacheGameArenaDOM",value:function(){w(this,sr,(new DOMParser).parseFromString(Cn()(),"text/html").body.firstElementChild),w(this,lr,C(this,sr).querySelector(".rounds-container")),w(this,cr,C(this,lr).querySelector("p")),w(this,dr,C(this,cr).querySelector(".round-num")),this.cachePlayersAreasDOM()}},{key:"endGame",value:function(e){var n=this;setTimeout((function(){for(var r=0;r<C(n,Ar).length;r++)C(n,Ar)[r].hideTurnLabel(),C(n,Ar)[r].disableBoard(),C(n,Ar)[r].removeDarkening(),r===e?(C(n,Ar)[r].showWinLabel(),C(n,Ar)[r].increaseWins()):(C(n,Ar)[r].showLoseLabel(),C(n,Ar)[r].increaseLosses());n.createNextGameLabel(),C(n,ur).classList.add("semi-active")}),300)}},{key:"createNextGameLabel",value:function(){w(this,Cr,document.createElement("div")),C(this,Cr).classList.add("next-game-container");var e=document.createElement("button");e.textContent="Next Game",C(this,Cr).append(e),C(this,or).append(C(this,Cr)),this.bindNextGameButtonEvents(e),rr(C(this,or),C(this,Cr))}},{key:"bindNextGameButtonEvents",value:function(e){e.addEventListener("click",this.NextGameButtonClick.bind(this)),e.addEventListener("mouseenter",this.displayScores.bind(this)),e.addEventListener("mouseleave",this.hideScores.bind(this))}},{key:"NextGameButtonClick",value:(l=m(k().mark((function e(){return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,nr(C(this,Cr));case 2:Fr.generateNextRound(C(this,ar),this);case 3:case"end":return e.stop()}}),e,this)}))),function(){return l.apply(this,arguments)})},{key:"createStartGameLabel",value:function(){w(this,wr,document.createElement("div")),C(this,wr).classList.add("start-game-container");var e=document.createElement("button");e.textContent="Start Game",C(this,wr).append(e),C(this,or).append(C(this,wr)),this.bindStartGameButtonEvents(e),rr(C(this,or),C(this,wr)),this.displayScores()}},{key:"bindStartGameButtonEvents",value:function(e){e.addEventListener("click",this.startGameButtonClick.bind(this))}},{key:"startGameButtonClick",value:(s=m(k().mark((function e(){return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this.hideScores(),e.next=3,nr(C(this,wr));case 3:Fr.startGame(C(this,ar),this),this.scrollToEnemyArea(C(this,ar).currentEnemyIndex);case 5:case"end":return e.stop()}}),e,this)}))),function(){return s.apply(this,arguments)})},{key:"cachePlayersAreasDOM",value:function(){w(this,yr,C(this,sr).querySelector(".first-player-arena")),w(this,kr,C(this,sr).querySelector(".second-player-arena"))}},{key:"createPlayersViews",value:function(){w(this,Ar,[]);for(var e=0;e<C(this,vr).length;e++){var n=new er(this,C(this,vr)[e].ships,C(this,mr),C(this,fr),C(this,vr)[e].name);C(this,Ar).push(n)}}},{key:"addPlayerView",value:function(e){C(this,Ar).push(e)}},{key:"displayScores",value:function(){var e=this;C(this,ur).classList.add("active"),C(this,ur).addEventListener("transitionend",(function(){for(var n=0;n<C(e,vr).length;n++)C(e,Ar)[n].showScore()}),{once:!0})}},{key:"hideScores",value:function(){C(this,ur).classList.remove("active");for(var e=0;e<C(this,vr).length;e++)C(this,Ar)[e].hideScore()}},{key:"updateScores",value:function(e){for(var n=0;n<C(this,Ar).length;n++)C(this,Ar)[n].setWins(e[n].wins),C(this,Ar)[n].setLosses(e[n].losses)}},{key:"playersViews",get:function(){return A(C(this,Ar))}},{key:"getPlayerView",value:function(e){return C(this,Ar)[e]}},{key:"scrollToEnemyArea",value:function(e){0===e?C(this,yr).scrollIntoView():C(this,kr).scrollIntoView()}},{key:"changeTurn",value:function(e,n){C(this,dr).innerText=e,"0deg"===getComputedStyle(C(this,lr)).getPropertyValue("--angle").trim()?(C(this,lr).style.setProperty("--angle","180deg"),C(this,cr).style.setProperty("--angle","180deg")):(C(this,lr).style.setProperty("--angle","0deg"),C(this,cr).style.setProperty("--angle","0deg")),this.scrollToEnemyArea(n)}},{key:"newGame",value:(o=m(k().mark((function e(){var n,r,t,i,a,o,s=arguments;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=!(s.length>0&&void 0!==s[0])||s[0],r=s.length>1&&void 0!==s[1]?s[1]:[],w(this,vr,[]),w(this,Ar,[]),w(this,br,0),!n){e.next=12;break}return e.next=8,this.createRulesModal();case 8:return e.next=10,this.createGameTypeModal();case 10:e.next=14;break;case 12:C(this,sr).remove(),C(this,ur).classList.remove("semi-active");case 14:for(t=[this.createGridSizeModal,this.createShipsChoosingModal],i=1;i<=C(this,pr);i++)t.push(this.createShipsPlacingModal.bind(this,i,n,r));case 16:if(!(C(this,br)<t.length)){e.next=21;break}return e.next=19,t[(w(this,br,(a=C(this,br),o=a++,a)),o)].call(this);case 19:e.next=16;break;case 21:return 1===C(this,pr)&&C(this,vr).push(Fr.generateComputerPlayer(C(this,mr),C(this,fr),C(this,gr))),this.createGameArena(),e.abrupt("return",{humanNumber:C(this,pr),boardWidth:C(this,mr),boardHeight:C(this,fr),players:C(this,vr)});case 24:case"end":return e.stop()}}),e,this)}))),function(){return o.apply(this,arguments)})},{key:"createRulesModal",value:(a=m(k().mark((function e(){var n;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=new oe,this.displayModal(n),e.next=4,this.rulesModalSubmit(n);case 4:return e.next=6,this.removeModal(n);case 6:case"end":return e.stop()}}),e,this)}))),function(){return a.apply(this,arguments)})},{key:"rulesModalSubmit",value:function(e){return new Promise((function(n){e.modalElement.querySelector(".btn-start").addEventListener("click",(function(){n()}))}))}},{key:"createGameTypeModal",value:(i=m(k().mark((function e(){var n;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=new pe,this.displayModal(n),e.next=4,this.gameTypeModalSubmit(n);case 4:return e.next=6,this.removeModal(n);case 6:case"end":return e.stop()}}),e,this)}))),function(){return i.apply(this,arguments)})},{key:"gameTypeModalSubmit",value:function(e){var n=this;return new Promise((function(r){e.modalElement.querySelector(".btn-play").addEventListener("click",(function(){w(n,pr,e.gethumanNumber()),r()}))}))}},{key:"createGridSizeModal",value:(t=m(k().mark((function e(){var n,r,t;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=new Be(null!==(n=C(this,mr))&&void 0!==n?n:10,null!==(r=C(this,fr))&&void 0!==r?r:10),this.displayModal(t),e.next=4,this.gridSizeModalSubmit(t);case 4:return e.next=6,this.removeModal(t);case 6:case"end":return e.stop()}}),e,this)}))),function(){return t.apply(this,arguments)})},{key:"gridSizeModalSubmit",value:function(e){var n=this;return new Promise((function(r){e.modalElement.querySelector(".btn-next").addEventListener("click",(function(){w(n,mr,e.getWidth()),w(n,fr,e.getHeight()),r()}))}))}},{key:"createShipsChoosingModal",value:(r=m(k().mark((function e(){var n;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=new ee(C(this,mr),C(this,fr)),this.displayModal(n),e.next=4,this.shipsChoosingModalSubmit(n);case 4:return e.next=6,this.removeModal(n);case 6:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"shipsChoosingModalSubmit",value:function(e){var n=this;return new Promise((function(r){var t=e.modalElement.querySelector(".btn-back");e.modalElement.querySelector(".btn-submit").addEventListener("click",(function(){w(n,gr,e.getShipsList()),r()})),t.addEventListener("click",(function(){w(n,br,C(n,br)-2),r()}))}))}},{key:"createShipsPlacingModal",value:(n=m(k().mark((function e(n,r,t){var i;return k().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return i=new vn(C(this,pr),n,C(this,gr),C(this,mr),C(this,fr),r,t[n-1]),this.displayModal(i),e.next=4,this.shipsPlacingModalSubmit(i,n);case 4:return e.next=6,this.removeModal(i);case 6:case"end":return e.stop()}}),e,this)}))),function(e,r,t){return n.apply(this,arguments)})},{key:"shipsPlacingModalSubmit",value:function(e,n){var r=this;return new Promise((function(t){var i=e.modalElement.querySelector(".btn-back");e.modalElement.querySelector(".btn-submit").addEventListener("click",(function(){C(r,vr).push({name:e.getPlayerName(),ships:e.getShipsList(),isBot:!1}),t()})),i.addEventListener("click",(function(){w(r,br,C(r,br)-2),n>1&&C(r,vr).pop(),t()}))}))}},{key:"displayModal",value:function(e){if(!e.modalContainerElement)throw new Error("Modal instance does not have modal container element property");if(!e.modalElement)throw new Error("Modal instance does not have modal element property");C(this,or).append(e.modalContainerElement),setTimeout((function(){e.modalContainerElement.classList.add("active"),e.modalElement.classList.add("active")}),0)}},{key:"removeModal",value:function(e){if(!e.modalContainerElement)throw new Error("Modal instance does not have modal container element property");if(!e.modalElement)throw new Error("Modal instance does not have modal element property");return new Promise((function(n){e.modalContainerElement.classList.remove("active"),e.modalElement.classList.remove("active"),e.modalElement.addEventListener("transitionend",(function(r){"bottom"===r.propertyName&&(e.modalContainerElement.remove(),n())}))}))}}]),e}();function Br(e,n,r){!function(e,n){if(n.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,n),n.set(e,r)}var Er=new WeakMap,Sr=new WeakMap,Ir=new WeakMap,Mr=new WeakMap,zr=new WeakMap,Lr=new WeakMap,Pr=new WeakMap,Or=function(){function e(){f(this,e),Br(this,Er,{writable:!0,value:void 0}),Br(this,Sr,{writable:!0,value:void 0}),Br(this,Ir,{writable:!0,value:void 0}),Br(this,Mr,{writable:!0,value:void 0}),Br(this,zr,{writable:!0,value:void 0}),Br(this,Lr,{writable:!0,value:void 0}),Br(this,Pr,{writable:!0,value:void 0}),this.running=!1,w(this,Sr,[]),w(this,Ir,0),w(this,Mr,0),w(this,zr,-1),w(this,Pr,[])}return v(e,[{key:"running",get:function(){return C(this,Er)},set:function(e){w(this,Er,e)}},{key:"addPlayer",value:function(e){C(this,Sr).push(e)}},{key:"getPlayer",value:function(e){return C(this,Sr)[e]}},{key:"getPlayers",value:function(){return A(C(this,Sr))}},{key:"getPlayersCount",value:function(){return C(this,Sr).length}},{key:"increaseCurrentRound",value:function(){var e;w(this,Ir,(e=C(this,Ir),++e))}},{key:"currentRound",get:function(){return C(this,Ir)}},{key:"currentPlayerIndex",get:function(){return C(this,zr)},set:function(e){w(this,zr,e)}},{key:"currentEnemyIndex",get:function(){return C(this,Lr)},set:function(e){w(this,Lr,e)}},{key:"getCurrentPlayer",value:function(){return C(this,Sr)[C(this,zr)]}},{key:"getCurrentEnemy",value:function(){return C(this,Sr)[C(this,Lr)]}},{key:"addWinner",value:function(e){C(this,Pr).push(e)}},{key:"winners",get:function(){return A(C(this,Pr))}},{key:"getLastWinner",value:function(){return C(this,Pr)[C(this,Pr).length-1]}},{key:"increaseCurrentTurn",value:function(){var e;w(this,Mr,(e=C(this,Mr),++e))}},{key:"resetCurrentTurn",value:function(){w(this,Mr,0)}},{key:"currentTurn",get:function(){return C(this,Mr)}}]),e}();function Wr(e,n,r){!function(e,n){if(n.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,n),n.set(e,r)}var Dr=new WeakMap,Rr=new WeakMap,jr=new WeakMap,Tr=new WeakMap,_r=new WeakMap,qr=function(){function e(n,r){f(this,e),Wr(this,Dr,{writable:!0,value:void 0}),Wr(this,Rr,{writable:!0,value:void 0}),Wr(this,jr,{writable:!0,value:void 0}),Wr(this,Tr,{writable:!0,value:void 0}),Wr(this,_r,{writable:!0,value:void 0}),this.name=n,w(this,_r,r),w(this,jr,0),w(this,Tr,0)}return v(e,[{key:"name",get:function(){return C(this,Dr)},set:function(e){w(this,Dr,e)}},{key:"isBot",get:function(){return C(this,_r)}},{key:"createBoard",value:function(e,n){w(this,Rr,Ie(e,n))}},{key:"board",get:function(){return C(this,Rr)}},{key:"increasePlayerRounds",value:function(){var e;w(this,Tr,(e=C(this,Tr),++e))}},{key:"playedRounds",get:function(){return C(this,Tr)}},{key:"increaseWinRounds",value:function(){var e;w(this,jr,(e=C(this,jr),++e))}},{key:"winRounds",get:function(){return C(this,jr)}}]),e}(),Gr=function(){function e(e){!1!==e.running&&(e.running=!1,e.getCurrentPlayer().increaseWinRounds(),e.getPlayers().forEach((function(e){e.increasePlayerRounds()})),e.addWinner(e.currentPlayerIndex),e.resetCurrentTurn())}function r(e,n){e.getCurrentPlayer().isBot&&(n.playersViews.forEach((function(e){e.disableBoard()})),t(e.getCurrentEnemy().board,n.getPlayerView(e.currentEnemyIndex).boardView))}function t(e,r){var t=d.getSmartTargets(e),i={};if(0===t.length){t=d.getNotDamagedSmartTargets(e);var a=Math.floor(Math.random()*t.length);i.row=t[a].row,i.col=t[a].col}else i.row=t[0].row,i.col=t[0].col;setTimeout((function(){n().publish("AttackReceived",{row:i.row,col:i.col,boardView:r})}),1e3)}return{generateGame:function(e,n){var r=new Or;Gr.createGameView(r,e,n).newGame().then((function(e){for(var n=function(n){var t=e.players[n],i=new qr(t.name,e.players[n].isBot);i.createBoard(e.boardWidth,e.boardHeight),Object.keys(t.ships).forEach((function(e){var n=t.ships[e],r=d.addShip(i.board,n.length);d.placeShip(i.board,r,n.row,n.col,n.isVertical)})),r.addPlayer(i)},t=0;t<e.players.length;t++)n(t)}))},startGame:function(e,r){if(!0!==e.running){if(e.getPlayersCount()<2)throw new Error("Too few players");e.running=!0,e.increaseCurrentRound(),function(e){var n;n=1===e.currentRound?function(e){return Math.floor(Math.random()*e.getPlayersCount())}(e):e.getLastWinner(),e.currentPlayerIndex=n}(e),e.currentEnemyIndex=(e.currentPlayerIndex+1)%e.getPlayersCount(),e.increaseCurrentTurn(),r&&n().publish("SwitchPlayerTurn",{game:e,gameView:r,firstTurn:!0})}},attack:function(t,i,a,o){t.running&&(d.receiveAttack(t.getCurrentEnemy().board,i,a,o)?(o&&n().publish("AttackSucceded",{boardView:o,row:i,col:a,isSunk:t.getCurrentEnemy().board.getShipFromCoordinate(i,a).isSunk()}),l.areAllShipsSunk(t.getCurrentEnemy().board)?(e(t),o&&n().publish("GameEnded",{gameView:o.playerView.gameView,winnerIndex:t.currentPlayerIndex})):o&&r(t,o.playerView.gameView)):(o&&n().publish("AttackFailed",{boardView:o,row:i,col:a}),function(e,r){e.currentPlayerIndex=(e.currentPlayerIndex+1)%e.getPlayersCount(),e.currentEnemyIndex=(e.currentEnemyIndex+1)%e.getPlayersCount(),e.increaseCurrentTurn(),r&&(n().publish("SwitchPlayerTurn",{game:e,gameView:r,firstTurn:!1}),n().publish("TurnIncreased",{newTurn:e.currentTurn,currentEnemyIndex:e.currentEnemyIndex,gameView:r}))}(t,void 0!==o?o.playerView.gameView:void 0)))},endGame:e,createGameView:function(e,n,r){return new xr(e,n,r)},generateNextRound:function(e,n){var r=[],t=[];e.getPlayers().forEach((function(e){t.push(e.name)})),n.newGame(!1,t).then((function(t){for(var i=function(n){var i=t.players[n],a=e.getPlayer(n);a.createBoard(t.boardWidth,t.boardHeight),Object.keys(i.ships).forEach((function(e){var n=i.ships[e],r=d.addShip(a.board,n.length);d.placeShip(a.board,r,n.row,n.col,n.isVertical)})),r.push({wins:a.winRounds,losses:a.playedRounds-a.winRounds})},a=0;a<t.players.length;a++)i(a);n.updateScores(r)}))},generateComputerPlayer:function(e,n,r){var t={name:"Computer",isBot:!0},i=Ie(e,n);Object.keys(r).forEach((function(e){for(var n=parseInt(e,10),t=r[n],a=0;a<t;a++)d.addShip(i,n)})),d.autoPlaceShips(i),t.ships={};var a=i.getShips();return Object.keys(a).forEach((function(e){t.ships[e]={},t.ships[e].length=i.getShip(e).getLength(),t.ships[e].row=a[e].row,t.ships[e].col=a[e].col,t.ships[e].isVertical=a[e].isVertical})),t},startMove:r,computerAttack:t}}();const Fr=Gr;n().subscribe("AttackReceived",(function(e,n){Fr.attack(n.boardView.playerView.gameView.game,n.row,n.col,n.boardView)})),n().subscribe("AttackFailed",(function(e,n){n.boardView.attackFailed(n.row,n.col)})),n().subscribe("AttackSucceded",(function(e,n){n.boardView.attackSucceded(n.row,n.col,n.isSunk)})),n().subscribe("SwitchPlayerTurn",(function(e,n){var r=n.gameView.getPlayerView(n.game.currentPlayerIndex);if(r.setTurn(),r.disableBoard(),!n.firstTurn){var t=n.gameView.getPlayerView(n.game.currentEnemyIndex);t.unsetTurn(),t.enableBoard()}Fr.startMove(n.game,n.gameView)})),n().subscribe("GameEnded",(function(e,n){n.gameView.endGame(n.winnerIndex)})),n().subscribe("TurnIncreased",(function(e,n){n.gameView.changeTurn(n.newTurn,n.currentEnemyIndex)})),n().subscribe("ShipSunk",(function(e,n){n.playerView.sinkShip(n.shipLength)}));var Jr=r(3379),Hr=r.n(Jr),Vr=r(7795),Nr=r.n(Vr),Ur=r(569),Yr=r.n(Ur),$r=r(3565),Qr=r.n($r),Kr=r(9216),Zr=r.n(Kr),Xr=r(4589),et=r.n(Xr),nt=r(6727),rt={};rt.styleTagTransform=et(),rt.setAttributes=Qr(),rt.insert=Yr().bind(null,"head"),rt.domAPI=Nr(),rt.insertStyleElement=Zr(),Hr()(nt.Z,rt),nt.Z&&nt.Z.locals&&nt.Z.locals;var tt=document.getElementById("games");Fr.generateGame(tt,1)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUEsVUFBaUIsb0JBdUJqQixTQUEwQm1zQixFQUFLcDhCLEdBQzNCLElBQU04a0IsRUFBYTlrQixFQUFLbXlCLFNBQVN1RCxjQUFjMTFCLEVBQUttMUIsS0FBSzZFLG9CQUd6RCxHQUZBbFYsRUFBVzBYLFVBQ1gxWCxFQUFXZ1EsZ0JBQ045MEIsRUFBS3c3QixVQUFXLENBQ2pCLElBQU1pQixFQUFxQno4QixFQUFLbXlCLFNBQVN1RCxjQUFjMTFCLEVBQUttMUIsS0FBSzRCLG1CQUNqRTBGLEVBQW1CQyxZQUNuQkQsRUFBbUIxSCxhQUN2QixDQUNBc0gsR0FBQUEsVUFBd0JyOEIsRUFBS20xQixLQUFNbjFCLEVBQUtteUIsU0FDNUMsSUFoQ0FsaUIsSUFBQUEsVUFBaUIsYUFrQ2pCLFNBQW1CbXNCLEVBQUtwOEIsR0FDcEJBLEVBQUtteUIsU0FBU3VILFFBQVExNUIsRUFBSysxQixZQUMvQixJQW5DQTlsQixJQUFBQSxVQUFpQixpQkFxQ2pCLFNBQXVCbXNCLEVBQUtwOEIsR0FDeEJBLEVBQUtteUIsU0FBU3dLLFdBQVczOEIsRUFBSzAzQixRQUFTMTNCLEVBQUsrMkIsa0JBQ2hELElBdENBOW1CLElBQUFBLFVBQWlCLFlBd0NqQixTQUFrQm1zQixFQUFLcDhCLEdBQ25CQSxFQUFLOGtCLFdBQVc4WCxTQUFTNThCLEVBQUsra0IsV0FDbEMsc0pDMUNBL2xCLEdBQVUsQ0FBQyxFQUVmQSxHQUFRNFcsa0JBQW9CLEtBQzVCNVcsR0FBUXNXLGNBQWdCLEtBRWxCdFcsR0FBUXdWLE9BQVMsVUFBYyxLQUFNLFFBRTNDeFYsR0FBUStVLE9BQVMsS0FDakIvVSxHQUFRMlcsbUJBQXFCLEtBRWhCLEtBQUksS0FBUzNXLElBS0osTUFBVyxhQUFpQixZQ3RCbEQsSUFBTXk3QixHQUFpQjdsQixTQUFTaW9CLGVBQWUsU0FDL0NuRyxHQUFBQSxhQUE0QitELEdBQWdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zYXNzL3N0eWxlcy5zY3NzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvY3NzL3Jlc2V0LmNzcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9odG1sL3RlbXBsYXRlcy9nYW1lLWFyZW5hLmhhbmRsZWJhcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9odG1sL3RlbXBsYXRlcy9nYW1lYm9hcmQtdGVtcGxhdGUuaGFuZGxlYmFycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2h0bWwvdGVtcGxhdGVzL21vZGFscy9nYW1lLXR5cGUtdGVtcGxhdGUuaGFuZGxlYmFycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2h0bWwvdGVtcGxhdGVzL21vZGFscy9ncmlkLXNpemUtdGVtcGxhdGUuaGFuZGxlYmFycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2h0bWwvdGVtcGxhdGVzL21vZGFscy9ydWxlcy10ZW1wbGF0ZS5oYW5kbGViYXJzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaHRtbC90ZW1wbGF0ZXMvbW9kYWxzL3NoaXBzLWNob29zaW5nLXRlbXBsYXRlLmhhbmRsZWJhcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9odG1sL3RlbXBsYXRlcy9tb2RhbHMvc2hpcHMtY29udGFpbmVyLXBsYWNpbmctbW9kYWwtdGVtcGxhdGUuaGFuZGxlYmFycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2h0bWwvdGVtcGxhdGVzL21vZGFscy9zaGlwcy1jb250YWluZXItdGVtcGxhdGUuaGFuZGxlYmFycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2h0bWwvdGVtcGxhdGVzL21vZGFscy9zaGlwcy1wbGFjaW5nLXRlbXBsYXRlLmhhbmRsZWJhcnMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9odG1sL3RlbXBsYXRlcy9wbGF5ZXItdGVtcGxhdGUuaGFuZGxlYmFycyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy5ydW50aW1lLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2Jhc2UuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvZGVjb3JhdG9ycy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9kZWNvcmF0b3JzL2lubGluZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9leGNlcHRpb24uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaGVscGVycy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9oZWxwZXJzL2Jsb2NrLWhlbHBlci1taXNzaW5nLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2hlbHBlcnMvZWFjaC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9oZWxwZXJzL2hlbHBlci1taXNzaW5nLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2hlbHBlcnMvaWYuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaGVscGVycy9sb2cuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaGVscGVycy9sb29rdXAuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaGVscGVycy93aXRoLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9kaXN0L2Nqcy9oYW5kbGViYXJzL2ludGVybmFsL2NyZWF0ZS1uZXctbG9va3VwLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9pbnRlcm5hbC9wcm90by1hY2Nlc3MuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvaW50ZXJuYWwvd3JhcEhlbHBlci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9sb2dnZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvbm8tY29uZmxpY3QuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL2Rpc3QvY2pzL2hhbmRsZWJhcnMvcnVudGltZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy9zYWZlLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvZGlzdC9janMvaGFuZGxlYmFycy91dGlscy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvcnVudGltZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3B1YnN1Yi1qcy9zcmMvcHVic3ViLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3JlZ2VuZXJhdG9yUnVudGltZS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzL2FycmF5LWhlcGxlci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzL0dhbWVib2FyZC9nYW1lYm9hcmQtZ2V0dGVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvanMvY2hlY2tlci1oZWxwZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9qcy9HYW1lYm9hcmQvZ2FtZWJvYXJkLWNoZWNrZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9qcy9HYW1lYm9hcmQvZ2FtZWJvYXJkLWNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aG91dEhvbGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzRXh0cmFjdEZpZWxkRGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzUHJpdmF0ZUZpZWxkR2V0LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NBcHBseURlc2NyaXB0b3JHZXQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc1ByaXZhdGVGaWVsZFNldC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQXBwbHlEZXNjcmlwdG9yU2V0LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvanMvVmlld0hlbHBlci9jb3VudGVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvanMvUGxheWVyL3BsYXllci12aWV3LWhlbHBlci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzL1ZpZXdIZWxwZXIvZm9ybS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzL01vZGFscy9zaGlwcy1jaG9vc2luZy1tb2RhbC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzL01vZGFscy9ydWxlcy1tb2RhbC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzL01vZGFscy9nYW1lLXR5cGUtbW9kYWwuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9qcy9Nb2RhbHMvZ3JpZC1zaXplLW1vZGFsLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FycmF5V2l0aEhvbGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaXRlcmFibGVUb0FycmF5TGltaXQuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVJlc3QuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9qcy9TaGlwL3NoaXAtY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzL0dhbWVib2FyZC9nYW1lYm9hcmQtbW9kZWwuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9qcy9WaWV3SGVscGVyL2JvYXJkLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvanMvTW9kYWxzL3NoaXBzLXBsYWNpbmctbW9kYWwuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9qcy9HYW1lYm9hcmQvZ2FtZWJvYXJkLXZpZXcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9qcy9QbGF5ZXIvcGxheWVyLXZpZXcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9qcy9WaWV3SGVscGVyL2NvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzL0dhbWUvZ2FtZS12aWV3LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvanMvR2FtZS9nYW1lLW1vZGVsLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvanMvUGxheWVyL3BsYXllci1tb2RlbC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2pzL0dhbWUvZ2FtZS1jb250cm9sbGVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvanMvR2FtZS9nYW1lLWV2ZW50LWhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zYXNzL3N0eWxlcy5zY3NzPzE4ZmUiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9qcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vY3NzL3Jlc2V0LmNzc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCIvYXNzZXRzL2ltZy9jaGFpbi5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyA9IG5ldyBVUkwoXCIvYXNzZXRzL2ltZy9saWdodC13b29kLmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fID0gbmV3IFVSTChcIi9hc3NldHMvaW1nL2Rhcmstd29vZC5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfM19fXyA9IG5ldyBVUkwoXCIvYXNzZXRzL2ltZy9zbW9vdGgtZGFyay13b29kLmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80X19fID0gbmV3IFVSTChcIi9hc3NldHMvaW1nL2ljeS5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNV9fXyA9IG5ldyBVUkwoXCIvYXNzZXRzL2ltZy9zdG9uZS5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNl9fXyA9IG5ldyBVUkwoXCIvYXNzZXRzL2ltZy93YXRlci5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfN19fXyA9IG5ldyBVUkwoXCIvYXNzZXRzL2ltZy9jcm9zcy5wbmdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOF9fXyA9IG5ldyBVUkwoXCIvYXNzZXRzL2ltZy9ncmV5LmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF85X19fID0gbmV3IFVSTChcIi9hc3NldHMvaW1nL2JsYWNrLXdvb2QuanBnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzEwX19fID0gbmV3IFVSTChcIi9hc3NldHMvaW1nL3NvbGlkLXdvb2QuanBnXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMl9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzRfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF81X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNV9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNl9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzZfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzdfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF83X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF84X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzlfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzEwX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLm91dGxpbmUtc21hbGwsLm91dGxpbmUtb3JhbmdlLC5zaGlwcy1wbGFjaW5nLW1vZGFsIC5zaGlwcyAucGFnZXMtY29udGFpbmVyIC5wYWdlIC5zaGlwLWNvbnRhaW5lciAuc2hpcC1jb21wcmVzc2VkLmFjdGl2ZSAuc2hpcC1ibG9jaywub3V0bGluZS1ibHVlLC5zaGlwcy1wbGFjaW5nLW1vZGFsIC5ib2FyZC1jb250YWluZXIgLnBsYWNlLW9wdGlvbnMgYnV0dG9uLmFjdGl2ZSwuc2hpcHMtcGxhY2luZy1tb2RhbCBzZWN0aW9uLnBsYWNlLXNoaXBzIC5hdXRvLXBsYWNlLWNvbnRhaW5lciAuYnRuLWF1dG8tcGxhY2U6YWN0aXZlLC5wYWdpbmF0aW9uIC5hcnJvdy1jb250YWluZXItYnV0dG9uOmFjdGl2ZSwuY291bnRlciAubWludXM6YWN0aXZlLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAud2lkdGgtY291bnRlciAubWludXM6YWN0aXZlLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAuaGVpZ2h0LWNvdW50ZXIgLm1pbnVzOmFjdGl2ZSwuY291bnRlciAucGx1czphY3RpdmUsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC53aWR0aC1jb3VudGVyIC5wbHVzOmFjdGl2ZSwuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLmhlaWdodC1jb3VudGVyIC5wbHVzOmFjdGl2ZSxpbnB1dFt0eXBlPXJhZGlvXTpjaGVja2VkK3NwYW57b3V0bGluZS13aWR0aDoycHg7b3V0bGluZS1zdHlsZTpzb2xpZH0ub3V0bGluZS1tZWRpdW0sLnNoaXBzLXBsYWNpbmctbW9kYWwgLnNoaXBzIC5wYWdlcy1jb250YWluZXIgLnBhZ2UgLnNoaXAtY29udGFpbmVyIC5zaGlwLWNvbXByZXNzZWQuYWN0aXZlIC5zaGlwLWJsb2Nre291dGxpbmUtd2lkdGg6M3B4O291dGxpbmUtc3R5bGU6c29saWR9Lm91dGxpbmUtdGhpY2ssLnNoaXBzLXBsYWNpbmctbW9kYWwgLmJvYXJkLWNvbnRhaW5lciAucGxhY2Utb3B0aW9ucyBidXR0b24uYWN0aXZlLC5zaGlwcy1wbGFjaW5nLW1vZGFsIHNlY3Rpb24ucGxhY2Utc2hpcHMgLmF1dG8tcGxhY2UtY29udGFpbmVyIC5idG4tYXV0by1wbGFjZTphY3RpdmUsaW5wdXRbdHlwZT1yYWRpb106Y2hlY2tlZCtzcGFue291dGxpbmUtd2lkdGg6NHB4O291dGxpbmUtc3R5bGU6c29saWR9Lm91dGxpbmUtYmx1ZSwuc2hpcHMtcGxhY2luZy1tb2RhbCAuYm9hcmQtY29udGFpbmVyIC5wbGFjZS1vcHRpb25zIGJ1dHRvbi5hY3RpdmUsLnNoaXBzLXBsYWNpbmctbW9kYWwgc2VjdGlvbi5wbGFjZS1zaGlwcyAuYXV0by1wbGFjZS1jb250YWluZXIgLmJ0bi1hdXRvLXBsYWNlOmFjdGl2ZSwucGFnaW5hdGlvbiAuYXJyb3ctY29udGFpbmVyLWJ1dHRvbjphY3RpdmUsLmNvdW50ZXIgLm1pbnVzOmFjdGl2ZSwuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLndpZHRoLWNvdW50ZXIgLm1pbnVzOmFjdGl2ZSwuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLmhlaWdodC1jb3VudGVyIC5taW51czphY3RpdmUsLmNvdW50ZXIgLnBsdXM6YWN0aXZlLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAud2lkdGgtY291bnRlciAucGx1czphY3RpdmUsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC5oZWlnaHQtY291bnRlciAucGx1czphY3RpdmUsaW5wdXRbdHlwZT1yYWRpb106Y2hlY2tlZCtzcGFue291dGxpbmUtY29sb3I6IzM4M2E4YX0ub3V0bGluZS1vcmFuZ2UsLnNoaXBzLXBsYWNpbmctbW9kYWwgLnNoaXBzIC5wYWdlcy1jb250YWluZXIgLnBhZ2UgLnNoaXAtY29udGFpbmVyIC5zaGlwLWNvbXByZXNzZWQuYWN0aXZlIC5zaGlwLWJsb2Nre291dGxpbmUtY29sb3I6I2Y1NTYyZX0uYm9yZGVyLXNtYWxsLC5ib3JkZXItd2hpdGUsLnNoaXBzLXJlbWFpbmVkLWNvbnRhaW5lcjo6YmVmb3JlLC5zaGlwcy1yZW1haW5lZC1jb250YWluZXItcmVzcG9uc2l2ZTo6YmVmb3JlLC5yb3VuZHMtY29udGFpbmVyLC5zaGlwLWJsb2NrLC5ib3JkZXItZ3JleSwuYm9hcmQtYmxvY2ssLndvb2Rlbi1jb250YWluZXIsLnNoaXBzLXBsYWNpbmctbW9kYWwgLmJvYXJkLWNvbnRhaW5lciAucGxhY2Utb3B0aW9ucyBidXR0b24sLnNoaXBzLXBsYWNpbmctbW9kYWwgc2VjdGlvbi5wbGFjZS1zaGlwcyAuYXV0by1wbGFjZS1jb250YWluZXIgLmJ0bi1hdXRvLXBsYWNlLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAud2lkdGgtbGFiZWwsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC5oZWlnaHQtbGFiZWwsLnBhZ2luYXRpb24gLmFycm93LWNvbnRhaW5lci1idXR0b24sLmNvdW50ZXIgLm1pbnVzLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAud2lkdGgtY291bnRlciAubWludXMsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC5oZWlnaHQtY291bnRlciAubWludXMsLmNvdW50ZXIgLnBsdXMsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC53aWR0aC1jb3VudGVyIC5wbHVzLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAuaGVpZ2h0LWNvdW50ZXIgLnBsdXMsaW5wdXRbdHlwZT1yYWRpb10rc3BhbiwubW9kYWwtYm9keSBoZWFkZXIgaDN7Ym9yZGVyLXdpZHRoOjFweDtib3JkZXItc3R5bGU6c29saWR9LmJvcmRlci1tZWRpdW0sLnNoaXBzLXJlbWFpbmVkLWNvbnRhaW5lcjo6YmVmb3JlLC5zaGlwcy1yZW1haW5lZC1jb250YWluZXItcmVzcG9uc2l2ZTo6YmVmb3JlLC5yb3VuZHMtY29udGFpbmVye2JvcmRlci13aWR0aDozcHg7Ym9yZGVyLXN0eWxlOnNvbGlkfS5ib3JkZXItZ3JleSwuYm9hcmQtYmxvY2ssLndvb2Rlbi1jb250YWluZXIsLnNoaXBzLXBsYWNpbmctbW9kYWwgLmJvYXJkLWNvbnRhaW5lciAucGxhY2Utb3B0aW9ucyBidXR0b24sLnNoaXBzLXBsYWNpbmctbW9kYWwgc2VjdGlvbi5wbGFjZS1zaGlwcyAuYXV0by1wbGFjZS1jb250YWluZXIgLmJ0bi1hdXRvLXBsYWNlLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAud2lkdGgtbGFiZWwsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC5oZWlnaHQtbGFiZWwsLnBhZ2luYXRpb24gLmFycm93LWNvbnRhaW5lci1idXR0b24sLmNvdW50ZXIgLm1pbnVzLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAud2lkdGgtY291bnRlciAubWludXMsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC5oZWlnaHQtY291bnRlciAubWludXMsLmNvdW50ZXIgLnBsdXMsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC53aWR0aC1jb3VudGVyIC5wbHVzLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAuaGVpZ2h0LWNvdW50ZXIgLnBsdXMsaW5wdXRbdHlwZT1yYWRpb10rc3BhbiwubW9kYWwtYm9keSBoZWFkZXIgaDN7Ym9yZGVyLWNvbG9yOiM5NTk4OWF9LmJvcmRlci13aGl0ZSwuc2hpcHMtcmVtYWluZWQtY29udGFpbmVyOjpiZWZvcmUsLnNoaXBzLXJlbWFpbmVkLWNvbnRhaW5lci1yZXNwb25zaXZlOjpiZWZvcmUsLnJvdW5kcy1jb250YWluZXIsLnNoaXAtYmxvY2t7Ym9yZGVyLWNvbG9yOiNmZmZ9LmJkcnMtMSwubW9kYWwtaGVhZGVyIGgyLC53b29kZW4tY29udGFpbmVyLC5zaGlwcy1wbGFjaW5nLW1vZGFsIC5ib2FyZC1jb250YWluZXIgLnBsYWNlLW9wdGlvbnMgYnV0dG9uLC5zaGlwcy1wbGFjaW5nLW1vZGFsIHNlY3Rpb24ucGxhY2Utc2hpcHMgLmF1dG8tcGxhY2UtY29udGFpbmVyIC5idG4tYXV0by1wbGFjZSwuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLndpZHRoLWxhYmVsLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAuaGVpZ2h0LWxhYmVsLC5wYWdpbmF0aW9uIC5hcnJvdy1jb250YWluZXItYnV0dG9uLC5jb3VudGVyIC5taW51cywuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLndpZHRoLWNvdW50ZXIgLm1pbnVzLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAuaGVpZ2h0LWNvdW50ZXIgLm1pbnVzLC5jb3VudGVyIC5wbHVzLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAud2lkdGgtY291bnRlciAucGx1cywuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLmhlaWdodC1jb3VudGVyIC5wbHVzLGlucHV0W3R5cGU9cmFkaW9dK3NwYW4sLm1vZGFsLWJvZHkgaGVhZGVyIGgze2JvcmRlci1yYWRpdXM6LjVyZW19LmJkcnMtMixpbnB1dHtib3JkZXItcmFkaXVzOi43NXJlbX0uYmRycy0ze2JvcmRlci1yYWRpdXM6MXJlbX0uYmRycy00LC5tb2RhbC1vcHRpb25zIGJ1dHRvbntib3JkZXItcmFkaXVzOjEuNXJlbX1idXR0b257cGFkZGluZzoxcmVtIDJyZW07YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLDApO2JvcmRlcjpub25lO2NvbG9yOmluaGVyaXR9YnV0dG9uW2Rpc2FibGVkXXtwb3NpdGlvbjpyZWxhdGl2ZTtvdmVyZmxvdzpoaWRkZW59YnV0dG9uW2Rpc2FibGVkXTo6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXCI7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLC41KX0uY2hhaW5lZC1jb250YWluZXIsLm5leHQtZ2FtZS1jb250YWluZXIsLnN0YXJ0LWdhbWUtY29udGFpbmVyLC5wbGF5ZXItYXJlYSAudHVybi1yb3cgLnR1cm4tY29udGFpbmVyLC5tb2RhbCwuc2hpcHMtcGxhY2luZy1tb2RhbCwuc2hpcHMtY2hvb3NpbmctbW9kYWwsLnJ1bGVzLW1vZGFsLC5ncmlkLXNpemUtbW9kYWwsLmdhbWUtdHlwZS1tb2RhbHtwb3NpdGlvbjphYnNvbHV0ZTt0cmFuc2l0aW9uOmJvdHRvbSAuM3MgbGluZWFyfS5jaGFpbmVkLWNvbnRhaW5lcjo6YmVmb3JlLC5uZXh0LWdhbWUtY29udGFpbmVyOjpiZWZvcmUsLnN0YXJ0LWdhbWUtY29udGFpbmVyOjpiZWZvcmUsLnBsYXllci1hcmVhIC50dXJuLXJvdyAudHVybi1jb250YWluZXI6OmJlZm9yZSwubW9kYWw6OmJlZm9yZSwuc2hpcHMtcGxhY2luZy1tb2RhbDo6YmVmb3JlLC5zaGlwcy1jaG9vc2luZy1tb2RhbDo6YmVmb3JlLC5ydWxlcy1tb2RhbDo6YmVmb3JlLC5ncmlkLXNpemUtbW9kYWw6OmJlZm9yZSwuZ2FtZS10eXBlLW1vZGFsOjpiZWZvcmUsLmNoYWluZWQtY29udGFpbmVyOjphZnRlciwubmV4dC1nYW1lLWNvbnRhaW5lcjo6YWZ0ZXIsLnN0YXJ0LWdhbWUtY29udGFpbmVyOjphZnRlciwucGxheWVyLWFyZWEgLnR1cm4tcm93IC50dXJuLWNvbnRhaW5lcjo6YWZ0ZXIsLm1vZGFsOjphZnRlciwuc2hpcHMtcGxhY2luZy1tb2RhbDo6YWZ0ZXIsLnNoaXBzLWNob29zaW5nLW1vZGFsOjphZnRlciwucnVsZXMtbW9kYWw6OmFmdGVyLC5ncmlkLXNpemUtbW9kYWw6OmFmdGVyLC5nYW1lLXR5cGUtbW9kYWw6OmFmdGVye2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKTtiYWNrZ3JvdW5kLXNpemU6MTAwJSBhdXRvO2JhY2tncm91bmQtcG9zaXRpb246Y2VudGVyO2JhY2tncm91bmQtcmVwZWF0OnJlcGVhdC15O2NvbnRlbnQ6XFxcIlxcXCI7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7aGVpZ2h0OjEwMHZoO3dpZHRoOjE1cHg7dHJhbnNmb3JtLW9yaWdpbjo1MCUgMDt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZyl9LmNoYWluZWQtY29udGFpbmVyOjpiZWZvcmUsLm5leHQtZ2FtZS1jb250YWluZXI6OmJlZm9yZSwuc3RhcnQtZ2FtZS1jb250YWluZXI6OmJlZm9yZSwucGxheWVyLWFyZWEgLnR1cm4tcm93IC50dXJuLWNvbnRhaW5lcjo6YmVmb3JlLC5tb2RhbDo6YmVmb3JlLC5zaGlwcy1wbGFjaW5nLW1vZGFsOjpiZWZvcmUsLnNoaXBzLWNob29zaW5nLW1vZGFsOjpiZWZvcmUsLnJ1bGVzLW1vZGFsOjpiZWZvcmUsLmdyaWQtc2l6ZS1tb2RhbDo6YmVmb3JlLC5nYW1lLXR5cGUtbW9kYWw6OmJlZm9yZXtsZWZ0OjIwcHh9LmNoYWluZWQtY29udGFpbmVyOjphZnRlciwubmV4dC1nYW1lLWNvbnRhaW5lcjo6YWZ0ZXIsLnN0YXJ0LWdhbWUtY29udGFpbmVyOjphZnRlciwucGxheWVyLWFyZWEgLnR1cm4tcm93IC50dXJuLWNvbnRhaW5lcjo6YWZ0ZXIsLm1vZGFsOjphZnRlciwuc2hpcHMtcGxhY2luZy1tb2RhbDo6YWZ0ZXIsLnNoaXBzLWNob29zaW5nLW1vZGFsOjphZnRlciwucnVsZXMtbW9kYWw6OmFmdGVyLC5ncmlkLXNpemUtbW9kYWw6OmFmdGVyLC5nYW1lLXR5cGUtbW9kYWw6OmFmdGVye3JpZ2h0OjIwcHh9LmxpZ2h0LXdvb2QtY29udGFpbmVyLC5wbGF5ZXItYXJlYSAudHVybi1yb3cgLnR1cm4tY29udGFpbmVyLC5tb2RhbCwuc2hpcHMtcGxhY2luZy1tb2RhbCwuc2hpcHMtY2hvb3NpbmctbW9kYWwsLnJ1bGVzLW1vZGFsLC5ncmlkLXNpemUtbW9kYWwsLmdhbWUtdHlwZS1tb2RhbHtiYWNrZ3JvdW5kLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gKyBcIik7YmFja2dyb3VuZC1zaXplOjEwMCUgYXV0bztiYWNrZ3JvdW5kLXBvc2l0aW9uOjAgOTAlO2JhY2tncm91bmQtcmVwZWF0OnJlcGVhdC15fS5kYXJrLXdvb2QtY29udGFpbmVyLC5uZXh0LWdhbWUtY29udGFpbmVyLC5zdGFydC1nYW1lLWNvbnRhaW5lciwubW9kYWwtaGVhZGVyIGgye2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyArIFwiKTtiYWNrZ3JvdW5kLXNpemU6MTAwJSBhdXRvO2JhY2tncm91bmQtcG9zaXRpb246MCA5MCU7YmFja2dyb3VuZC1yZXBlYXQ6cmVwZWF0LXl9LnNtb290aC1kYXJrLXdvb2QtY29udGFpbmVyLC5tb2RhbC1vcHRpb25zIGJ1dHRvbiwud29vZGVuLWNvbnRhaW5lciwuc2hpcHMtcGxhY2luZy1tb2RhbCAuYm9hcmQtY29udGFpbmVyIC5wbGFjZS1vcHRpb25zIGJ1dHRvbiwuc2hpcHMtcGxhY2luZy1tb2RhbCBzZWN0aW9uLnBsYWNlLXNoaXBzIC5hdXRvLXBsYWNlLWNvbnRhaW5lciAuYnRuLWF1dG8tcGxhY2UsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC53aWR0aC1sYWJlbCwuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLmhlaWdodC1sYWJlbCwucGFnaW5hdGlvbiAuYXJyb3ctY29udGFpbmVyLWJ1dHRvbiwuY291bnRlciAubWludXMsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC53aWR0aC1jb3VudGVyIC5taW51cywuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLmhlaWdodC1jb3VudGVyIC5taW51cywuY291bnRlciAucGx1cywuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLndpZHRoLWNvdW50ZXIgLnBsdXMsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC5oZWlnaHQtY291bnRlciAucGx1cyxpbnB1dFt0eXBlPXJhZGlvXStzcGFuLC5tb2RhbC1ib2R5IGhlYWRlciBoM3tiYWNrZ3JvdW5kLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18gKyBcIik7YmFja2dyb3VuZC1zaXplOmNvdmVyO2JhY2tncm91bmQtcG9zaXRpb246Y2VudGVyO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdH0ud29vZGVuLWNvbnRhaW5lciwuc2hpcHMtcGxhY2luZy1tb2RhbCAuYm9hcmQtY29udGFpbmVyIC5wbGFjZS1vcHRpb25zIGJ1dHRvbiwuc2hpcHMtcGxhY2luZy1tb2RhbCBzZWN0aW9uLnBsYWNlLXNoaXBzIC5hdXRvLXBsYWNlLWNvbnRhaW5lciAuYnRuLWF1dG8tcGxhY2UsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC53aWR0aC1sYWJlbCwuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLmhlaWdodC1sYWJlbCwucGFnaW5hdGlvbiAuYXJyb3ctY29udGFpbmVyLWJ1dHRvbiwuY291bnRlciAubWludXMsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC53aWR0aC1jb3VudGVyIC5taW51cywuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLmhlaWdodC1jb3VudGVyIC5taW51cywuY291bnRlciAucGx1cywuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLndpZHRoLWNvdW50ZXIgLnBsdXMsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC5oZWlnaHQtY291bnRlciAucGx1cyxpbnB1dFt0eXBlPXJhZGlvXStzcGFuLC5tb2RhbC1ib2R5IGhlYWRlciBoM3twYWRkaW5nOjFyZW0gMy41cmVtO2ZvbnQtd2VpZ2h0OmJvbGR9LmZsZXgtY2VudGVyLC5taWRkbGUtYmlzZWN0b3IsLnBsYXllci1hcmVhIC5zY29yZS1jb250YWluZXIsLnBsYXllci1hcmVhIC50dXJuLXJvdywuc2hpcHMtcGxhY2luZy1tb2RhbCBzZWN0aW9uLnBsYWNlLXNoaXBzIC5hdXRvLXBsYWNlLWNvbnRhaW5lciwuZ2FtZS10eXBlLW1vZGFsIC5tb2RhbC1ib2R5ICNmb3JtLWdhbWUtdHlwZSwuc2hpcC1jb21wcmVzc2VkLC5wYWdpbmF0aW9uLC5jb3VudGVyLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAud2lkdGgtY291bnRlciwuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLmhlaWdodC1jb3VudGVyLC5zaGlwcy1yZW1haW5lZC1jb250YWluZXI6OmJlZm9yZSwuc2hpcHMtcmVtYWluZWQtY29udGFpbmVyLXJlc3BvbnNpdmU6OmJlZm9yZSwucm91bmRzLWNvbnRhaW5lciwubW9kYWwtb3B0aW9ucywubW9kYWwtY29udGFpbmVyLC5idG4taWNvbiwuc2hpcHMtcGxhY2luZy1tb2RhbCAuYm9hcmQtY29udGFpbmVyIC5wbGFjZS1vcHRpb25zIC5idG4tcmVtb3Zle2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uYWJzb2x1dGUtMTAwLC5wbGF5ZXItYXJlYSAuZGFya2VuaW5nLC5wbGF5ZXItYXJlYSAuc2NvcmUtY29udGFpbmVyLC5jb3VudGVyIC5taW51cy5kaXNhYmxlZDo6YmVmb3JlLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAud2lkdGgtY291bnRlciAubWludXMuZGlzYWJsZWQ6OmJlZm9yZSwuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLmhlaWdodC1jb3VudGVyIC5taW51cy5kaXNhYmxlZDo6YmVmb3JlLC5jb3VudGVyIC5wbHVzLmRpc2FibGVkOjpiZWZvcmUsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC53aWR0aC1jb3VudGVyIC5wbHVzLmRpc2FibGVkOjpiZWZvcmUsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC5oZWlnaHQtY291bnRlciAucGx1cy5kaXNhYmxlZDo6YmVmb3JlLC5wYXVzZS1jb250YWluZXIsLnNoaXBzLXJlbWFpbmVkLWNvbnRhaW5lcjo6YmVmb3JlLC5zaGlwcy1yZW1haW5lZC1jb250YWluZXItcmVzcG9uc2l2ZTo6YmVmb3JlLC5nYW1lLWJsb2NrOmhvdmVyOm5vdCguaGl0KTo6YWZ0ZXIsLnNoaXAtYmxvY2s6aG92ZXI6bm90KC5oaXQpOjphZnRlciwuYm9hcmQtYmxvY2s6aG92ZXI6bm90KC5oaXQpOjphZnRlciwuZ2FtZS1ibG9jay1zbWFsbDpob3Zlcjpub3QoLmhpdCk6OmFmdGVyLC5zaGlwcy1yZW1haW5lZC1jb250YWluZXIgLnNoaXBzIC5zaGlwLWNvbnRhaW5lciAuc2hpcC1ibG9jazpob3Zlcjpub3QoLmhpdCk6OmFmdGVyLC5zaGlwcy1yZW1haW5lZC1jb250YWluZXItcmVzcG9uc2l2ZSAuc2hpcHMgLnNoaXAtY29udGFpbmVyIC5zaGlwLWJsb2NrOmhvdmVyOm5vdCguaGl0KTo6YWZ0ZXIsYnV0dG9uW2Rpc2FibGVkXTo6YmVmb3Jle3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfS5mbG9hdGluZy1sYWJlbC1pbnB1dHtwb3NpdGlvbjpyZWxhdGl2ZX0uZmxvYXRpbmctbGFiZWwtaW5wdXQgaW5wdXR7cGFkZGluZzozcmVtIDEuNXJlbSAxcmVtfS5mbG9hdGluZy1sYWJlbC1pbnB1dCBpbnB1dDpmb2N1cytsYWJlbCwuZmxvYXRpbmctbGFiZWwtaW5wdXQgaW5wdXQ6bm90KDpwbGFjZWhvbGRlci1zaG93bikrbGFiZWx7dG9wOjVweDt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTtmb250LXNpemU6Ljc1ZW19LmZsb2F0aW5nLWxhYmVsLWlucHV0IGxhYmVse3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1MCU7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTUwJSk7bGVmdDoxLjVyZW07Y29sb3I6I2NlY2VjZTtjdXJzb3I6dGV4dDt0cmFuc2l0aW9uOmFsbCAuMjVzfS5tb2RhbC1jb250YWluZXJ7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtwb3NpdGlvbjpmaXhlZDt6LWluZGV4OjEwfS5tb2RhbC1jb250YWluZXIuYWN0aXZle292ZXJmbG93LXk6YXV0b30ubW9kYWwsLnNoaXBzLXBsYWNpbmctbW9kYWwsLnNoaXBzLWNob29zaW5nLW1vZGFsLC5ydWxlcy1tb2RhbCwuZ3JpZC1zaXplLW1vZGFsLC5nYW1lLXR5cGUtbW9kYWx7cGFkZGluZzowO2ZvbnQtc2l6ZToycmVtO2JvcmRlci1yYWRpdXM6Mi41cmVtO3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbToxMzAlO3RyYW5zaXRpb24tcHJvcGVydHk6Ym90dG9tLHRyYW5zZm9ybTt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLW91dDt0cmFuc2l0aW9uLWR1cmF0aW9uOi41c30ubW9kYWw6OmJlZm9yZSwuc2hpcHMtcGxhY2luZy1tb2RhbDo6YmVmb3JlLC5zaGlwcy1jaG9vc2luZy1tb2RhbDo6YmVmb3JlLC5ydWxlcy1tb2RhbDo6YmVmb3JlLC5ncmlkLXNpemUtbW9kYWw6OmJlZm9yZSwuZ2FtZS10eXBlLW1vZGFsOjpiZWZvcmUsLm1vZGFsOjphZnRlciwuc2hpcHMtcGxhY2luZy1tb2RhbDo6YWZ0ZXIsLnNoaXBzLWNob29zaW5nLW1vZGFsOjphZnRlciwucnVsZXMtbW9kYWw6OmFmdGVyLC5ncmlkLXNpemUtbW9kYWw6OmFmdGVyLC5nYW1lLXR5cGUtbW9kYWw6OmFmdGVye3dpZHRoOjMwcHh9Lm1vZGFsOjpiZWZvcmUsLnNoaXBzLXBsYWNpbmctbW9kYWw6OmJlZm9yZSwuc2hpcHMtY2hvb3NpbmctbW9kYWw6OmJlZm9yZSwucnVsZXMtbW9kYWw6OmJlZm9yZSwuZ3JpZC1zaXplLW1vZGFsOjpiZWZvcmUsLmdhbWUtdHlwZS1tb2RhbDo6YmVmb3Jle2xlZnQ6NjBweH0ubW9kYWw6OmFmdGVyLC5zaGlwcy1wbGFjaW5nLW1vZGFsOjphZnRlciwuc2hpcHMtY2hvb3NpbmctbW9kYWw6OmFmdGVyLC5ydWxlcy1tb2RhbDo6YWZ0ZXIsLmdyaWQtc2l6ZS1tb2RhbDo6YWZ0ZXIsLmdhbWUtdHlwZS1tb2RhbDo6YWZ0ZXJ7cmlnaHQ6NjBweH0ubW9kYWwuYWN0aXZlLC5hY3RpdmUuc2hpcHMtcGxhY2luZy1tb2RhbCwuYWN0aXZlLnNoaXBzLWNob29zaW5nLW1vZGFsLC5hY3RpdmUucnVsZXMtbW9kYWwsLmFjdGl2ZS5ncmlkLXNpemUtbW9kYWwsLmFjdGl2ZS5nYW1lLXR5cGUtbW9kYWx7Ym90dG9tOjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlWShjYWxjKDEwMCUgLSAyMDBweCkpfS5tb2RhbC1oZWFkZXJ7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTt0b3A6LTYwcHg7dGV4dC1hbGlnbjpjZW50ZXJ9Lm1vZGFsLWhlYWRlciBoMntkaXNwbGF5OmlubGluZS1ibG9jaztwYWRkaW5nOjEuNXJlbSAycmVtO2ZvbnQtc2l6ZTpjYWxjKDFlbSArIDFyZW0pfS5tb2RhbC1ib2R5e21pbi13aWR0aDozMHZ3O3BhZGRpbmctdG9wOjFyZW19QG1lZGlhKG1heC13aWR0aDogMTEwMHB4KXsubW9kYWwtYm9keXttaW4td2lkdGg6NDB2d319QG1lZGlhKG1heC13aWR0aDogNzY4cHgpey5tb2RhbC1ib2R5e21pbi13aWR0aDo2MHZ3fX1AbWVkaWEobWF4LXdpZHRoOiA1NzVweCl7Lm1vZGFsLWJvZHl7bWluLXdpZHRoOjgwdnd9fS5tb2RhbC1ib2R5IGhlYWRlcnt0ZXh0LWFsaWduOmNlbnRlcn0ubW9kYWwtYm9keSBoZWFkZXIgaDN7ZGlzcGxheTppbmxpbmUtYmxvY2t9Lm1vZGFsLWJvZHkgbGFiZWx7ZGlzcGxheTppbmxpbmUtYmxvY2t9Lm1vZGFsLWJvZHkgc2VjdGlvbntwYWRkaW5nOjNyZW07ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtnYXA6MnJlbX0ubW9kYWwtb3B0aW9uc3twYWRkaW5nLXRvcDoyLjVyZW07cGFkZGluZy1ib3R0b206MnJlbTtwYWRkaW5nLWxlZnQ6MnJlbTtwYWRkaW5nLXJpZ2h0OjJyZW07Z2FwOjNyZW19Lm1vZGFsLW9wdGlvbnMgYnV0dG9ue3BhZGRpbmc6MS4yNXJlbSA2cmVtO2ZvbnQtd2VpZ2h0OmJvbGR9Lm1vZGFsLXNwYWNlcntoZWlnaHQ6NTBweDttYXJnaW4tYm90dG9tOi01MHB4O3dpZHRoOjEwMCV9LmljeS1ocntoZWlnaHQ6MTBweDtiYWNrZ3JvdW5kLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzRfX18gKyBcIik7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246Y2VudGVyO2JhY2tncm91bmQtc2l6ZTpjb3ZlcjttYXJnaW46MDt3aWR0aDoxMDAlfS50ZXh0LWVycm9ye2NvbG9yOiNlMGNjMTg7Zm9udC1zaXplOjEuNnJlbX0ub3BhY2l0eS0xMDB7b3BhY2l0eToxMDAlICFpbXBvcnRhbnR9LmQtbm9uZXtkaXNwbGF5Om5vbmUgIWltcG9ydGFudH1pbnB1dHtwYWRkaW5nOjFyZW0gMnJlbTtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyOm5vbmV9aW5wdXRbdHlwZT1yYWRpb117YXBwZWFyYW5jZTpub25lfWlucHV0W3R5cGU9cmFkaW9dK3NwYW57Y3Vyc29yOnBvaW50ZXI7ZGlzcGxheTppbmxpbmUtYmxvY2t9KiwqOjpiZWZvcmUsKjo6YWZ0ZXJ7Ym94LXNpemluZzpib3JkZXItYm94fWh0bWx7Zm9udC1zaXplOjEwcHg7c2Nyb2xsLWJlaGF2aW9yOnNtb290aH1ib2R5e2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fXyArIFwiKTtiYWNrZ3JvdW5kLXNpemU6Y292ZXI7YmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXI7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47bWluLWhlaWdodDoxMDB2aDtmb250LXNpemU6MS42cmVtO2xpbmUtaGVpZ2h0OjEuNjtmb250LWZhbWlseTpMYXRvLEdlbmV2YSxUYWhvbWEsc2Fucy1zZXJpZjtjb2xvcjojZmZmO3VzZXItc2VsZWN0Om5vbmV9bWFpbntkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZ3JvdzoxfWgxLGgye2ZvbnQtd2VpZ2h0OmJvbGR9aDF7Zm9udC1zaXplOjMuNXJlbX1oMntmb250LXNpemU6M3JlbX1zdmd7dXNlci1zZWxlY3Q6bm9uZX0uZ2FtZS1ibG9jaywuc2hpcC1ibG9jaywuYm9hcmQtYmxvY2ssLmdhbWUtYmxvY2stc21hbGwsLnNoaXBzLXJlbWFpbmVkLWNvbnRhaW5lciAuc2hpcHMgLnNoaXAtY29udGFpbmVyIC5zaGlwLWJsb2NrLC5zaGlwcy1yZW1haW5lZC1jb250YWluZXItcmVzcG9uc2l2ZSAuc2hpcHMgLnNoaXAtY29udGFpbmVyIC5zaGlwLWJsb2Nre3dpZHRoOjM1cHg7aGVpZ2h0OjM1cHg7cG9zaXRpb246cmVsYXRpdmU7Y3Vyc29yOnBvaW50ZXJ9LmdhbWUtYmxvY2s6aG92ZXI6bm90KC5oaXQpOjphZnRlciwuc2hpcC1ibG9jazpob3Zlcjpub3QoLmhpdCk6OmFmdGVyLC5ib2FyZC1ibG9jazpob3Zlcjpub3QoLmhpdCk6OmFmdGVyLC5nYW1lLWJsb2NrLXNtYWxsOmhvdmVyOm5vdCguaGl0KTo6YWZ0ZXIsLnNoaXBzLXJlbWFpbmVkLWNvbnRhaW5lciAuc2hpcHMgLnNoaXAtY29udGFpbmVyIC5zaGlwLWJsb2NrOmhvdmVyOm5vdCguaGl0KTo6YWZ0ZXIsLnNoaXBzLXJlbWFpbmVkLWNvbnRhaW5lci1yZXNwb25zaXZlIC5zaGlwcyAuc2hpcC1jb250YWluZXIgLnNoaXAtYmxvY2s6aG92ZXI6bm90KC5oaXQpOjphZnRlcntjb250ZW50OlxcXCJcXFwiO2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwuMjUpfS5nYW1lLWJsb2NrLXNtYWxsLC5zaGlwcy1yZW1haW5lZC1jb250YWluZXIgLnNoaXBzIC5zaGlwLWNvbnRhaW5lciAuc2hpcC1ibG9jaywuc2hpcHMtcmVtYWluZWQtY29udGFpbmVyLXJlc3BvbnNpdmUgLnNoaXBzIC5zaGlwLWNvbnRhaW5lciAuc2hpcC1ibG9ja3t3aWR0aDoyMHB4O2hlaWdodDoyMHB4fS5ib2FyZC1ibG9ja3tiYWNrZ3JvdW5kLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX18gKyBcIik7YmFja2dyb3VuZC1zaXplOmNvdmVyO2JhY2tncm91bmQtcG9zaXRpb246Y2VudGVyO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdH0uYm9hcmQtYmxvY2suZGlzYWJsZWR7cG9pbnRlci1ldmVudHM6bm9uZX0uYm9hcmQtYmxvY2suaW5jb3JyZWN0e2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfN19fXyArIFwiKTtiYWNrZ3JvdW5kLXNpemU6Y29udGFpbjtiYWNrZ3JvdW5kLXBvc2l0aW9uOmNlbnRlcjtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1jb2xvcjojOGIxZjFmfS5zaGlwLWJsb2Nre2JhY2tncm91bmQtY29sb3I6IzI5Yjg0Zn0uc2hpcC1ibG9jay5oaWRkZW57ei1pbmRleDotMTt2aXNpYmlsaXR5OmhpZGRlbn0uYm9hcmR7LS1ib2FyZC1ob3Jpem9udGFsLWNlbGxzOiAxMDtkaXNwbGF5OmlubGluZS1ncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQodmFyKC0tYm9hcmQtaG9yaXpvbnRhbC1jZWxscyksIGF1dG8pO2FsaWduLWNvbnRlbnQ6Y2VudGVyfS5ib2FyZC5kaXNhYmxlZHtwb2ludGVyLWV2ZW50czpub25lfS5yb3VuZHMtY29udGFpbmVyey0tYW5nbGU6IDBkZWc7Ym9yZGVyLXJhZGl1czo1MCU7cGFkZGluZzoxcmVtO3dpZHRoOjExMnB4O2FzcGVjdC1yYXRpbzoxO2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOF9fXyArIFwiKTt0cmFuc2Zvcm06cm90YXRlWSh2YXIoLS1hbmdsZSkpO3RyYW5zaXRpb246dHJhbnNmb3JtIDFzfS5yb3VuZHMtY29udGFpbmVyIHB7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MnJlbTt0ZXh0LWFsaWduOmNlbnRlcjt0cmFuc2Zvcm06cm90YXRlWSh2YXIoLS1hbmdsZSkpO3RyYW5zaXRpb246aW5oZXJpdH0uc2hpcHMtcmVtYWluZWQtY29udGFpbmVyLC5zaGlwcy1yZW1haW5lZC1jb250YWluZXItcmVzcG9uc2l2ZXtiYWNrZ3JvdW5kLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gKyBcIik7YmFja2dyb3VuZC1yZXBlYXQ6cmVwZWF0LXk7cGFkZGluZzoycmVtIDNyZW0gMXJlbTtkaXNwbGF5OmlubGluZS1ncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoMywgMWZyKTtnYXA6MXJlbTtncmlkLXRlbXBsYXRlLWFyZWFzOlxcXCJzaGlwcyBzaGlwcyBzaGlwc1xcXCIgXFxcIi4gcGFnaW5hdGlvbiBpbmZvXFxcIjthbGlnbi1pdGVtczpjZW50ZXI7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTttYXgtd2lkdGg6Y2FsYygzNTBweCArIDIwJSl9LnNoaXBzLXJlbWFpbmVkLWNvbnRhaW5lciAuc2hpcHMsLnNoaXBzLXJlbWFpbmVkLWNvbnRhaW5lci1yZXNwb25zaXZlIC5zaGlwc3tncmlkLWFyZWE6c2hpcHM7ZGlzcGxheTpmbGV4O2dhcDoycmVtO2hlaWdodDo0NXB4O292ZXJmbG93OmhpZGRlbjtmb250LXNpemU6MnJlbTtmb250LXdlaWdodDpib2xkO3Njcm9sbC1iZWhhdmlvcjpzbW9vdGh9LnNoaXBzLXJlbWFpbmVkLWNvbnRhaW5lciAuc2hpcHMgLnNoaXAtY29udGFpbmVyLC5zaGlwcy1yZW1haW5lZC1jb250YWluZXItcmVzcG9uc2l2ZSAuc2hpcHMgLnNoaXAtY29udGFpbmVye2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7Z2FwOjEwcHh9LnNoaXBzLXJlbWFpbmVkLWNvbnRhaW5lciAuc2hpcHMgLnNoaXAtY29udGFpbmVyOm5vdCg6Zmlyc3QtY2hpbGQpOjpiZWZvcmUsLnNoaXBzLXJlbWFpbmVkLWNvbnRhaW5lci1yZXNwb25zaXZlIC5zaGlwcyAuc2hpcC1jb250YWluZXI6bm90KDpmaXJzdC1jaGlsZCk6OmJlZm9yZXtjb250ZW50OlxcXCJcXFwiO3dpZHRoOjNweDtoZWlnaHQ6MTAwJTtiYWNrZ3JvdW5kLWNvbG9yOiNmZmZ9LnNoaXBzLXJlbWFpbmVkLWNvbnRhaW5lciAucGFnaW5hdGlvbiwuc2hpcHMtcmVtYWluZWQtY29udGFpbmVyLXJlc3BvbnNpdmUgLnBhZ2luYXRpb257Z3JpZC1hcmVhOnBhZ2luYXRpb247anVzdGlmeS1zZWxmOmNlbnRlcjthbGlnbi1zZWxmOmNlbnRlcn0uc2hpcHMtcmVtYWluZWQtY29udGFpbmVyIC5pbmZvLC5zaGlwcy1yZW1haW5lZC1jb250YWluZXItcmVzcG9uc2l2ZSAuaW5mb3tncmlkLWFyZWE6aW5mbztqdXN0aWZ5LXNlbGY6ZW5kO21hcmdpbi1yaWdodDotMnJlbTt6LWluZGV4OjJ9LnNoaXBzLXJlbWFpbmVkLWNvbnRhaW5lcjo6YmVmb3JlLC5zaGlwcy1yZW1haW5lZC1jb250YWluZXItcmVzcG9uc2l2ZTo6YmVmb3Jle2NvbnRlbnQ6XFxcIlNoaXBzIFJlbWFpbmVkXFxcIjtib3JkZXItc3R5bGU6ZGFzaGVkO3dpZHRoOjA7aGVpZ2h0OjA7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MnJlbTtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsLjgpO292ZXJmbG93OmhpZGRlbjt6LWluZGV4OjE7b3BhY2l0eTowJX0uc2hpcHMtcmVtYWluZWQtY29udGFpbmVyLmhlbHA6OmJlZm9yZSwuaGVscC5zaGlwcy1yZW1haW5lZC1jb250YWluZXItcmVzcG9uc2l2ZTo6YmVmb3Jle29wYWNpdHk6MTAwJTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3RyYW5zaXRpb246b3BhY2l0eSAuM3N9QG1lZGlhKG1pbi13aWR0aDogNTc1cHgpYW5kIChtYXgtd2lkdGg6IDExMDBweCl7LnNoaXBzLXJlbWFpbmVkLWNvbnRhaW5lci1yZXNwb25zaXZle2FsaWduLXNlbGY6c3RyZXRjaDtncmlkLXRlbXBsYXRlLXJvd3M6MWZyIGF1dG8gYXV0bztncmlkLXRlbXBsYXRlLWNvbHVtbnM6YXV0bztncmlkLXRlbXBsYXRlLWFyZWFzOlxcXCJzaGlwc1xcXCIgXFxcInBhZ2luYXRpb25cXFwiIFxcXCJpbmZvXFxcIn0uc2hpcHMtcmVtYWluZWQtY29udGFpbmVyLXJlc3BvbnNpdmUgLnNoaXBze2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpzdHJldGNoO2hlaWdodDoxMDAlfS5zaGlwcy1yZW1haW5lZC1jb250YWluZXItcmVzcG9uc2l2ZSAuc2hpcHMgLnNoaXAtY29udGFpbmVye2Rpc3BsYXk6Z3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6YXV0byBhdXRvfS5zaGlwcy1yZW1haW5lZC1jb250YWluZXItcmVzcG9uc2l2ZSAuc2hpcHMgLnNoaXAtY29udGFpbmVyIHB7anVzdGlmeS1zZWxmOmVuZH0uc2hpcHMtcmVtYWluZWQtY29udGFpbmVyLXJlc3BvbnNpdmUgLnNoaXBzIC5zaGlwLWNvbnRhaW5lcjpub3QoOmZpcnN0LWNoaWxkKTo6YmVmb3Jle2dyaWQtY29sdW1uLXN0YXJ0OjE7Z3JpZC1jb2x1bW4tZW5kOjM7d2lkdGg6MTAwJTtoZWlnaHQ6M3B4fS5zaGlwcy1yZW1haW5lZC1jb250YWluZXItcmVzcG9uc2l2ZSAucGFnaW5hdGlvbntmbGV4LWRpcmVjdGlvbjpjb2x1bW47Z2FwOjEwcHggIWltcG9ydGFudH0uc2hpcHMtcmVtYWluZWQtY29udGFpbmVyLXJlc3BvbnNpdmUgLnBhZ2luYXRpb24gLmFycm93LWNvbnRhaW5lcnt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKX19LnBhdXNlLWNvbnRhaW5lcntiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsLjc1KTt6LWluZGV4Oi0xO29wYWNpdHk6MCU7dHJhbnNpdGlvbjphbGwgLjI1cyBlYXNlLWlufS5wYXVzZS1jb250YWluZXIuc2VtaS1hY3RpdmV7ei1pbmRleDozO29wYWNpdHk6MzAlO3RyYW5zaXRpb24tcHJvcGVydHk6b3BhY2l0eX0ucGF1c2UtY29udGFpbmVyLmFjdGl2ZXt6LWluZGV4OjM7b3BhY2l0eTo4MCU7dHJhbnNpdGlvbi1wcm9wZXJ0eTpvcGFjaXR5fS5wYXVzZS1jb250YWluZXIuZnJvbnR7ei1pbmRleDoyMH0uY291bnRlciwuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLndpZHRoLWNvdW50ZXIsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC5oZWlnaHQtY291bnRlcntnYXA6MS41cmVtO2ZvbnQtd2VpZ2h0OmJvbGR9LmNvdW50ZXIgLm1pbnVzLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAud2lkdGgtY291bnRlciAubWludXMsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC5oZWlnaHQtY291bnRlciAubWludXMsLmNvdW50ZXIgLnBsdXMsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC53aWR0aC1jb3VudGVyIC5wbHVzLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAuaGVpZ2h0LWNvdW50ZXIgLnBsdXN7cGFkZGluZzouMjVyZW07bGluZS1oZWlnaHQ6MTtib3JkZXI6bm9uZTtjdXJzb3I6cG9pbnRlcn0uY291bnRlciAubWludXMuZGlzYWJsZWQsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC53aWR0aC1jb3VudGVyIC5taW51cy5kaXNhYmxlZCwuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLmhlaWdodC1jb3VudGVyIC5taW51cy5kaXNhYmxlZCwuY291bnRlciAucGx1cy5kaXNhYmxlZCwuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLndpZHRoLWNvdW50ZXIgLnBsdXMuZGlzYWJsZWQsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC5oZWlnaHQtY291bnRlciAucGx1cy5kaXNhYmxlZHtjdXJzb3I6ZGVmYXVsdDtwb2ludGVyLWV2ZW50czpub25lO3Bvc2l0aW9uOnJlbGF0aXZlfS5jb3VudGVyIC5taW51cy5kaXNhYmxlZDo6YmVmb3JlLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAud2lkdGgtY291bnRlciAubWludXMuZGlzYWJsZWQ6OmJlZm9yZSwuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLmhlaWdodC1jb3VudGVyIC5taW51cy5kaXNhYmxlZDo6YmVmb3JlLC5jb3VudGVyIC5wbHVzLmRpc2FibGVkOjpiZWZvcmUsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC53aWR0aC1jb3VudGVyIC5wbHVzLmRpc2FibGVkOjpiZWZvcmUsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC5oZWlnaHQtY291bnRlciAucGx1cy5kaXNhYmxlZDo6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXCI7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLC4yNSl9LmNvdW50ZXIgLm1pbnVzIHN2ZywuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLndpZHRoLWNvdW50ZXIgLm1pbnVzIHN2ZywuZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLmhlaWdodC1jb3VudGVyIC5taW51cyBzdmcsLmNvdW50ZXIgLnBsdXMgc3ZnLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAud2lkdGgtY291bnRlciAucGx1cyBzdmcsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC5oZWlnaHQtY291bnRlciAucGx1cyBzdmd7Y29sb3I6I2ZmZjt3aWR0aDozMHB4O2hlaWdodDozMHB4fS5jb3VudGVyIC5udW1iZXIsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC53aWR0aC1jb3VudGVyIC5udW1iZXIsLmdyaWQtc2l6ZS1tb2RhbCBzZWN0aW9uLnNlY3Rpb24tZ3JpZC1zaXplIC5oZWlnaHQtY291bnRlciAubnVtYmVye2ZvbnQtc2l6ZTpjYWxjKDFlbSArIC41cmVtKX0ucGFnaW5hdGlvbntnYXA6MTBweH0ucGFnaW5hdGlvbiAuYXJyb3ctY29udGFpbmVye2JvcmRlcjpub25lO2N1cnNvcjpwb2ludGVyO2NvbG9yOiNmZmZ9LnBhZ2luYXRpb24gLmFycm93LWNvbnRhaW5lci5kaXNhYmxlZHtjdXJzb3I6ZGVmYXVsdDtwb2ludGVyLWV2ZW50czpub25lfS5wYWdpbmF0aW9uIC5hcnJvdy1jb250YWluZXIuZGlzYWJsZWQgc3Zne2N1cnNvcjpkZWZhdWx0O2NvbG9yOiNjY2N9LnBhZ2luYXRpb24gLmFycm93LWNvbnRhaW5lci1idXR0b257cGFkZGluZzowIDFyZW19LnNoaXB7ZGlzcGxheTpmbGV4fS5zaGlwLnZlcnRpY2FsOm5vdCguaGlkZGVuKXtmbGV4LWRpcmVjdGlvbjpjb2x1bW59LnNoaXAudmVydGljYWw6bm90KC5oaWRkZW4pIC5zaGlwLWJsb2NrOm5vdCg6bGFzdC1jaGlsZCl7Ym9yZGVyLWJvdHRvbS13aWR0aDowfS5zaGlwLnZlcnRpY2FsOm5vdCguaGlkZGVuKSAuc2hpcC1ibG9jazpub3QoOmZpcnN0LWNoaWxkKXtib3JkZXItdG9wLXdpZHRoOjB9LnNoaXAuaG9yaXpvbnRhbDpub3QoLmhpZGRlbil7ZmxleC1kaXJlY3Rpb246cm93fS5zaGlwLmhvcml6b250YWw6bm90KC5oaWRkZW4pIC5zaGlwLWJsb2NrOm5vdCg6bGFzdC1jaGlsZCl7Ym9yZGVyLXJpZ2h0LXdpZHRoOjB9LnNoaXAuaG9yaXpvbnRhbDpub3QoLmhpZGRlbikgLnNoaXAtYmxvY2s6bm90KDpmaXJzdC1jaGlsZCl7Ym9yZGVyLWxlZnQtd2lkdGg6MH0uc2hpcC5kZXN0cm95ZWQgLnNoaXAtYmxvY2t7Ym9yZGVyLWNvbG9yOiNmNTU2MmV9LnNoaXAtY29tcHJlc3NlZHtnYXA6LjI1cmVtfS5zaGlwLWNvbXByZXNzZWQgLnBhcmVudGhlc2lze2Rpc3BsYXk6aW5saW5lLWJsb2NrO2ZvbnQtc2l6ZToyLjc1cmVtfS5nYW1lLXR5cGUtbW9kYWx7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoNTAlKSAhaW1wb3J0YW50fS5nYW1lLXR5cGUtbW9kYWwgLm1vZGFsLWJvZHkgI2Zvcm0tZ2FtZS10eXBle2dhcDoxMHJlbX1AbWVkaWEobWF4LXdpZHRoOiA1NzVweCl7LmdhbWUtdHlwZS1tb2RhbCAubW9kYWwtYm9keSAjZm9ybS1nYW1lLXR5cGV7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2dhcDozcmVtfX0uZ3JpZC1zaXplLW1vZGFsIC5tb2RhbC1ib2R5e21pbi13aWR0aDozNXZ3fUBtZWRpYShtYXgtd2lkdGg6IDExMDBweCl7LmdyaWQtc2l6ZS1tb2RhbCAubW9kYWwtYm9keXttaW4td2lkdGg6NTB2d319QG1lZGlhKG1heC13aWR0aDogNzY4cHgpey5ncmlkLXNpemUtbW9kYWwgLm1vZGFsLWJvZHl7bWluLXdpZHRoOjcwdnd9fS5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZXtkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOjFmciAxZnI7Z3JpZC10ZW1wbGF0ZS1hcmVhczpcXFwiaGVhZGVyIGhlYWRlclxcXCIgXFxcIndpZHRoIGhlaWdodFxcXCIgXFxcIndpZHRoLWNvdW50ZXIgaGVpZ2h0LWNvdW50ZXJcXFwiIFxcXCJib2FyZCBib2FyZFxcXCI7anVzdGlmeS1pdGVtczpjZW50ZXI7cm93LWdhcDozcmVtfS5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSBoZWFkZXJ7Z3JpZC1hcmVhOmhlYWRlcn0uZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLndpZHRoLWxhYmVse2dyaWQtYXJlYTp3aWR0aH0uZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLmhlaWdodC1sYWJlbHtncmlkLWFyZWE6aGVpZ2h0fS5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAud2lkdGgtY291bnRlcntncmlkLWFyZWE6d2lkdGgtY291bnRlcn0uZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLmhlaWdodC1jb3VudGVye2dyaWQtYXJlYTpoZWlnaHQtY291bnRlcn0uZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLndpZHRoLWxhYmVsLC5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAuaGVpZ2h0LWxhYmVse2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOV9fXyArIFwiKTtwYWRkaW5nLWxlZnQ6MS4zcmVtO3BhZGRpbmctcmlnaHQ6MS4zcmVtfS5ncmlkLXNpemUtbW9kYWwgc2VjdGlvbi5zZWN0aW9uLWdyaWQtc2l6ZSAuYm9hcmR7Z3JpZC1hcmVhOmJvYXJkO2hlaWdodDozNTBweH0uZ3JpZC1zaXplLW1vZGFsIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUgLmJvYXJkIC5ib2FyZC1ibG9ja3tjdXJzb3I6ZGVmYXVsdH0ucnVsZXMtbW9kYWwgLm1vZGFsLWJvZHl7bWF4LXdpZHRoOjQwdnd9QG1lZGlhKG1heC13aWR0aDogMTEwMHB4KXsucnVsZXMtbW9kYWwgLm1vZGFsLWJvZHl7bWF4LXdpZHRoOjYwdnd9fUBtZWRpYShtYXgtd2lkdGg6IDExMDBweCl7LnJ1bGVzLW1vZGFsIC5tb2RhbC1ib2R5e21heC13aWR0aDo1MHZ3fX1AbWVkaWEobWF4LXdpZHRoOiA3NjhweCl7LnJ1bGVzLW1vZGFsIC5tb2RhbC1ib2R5e21heC13aWR0aDo3MHZ3fX0uc2VjdGlvbi1nYW1lcGxheXtwYWRkaW5nLXRvcDowICFpbXBvcnRhbnR9LnNlY3Rpb24tZ2FtZXBsYXkgb2wsLnNlY3Rpb24tZ2FtZXBsYXkgdWx7bWFyZ2luLWxlZnQ6MnJlbTtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2dhcDoycmVtfS5zZWN0aW9uLWdhbWVwbGF5IG9se2xpc3Qtc3R5bGUtdHlwZTpkZWNpbWFsfS5zZWN0aW9uLWdhbWVwbGF5IG9sIHVse21hcmdpbi10b3A6MnJlbTtnYXA6MXJlbX0uc2VjdGlvbi1nYW1lcGxheSB1bHtsaXN0LXN0eWxlLXR5cGU6ZGlzY30uc2hpcHMtY2hvb3NpbmctbW9kYWwgLm1vZGFsLWJvZHkgLnNoaXBze2Rpc3BsYXk6ZmxleDtvdmVyZmxvdzpoaWRkZW47cGFkZGluZy10b3A6LjI1cmVtfS5zaGlwcy1jaG9vc2luZy1tb2RhbCAubW9kYWwtYm9keSAuc2hpcHMgLnBhZ2VzLWNvbnRhaW5lcntkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7cmlnaHQ6MDt0cmFuc2l0aW9uOnJpZ2h0IC4zcyBsaW5lYXI7d2lkdGg6MzB2d31AbWVkaWEobWF4LXdpZHRoOiAxMTAwcHgpey5zaGlwcy1jaG9vc2luZy1tb2RhbCAubW9kYWwtYm9keSAuc2hpcHMgLnBhZ2VzLWNvbnRhaW5lcnt3aWR0aDo0MHZ3fX1AbWVkaWEobWF4LXdpZHRoOiA3NjhweCl7LnNoaXBzLWNob29zaW5nLW1vZGFsIC5tb2RhbC1ib2R5IC5zaGlwcyAucGFnZXMtY29udGFpbmVye3dpZHRoOjYwdnd9fUBtZWRpYShtYXgtd2lkdGg6IDU3NXB4KXsuc2hpcHMtY2hvb3NpbmctbW9kYWwgLm1vZGFsLWJvZHkgLnNoaXBzIC5wYWdlcy1jb250YWluZXJ7d2lkdGg6ODB2d319LnNoaXBzLWNob29zaW5nLW1vZGFsIC5tb2RhbC1ib2R5IC5zaGlwcyAucGFnZXtmbGV4LXNocmluazowO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Z2FwOjJyZW07cGFkZGluZy1sZWZ0OjIuNXJlbTt3aWR0aDoxMDAlfS5zaGlwcy1jaG9vc2luZy1tb2RhbCAubW9kYWwtYm9keSAuc2hpcHMgLnNoaXAtY29udGFpbmVye2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn0uc2hpcHMtY2hvb3NpbmctbW9kYWwgLm1vZGFsLWJvZHkgLnNoaXBzIC5zaGlwLWNvbnRhaW5lciAuY291bnR7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6Y2FsYygxZW0gKyAuMjVyZW0pfS5zaGlwcy1jaG9vc2luZy1tb2RhbCAubW9kYWwtYm9keSAuc2hpcHMgLnNoaXAtY29udGFpbmVyIC5zaGlwLWJsb2Nre3dpZHRoOjMwcHg7aGVpZ2h0OjMwcHh9LnNoaXBzLXBsYWNpbmctbW9kYWwgLmZvcm0tcGxheWVyLW5hbWUgaW5wdXR7d2lkdGg6MTAwJX0uc2hpcHMtcGxhY2luZy1tb2RhbCAuZm9ybS1wbGF5ZXItbmFtZSBpbnB1dDpmb2N1cytsYWJlbDo6YmVmb3JlLC5zaGlwcy1wbGFjaW5nLW1vZGFsIC5mb3JtLXBsYXllci1uYW1lIGlucHV0Om5vdCg6cGxhY2Vob2xkZXItc2hvd24pK2xhYmVsOjpiZWZvcmV7Y29udGVudDpcXFwiUGxheWVyIG5hbWVcXFwifS5zaGlwcy1wbGFjaW5nLW1vZGFsIC5mb3JtLXBsYXllci1uYW1lIGxhYmVsOjpiZWZvcmV7Y29udGVudDpcXFwiUGxheWVyIG5hbWUgKE9wdGlvbmFsKVxcXCJ9LnNoaXBzLXBsYWNpbmctbW9kYWwgc2VjdGlvbi5wbGFjZS1zaGlwc3twYWRkaW5nLWxlZnQ6MDtwYWRkaW5nLXJpZ2h0OjB9LnNoaXBzLXBsYWNpbmctbW9kYWwgc2VjdGlvbi5wbGFjZS1zaGlwcyAuYXV0by1wbGFjZS1jb250YWluZXJ7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2dhcDoxcmVtfS5zaGlwcy1wbGFjaW5nLW1vZGFsIHNlY3Rpb24ucGxhY2Utc2hpcHMgLmF1dG8tcGxhY2UtY29udGFpbmVyIC5idG4tYXV0by1wbGFjZXttYXJnaW4tdG9wOjJyZW19LnNoaXBzLXBsYWNpbmctbW9kYWwgc2VjdGlvbi5wbGFjZS1zaGlwcyAuYXV0by1wbGFjZS1jb250YWluZXIgLnRleHQtZXJyb3J7Zm9udC13ZWlnaHQ6Ym9sZH0uc2hpcHMtcGxhY2luZy1tb2RhbCAuc2hpcHN7YmFja2dyb3VuZC1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF85X19fICsgXCIpO2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLXBvc2l0aW9uOmNlbnRlcjtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7cGFkZGluZzoycmVtIDA7b3ZlcmZsb3c6aGlkZGVuO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Z2FwOjIuNXJlbX0uc2hpcHMtcGxhY2luZy1tb2RhbCAuc2hpcHMgLnBhZ2VzLWNvbnRhaW5lcntkaXNwbGF5OmZsZXg7bWF4LXdpZHRoOjUwMHB4O3Bvc2l0aW9uOnJlbGF0aXZlO3JpZ2h0OjA7dHJhbnNpdGlvbjpyaWdodCAuM3MgbGluZWFyfS5zaGlwcy1wbGFjaW5nLW1vZGFsIC5zaGlwcyAucGFnZXMtY29udGFpbmVyIC5wYWdle3dpZHRoOjEwMCU7ZmxleC1zaHJpbms6MDtkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOnJlcGVhdCg0LCAxZnIpO2p1c3RpZnktaXRlbXM6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcn0uc2hpcHMtcGxhY2luZy1tb2RhbCAuc2hpcHMgLnBhZ2VzLWNvbnRhaW5lciAucGFnZSAuc2hpcC1jb250YWluZXJ7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpjZW50ZXI7Z2FwOjFyZW19LnNoaXBzLXBsYWNpbmctbW9kYWwgLnNoaXBzIC5wYWdlcy1jb250YWluZXIgLnBhZ2UgLnNoaXAtY29udGFpbmVyIC5zaGlwLWJsb2Nre2N1cnNvcjpwb2ludGVyfS5zaGlwcy1wbGFjaW5nLW1vZGFsIC5zaGlwcyAucGFnZXMtY29udGFpbmVyIC5wYWdlIC5zaGlwLWNvbnRhaW5lciAuc2hpcC1jb21wcmVzc2VkLmFjdGl2ZSAuc2hpcC1ibG9ja3tvdXRsaW5lLW9mZnNldDotMXB4fS5zaGlwcy1wbGFjaW5nLW1vZGFsIC5ib2FyZC1jb250YWluZXJ7ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczoxZnIgYXV0bztqdXN0aWZ5LWl0ZW1zOmNlbnRlcjtnYXA6MjBweDtwYWRkaW5nOjAgMjBweH1AbWVkaWEobWF4LXdpZHRoOiA1NzVweCl7LnNoaXBzLXBsYWNpbmctbW9kYWwgLmJvYXJkLWNvbnRhaW5lcntncmlkLXRlbXBsYXRlLWNvbHVtbnM6YXV0b319LnNoaXBzLXBsYWNpbmctbW9kYWwgLmJvYXJkLWNvbnRhaW5lciAuYm9hcmR7cG9zaXRpb246cmVsYXRpdmV9LnNoaXBzLXBsYWNpbmctbW9kYWwgLmJvYXJkLWNvbnRhaW5lciAuYm9hcmQgLnNoaXB7cG9zaXRpb246YWJzb2x1dGU7Z2FwOjB9LnNoaXBzLXBsYWNpbmctbW9kYWwgLmJvYXJkLWNvbnRhaW5lciAuYm9hcmQgLnNoaXAudGVtcC1zaGlwe3BvaW50ZXItZXZlbnRzOm5vbmU7b3BhY2l0eTo0MCV9LnNoaXBzLXBsYWNpbmctbW9kYWwgLmJvYXJkLWNvbnRhaW5lciAuYm9hcmQgLnNoaXAgLnNoaXAtYmxvY2s6aG92ZXI6OmFmdGVye2NvbnRlbnQ6bm9uZX0uc2hpcHMtcGxhY2luZy1tb2RhbCAuYm9hcmQtY29udGFpbmVyIC5wbGFjZS1vcHRpb25ze2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OnNwYWNlLWV2ZW5seTthbGlnbi1pdGVtczpjZW50ZXI7Z2FwOjNyZW19QG1lZGlhKG1heC13aWR0aDogNTc1cHgpey5zaGlwcy1wbGFjaW5nLW1vZGFsIC5ib2FyZC1jb250YWluZXIgLnBsYWNlLW9wdGlvbnN7d2lkdGg6MTAwJTtmbGV4LWRpcmVjdGlvbjpyb3d9fS5zaGlwcy1wbGFjaW5nLW1vZGFsIC5ib2FyZC1jb250YWluZXIgLnBsYWNlLW9wdGlvbnMgYnV0dG9ue3BhZGRpbmc6MXJlbSAycmVtfS5zaGlwcy1wbGFjaW5nLW1vZGFsIC5ib2FyZC1jb250YWluZXIgLnBsYWNlLW9wdGlvbnMgLmJ0bi1yZW1vdmV7cGFkZGluZy10b3A6MS4xNXJlbTtwYWRkaW5nLWJvdHRvbToxLjE1cmVtfS5nYW1lLWNvbnRhaW5lcntmbGV4LWdyb3c6MTtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO3Bvc2l0aW9uOnJlbGF0aXZlfS5nYW1lLWFyZW5he2ZsZXgtZ3JvdzoxO2Rpc3BsYXk6Z3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6MWZyIGF1dG8gMWZyO3Bvc2l0aW9uOnJlbGF0aXZlfUBtZWRpYShtYXgtd2lkdGg6IDExMDBweCl7LmdhbWUtYXJlbmF7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOmF1dG99fS5wbGF5ZXItYXJlYXtiYWNrZ3JvdW5kLWltYWdlOnVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzVfX18gKyBcIik7YmFja2dyb3VuZC1zaXplOmNvdmVyO2JhY2tncm91bmQtcG9zaXRpb246Y2VudGVyO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDtvdmVyZmxvdzpoaWRkZW47ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtcm93czoxMjBweCBhdXRvIGF1dG87Z3JpZC10ZW1wbGF0ZS1hcmVhczpcXFwidHVybi1sYWJlbFxcXCIgXFxcImJvYXJkXFxcIiBcXFwic2hpcHNcXFwiO2p1c3RpZnktaXRlbXM6Y2VudGVyO2hlaWdodDoxMDAlO3BhZGRpbmc6MCA0cmVtO3Bvc2l0aW9uOnJlbGF0aXZlfUBtZWRpYShtaW4td2lkdGg6IDU3NXB4KWFuZCAobWF4LXdpZHRoOiAxMTAwcHgpey5wbGF5ZXItYXJlYXtwYWRkaW5nOjA7Z3JpZC10ZW1wbGF0ZS1yb3dzOjEyMHB4IGF1dG87Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOmF1dG8gMWZyO2dyaWQtdGVtcGxhdGUtYXJlYXM6XFxcInNoaXBzIHR1cm4tbGFiZWxcXFwiIFxcXCJzaGlwcyBib2FyZFxcXCJ9fUBtZWRpYShtYXgtd2lkdGg6IDExMDBweCl7LnBsYXllci1hcmVhe3Jvdy1nYXA6M3JlbX19LnBsYXllci1hcmVhIC50dXJuLXJvd3t3aWR0aDoxMDAlO2hlaWdodDoxMDAlfS5wbGF5ZXItYXJlYSAudHVybi1yb3cgLnR1cm4tY29udGFpbmVye2JvdHRvbToxMDAlO3BhZGRpbmctdG9wOjEuNXJlbTtwYWRkaW5nLWJvdHRvbToxLjVyZW07d2lkdGg6MTAwJTttYXgtd2lkdGg6MzAwcHh9LnBsYXllci1hcmVhIC50dXJuLXJvdyAudHVybi1jb250YWluZXIgcHtmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZToyLjVyZW07dGV4dC1hbGlnbjpjZW50ZXJ9LnBsYXllci1hcmVhIC50dXJuLXJvdyAudHVybi1jb250YWluZXIuYWN0aXZle2JvdHRvbTpjYWxjKDEwMCUgLSA3MHB4IC0gNTBweCl9LnBsYXllci1hcmVhIC5ib2FyZHttYXJnaW46YXV0bztncmlkLWFyZWE6Ym9hcmQ7cG9zaXRpb246cmVsYXRpdmV9QG1lZGlhKG1pbi13aWR0aDogNTc1cHgpYW5kIChtYXgtd2lkdGg6IDExMDBweCl7LnBsYXllci1hcmVhIC5ib2FyZHttYXJnaW4tYm90dG9tOjJyZW19fS5wbGF5ZXItYXJlYSAuYm9hcmQgLnNoaXB7cG9pbnRlci1ldmVudHM6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZX0ucGxheWVyLWFyZWEgLnNoaXBzLXJlbWFpbmVkLWNvbnRhaW5lci1yZXNwb25zaXZle21hcmdpbi10b3A6YXV0bztncmlkLWFyZWE6c2hpcHN9QG1lZGlhKG1pbi13aWR0aDogNTc1cHgpYW5kIChtYXgtd2lkdGg6IDExMDBweCl7LnBsYXllci1hcmVhIC5zaGlwcy1yZW1haW5lZC1jb250YWluZXItcmVzcG9uc2l2ZXttYXJnaW4tdG9wOjB9fS5wbGF5ZXItYXJlYSAuc2hpcHMtcmVtYWluZWQtY29udGFpbmVyLXJlc3BvbnNpdmUgLnBhZ2luYXRpb257Z2FwOjQwcHh9LnBsYXllci1hcmVhIC5zY29yZS1jb250YWluZXJ7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2dhcDoxLjVyZW07Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6NHJlbTt6LWluZGV4Oi0xO2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwuNzUpO3RyYW5zaXRpb246b3BhY2l0eSAuMjVzIGVhc2UtaW47b3BhY2l0eTowfS5wbGF5ZXItYXJlYSAuc2NvcmUtY29udGFpbmVyIC5uYW1le2ZvbnQtc2l6ZTo3cmVtfS5wbGF5ZXItYXJlYSAuc2NvcmUtY29udGFpbmVyLmFjdGl2ZXt6LWluZGV4OjQ7b3BhY2l0eToxMDAlfS5wbGF5ZXItYXJlYSAuZGFya2VuaW5ne3RyYW5zaXRpb246b3BhY2l0eSAuMjVzIGVhc2UtaW47b3BhY2l0eTowO2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwuNSk7ei1pbmRleDotMX0ucGxheWVyLWFyZWEgLmRhcmtlbmluZy5hY3RpdmV7b3BhY2l0eTo0NSU7ei1pbmRleDozfS5taWRkbGUtYmlzZWN0b3J7YmFja2dyb3VuZC1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMF9fXyArIFwiKTtwYWRkaW5nOjFyZW0gM3JlbX0ubmV4dC1nYW1lLWNvbnRhaW5lciwuc3RhcnQtZ2FtZS1jb250YWluZXJ7cGFkZGluZzowO2xlZnQ6NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgMCk7Ym90dG9tOjEzMCU7dHJhbnNpdGlvbi1wcm9wZXJ0eTpib3R0b20sdHJhbnNmb3JtO3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmVhc2Utb3V0O3RyYW5zaXRpb24tZHVyYXRpb246LjVzO3otaW5kZXg6NX0ubmV4dC1nYW1lLWNvbnRhaW5lci5hY3RpdmUsLnN0YXJ0LWdhbWUtY29udGFpbmVyLmFjdGl2ZXtib3R0b206NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgNTAlKX0ubmV4dC1nYW1lLWNvbnRhaW5lciBidXR0b24sLnN0YXJ0LWdhbWUtY29udGFpbmVyIGJ1dHRvbntwYWRkaW5nOjIuNXJlbSA0cmVtO2ZvbnQtc2l6ZToyLjVyZW07Zm9udC13ZWlnaHQ6Ym9sZH1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc2Fzcy91dGlsaXRpZXMvX2JvcmRlcnMuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3Nhc3MvdmFyaWFibGVzL19jb2xvcnMuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3Nhc3MvdXRpbGl0aWVzL19idXR0b25zLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zYXNzL3V0aWxpdGllcy9fY29udGFpbmVycy5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc2Fzcy9taXhpbnMvX2ltYWdlcy5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc2Fzcy91dGlsaXRpZXMvX2Rpc3BsYXkuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3Nhc3MvdXRpbGl0aWVzL19mb3Jtcy5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc2Fzcy91dGlsaXRpZXMvX21vZGFscy5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc2Fzcy91dGlsaXRpZXMvX3NlcGVyYXRvcnMuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3Nhc3MvdXRpbGl0aWVzL190ZXh0LnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zYXNzL3V0aWxpdGllcy9fdmlzaWJsaXR5LnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zYXNzL2xheW91dC9fZm9ybXMuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3Nhc3MvbGF5b3V0L19nZW5lcmFsLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zYXNzL2NvbXBvbmVudHMvX2Jsb2Nrcy5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc2Fzcy92YXJpYWJsZXMvX2RpbWVuc2lvbnMuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3Nhc3MvY29tcG9uZW50cy9fYm9hcmQuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3Nhc3MvY29tcG9uZW50cy9fY29udGFpbmVycy5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc2Fzcy9jb21wb25lbnRzL19jb3VudGVyLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zYXNzL2NvbXBvbmVudHMvX3BhZ2luYXRpb24uc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3Nhc3MvY29tcG9uZW50cy9fc2hpcHMuc2Nzc1wiLFwid2VicGFjazovLy4vc3JjL3Nhc3MvY29tcG9uZW50cy9tb2RhbHMvZ2FtZS10eXBlLW1vZGFsLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zYXNzL2NvbXBvbmVudHMvbW9kYWxzL2dyaWQtc2l6ZS1tb2RhbC5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc2Fzcy9jb21wb25lbnRzL21vZGFscy9ydWxlcy1tb2RhbC5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc2Fzcy9jb21wb25lbnRzL21vZGFscy9zaGlwcy1jaG9vc2luZy1tb2RhbC5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc2Fzcy9jb21wb25lbnRzL21vZGFscy9zaGlwcy1wbGFjaW5nLW1vZGFsLnNjc3NcIixcIndlYnBhY2s6Ly8uL3NyYy9zYXNzL3BhZ2VzL2luZGV4LnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQ0Esb3NCQUNJLGlCQUFBLENBQ0EsbUJBQUEsQ0FHSix1SEFDSSxpQkFBQSxDQUNBLG1CQUFBLENBR0osdU1BQ0ksaUJBQUEsQ0FDQSxtQkFBQSxDQUdKLDhqQkFFSSxxQkNsQkcsQ0RxQlAsdUhBRUkscUJDbkJLLENEd0JULHF5QkFDSSxnQkFBQSxDQUNBLGtCQUFBLENBR0osZ0hBQ0ksZ0JBQUEsQ0FDQSxrQkFBQSxDQUdKLDRwQkFFSSxvQkN0Q0csQ0R5Q1AsMkhBRUksaUJBQUEsQ0FHSiwycEJBQ0ksbUJBQUEsQ0FHSixjQUNJLG9CQUFBLENBR0osUUFDSSxrQkFBQSxDQUdKLDhCQUNJLG9CQUFBLENFN0RKLE9BQ0ksaUJBQUEsQ0FDQSw4QkFBQSxDQUNBLFdBQUEsQ0FDQSxhQUFBLENBT0osaUJBQ0ksaUJBQUEsQ0FDQSxlQUFBLENBQ0EseUJBQ0ksVUFBQSxDQUVBLCtCQUFBLENDakJSLHNNQUNJLGlCQUFBLENBQ0EsNEJBQUEsQ0FDQSxraUJDRkEsd0RBQUEsQ0FDQSx5QkRH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QUNBLG1DQUFBLENBQ0EsdUJBQUEsQ0FDQSxTQUFBLENBQ0EseURBQ0ksVUFBQSxDQUNBLDhCQUFBLENBRUoseURBQ0ksbUJBQUEsQ0FDQSxnQkFBQSxDQUNBLGdCQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qIHx8T3V0bGluZXMgKi9cXHJcXG4ub3V0bGluZS1zbWFsbCB7XFxyXFxuICAgIG91dGxpbmUtd2lkdGg6IDJweDtcXHJcXG4gICAgb3V0bGluZS1zdHlsZTogc29saWQ7XFxyXFxufVxcclxcblxcclxcbi5vdXRsaW5lLW1lZGl1bSB7XFxyXFxuICAgIG91dGxpbmUtd2lkdGg6IDNweDtcXHJcXG4gICAgb3V0bGluZS1zdHlsZTogc29saWQ7XFxyXFxufVxcclxcblxcclxcbi5vdXRsaW5lLXRoaWNrIHtcXHJcXG4gICAgb3V0bGluZS13aWR0aDogNHB4O1xcclxcbiAgICBvdXRsaW5lLXN0eWxlOiBzb2xpZDtcXHJcXG59XFxyXFxuXFxyXFxuLm91dGxpbmUtYmx1ZSB7XFxyXFxuICAgIEBleHRlbmQgLm91dGxpbmUtc21hbGw7XFxyXFxuICAgIG91dGxpbmUtY29sb3I6ICRibHVlO1xcclxcbn1cXHJcXG5cXHJcXG4ub3V0bGluZS1vcmFuZ2Uge1xcclxcbiAgICBAZXh0ZW5kIC5vdXRsaW5lLXNtYWxsO1xcclxcbiAgICBvdXRsaW5lLWNvbG9yOiAkb3JhbmdlO1xcclxcbn1cXHJcXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xcclxcblxcclxcbi8qIHx8Qm9yZGVycyAqL1xcclxcbi5ib3JkZXItc21hbGwge1xcclxcbiAgICBib3JkZXItd2lkdGg6IDFweDtcXHJcXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXHJcXG59XFxyXFxuXFxyXFxuLmJvcmRlci1tZWRpdW0ge1xcclxcbiAgICBib3JkZXItd2lkdGg6IDNweDtcXHJcXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXHJcXG59XFxyXFxuXFxyXFxuLmJvcmRlci1ncmV5IHtcXHJcXG4gICAgQGV4dGVuZCAuYm9yZGVyLXNtYWxsO1xcclxcbiAgICBib3JkZXItY29sb3I6ICRncmV5O1xcclxcbn1cXHJcXG5cXHJcXG4uYm9yZGVyLXdoaXRlIHtcXHJcXG4gICAgQGV4dGVuZCAuYm9yZGVyLXNtYWxsO1xcclxcbiAgICBib3JkZXItY29sb3I6ICNmZmY7XFxyXFxufVxcclxcblxcclxcbi5iZHJzLTEge1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAwLjVyZW07XFxyXFxufVxcclxcblxcclxcbi5iZHJzLTIge1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAwLjc1cmVtO1xcclxcbn1cXHJcXG5cXHJcXG4uYmRycy0zIHtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMXJlbTtcXHJcXG59XFxyXFxuXFxyXFxuLmJkcnMtNCB7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDEuNXJlbTtcXHJcXG59XFxyXFxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cIixcIiRibHVlOiAjMzgzYThhO1xcclxcbiRkYW5nZXI6ICM4YjFmMWY7XFxyXFxuJGdyZXk6ICM5NTk4OWE7XFxyXFxuJGxpbWU6ICMyOWI4NGY7XFxyXFxuJG9yYW5nZTogI2Y1NTYyZTtcXHJcXG4kZXJyb3I6ICNlMGNjYzI7XCIsXCJidXR0b24ge1xcclxcbiAgICBwYWRkaW5nOiAxcmVtIDJyZW07XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcclxcbiAgICBib3JkZXI6IG5vbmU7XFxyXFxuICAgIGNvbG9yOiBpbmhlcml0O1xcclxcbn1cXHJcXG5cXHJcXG4uYnRuLWljb24ge1xcclxcbiAgICBAZXh0ZW5kIC5mbGV4LWNlbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuYnV0dG9uW2Rpc2FibGVkXSB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgJjo6YmVmb3JlIHtcXHJcXG4gICAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcclxcbiAgICAgICAgQGV4dGVuZCAuYWJzb2x1dGUtMTAwO1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xcclxcbiAgICB9XFxyXFxufVxcclxcblwiLFwiLmNoYWluZWQtY29udGFpbmVyIHtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICB0cmFuc2l0aW9uOiBib3R0b20gMC4zcyBsaW5lYXI7XFxyXFxuICAgICY6OmJlZm9yZSxcXHJcXG4gICAgJjo6YWZ0ZXIge1xcclxcbiAgICAgICAgQGluY2x1ZGUgYmctaW1hZ2UoXFxcIi9hc3NldHMvaW1nL2NoYWluLnBuZ1xcXCIsIDEwMCUgYXV0bywgY2VudGVyLCByZXBlYXQteSk7XFxyXFxuICAgICAgICBjb250ZW50OiBcXFwiXFxcIjtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICAgIHRvcDogMDtcXHJcXG4gICAgICAgIGhlaWdodDogMTAwdmg7XFxyXFxuICAgICAgICB3aWR0aDogMTVweDtcXHJcXG4gICAgICAgIC8vIEltYWdlIGZpbGUgaXMgaG9yaXpvbnRhbCBjaGFpbiwgdGhpcyB3aWxsIHN3aXRjaCBpdCB0byB2ZXJ0aWNhbFxcclxcbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogNTAlIDA7XFxyXFxuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xcclxcbiAgICB9XFxyXFxuICAgICY6OmJlZm9yZSB7XFxyXFxuICAgICAgICBsZWZ0OiAyMHB4O1xcclxcbiAgICB9XFxyXFxuICAgICY6OmFmdGVyIHtcXHJcXG4gICAgICAgIHJpZ2h0OiAyMHB4O1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbi5saWdodC13b29kLWNvbnRhaW5lciB7XFxyXFxuICAgIEBpbmNsdWRlIGJnLWltYWdlKFxcXCIvYXNzZXRzL2ltZy9saWdodC13b29kLmpwZ1xcXCIsIDEwMCUgYXV0bywgMCA5MCUsIHJlcGVhdC15KTtcXHJcXG59XFxyXFxuXFxyXFxuLmRhcmstd29vZC1jb250YWluZXIge1xcclxcbiAgICBAaW5jbHVkZSBiZy1pbWFnZShcXFwiL2Fzc2V0cy9pbWcvZGFyay13b29kLmpwZ1xcXCIsIDEwMCUgYXV0bywgMCA5MCUsIHJlcGVhdC15KTtcXHJcXG59XFxyXFxuXFxyXFxuLnNtb290aC1kYXJrLXdvb2QtY29udGFpbmVyIHtcXHJcXG4gICAgQGluY2x1ZGUgYmctaW1hZ2UoXFxcIi9hc3NldHMvaW1nL3Ntb290aC1kYXJrLXdvb2QuanBnXFxcIik7XFxyXFxufVxcclxcblxcclxcbi53b29kZW4tY29udGFpbmVyIHtcXHJcXG4gICAgQGV4dGVuZCAuYm9yZGVyLWdyZXk7XFxyXFxuICAgIEBleHRlbmQgLmJkcnMtMTtcXHJcXG4gICAgQGV4dGVuZCAuc21vb3RoLWRhcmstd29vZC1jb250YWluZXI7XFxyXFxuICAgIHBhZGRpbmc6IDFyZW0gMy41cmVtO1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG59XFxyXFxuXCIsXCJAbWl4aW4gYmctaW1hZ2UoJHVybCwgJHNpemU6IGNvdmVyLCAkcG9zaXRpb246IGNlbnRlciwgJHJlcGVhdDogbm8tcmVwZWF0ICkge1xcclxcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHVybCk7XFxyXFxuICAgIGJhY2tncm91bmQtc2l6ZTogJHNpemU7XFxyXFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246ICRwb3NpdGlvbjtcXHJcXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6ICRyZXBlYXQ7XFxyXFxufVwiLFwiLmZsZXgtY2VudGVyIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5hYnNvbHV0ZS0xMDAge1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHRvcDogMDtcXHJcXG4gICAgbGVmdDogMDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIGhlaWdodDogMTAwJTtcXHJcXG59XFxyXFxuXCIsXCIuZmxvYXRpbmctbGFiZWwtaW5wdXQge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIGlucHV0IHtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDNyZW0gMS41cmVtIDFyZW07XFxyXFxuICAgICAgICAmOmZvY3VzLCAmOm5vdCg6cGxhY2Vob2xkZXItc2hvd24pIHtcXHJcXG4gICAgICAgICAgICArIGxhYmVsIHtcXHJcXG4gICAgICAgICAgICAgICAgdG9wOiA1cHg7XFxyXFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcXHJcXG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAwLjc1ZW07XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuICAgIGxhYmVsIHtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICAgIHRvcDogNTAlO1xcclxcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xcclxcbiAgICAgICAgbGVmdDogMS41cmVtO1xcclxcbiAgICAgICAgY29sb3I6ICNjZWNlY2U7XFxyXFxuICAgICAgICBjdXJzb3I6IHRleHQ7XFxyXFxuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC4yNXM7XFxyXFxuICAgIH1cXHJcXG59XCIsXCIubW9kYWwtY29udGFpbmVyIHtcXHJcXG4gICAgQGV4dGVuZCAuZmxleC1jZW50ZXI7XFxyXFxuICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXHJcXG4gICAgei1pbmRleDogMTA7XFxyXFxuICAgICYuYWN0aXZlIHtcXHJcXG4gICAgICAgIG92ZXJmbG93LXk6IGF1dG87XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLm1vZGFsIHtcXHJcXG4gICAgQGV4dGVuZCAuY2hhaW5lZC1jb250YWluZXI7XFxyXFxuICAgIEBleHRlbmQgLmxpZ2h0LXdvb2QtY29udGFpbmVyO1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbiAgICBmb250LXNpemU6IDJyZW07XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDIuNXJlbTtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICBib3R0b206IDEzMCU7XFxyXFxuICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IGJvdHRvbSwgdHJhbnNmb3JtO1xcclxcbiAgICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XFxyXFxuICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDAuNXMgO1xcclxcbiAgICAmOjpiZWZvcmUsXFxyXFxuICAgICY6OmFmdGVyIHtcXHJcXG4gICAgICAgIHdpZHRoOiAzMHB4O1xcclxcbiAgICB9XFxyXFxuICAgICY6OmJlZm9yZSB7XFxyXFxuICAgICAgICBsZWZ0OiA2MHB4O1xcclxcbiAgICB9XFxyXFxuICAgICY6OmFmdGVyIHtcXHJcXG4gICAgICAgIHJpZ2h0OiA2MHB4O1xcclxcbiAgICB9XFxyXFxuICAgICYuYWN0aXZlIHtcXHJcXG4gICAgICAgIGJvdHRvbTogNTAlO1xcclxcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKGNhbGMoMTAwJSAtIDIwMHB4KSk7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLm1vZGFsLWhlYWRlciB7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIHRvcDogLTYwcHg7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgaDIge1xcclxcbiAgICAgICAgQGV4dGVuZCAuYmRycy0xO1xcclxcbiAgICAgICAgQGV4dGVuZCAuZGFyay13b29kLWNvbnRhaW5lcjtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gICAgICAgIHBhZGRpbmc6IDEuNXJlbSAycmVtO1xcclxcbiAgICAgICAgZm9udC1zaXplOiBjYWxjKDFlbSArIDFyZW0pO1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbi5tb2RhbC1ib2R5IHtcXHJcXG4gICAgbWluLXdpZHRoOiAzMHZ3O1xcclxcbiAgICBwYWRkaW5nLXRvcDogMXJlbTtcXHJcXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICRsZykge1xcclxcbiAgICAgICAgbWluLXdpZHRoOiA0MHZ3O1xcclxcbiAgICB9XFxyXFxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAkbWQpIHtcXHJcXG4gICAgICAgIG1pbi13aWR0aDogNjB2dztcXHJcXG4gICAgfVxcclxcbiAgICBAbWVkaWEgKG1heC13aWR0aDogJHNtKSB7XFxyXFxuICAgICAgICBtaW4td2lkdGg6IDgwdnc7XFxyXFxuICAgIH1cXHJcXG4gICAgaGVhZGVyIHtcXHJcXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgICAgIGgzIHtcXHJcXG4gICAgICAgICAgICBAZXh0ZW5kIC53b29kZW4tY29udGFpbmVyO1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgICBsYWJlbCB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgIH1cXHJcXG4gICAgc2VjdGlvbiB7XFxyXFxuICAgICAgICBwYWRkaW5nOiAzcmVtO1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgICAgICBnYXA6IDJyZW07XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLm1vZGFsLW9wdGlvbnMge1xcclxcbiAgICBAZXh0ZW5kIC5mbGV4LWNlbnRlcjtcXHJcXG4gICAgcGFkZGluZzoge1xcclxcbiAgICAgICAgdG9wOiAyLjVyZW07XFxyXFxuICAgICAgICBib3R0b206IDJyZW07XFxyXFxuICAgICAgICBsZWZ0OiAycmVtO1xcclxcbiAgICAgICAgcmlnaHQ6IDJyZW07XFxyXFxuICAgIH1cXHJcXG4gICAgZ2FwOiAzcmVtO1xcclxcbiAgICBidXR0b24geyAgICAgICAgXFxyXFxuICAgICAgICBAZXh0ZW5kIC5zbW9vdGgtZGFyay13b29kLWNvbnRhaW5lcjtcXHJcXG4gICAgICAgIEBleHRlbmQgLmJkcnMtNDtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDEuMjVyZW0gNnJlbTtcXHJcXG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbi8vIEFkZGluZyBlbXB0eSBzcGFjZSB1bmRlciBtb2RhbCBjb250YWluZXJcXHJcXG4ubW9kYWwtc3BhY2VyIHtcXHJcXG4gICAgaGVpZ2h0OiA1MHB4O1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAtNTBweDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxufVwiLFwiLmljeS1ociB7XFxyXFxuICAgIGhlaWdodDogMTBweDtcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCIvYXNzZXRzL2ltZy9pY3kuanBnXFxcIik7XFxyXFxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XFxyXFxuICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcXHJcXG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXHJcXG4gICAgbWFyZ2luOiAwO1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG59XCIsXCIudGV4dC1lcnJvciB7XFxyXFxuICAgIGNvbG9yOiByZ2IoMjI0LCAyMDQsIDI0KTtcXHJcXG4gICAgZm9udC1zaXplOiAxLjZyZW07XFxyXFxufVwiLFwiLm9wYWNpdHktMTAwIHtcXHJcXG4gICAgb3BhY2l0eTogMTAwJSAhaW1wb3J0YW50O1xcclxcbn1cXHJcXG5cXHJcXG4uZC1ub25lIHtcXHJcXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xcclxcbn1cIixcImlucHV0IHtcXHJcXG4gICAgQGV4dGVuZCAuYmRycy0yO1xcclxcbiAgICBwYWRkaW5nOiAxcmVtIDJyZW07XFxyXFxuICAgIGJhY2tncm91bmQ6ICNmZmY7XFxyXFxuICAgIGJvcmRlcjogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuaW5wdXRbdHlwZSA9IHJhZGlvXSB7XFxyXFxuICAgIGFwcGVhcmFuY2U6IG5vbmU7XFxyXFxuICAgICYgKyBzcGFuIHtcXHJcXG4gICAgICAgIEBleHRlbmQgLndvb2Rlbi1jb250YWluZXI7XFxyXFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgIH1cXHJcXG4gICAgJjpjaGVja2VkICsgc3BhbiB7XFxyXFxuICAgICAgICBAZXh0ZW5kIC5vdXRsaW5lLWJsdWU7XFxyXFxuICAgICAgICBAZXh0ZW5kIC5vdXRsaW5lLXRoaWNrO1xcclxcbiAgICB9XFxyXFxufVwiLFwiXFxyXFxuKiwgKjo6YmVmb3JlLCAqOjphZnRlciB7XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxyXFxufVxcclxcblxcclxcbmh0bWwge1xcclxcbiAgICBmb250LXNpemU6IDEwcHg7XFxyXFxuICAgIHNjcm9sbC1iZWhhdmlvcjogc21vb3RoO1xcclxcbn1cXHJcXG5cXHJcXG5ib2R5IHtcXHJcXG4gICAgQGluY2x1ZGUgYmctaW1hZ2UoXFxcIi9hc3NldHMvaW1nL3N0b25lLmpwZ1xcXCIpO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcXHJcXG4gICAgZm9udC1zaXplOiAxLjZyZW07XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiAxLjY7XFxyXFxuICAgIGZvbnQtZmFtaWx5OiBMYXRvLCBHZW5ldmEsIFRhaG9tYSwgc2Fucy1zZXJpZjtcXHJcXG4gICAgY29sb3I6ICNmZmY7XFxyXFxuICAgIHVzZXItc2VsZWN0OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG5tYWluIHtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgZmxleC1ncm93OiAxO1xcclxcbn1cXHJcXG5cXHJcXG5oMSwgaDIge1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG59XFxyXFxuXFxyXFxuaDEge1xcclxcbiAgICBmb250LXNpemU6IDMuNXJlbTtcXHJcXG59XFxyXFxuXFxyXFxuaDIge1xcclxcbiAgICBmb250LXNpemU6IDNyZW07XFxyXFxufVxcclxcblxcclxcbnN2ZyB7XFxyXFxuICAgIHVzZXItc2VsZWN0OiBub25lO1xcclxcbn1cIixcIi5nYW1lLWJsb2NrIHtcXHJcXG4gICAgd2lkdGg6ICRnYW1lLWJsb2NrLXNpemU7XFxyXFxuICAgIGhlaWdodDogJGdhbWUtYmxvY2stc2l6ZTtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgICY6aG92ZXI6bm90KC5oaXQpIHtcXHJcXG4gICAgICAgICY6OmFmdGVyIHtcXHJcXG4gICAgICAgICAgICBAZXh0ZW5kIC5hYnNvbHV0ZS0xMDA7XFxyXFxuICAgICAgICAgICAgY29udGVudDogXFxcIlxcXCI7XFxyXFxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjI1KTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4uZ2FtZS1ibG9jay1zbWFsbCB7XFxyXFxuICAgIEBleHRlbmQgLmdhbWUtYmxvY2s7XFxyXFxuICAgIHdpZHRoOiAkZ2FtZS1ibG9jay1zaXplLXNtO1xcclxcbiAgICBoZWlnaHQ6ICRnYW1lLWJsb2NrLXNpemUtc207XFxyXFxufVxcclxcblxcclxcbi5ib2FyZC1ibG9jayB7XFxyXFxuICAgIEBleHRlbmQgLmdhbWUtYmxvY2s7XFxyXFxuICAgIEBleHRlbmQgLmJvcmRlci1ncmV5O1xcclxcbiAgICBAaW5jbHVkZSBiZy1pbWFnZShcXFwiL2Fzc2V0cy9pbWcvd2F0ZXIuanBnXFxcIik7XFxyXFxuICAgICYuZGlzYWJsZWQge1xcclxcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxyXFxuICAgIH1cXHJcXG4gICAgJi5pbmNvcnJlY3Qge1xcclxcbiAgICAgICAgQGluY2x1ZGUgYmctaW1hZ2UoXFxcIi9hc3NldHMvaW1nL2Nyb3NzLnBuZ1xcXCIsIGNvbnRhaW4pO1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGRhbmdlcjtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4uc2hpcC1ibG9jayB7XFxyXFxuICAgIEBleHRlbmQgLmdhbWUtYmxvY2s7XFxyXFxuICAgIEBleHRlbmQgLmJvcmRlci13aGl0ZTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGxpbWU7XFxyXFxuICAgICYuaGlkZGVuIHtcXHJcXG4gICAgICAgIHotaW5kZXg6IC0xO1xcclxcbiAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xcclxcbiAgICB9XFxyXFxufVxcclxcblwiLFwiJGdhbWUtYmxvY2stc2l6ZTogMzVweDtcXHJcXG4kZ2FtZS1ibG9jay1zaXplLW1kOiAzMHB4O1xcclxcbiRnYW1lLWJsb2NrLXNpemUtc206IDIwcHg7XCIsXCIuYm9hcmQge1xcclxcbiAgICAtLWJvYXJkLWhvcml6b250YWwtY2VsbHM6IDEwO1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQodmFyKC0tYm9hcmQtaG9yaXpvbnRhbC1jZWxscyksIGF1dG8pO1xcclxcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgICYuZGlzYWJsZWQge1xcclxcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxyXFxuICAgIH1cXHJcXG59XCIsXCIucm91bmRzLWNvbnRhaW5lciB7XFxyXFxuICAgIEBleHRlbmQgLmJvcmRlci13aGl0ZTtcXHJcXG4gICAgQGV4dGVuZCAuYm9yZGVyLW1lZGl1bTtcXHJcXG4gICAgQGV4dGVuZCAuZmxleC1jZW50ZXI7XFxyXFxuICAgIC0tYW5nbGU6IDBkZWc7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXHJcXG4gICAgcGFkZGluZzogMXJlbTtcXHJcXG4gICAgd2lkdGg6IDExMnB4O1xcclxcbiAgICBhc3BlY3QtcmF0aW86IDE7XFxyXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFwiL2Fzc2V0cy9pbWcvZ3JleS5qcGdcXFwiKTtcXHJcXG4gICAgdHJhbnNmb3JtOiByb3RhdGVZKHZhcigtLWFuZ2xlKSk7XFxyXFxuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAxcztcXHJcXG4gICAgcCB7XFxyXFxuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMnJlbTtcXHJcXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlWSh2YXIoLS1hbmdsZSkpO1xcclxcbiAgICAgICAgdHJhbnNpdGlvbjogaW5oZXJpdDtcXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4uc2hpcHMtcmVtYWluZWQtY29udGFpbmVyIHtcXHJcXG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCIvYXNzZXRzL2ltZy9saWdodC13b29kLmpwZ1xcXCIpO1xcclxcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogcmVwZWF0LXk7XFxyXFxuICAgIHBhZGRpbmc6IDJyZW0gM3JlbSAxcmVtO1xcclxcbiAgICBkaXNwbGF5OiBpbmxpbmUtZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMywgMWZyKTtcXHJcXG4gICAgZ2FwOiAxcmVtO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWFyZWFzOlxcclxcbiAgICAgICAgXFxcInNoaXBzIHNoaXBzIHNoaXBzXFxcIlxcclxcbiAgICAgICAgXFxcIi4gcGFnaW5hdGlvbiBpbmZvXFxcIjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgbWF4LXdpZHRoOiBjYWxjKCRnYW1lLWJsb2NrLXNpemUgKiAxMCArIDIwJSk7XFxyXFxuICAgIC5zaGlwcyB7XFxyXFxuICAgICAgICBncmlkLWFyZWE6IHNoaXBzO1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGdhcDogMnJlbTtcXHJcXG4gICAgICAgIGhlaWdodDogNDVweDtcXHJcXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICAgICAgICBmb250LXNpemU6IDJyZW07XFxyXFxuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgICAgIHNjcm9sbC1iZWhhdmlvcjogc21vb3RoO1xcclxcbiAgICAgICAgLnNoaXAtY29udGFpbmVyIHtcXHJcXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAgICAgICAgZ2FwOiAxMHB4O1xcclxcbiAgICAgICAgICAgICY6bm90KDpmaXJzdC1jaGlsZCk6OmJlZm9yZSB7XFxyXFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcclxcbiAgICAgICAgICAgICAgICB3aWR0aDogM3B4O1xcclxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIC5zaGlwLWJsb2NrIHtcXHJcXG4gICAgICAgICAgICAgICAgQGV4dGVuZCAuZ2FtZS1ibG9jay1zbWFsbDtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG4gICAgLnBhZ2luYXRpb24ge1xcclxcbiAgICAgICAgZ3JpZC1hcmVhOiBwYWdpbmF0aW9uO1xcclxcbiAgICAgICAganVzdGlmeS1zZWxmOiBjZW50ZXI7XFxyXFxuICAgICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxyXFxuICAgIH1cXHJcXG4gICAgLmluZm8ge1xcclxcbiAgICAgICAgZ3JpZC1hcmVhOiBpbmZvO1xcclxcbiAgICAgICAganVzdGlmeS1zZWxmOiBlbmQ7XFxyXFxuICAgICAgICBtYXJnaW4tcmlnaHQ6IC0ycmVtO1xcclxcbiAgICAgICAgei1pbmRleDogMjtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAmOjpiZWZvcmUge1xcclxcbiAgICAgICAgQGV4dGVuZCAuYm9yZGVyLXdoaXRlO1xcclxcbiAgICAgICAgQGV4dGVuZCAuYm9yZGVyLW1lZGl1bTtcXHJcXG4gICAgICAgIEBleHRlbmQgLmZsZXgtY2VudGVyO1xcclxcbiAgICAgICAgQGV4dGVuZCAuYWJzb2x1dGUtMTAwO1xcclxcbiAgICAgICAgY29udGVudDogXFxcIlNoaXBzIFJlbWFpbmVkXFxcIjtcXHJcXG4gICAgICAgIGJvcmRlci1zdHlsZTogZGFzaGVkO1xcclxcbiAgICAgICAgd2lkdGg6IDA7XFxyXFxuICAgICAgICBoZWlnaHQ6IDA7XFxyXFxuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMnJlbTtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44KTtcXHJcXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICAgICAgICB6LWluZGV4OiAxO1xcclxcbiAgICAgICAgb3BhY2l0eTogMCU7XFxyXFxuICAgIH1cXHJcXG4gICAgJi5oZWxwOjpiZWZvcmUge1xcclxcbiAgICAgICAgb3BhY2l0eTogMTAwJTtcXHJcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjNzO1xcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbi5zaGlwcy1yZW1haW5lZC1jb250YWluZXItcmVzcG9uc2l2ZSB7XFxyXFxuICAgIEBleHRlbmQgLnNoaXBzLXJlbWFpbmVkLWNvbnRhaW5lcjtcXHJcXG4gICAgQG1lZGlhIChtaW4td2lkdGg6ICRzbSkgYW5kIChtYXgtd2lkdGg6ICRsZykge1xcclxcbiAgICAgICAgYWxpZ24tc2VsZjogc3RyZXRjaDtcXHJcXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIGF1dG8gYXV0bztcXHJcXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogYXV0bztcXHJcXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6IFxcXCJzaGlwc1xcXCIgXFxcInBhZ2luYXRpb25cXFwiIFxcXCJpbmZvXFxcIjtcXHJcXG4gICAgICAgIC5zaGlwcyB7XFxyXFxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogc3RyZXRjaDtcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgICAgICAgICAgLnNoaXAtY29udGFpbmVyIHtcXHJcXG4gICAgICAgICAgICAgICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgICAgICAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIGF1dG87XFxyXFxuICAgICAgICAgICAgICAgIHAge1xcclxcbiAgICAgICAgICAgICAgICAgICAganVzdGlmeS1zZWxmOiBlbmQ7XFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgJjpub3QoOmZpcnN0LWNoaWxkKTo6YmVmb3JlIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGdyaWQtY29sdW1uLXN0YXJ0OiAxO1xcclxcbiAgICAgICAgICAgICAgICAgICAgZ3JpZC1jb2x1bW4tZW5kOiAzO1xcclxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDNweDtcXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIC5wYWdpbmF0aW9uIHtcXHJcXG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICAgICAgICAgIGdhcDogMTBweCAhaW1wb3J0YW50O1xcclxcbiAgICAgICAgICAgIC5hcnJvdy1jb250YWluZXIge1xcclxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVxcclxcblxcclxcbi5wYXVzZS1jb250YWluZXIge1xcclxcbiAgICBAZXh0ZW5kIC5hYnNvbHV0ZS0xMDA7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43NSk7XFxyXFxuICAgIHotaW5kZXg6IC0xO1xcclxcbiAgICBvcGFjaXR5OiAwJTtcXHJcXG4gICAgdHJhbnNpdGlvbjogYWxsIDAuMjVzIGVhc2UtaW47XFxyXFxuICAgICYuc2VtaS1hY3RpdmUge1xcclxcbiAgICAgICAgei1pbmRleDogMztcXHJcXG4gICAgICAgIG9wYWNpdHk6IDMwJTtcXHJcXG4gICAgICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IG9wYWNpdHk7XFxyXFxuICAgIH1cXHJcXG4gICAgJi5hY3RpdmUge1xcclxcbiAgICAgICAgei1pbmRleDogMztcXHJcXG4gICAgICAgIG9wYWNpdHk6IDgwJTtcXHJcXG4gICAgICAgIHRyYW5zaXRpb24tcHJvcGVydHk6IG9wYWNpdHk7XFxyXFxuICAgIH1cXHJcXG4gICAgJi5mcm9udCB7XFxyXFxuICAgICAgICB6LWluZGV4OiAyMDtcXHJcXG4gICAgfVxcclxcbn1cIixcIi5jb3VudGVyIHtcXHJcXG4gICAgQGV4dGVuZCAuZmxleC1jZW50ZXI7XFxyXFxuICAgIGdhcDogMS41cmVtO1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG4gICAgLm1pbnVzLFxcclxcbiAgICAucGx1cyB7XFxyXFxuICAgICAgICBAZXh0ZW5kIC53b29kZW4tY29udGFpbmVyO1xcclxcbiAgICAgICAgcGFkZGluZzogMC4yNXJlbTtcXHJcXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxO1xcclxcbiAgICAgICAgYm9yZGVyOiBub25lO1xcclxcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICAgICAgJjphY3RpdmUge1xcclxcbiAgICAgICAgICAgIEBleHRlbmQgLm91dGxpbmUtYmx1ZTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgICYuZGlzYWJsZWQge1xcclxcbiAgICAgICAgICAgIGN1cnNvcjogZGVmYXVsdDtcXHJcXG4gICAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcXHJcXG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgICAgICAgICAgJjo6YmVmb3JlIHtcXHJcXG4gICAgICAgICAgICAgICAgY29udGVudDogXFxcIlxcXCI7XFxyXFxuICAgICAgICAgICAgICAgIEBleHRlbmQgLmFic29sdXRlLTEwMDtcXHJcXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjI1KTtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICBzdmcge1xcclxcbiAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICAgICAgICAgIHdpZHRoOiAzMHB4O1xcclxcbiAgICAgICAgICAgIGhlaWdodDogMzBweDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgICAubnVtYmVyIHtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogY2FsYygxZW0gKyAwLjVyZW0pO1xcclxcbiAgICB9XFxyXFxufVxcclxcblwiLFwiLnBhZ2luYXRpb24ge1xcclxcbiAgICBAZXh0ZW5kIC5mbGV4LWNlbnRlcjtcXHJcXG4gICAgZ2FwOiAxMHB4O1xcclxcbiAgICAuYXJyb3ctY29udGFpbmVyIHtcXHJcXG4gICAgICAgIGJvcmRlcjogbm9uZTtcXHJcXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgICAgIGNvbG9yOiAjZmZmO1xcclxcbiAgICAgICAgJi5kaXNhYmxlZCB7XFxyXFxuICAgICAgICAgICAgY3Vyc29yOiBkZWZhdWx0O1xcclxcbiAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcclxcbiAgICAgICAgICAgIHN2ZyB7XFxyXFxuICAgICAgICAgICAgICAgIGN1cnNvcjogZGVmYXVsdDtcXHJcXG4gICAgICAgICAgICAgICAgY29sb3I6ICNjY2NjY2M7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5hcnJvdy1jb250YWluZXItYnV0dG9uIHtcXHJcXG4gICAgICAgIEBleHRlbmQgLndvb2Rlbi1jb250YWluZXI7XFxyXFxuICAgICAgICBwYWRkaW5nOiAwIDFyZW07XFxyXFxuICAgICAgICAmOmFjdGl2ZSB7XFxyXFxuICAgICAgICAgICAgQGV4dGVuZCAub3V0bGluZS1ibHVlO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVxcclxcblwiLFwiLnNoaXAge1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAmLnZlcnRpY2FsOm5vdCguaGlkZGVuKSB7XFxyXFxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICAgICAgLnNoaXAtYmxvY2sge1xcclxcbiAgICAgICAgICAgICY6bm90KDpsYXN0LWNoaWxkKSB7XFxyXFxuICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b20td2lkdGg6IDA7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICY6bm90KDpmaXJzdC1jaGlsZCkge1xcclxcbiAgICAgICAgICAgICAgICBib3JkZXItdG9wLXdpZHRoOiAwO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgICAmLmhvcml6b250YWw6bm90KC5oaWRkZW4pIHtcXHJcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxyXFxuICAgICAgICAuc2hpcC1ibG9jayB7XFxyXFxuICAgICAgICAgICAgJjpub3QoOmxhc3QtY2hpbGQpIHtcXHJcXG4gICAgICAgICAgICAgICAgYm9yZGVyLXJpZ2h0LXdpZHRoOiAwO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAmOm5vdCg6Zmlyc3QtY2hpbGQpIHtcXHJcXG4gICAgICAgICAgICAgICAgYm9yZGVyLWxlZnQtd2lkdGg6IDA7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuICAgICYuZGVzdHJveWVkIHtcXHJcXG4gICAgICAgIC5zaGlwLWJsb2NrIHtcXHJcXG4gICAgICAgICAgICBib3JkZXItY29sb3I6ICRvcmFuZ2U7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLnNoaXAtY29tcHJlc3NlZCB7XFxyXFxuICAgIEBleHRlbmQgLmZsZXgtY2VudGVyO1xcclxcbiAgICBnYXA6IDAuMjVyZW07XFxyXFxuICAgIC5wYXJlbnRoZXNpcyB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxyXFxuICAgICAgICBmb250LXNpemU6IDIuNzVyZW07XFxyXFxuICAgIH1cXHJcXG59XCIsXCIuZ2FtZS10eXBlLW1vZGFsIHtcXHJcXG4gICAgQGV4dGVuZCAubW9kYWw7XFxyXFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSg1MCUpICFpbXBvcnRhbnQ7XFxyXFxuICAgIC5tb2RhbC1ib2R5IHtcXHJcXG4gICAgICAgICNmb3JtLWdhbWUtdHlwZSB7XFxyXFxuICAgICAgICAgICAgQGV4dGVuZCAuZmxleC1jZW50ZXI7XFxyXFxuICAgICAgICAgICAgZ2FwOiAxMHJlbTtcXHJcXG4gICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHNtKSB7XFxyXFxuICAgICAgICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgICAgICAgICAgICAgIGdhcDogM3JlbTtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG59XCIsXCIuZ3JpZC1zaXplLW1vZGFsIHtcXHJcXG4gICAgQGV4dGVuZCAubW9kYWw7XFxyXFxuICAgIC5tb2RhbC1ib2R5IHtcXHJcXG4gICAgICAgIG1pbi13aWR0aDogMzV2dztcXHJcXG4gICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAkbGcpIHtcXHJcXG4gICAgICAgICAgICBtaW4td2lkdGg6IDUwdnc7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJG1kKSB7XFxyXFxuICAgICAgICAgICAgbWluLXdpZHRoOiA3MHZ3O1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuICAgIHNlY3Rpb24uc2VjdGlvbi1ncmlkLXNpemUge1xcclxcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcXHJcXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6XFxyXFxuICAgICAgICAgICAgXFxcImhlYWRlciBoZWFkZXJcXFwiXFxyXFxuICAgICAgICAgICAgXFxcIndpZHRoIGhlaWdodFxcXCJcXHJcXG4gICAgICAgICAgICBcXFwid2lkdGgtY291bnRlciBoZWlnaHQtY291bnRlclxcXCJcXHJcXG4gICAgICAgICAgICBcXFwiYm9hcmQgYm9hcmRcXFwiO1xcclxcbiAgICAgICAganVzdGlmeS1pdGVtczogY2VudGVyO1xcclxcbiAgICAgICAgcm93LWdhcDogM3JlbTtcXHJcXG4gICAgICAgIGhlYWRlciB7XFxyXFxuICAgICAgICAgICAgZ3JpZC1hcmVhOiBoZWFkZXI7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICAud2lkdGgtbGFiZWwge1xcclxcbiAgICAgICAgICAgIGdyaWQtYXJlYTogd2lkdGg7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICAuaGVpZ2h0LWxhYmVsIHtcXHJcXG4gICAgICAgICAgICBncmlkLWFyZWE6IGhlaWdodDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIC53aWR0aC1jb3VudGVyIHtcXHJcXG4gICAgICAgICAgICBncmlkLWFyZWE6IHdpZHRoLWNvdW50ZXI7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICAuaGVpZ2h0LWNvdW50ZXIge1xcclxcbiAgICAgICAgICAgIGdyaWQtYXJlYTogaGVpZ2h0LWNvdW50ZXI7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICAud2lkdGgtbGFiZWwsXFxyXFxuICAgICAgICAuaGVpZ2h0LWxhYmVsIHtcXHJcXG4gICAgICAgICAgICBAZXh0ZW5kIC53b29kZW4tY29udGFpbmVyO1xcclxcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcXFwiL2Fzc2V0cy9pbWcvYmxhY2std29vZC5qcGdcXFwiKTtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nOiB7XFxyXFxuICAgICAgICAgICAgICAgIGxlZnQ6IDEuM3JlbTtcXHJcXG4gICAgICAgICAgICAgICAgcmlnaHQ6IDEuM3JlbTtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICAud2lkdGgtY291bnRlcixcXHJcXG4gICAgICAgIC5oZWlnaHQtY291bnRlciB7XFxyXFxuICAgICAgICAgICAgQGV4dGVuZCAuY291bnRlcjtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIC5ib2FyZCB7XFxyXFxuICAgICAgICAgICAgZ3JpZC1hcmVhOiBib2FyZDtcXHJcXG4gICAgICAgICAgICBoZWlnaHQ6IGNhbGMoMTAgKiAkZ2FtZS1ibG9jay1zaXplKTtcXHJcXG4gICAgICAgICAgICAuYm9hcmQtYmxvY2sge1xcclxcbiAgICAgICAgICAgICAgICBjdXJzb3I6IGRlZmF1bHQ7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVwiLFwiLnJ1bGVzLW1vZGFsIHtcXHJcXG4gICAgQGV4dGVuZCAubW9kYWw7XFxyXFxuICAgIC5tb2RhbC1ib2R5IHtcXHJcXG4gICAgICAgIG1heC13aWR0aDogNDB2dztcXHJcXG4gICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAkbGcpIHtcXHJcXG4gICAgICAgICAgICBtYXgtd2lkdGg6IDYwdnc7XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJGxnKSB7XFxyXFxuICAgICAgICAgICAgbWF4LXdpZHRoOiA1MHZ3O1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICRtZCkge1xcclxcbiAgICAgICAgICAgIG1heC13aWR0aDogNzB2dztcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbn1cXHJcXG5cXHJcXG4uc2VjdGlvbi1nYW1lcGxheSB7XFxyXFxuICAgIHBhZGRpbmctdG9wOiAwICFpbXBvcnRhbnQ7XFxyXFxuICAgIG9sLFxcclxcbiAgICB1bCB7XFxyXFxuICAgICAgICBtYXJnaW4tbGVmdDogMnJlbTtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICAgICAgZ2FwOiAycmVtO1xcclxcbiAgICB9XFxyXFxuICAgIG9sIHtcXHJcXG4gICAgICAgIGxpc3Qtc3R5bGUtdHlwZTogZGVjaW1hbDtcXHJcXG4gICAgICAgIHVsIHtcXHJcXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAycmVtO1xcclxcbiAgICAgICAgICAgIGdhcDogMXJlbTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgICB1bCB7XFxyXFxuICAgICAgICBsaXN0LXN0eWxlLXR5cGU6IGRpc2M7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXCIsXCIuc2hpcHMtY2hvb3NpbmctbW9kYWwge1xcclxcbiAgICBAZXh0ZW5kIC5tb2RhbDtcXHJcXG4gICAgLm1vZGFsLWJvZHkge1xcclxcbiAgICAgICAgLnNoaXBzIHtcXHJcXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICAgICAgICAgICAgcGFkZGluZy10b3A6IDAuMjVyZW07XFxyXFxuICAgICAgICAgICAgLnBhZ2VzLWNvbnRhaW5lciB7XFxyXFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgICAgICAgICAgICAgcmlnaHQ6IDA7XFxyXFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IHJpZ2h0IDAuM3MgbGluZWFyO1xcclxcbiAgICAgICAgICAgICAgICB3aWR0aDogMzB2dztcXHJcXG4gICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICRsZykge1xcclxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDQwdnc7XFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICRtZCkge1xcclxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDYwdnc7XFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICRzbSkge1xcclxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDgwdnc7XFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgLnBhZ2Uge1xcclxcbiAgICAgICAgICAgICAgICBmbGV4LXNocmluazogMDtcXHJcXG4gICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICAgICAgICAgICAgZ2FwOiAycmVtO1xcclxcbiAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDIuNXJlbTtcXHJcXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIC5zaGlwLWNvbnRhaW5lciB7XFxyXFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXHJcXG4gICAgICAgICAgICAgICAgLmNvdW50IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiBjYWxjKDFlbSArIDAuMjVyZW0pO1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgIC5zaGlwLWJsb2NrIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAkZ2FtZS1ibG9jay1zaXplLW1kO1xcclxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAkZ2FtZS1ibG9jay1zaXplLW1kO1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVwiLFwiLnNoaXBzLXBsYWNpbmctbW9kYWwge1xcclxcbiAgICBAZXh0ZW5kIC5tb2RhbDtcXHJcXG4gICAgLmZvcm0tcGxheWVyLW5hbWUge1xcclxcbiAgICAgICAgaW5wdXQge1xcclxcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgICAgICY6Zm9jdXMsXFxyXFxuICAgICAgICAgICAgJjpub3QoOnBsYWNlaG9sZGVyLXNob3duKSB7XFxyXFxuICAgICAgICAgICAgICAgICsgbGFiZWw6OmJlZm9yZSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcXFwiUGxheWVyIG5hbWVcXFwiO1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgbGFiZWwge1xcclxcbiAgICAgICAgICAgICY6OmJlZm9yZSB7XFxyXFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFxcXCJQbGF5ZXIgbmFtZSAoT3B0aW9uYWwpXFxcIjtcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG4gICAgc2VjdGlvbi5wbGFjZS1zaGlwcyB7XFxyXFxuICAgICAgICBwYWRkaW5nOiB7XFxyXFxuICAgICAgICAgICAgbGVmdDogMDtcXHJcXG4gICAgICAgICAgICByaWdodDogMDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIC5hdXRvLXBsYWNlLWNvbnRhaW5lciB7XFxyXFxuICAgICAgICAgICAgQGV4dGVuZCAuZmxleC1jZW50ZXI7XFxyXFxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICAgICAgICBnYXA6IDFyZW07XFxyXFxuICAgICAgICAgICAgLmJ0bi1hdXRvLXBsYWNlIHtcXHJcXG4gICAgICAgICAgICAgICAgQGV4dGVuZCAud29vZGVuLWNvbnRhaW5lcjtcXHJcXG4gICAgICAgICAgICAgICAgbWFyZ2luLXRvcDogMnJlbTtcXHJcXG4gICAgICAgICAgICAgICAgJjphY3RpdmUge1xcclxcbiAgICAgICAgICAgICAgICAgICAgQGV4dGVuZCAub3V0bGluZS1ibHVlO1xcclxcbiAgICAgICAgICAgICAgICAgICAgQGV4dGVuZCAub3V0bGluZS10aGljaztcXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAudGV4dC1lcnJvciB7XFxyXFxuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgICAuc2hpcHMge1xcclxcbiAgICAgICAgQGluY2x1ZGUgYmctaW1hZ2UoXFxcIi9hc3NldHMvaW1nL2JsYWNrLXdvb2QuanBnXFxcIik7XFxyXFxuICAgICAgICBwYWRkaW5nOiAycmVtIDA7XFxyXFxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgICAgICBnYXA6IDIuNXJlbTtcXHJcXG4gICAgICAgIC5wYWdlcy1jb250YWluZXIge1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgICAgbWF4LXdpZHRoOiA1MDBweDtcXHJcXG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgICAgICAgICAgcmlnaHQ6IDA7XFxyXFxuICAgICAgICAgICAgdHJhbnNpdGlvbjogcmlnaHQgMC4zcyBsaW5lYXI7XFxyXFxuICAgICAgICAgICAgLnBhZ2Uge1xcclxcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgICAgICAgICAgICAgZmxleC1zaHJpbms6IDA7XFxyXFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgICAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KDQsIDFmcik7XFxyXFxuICAgICAgICAgICAgICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgICAgICAgICAgICAgLnNoaXAtY29udGFpbmVyIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGdhcDogMXJlbTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIC5zaGlwLWJsb2NrIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgICAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgICAgICAuc2hpcC1jb21wcmVzc2VkLmFjdGl2ZSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgLnNoaXAtYmxvY2sge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAZXh0ZW5kIC5vdXRsaW5lLW9yYW5nZTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQGV4dGVuZCAub3V0bGluZS1tZWRpdW07XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dGxpbmUtb2Zmc2V0OiAtMXB4O1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgICAuYm9hcmQtY29udGFpbmVyIHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciBhdXRvO1xcclxcbiAgICAgICAganVzdGlmeS1pdGVtczogY2VudGVyO1xcclxcbiAgICAgICAgZ2FwOiAyMHB4O1xcclxcbiAgICAgICAgcGFkZGluZzogMCAyMHB4O1xcclxcbiAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICRzbSkge1xcclxcbiAgICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogYXV0bztcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgIC5ib2FyZCB7XFxyXFxuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICAgICAgICAgIC5zaGlwIHtcXHJcXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgICAgICAgICAgICBnYXA6IDA7XFxyXFxuICAgICAgICAgICAgICAgICYudGVtcC1zaGlwIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xcclxcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogNDAlO1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgIC5zaGlwLWJsb2NrIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgICY6aG92ZXI6OmFmdGVyIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBub25lO1xcclxcbiAgICAgICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgLnBsYWNlLW9wdGlvbnMge1xcclxcbiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWV2ZW5seTtcXHJcXG4gICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgICAgICAgIGdhcDogM3JlbTtcXHJcXG4gICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHNtKSB7XFxyXFxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICBidXR0b24ge1xcclxcbiAgICAgICAgICAgICAgICBAZXh0ZW5kIC53b29kZW4tY29udGFpbmVyO1xcclxcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAxcmVtIDJyZW07XFxyXFxuICAgICAgICAgICAgICAgICYuYWN0aXZlIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIEBleHRlbmQgLm91dGxpbmUtYmx1ZTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIEBleHRlbmQgLm91dGxpbmUtdGhpY2s7XFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgLmJ0bi1yZW1vdmUge1xcclxcbiAgICAgICAgICAgICAgICBAZXh0ZW5kIC5idG4taWNvbjtcXHJcXG4gICAgICAgICAgICAgICAgcGFkZGluZzoge1xcclxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAxLjE1cmVtO1xcclxcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAxLjE1cmVtO1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxufVxcclxcblwiLFwiLmdhbWUtY29udGFpbmVyIHtcXHJcXG4gICAgZmxleC1ncm93OiAxO1xcclxcbiAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxufVxcclxcblxcclxcbi5nYW1lLWFyZW5hIHtcXHJcXG4gICAgZmxleC1ncm93OiAxO1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciBhdXRvIDFmcjtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICBAbWVkaWEgKG1heC13aWR0aDogJGxnKSB7XFxyXFxuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG87XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLnBsYXllci1hcmVhIHtcXHJcXG4gICAgQGluY2x1ZGUgYmctaW1hZ2UoXFxcIi9hc3NldHMvaW1nL3N0b25lLmpwZ1xcXCIpO1xcclxcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDEyMHB4IGF1dG8gYXV0bztcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogXFxcInR1cm4tbGFiZWxcXFwiIFxcXCJib2FyZFxcXCIgXFxcInNoaXBzXFxcIjtcXHJcXG4gICAganVzdGlmeS1pdGVtczogY2VudGVyO1xcclxcbiAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgIHBhZGRpbmc6IDAgNHJlbTtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICBAbWVkaWEgKG1pbi13aWR0aDogJHNtKSBhbmQgKG1heC13aWR0aDogJGxnKSB7XFxyXFxuICAgICAgICBwYWRkaW5nOiAwO1xcclxcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxMjBweCBhdXRvO1xcclxcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIDFmcjtcXHJcXG4gICAgICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6IFxcXCJzaGlwcyB0dXJuLWxhYmVsXFxcIiBcXFwic2hpcHMgYm9hcmRcXFwiO1xcclxcbiAgICB9XFxyXFxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAkbGcpIHtcXHJcXG4gICAgICAgIHJvdy1nYXA6IDNyZW07XFxyXFxuICAgIH1cXHJcXG4gICAgLnR1cm4tcm93IHtcXHJcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICAgICAgQGV4dGVuZCAuZmxleC1jZW50ZXI7XFxyXFxuICAgICAgICAudHVybi1jb250YWluZXIge1xcclxcbiAgICAgICAgICAgIEBleHRlbmQgLmNoYWluZWQtY29udGFpbmVyO1xcclxcbiAgICAgICAgICAgIEBleHRlbmQgLmxpZ2h0LXdvb2QtY29udGFpbmVyO1xcclxcbiAgICAgICAgICAgIGJvdHRvbTogMTAwJTtcXHJcXG4gICAgICAgICAgICBwYWRkaW5nLXRvcDogMS41cmVtO1xcclxcbiAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAxLjVyZW07XFxyXFxuICAgICAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAgICAgICAgbWF4LXdpZHRoOiAzMDBweDtcXHJcXG4gICAgICAgICAgICBwIHtcXHJcXG4gICAgICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMi41cmVtO1xcclxcbiAgICAgICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICYuYWN0aXZlIHtcXHJcXG4gICAgICAgICAgICAgICAgYm90dG9tOiBjYWxjKDEwMCUgLSA3MHB4IC0gNTBweCk7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuICAgIC5ib2FyZCB7XFxyXFxuICAgICAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgICAgICBncmlkLWFyZWE6IGJvYXJkO1xcclxcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICAgICAgQG1lZGlhIChtaW4td2lkdGg6ICRzbSkgYW5kIChtYXgtd2lkdGg6ICRsZykge1xcclxcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDJyZW07XFxyXFxuICAgICAgICB9XFxyXFxuICAgICAgICAuc2hpcCB7XFxyXFxuICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxyXFxuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuICAgIC5zaGlwcy1yZW1haW5lZC1jb250YWluZXItcmVzcG9uc2l2ZSB7XFxyXFxuICAgICAgICBtYXJnaW4tdG9wOiBhdXRvO1xcclxcbiAgICAgICAgZ3JpZC1hcmVhOiBzaGlwcztcXHJcXG4gICAgICAgIEBtZWRpYSAobWluLXdpZHRoOiAkc20pIGFuZCAobWF4LXdpZHRoOiAkbGcpIHtcXHJcXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAwO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgLnBhZ2luYXRpb24ge1xcclxcbiAgICAgICAgICAgIGdhcDogNDBweDtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgICAuc2NvcmUtY29udGFpbmVyIHtcXHJcXG4gICAgICAgIEBleHRlbmQgLmFic29sdXRlLTEwMDtcXHJcXG4gICAgICAgIEBleHRlbmQgLmZsZXgtY2VudGVyO1xcclxcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICAgIGdhcDogMS41cmVtO1xcclxcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgICAgICBmb250LXNpemU6IDRyZW07XFxyXFxuICAgICAgICB6LWluZGV4OiAtMTtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC43NSk7XFxyXFxuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2UtaW47XFxyXFxuICAgICAgICBvcGFjaXR5OiAwO1xcclxcbiAgICAgICAgLm5hbWUge1xcclxcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogN3JlbTtcXHJcXG4gICAgICAgIH1cXHJcXG4gICAgICAgICYuYWN0aXZlIHtcXHJcXG4gICAgICAgICAgICB6LWluZGV4OiA0O1xcclxcbiAgICAgICAgICAgIG9wYWNpdHk6IDEwMCU7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmRhcmtlbmluZyB7XFxyXFxuICAgICAgICBAZXh0ZW5kIC5hYnNvbHV0ZS0xMDA7XFxyXFxuICAgICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2UtaW47XFxyXFxuICAgICAgICBvcGFjaXR5OiAwO1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xcclxcbiAgICAgICAgei1pbmRleDogLTE7XFxyXFxuICAgICAgICAmLmFjdGl2ZSB7XFxyXFxuICAgICAgICAgICAgb3BhY2l0eTogNDUlO1xcclxcbiAgICAgICAgICAgIHotaW5kZXg6IDM7XFxyXFxuICAgICAgICB9XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXFxyXFxuLm1pZGRsZS1iaXNlY3RvciB7XFxyXFxuICAgIEBleHRlbmQgLmZsZXgtY2VudGVyO1xcclxcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcIi9hc3NldHMvaW1nL3NvbGlkLXdvb2QuanBnXFxcIik7XFxyXFxuICAgIHBhZGRpbmc6IDFyZW0gM3JlbTtcXHJcXG59XFxyXFxuXFxyXFxuLm5leHQtZ2FtZS1jb250YWluZXIsXFxyXFxuLnN0YXJ0LWdhbWUtY29udGFpbmVyIHtcXHJcXG4gICAgQGV4dGVuZCAuY2hhaW5lZC1jb250YWluZXI7XFxyXFxuICAgIEBleHRlbmQgLmRhcmstd29vZC1jb250YWluZXI7XFxyXFxuICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgIGxlZnQ6IDUwJTtcXHJcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgMCk7XFxyXFxuICAgIGJvdHRvbTogMTMwJTtcXHJcXG4gICAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogYm90dG9tLCB0cmFuc2Zvcm07XFxyXFxuICAgIHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcXHJcXG4gICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogMC41cztcXHJcXG4gICAgei1pbmRleDogNTtcXHJcXG4gICAgJi5hY3RpdmUge1xcclxcbiAgICAgICAgYm90dG9tOiA1MCU7XFxyXFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCA1MCUpO1xcclxcbiAgICB9XFxyXFxuICAgIGJ1dHRvbiB7XFxyXFxuICAgICAgICBwYWRkaW5nOiAyLjVyZW0gNHJlbTtcXHJcXG4gICAgICAgIGZvbnQtc2l6ZTogMi41cmVtO1xcclxcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIH1cXHJcXG59XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLyogaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rvb2xzL2Nzcy9yZXNldC9cXHJcXG4gICB2Mi4wLW1vZGlmaWVkIHwgMjAxMTAxMjZcXHJcXG4gICBMaWNlbnNlOiBub25lIChwdWJsaWMgZG9tYWluKVxcclxcbiovXFxyXFxuXFxyXFxuaHRtbCwgYm9keSwgZGl2LCBzcGFuLCBhcHBsZXQsIG9iamVjdCwgaWZyYW1lLFxcclxcbmgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIGJsb2NrcXVvdGUsIHByZSxcXHJcXG5hLCBhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBiaWcsIGNpdGUsIGNvZGUsXFxyXFxuZGVsLCBkZm4sIGVtLCBpbWcsIGlucywga2JkLCBxLCBzLCBzYW1wLFxcclxcbnNtYWxsLCBzdHJpa2UsIHN0cm9uZywgc3ViLCBzdXAsIHR0LCB2YXIsXFxyXFxuYiwgdSwgaSwgY2VudGVyLFxcclxcbmRsLCBkdCwgZGQsIG9sLCB1bCwgbGksXFxyXFxuZmllbGRzZXQsIGZvcm0sIGxhYmVsLCBsZWdlbmQsXFxyXFxudGFibGUsIGNhcHRpb24sIHRib2R5LCB0Zm9vdCwgdGhlYWQsIHRyLCB0aCwgdGQsXFxyXFxuYXJ0aWNsZSwgYXNpZGUsIGNhbnZhcywgZGV0YWlscywgZW1iZWQsXFxyXFxuZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLFxcclxcbm1lbnUsIG5hdiwgb3V0cHV0LCBydWJ5LCBzZWN0aW9uLCBzdW1tYXJ5LFxcclxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XFxyXFxuICBtYXJnaW46IDA7XFxyXFxuXFx0cGFkZGluZzogMDtcXHJcXG5cXHRib3JkZXI6IDA7XFxyXFxuXFx0Zm9udC1zaXplOiAxMDAlO1xcclxcblxcdGZvbnQ6IGluaGVyaXQ7XFxyXFxuXFx0dmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBtYWtlIHN1cmUgdG8gc2V0IHNvbWUgZm9jdXMgc3R5bGVzIGZvciBhY2Nlc3NpYmlsaXR5ICovXFxyXFxuOmZvY3VzIHtcXHJcXG4gICAgb3V0bGluZTogMDtcXHJcXG59XFxyXFxuXFxyXFxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xcclxcbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsXFxyXFxuZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgbWVudSwgbmF2LCBzZWN0aW9uIHtcXHJcXG5cXHRkaXNwbGF5OiBibG9jaztcXHJcXG59XFxyXFxuXFxyXFxuYm9keSB7XFxyXFxuXFx0bGluZS1oZWlnaHQ6IDE7XFxyXFxufVxcclxcblxcclxcbm9sLCB1bCB7XFxyXFxuXFx0bGlzdC1zdHlsZTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuYmxvY2txdW90ZSwgcSB7XFxyXFxuXFx0cXVvdGVzOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlcixcXHJcXG5xOmJlZm9yZSwgcTphZnRlciB7XFxyXFxuXFx0Y29udGVudDogJyc7XFxyXFxuXFx0Y29udGVudDogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxudGFibGUge1xcclxcblxcdGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxyXFxuXFx0Ym9yZGVyLXNwYWNpbmc6IDA7XFxyXFxufVxcclxcblxcclxcbmlucHV0W3R5cGU9c2VhcmNoXTo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbixcXHJcXG5pbnB1dFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24sXFxyXFxuaW5wdXRbdHlwZT1zZWFyY2hdOjotd2Via2l0LXNlYXJjaC1yZXN1bHRzLWJ1dHRvbixcXHJcXG5pbnB1dFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLXJlc3VsdHMtZGVjb3JhdGlvbiB7XFxyXFxuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXHJcXG4gICAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG5pbnB1dFt0eXBlPXNlYXJjaF0ge1xcclxcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxyXFxuICAgIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcXHJcXG4gICAgLXdlYmtpdC1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXHJcXG4gICAgLW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXHJcXG4gICAgYm94LXNpemluZzogY29udGVudC1ib3g7XFxyXFxufVxcclxcblxcclxcbnRleHRhcmVhIHtcXHJcXG4gICAgb3ZlcmZsb3c6IGF1dG87XFxyXFxuICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxyXFxuICAgIHJlc2l6ZTogdmVydGljYWw7XFxyXFxufVxcclxcblxcclxcbi8qKlxcclxcbiAqIENvcnJlY3QgYGlubGluZS1ibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBpbiBJRSA2LzcvOC85IGFuZCBGaXJlZm94IDMuXFxyXFxuICovXFxyXFxuXFxyXFxuYXVkaW8sXFxyXFxuY2FudmFzLFxcclxcbnZpZGVvIHtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICAqZGlzcGxheTogaW5saW5lO1xcclxcbiAgICAqem9vbTogMTtcXHJcXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiBQcmV2ZW50IG1vZGVybiBicm93c2VycyBmcm9tIGRpc3BsYXlpbmcgYGF1ZGlvYCB3aXRob3V0IGNvbnRyb2xzLlxcclxcbiAqIFJlbW92ZSBleGNlc3MgaGVpZ2h0IGluIGlPUyA1IGRldmljZXMuXFxyXFxuICovXFxyXFxuXFxyXFxuYXVkaW86bm90KFtjb250cm9sc10pIHtcXHJcXG4gICAgZGlzcGxheTogbm9uZTtcXHJcXG4gICAgaGVpZ2h0OiAwO1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gSUUgNy84LzksIEZpcmVmb3ggMywgYW5kIFNhZmFyaSA0LlxcclxcbiAqIEtub3duIGlzc3VlOiBubyBJRSA2IHN1cHBvcnQuXFxyXFxuICovXFxyXFxuXFxyXFxuW2hpZGRlbl0ge1xcclxcbiAgICBkaXNwbGF5OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiAxLiBDb3JyZWN0IHRleHQgcmVzaXppbmcgb2RkbHkgaW4gSUUgNi83IHdoZW4gYm9keSBgZm9udC1zaXplYCBpcyBzZXQgdXNpbmdcXHJcXG4gKiAgICBgZW1gIHVuaXRzLlxcclxcbiAqIDIuIFByZXZlbnQgaU9TIHRleHQgc2l6ZSBhZGp1c3QgYWZ0ZXIgb3JpZW50YXRpb24gY2hhbmdlLCB3aXRob3V0IGRpc2FibGluZ1xcclxcbiAqICAgIHVzZXIgem9vbS5cXHJcXG4gKi9cXHJcXG5cXHJcXG5odG1sIHtcXHJcXG4gICAgZm9udC1zaXplOiAxMDAlOyAvKiAxICovXFxyXFxuICAgIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLyogMiAqL1xcclxcbiAgICAtbXMtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLyogMiAqL1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiBBZGRyZXNzIGBvdXRsaW5lYCBpbmNvbnNpc3RlbmN5IGJldHdlZW4gQ2hyb21lIGFuZCBvdGhlciBicm93c2Vycy5cXHJcXG4gKi9cXHJcXG5cXHJcXG5hOmZvY3VzIHtcXHJcXG4gICAgb3V0bGluZTogdGhpbiBkb3R0ZWQ7XFxyXFxufVxcclxcblxcclxcbi8qKlxcclxcbiAqIEltcHJvdmUgcmVhZGFiaWxpdHkgd2hlbiBmb2N1c2VkIGFuZCBhbHNvIG1vdXNlIGhvdmVyZWQgaW4gYWxsIGJyb3dzZXJzLlxcclxcbiAqL1xcclxcblxcclxcbmE6YWN0aXZlLFxcclxcbmE6aG92ZXIge1xcclxcbiAgICBvdXRsaW5lOiAwO1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiAxLiBSZW1vdmUgYm9yZGVyIHdoZW4gaW5zaWRlIGBhYCBlbGVtZW50IGluIElFIDYvNy84LzkgYW5kIEZpcmVmb3ggMy5cXHJcXG4gKiAyLiBJbXByb3ZlIGltYWdlIHF1YWxpdHkgd2hlbiBzY2FsZWQgaW4gSUUgNy5cXHJcXG4gKi9cXHJcXG5cXHJcXG5pbWcge1xcclxcbiAgICBib3JkZXI6IDA7IC8qIDEgKi9cXHJcXG4gICAgLW1zLWludGVycG9sYXRpb24tbW9kZTogYmljdWJpYzsgLyogMiAqL1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiBBZGRyZXNzIG1hcmdpbiBub3QgcHJlc2VudCBpbiBJRSA2LzcvOC85LCBTYWZhcmkgNSwgYW5kIE9wZXJhIDExLlxcclxcbiAqL1xcclxcblxcclxcbmZpZ3VyZSB7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG59XFxyXFxuXFxyXFxuLyoqXFxyXFxuICogQ29ycmVjdCBtYXJnaW4gZGlzcGxheWVkIG9kZGx5IGluIElFIDYvNy5cXHJcXG4gKi9cXHJcXG5cXHJcXG5mb3JtIHtcXHJcXG4gICAgbWFyZ2luOiAwO1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiBEZWZpbmUgY29uc2lzdGVudCBib3JkZXIsIG1hcmdpbiwgYW5kIHBhZGRpbmcuXFxyXFxuICovXFxyXFxuXFxyXFxuZmllbGRzZXQge1xcclxcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xcclxcbiAgICBtYXJnaW46IDAgMnB4O1xcclxcbiAgICBwYWRkaW5nOiAwLjM1ZW0gMC42MjVlbSAwLjc1ZW07XFxyXFxufVxcclxcblxcclxcbi8qKlxcclxcbiAqIDEuIENvcnJlY3QgY29sb3Igbm90IGJlaW5nIGluaGVyaXRlZCBpbiBJRSA2LzcvOC85LlxcclxcbiAqIDIuIENvcnJlY3QgdGV4dCBub3Qgd3JhcHBpbmcgaW4gRmlyZWZveCAzLlxcclxcbiAqIDMuIENvcnJlY3QgYWxpZ25tZW50IGRpc3BsYXllZCBvZGRseSBpbiBJRSA2LzcuXFxyXFxuICovXFxyXFxuXFxyXFxubGVnZW5kIHtcXHJcXG4gICAgYm9yZGVyOiAwOyAvKiAxICovXFxyXFxuICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgIHdoaXRlLXNwYWNlOiBub3JtYWw7IC8qIDIgKi9cXHJcXG4gICAgKm1hcmdpbi1sZWZ0OiAtN3B4OyAvKiAzICovXFxyXFxufVxcclxcblxcclxcbi8qKlxcclxcbiAqIDEuIENvcnJlY3QgZm9udCBzaXplIG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gYWxsIGJyb3dzZXJzLlxcclxcbiAqIDIuIEFkZHJlc3MgbWFyZ2lucyBzZXQgZGlmZmVyZW50bHkgaW4gSUUgNi83LCBGaXJlZm94IDMrLCBTYWZhcmkgNSxcXHJcXG4gKiAgICBhbmQgQ2hyb21lLlxcclxcbiAqIDMuIEltcHJvdmUgYXBwZWFyYW5jZSBhbmQgY29uc2lzdGVuY3kgaW4gYWxsIGJyb3dzZXJzLlxcclxcbiAqL1xcclxcblxcclxcbmJ1dHRvbixcXHJcXG5pbnB1dCxcXHJcXG5zZWxlY3QsXFxyXFxudGV4dGFyZWEge1xcclxcbiAgICBmb250LXNpemU6IDEwMCU7IC8qIDEgKi9cXHJcXG4gICAgbWFyZ2luOiAwOyAvKiAyICovXFxyXFxuICAgIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgLyogMyAqL1xcclxcbiAgICAqdmVydGljYWwtYWxpZ246IG1pZGRsZTsgLyogMyAqL1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiBBZGRyZXNzIEZpcmVmb3ggMysgc2V0dGluZyBgbGluZS1oZWlnaHRgIG9uIGBpbnB1dGAgdXNpbmcgYCFpbXBvcnRhbnRgIGluXFxyXFxuICogdGhlIFVBIHN0eWxlc2hlZXQuXFxyXFxuICovXFxyXFxuXFxyXFxuYnV0dG9uLFxcclxcbmlucHV0IHtcXHJcXG4gICAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcXHJcXG59XFxyXFxuXFxyXFxuLyoqXFxyXFxuICogQWRkcmVzcyBpbmNvbnNpc3RlbnQgYHRleHQtdHJhbnNmb3JtYCBpbmhlcml0YW5jZSBmb3IgYGJ1dHRvbmAgYW5kIGBzZWxlY3RgLlxcclxcbiAqIEFsbCBvdGhlciBmb3JtIGNvbnRyb2wgZWxlbWVudHMgZG8gbm90IGluaGVyaXQgYHRleHQtdHJhbnNmb3JtYCB2YWx1ZXMuXFxyXFxuICogQ29ycmVjdCBgYnV0dG9uYCBzdHlsZSBpbmhlcml0YW5jZSBpbiBDaHJvbWUsIFNhZmFyaSA1KywgYW5kIElFIDYrLlxcclxcbiAqIENvcnJlY3QgYHNlbGVjdGAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveCA0KyBhbmQgT3BlcmEuXFxyXFxuICovXFxyXFxuXFxyXFxuYnV0dG9uLFxcclxcbnNlbGVjdCB7XFxyXFxuICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiAxLiBBdm9pZCB0aGUgV2ViS2l0IGJ1ZyBpbiBBbmRyb2lkIDQuMC4qIHdoZXJlICgyKSBkZXN0cm95cyBuYXRpdmUgYGF1ZGlvYFxcclxcbiAqICAgIGFuZCBgdmlkZW9gIGNvbnRyb2xzLlxcclxcbiAqIDIuIENvcnJlY3QgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSBgaW5wdXRgIHR5cGVzIGluIGlPUy5cXHJcXG4gKiAzLiBJbXByb3ZlIHVzYWJpbGl0eSBhbmQgY29uc2lzdGVuY3kgb2YgY3Vyc29yIHN0eWxlIGJldHdlZW4gaW1hZ2UtdHlwZVxcclxcbiAqICAgIGBpbnB1dGAgYW5kIG90aGVycy5cXHJcXG4gKiA0LiBSZW1vdmUgaW5uZXIgc3BhY2luZyBpbiBJRSA3IHdpdGhvdXQgYWZmZWN0aW5nIG5vcm1hbCB0ZXh0IGlucHV0cy5cXHJcXG4gKiAgICBLbm93biBpc3N1ZTogaW5uZXIgc3BhY2luZyByZW1haW5zIGluIElFIDYuXFxyXFxuICovXFxyXFxuXFxyXFxuYnV0dG9uLFxcclxcbmh0bWwgaW5wdXRbdHlwZT1cXFwiYnV0dG9uXFxcIl0sIC8qIDEgKi9cXHJcXG5pbnB1dFt0eXBlPVxcXCJyZXNldFxcXCJdLFxcclxcbmlucHV0W3R5cGU9XFxcInN1Ym1pdFxcXCJdIHtcXHJcXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247IC8qIDIgKi9cXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyOyAvKiAzICovXFxyXFxuICAgICpvdmVyZmxvdzogdmlzaWJsZTsgIC8qIDQgKi9cXHJcXG59XFxyXFxuXFxyXFxuLyoqXFxyXFxuICogUmUtc2V0IGRlZmF1bHQgY3Vyc29yIGZvciBkaXNhYmxlZCBlbGVtZW50cy5cXHJcXG4gKi9cXHJcXG5cXHJcXG5idXR0b25bZGlzYWJsZWRdLFxcclxcbmh0bWwgaW5wdXRbZGlzYWJsZWRdIHtcXHJcXG4gICAgY3Vyc29yOiBkZWZhdWx0O1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiAxLiBBZGRyZXNzIGJveCBzaXppbmcgc2V0IHRvIGNvbnRlbnQtYm94IGluIElFIDgvOS5cXHJcXG4gKiAyLiBSZW1vdmUgZXhjZXNzIHBhZGRpbmcgaW4gSUUgOC85LlxcclxcbiAqIDMuIFJlbW92ZSBleGNlc3MgcGFkZGluZyBpbiBJRSA3LlxcclxcbiAqICAgIEtub3duIGlzc3VlOiBleGNlc3MgcGFkZGluZyByZW1haW5zIGluIElFIDYuXFxyXFxuICovXFxyXFxuXFxyXFxuaW5wdXRbdHlwZT1cXFwiY2hlY2tib3hcXFwiXSxcXHJcXG5pbnB1dFt0eXBlPVxcXCJyYWRpb1xcXCJdIHtcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xcclxcbiAgICBwYWRkaW5nOiAwOyAvKiAyICovXFxyXFxuICAgICpoZWlnaHQ6IDEzcHg7IC8qIDMgKi9cXHJcXG4gICAgKndpZHRoOiAxM3B4OyAvKiAzICovXFxyXFxufVxcclxcblxcclxcbi8qKlxcclxcbiAqIDEuIEFkZHJlc3MgYGFwcGVhcmFuY2VgIHNldCB0byBgc2VhcmNoZmllbGRgIGluIFNhZmFyaSA1IGFuZCBDaHJvbWUuXFxyXFxuICogMi4gQWRkcmVzcyBgYm94LXNpemluZ2Agc2V0IHRvIGBib3JkZXItYm94YCBpbiBTYWZhcmkgNSBhbmQgQ2hyb21lXFxyXFxuICogICAgKGluY2x1ZGUgYC1tb3pgIHRvIGZ1dHVyZS1wcm9vZikuXFxyXFxuICovXFxyXFxuXFxyXFxuaW5wdXRbdHlwZT1cXFwic2VhcmNoXFxcIl0ge1xcclxcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDsgLyogMSAqL1xcclxcbiAgICAtbW96LWJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xcclxcbiAgICAtd2Via2l0LWJveC1zaXppbmc6IGNvbnRlbnQtYm94OyAvKiAyICovXFxyXFxuICAgIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgc2VhcmNoIGNhbmNlbCBidXR0b24gaW4gU2FmYXJpIDUgYW5kIENocm9tZVxcclxcbiAqIG9uIE9TIFguXFxyXFxuICovXFxyXFxuXFxyXFxuaW5wdXRbdHlwZT1cXFwic2VhcmNoXFxcIl06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sXFxyXFxuaW5wdXRbdHlwZT1cXFwic2VhcmNoXFxcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xcclxcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbi8qKlxcclxcbiAqIFJlbW92ZSBpbm5lciBwYWRkaW5nIGFuZCBib3JkZXIgaW4gRmlyZWZveCAzKy5cXHJcXG4gKi9cXHJcXG5cXHJcXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXFxyXFxuaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXIge1xcclxcbiAgICBib3JkZXI6IDA7XFxyXFxuICAgIHBhZGRpbmc6IDA7XFxyXFxufVxcclxcblxcclxcbi8qKlxcclxcbiAqIDEuIFJlbW92ZSBkZWZhdWx0IHZlcnRpY2FsIHNjcm9sbGJhciBpbiBJRSA2LzcvOC85LlxcclxcbiAqIDIuIEltcHJvdmUgcmVhZGFiaWxpdHkgYW5kIGFsaWdubWVudCBpbiBhbGwgYnJvd3NlcnMuXFxyXFxuICovXFxyXFxuXFxyXFxudGV4dGFyZWEge1xcclxcbiAgICBvdmVyZmxvdzogYXV0bzsgLyogMSAqL1xcclxcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wOyAvKiAyICovXFxyXFxufVxcclxcblxcclxcbi8qKlxcclxcbiAqIFJlbW92ZSBtb3N0IHNwYWNpbmcgYmV0d2VlbiB0YWJsZSBjZWxscy5cXHJcXG4gKi9cXHJcXG5cXHJcXG50YWJsZSB7XFxyXFxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxyXFxuICAgIGJvcmRlci1zcGFjaW5nOiAwO1xcclxcbn1cXHJcXG5cXHJcXG5odG1sLFxcclxcbmJ1dHRvbixcXHJcXG5pbnB1dCxcXHJcXG5zZWxlY3QsXFxyXFxudGV4dGFyZWEge1xcclxcbiAgICBjb2xvcjogIzIyMjtcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuOjotbW96LXNlbGVjdGlvbiB7XFxyXFxuICAgIGJhY2tncm91bmQ6ICNiM2Q0ZmM7XFxyXFxuICAgIHRleHQtc2hhZG93OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG46OnNlbGVjdGlvbiB7XFxyXFxuICAgIGJhY2tncm91bmQ6ICNiM2Q0ZmM7XFxyXFxuICAgIHRleHQtc2hhZG93OiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG5pbWcge1xcclxcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcclxcbn1cXHJcXG5cXHJcXG5maWVsZHNldCB7XFxyXFxuICAgIGJvcmRlcjogMDtcXHJcXG4gICAgbWFyZ2luOiAwO1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG5cXHJcXG50ZXh0YXJlYSB7XFxyXFxuICAgIHJlc2l6ZTogdmVydGljYWw7XFxyXFxufVxcclxcblxcclxcbi5jaHJvbWVmcmFtZSB7XFxyXFxuICAgIG1hcmdpbjogMC4yZW0gMDtcXHJcXG4gICAgYmFja2dyb3VuZDogI2NjYztcXHJcXG4gICAgY29sb3I6ICMwMDA7XFxyXFxuICAgIHBhZGRpbmc6IDAuMmVtIDA7XFxyXFxufVxcclxcblxcclxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvcmVzZXQuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBOzs7Q0FHQzs7QUFFRDs7Ozs7Ozs7Ozs7OztF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QUFDZjs7O0FBR0E7SUFDSSxtQkFBbUI7SUFDbkIsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksbUJBQW1CO0lBQ25CLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLFNBQVM7SUFDVCxTQUFTO0lBQ1QsVUFBVTtBQUNkOztBQUVBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixXQUFXO0lBQ1gsZ0JBQWdCO0FBQ3BCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qIGh0dHA6Ly9tZXllcndlYi5jb20vZXJpYy90b29scy9jc3MvcmVzZXQvXFxyXFxuICAgdjIuMC1tb2RpZmllZCB8IDIwMTEwMTI2XFxyXFxuICAgTGljZW5zZTogbm9uZSAocHVibGljIGRvbWFpbilcXHJcXG4qL1xcclxcblxcclxcbmh0bWwsIGJvZHksIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcXHJcXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXFxyXFxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxcclxcbmRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcXHJcXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLFxcclxcbmIsIHUsIGksIGNlbnRlcixcXHJcXG5kbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxcclxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxcclxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxcclxcbmFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLFxcclxcbmZpZ3VyZSwgZmlnY2FwdGlvbiwgZm9vdGVyLCBoZWFkZXIsIGhncm91cCxcXHJcXG5tZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSxcXHJcXG50aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8ge1xcclxcbiAgbWFyZ2luOiAwO1xcclxcblxcdHBhZGRpbmc6IDA7XFxyXFxuXFx0Ym9yZGVyOiAwO1xcclxcblxcdGZvbnQtc2l6ZTogMTAwJTtcXHJcXG5cXHRmb250OiBpbmhlcml0O1xcclxcblxcdHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcXHJcXG59XFxyXFxuXFxyXFxuLyogbWFrZSBzdXJlIHRvIHNldCBzb21lIGZvY3VzIHN0eWxlcyBmb3IgYWNjZXNzaWJpbGl0eSAqL1xcclxcbjpmb2N1cyB7XFxyXFxuICAgIG91dGxpbmU6IDA7XFxyXFxufVxcclxcblxcclxcbi8qIEhUTUw1IGRpc3BsYXktcm9sZSByZXNldCBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cXHJcXG5hcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLFxcclxcbmZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG1lbnUsIG5hdiwgc2VjdGlvbiB7XFxyXFxuXFx0ZGlzcGxheTogYmxvY2s7XFxyXFxufVxcclxcblxcclxcbmJvZHkge1xcclxcblxcdGxpbmUtaGVpZ2h0OiAxO1xcclxcbn1cXHJcXG5cXHJcXG5vbCwgdWwge1xcclxcblxcdGxpc3Qtc3R5bGU6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbmJsb2NrcXVvdGUsIHEge1xcclxcblxcdHF1b3Rlczogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXFxyXFxucTpiZWZvcmUsIHE6YWZ0ZXIge1xcclxcblxcdGNvbnRlbnQ6ICcnO1xcclxcblxcdGNvbnRlbnQ6IG5vbmU7XFxyXFxufVxcclxcblxcclxcbnRhYmxlIHtcXHJcXG5cXHRib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcclxcblxcdGJvcmRlci1zcGFjaW5nOiAwO1xcclxcbn1cXHJcXG5cXHJcXG5pbnB1dFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sXFxyXFxuaW5wdXRbdHlwZT1zZWFyY2hdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uLFxcclxcbmlucHV0W3R5cGU9c2VhcmNoXTo6LXdlYmtpdC1zZWFyY2gtcmVzdWx0cy1idXR0b24sXFxyXFxuaW5wdXRbdHlwZT1zZWFyY2hdOjotd2Via2l0LXNlYXJjaC1yZXN1bHRzLWRlY29yYXRpb24ge1xcclxcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxyXFxuICAgIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuaW5wdXRbdHlwZT1zZWFyY2hdIHtcXHJcXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcclxcbiAgICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XFxyXFxuICAgIC13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7XFxyXFxuICAgIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XFxyXFxuICAgIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xcclxcbn1cXHJcXG5cXHJcXG50ZXh0YXJlYSB7XFxyXFxuICAgIG92ZXJmbG93OiBhdXRvO1xcclxcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xcclxcbiAgICByZXNpemU6IHZlcnRpY2FsO1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiBDb3JyZWN0IGBpbmxpbmUtYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgaW4gSUUgNi83LzgvOSBhbmQgRmlyZWZveCAzLlxcclxcbiAqL1xcclxcblxcclxcbmF1ZGlvLFxcclxcbmNhbnZhcyxcXHJcXG52aWRlbyB7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gICAgKmRpc3BsYXk6IGlubGluZTtcXHJcXG4gICAgKnpvb206IDE7XFxyXFxuICAgIG1heC13aWR0aDogMTAwJTtcXHJcXG59XFxyXFxuXFxyXFxuLyoqXFxyXFxuICogUHJldmVudCBtb2Rlcm4gYnJvd3NlcnMgZnJvbSBkaXNwbGF5aW5nIGBhdWRpb2Agd2l0aG91dCBjb250cm9scy5cXHJcXG4gKiBSZW1vdmUgZXhjZXNzIGhlaWdodCBpbiBpT1MgNSBkZXZpY2VzLlxcclxcbiAqL1xcclxcblxcclxcbmF1ZGlvOm5vdChbY29udHJvbHNdKSB7XFxyXFxuICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxuICAgIGhlaWdodDogMDtcXHJcXG59XFxyXFxuXFxyXFxuLyoqXFxyXFxuICogQWRkcmVzcyBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDcvOC85LCBGaXJlZm94IDMsIGFuZCBTYWZhcmkgNC5cXHJcXG4gKiBLbm93biBpc3N1ZTogbm8gSUUgNiBzdXBwb3J0LlxcclxcbiAqL1xcclxcblxcclxcbltoaWRkZW5dIHtcXHJcXG4gICAgZGlzcGxheTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLyoqXFxyXFxuICogMS4gQ29ycmVjdCB0ZXh0IHJlc2l6aW5nIG9kZGx5IGluIElFIDYvNyB3aGVuIGJvZHkgYGZvbnQtc2l6ZWAgaXMgc2V0IHVzaW5nXFxyXFxuICogICAgYGVtYCB1bml0cy5cXHJcXG4gKiAyLiBQcmV2ZW50IGlPUyB0ZXh0IHNpemUgYWRqdXN0IGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZSwgd2l0aG91dCBkaXNhYmxpbmdcXHJcXG4gKiAgICB1c2VyIHpvb20uXFxyXFxuICovXFxyXFxuXFxyXFxuaHRtbCB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMTAwJTsgLyogMSAqL1xcclxcbiAgICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cXHJcXG4gICAgLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cXHJcXG59XFxyXFxuXFxyXFxuLyoqXFxyXFxuICogQWRkcmVzcyBgb3V0bGluZWAgaW5jb25zaXN0ZW5jeSBiZXR3ZWVuIENocm9tZSBhbmQgb3RoZXIgYnJvd3NlcnMuXFxyXFxuICovXFxyXFxuXFxyXFxuYTpmb2N1cyB7XFxyXFxuICAgIG91dGxpbmU6IHRoaW4gZG90dGVkO1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiBJbXByb3ZlIHJlYWRhYmlsaXR5IHdoZW4gZm9jdXNlZCBhbmQgYWxzbyBtb3VzZSBob3ZlcmVkIGluIGFsbCBicm93c2Vycy5cXHJcXG4gKi9cXHJcXG5cXHJcXG5hOmFjdGl2ZSxcXHJcXG5hOmhvdmVyIHtcXHJcXG4gICAgb3V0bGluZTogMDtcXHJcXG59XFxyXFxuXFxyXFxuLyoqXFxyXFxuICogMS4gUmVtb3ZlIGJvcmRlciB3aGVuIGluc2lkZSBgYWAgZWxlbWVudCBpbiBJRSA2LzcvOC85IGFuZCBGaXJlZm94IDMuXFxyXFxuICogMi4gSW1wcm92ZSBpbWFnZSBxdWFsaXR5IHdoZW4gc2NhbGVkIGluIElFIDcuXFxyXFxuICovXFxyXFxuXFxyXFxuaW1nIHtcXHJcXG4gICAgYm9yZGVyOiAwOyAvKiAxICovXFxyXFxuICAgIC1tcy1pbnRlcnBvbGF0aW9uLW1vZGU6IGJpY3ViaWM7IC8qIDIgKi9cXHJcXG59XFxyXFxuXFxyXFxuLyoqXFxyXFxuICogQWRkcmVzcyBtYXJnaW4gbm90IHByZXNlbnQgaW4gSUUgNi83LzgvOSwgU2FmYXJpIDUsIGFuZCBPcGVyYSAxMS5cXHJcXG4gKi9cXHJcXG5cXHJcXG5maWd1cmUge1xcclxcbiAgICBtYXJnaW46IDA7XFxyXFxufVxcclxcblxcclxcbi8qKlxcclxcbiAqIENvcnJlY3QgbWFyZ2luIGRpc3BsYXllZCBvZGRseSBpbiBJRSA2LzcuXFxyXFxuICovXFxyXFxuXFxyXFxuZm9ybSB7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG59XFxyXFxuXFxyXFxuLyoqXFxyXFxuICogRGVmaW5lIGNvbnNpc3RlbnQgYm9yZGVyLCBtYXJnaW4sIGFuZCBwYWRkaW5nLlxcclxcbiAqL1xcclxcblxcclxcbmZpZWxkc2V0IHtcXHJcXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2MwYzBjMDtcXHJcXG4gICAgbWFyZ2luOiAwIDJweDtcXHJcXG4gICAgcGFkZGluZzogMC4zNWVtIDAuNjI1ZW0gMC43NWVtO1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiAxLiBDb3JyZWN0IGNvbG9yIG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gSUUgNi83LzgvOS5cXHJcXG4gKiAyLiBDb3JyZWN0IHRleHQgbm90IHdyYXBwaW5nIGluIEZpcmVmb3ggMy5cXHJcXG4gKiAzLiBDb3JyZWN0IGFsaWdubWVudCBkaXNwbGF5ZWQgb2RkbHkgaW4gSUUgNi83LlxcclxcbiAqL1xcclxcblxcclxcbmxlZ2VuZCB7XFxyXFxuICAgIGJvcmRlcjogMDsgLyogMSAqL1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbiAgICB3aGl0ZS1zcGFjZTogbm9ybWFsOyAvKiAyICovXFxyXFxuICAgICptYXJnaW4tbGVmdDogLTdweDsgLyogMyAqL1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiAxLiBDb3JyZWN0IGZvbnQgc2l6ZSBub3QgYmVpbmcgaW5oZXJpdGVkIGluIGFsbCBicm93c2Vycy5cXHJcXG4gKiAyLiBBZGRyZXNzIG1hcmdpbnMgc2V0IGRpZmZlcmVudGx5IGluIElFIDYvNywgRmlyZWZveCAzKywgU2FmYXJpIDUsXFxyXFxuICogICAgYW5kIENocm9tZS5cXHJcXG4gKiAzLiBJbXByb3ZlIGFwcGVhcmFuY2UgYW5kIGNvbnNpc3RlbmN5IGluIGFsbCBicm93c2Vycy5cXHJcXG4gKi9cXHJcXG5cXHJcXG5idXR0b24sXFxyXFxuaW5wdXQsXFxyXFxuc2VsZWN0LFxcclxcbnRleHRhcmVhIHtcXHJcXG4gICAgZm9udC1zaXplOiAxMDAlOyAvKiAxICovXFxyXFxuICAgIG1hcmdpbjogMDsgLyogMiAqL1xcclxcbiAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IC8qIDMgKi9cXHJcXG4gICAgKnZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IC8qIDMgKi9cXHJcXG59XFxyXFxuXFxyXFxuLyoqXFxyXFxuICogQWRkcmVzcyBGaXJlZm94IDMrIHNldHRpbmcgYGxpbmUtaGVpZ2h0YCBvbiBgaW5wdXRgIHVzaW5nIGAhaW1wb3J0YW50YCBpblxcclxcbiAqIHRoZSBVQSBzdHlsZXNoZWV0LlxcclxcbiAqL1xcclxcblxcclxcbmJ1dHRvbixcXHJcXG5pbnB1dCB7XFxyXFxuICAgIGxpbmUtaGVpZ2h0OiBub3JtYWw7XFxyXFxufVxcclxcblxcclxcbi8qKlxcclxcbiAqIEFkZHJlc3MgaW5jb25zaXN0ZW50IGB0ZXh0LXRyYW5zZm9ybWAgaW5oZXJpdGFuY2UgZm9yIGBidXR0b25gIGFuZCBgc2VsZWN0YC5cXHJcXG4gKiBBbGwgb3RoZXIgZm9ybSBjb250cm9sIGVsZW1lbnRzIGRvIG5vdCBpbmhlcml0IGB0ZXh0LXRyYW5zZm9ybWAgdmFsdWVzLlxcclxcbiAqIENvcnJlY3QgYGJ1dHRvbmAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gQ2hyb21lLCBTYWZhcmkgNSssIGFuZCBJRSA2Ky5cXHJcXG4gKiBDb3JyZWN0IGBzZWxlY3RgIHN0eWxlIGluaGVyaXRhbmNlIGluIEZpcmVmb3ggNCsgYW5kIE9wZXJhLlxcclxcbiAqL1xcclxcblxcclxcbmJ1dHRvbixcXHJcXG5zZWxlY3Qge1xcclxcbiAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuLyoqXFxyXFxuICogMS4gQXZvaWQgdGhlIFdlYktpdCBidWcgaW4gQW5kcm9pZCA0LjAuKiB3aGVyZSAoMikgZGVzdHJveXMgbmF0aXZlIGBhdWRpb2BcXHJcXG4gKiAgICBhbmQgYHZpZGVvYCBjb250cm9scy5cXHJcXG4gKiAyLiBDb3JyZWN0IGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgYGlucHV0YCB0eXBlcyBpbiBpT1MuXFxyXFxuICogMy4gSW1wcm92ZSB1c2FiaWxpdHkgYW5kIGNvbnNpc3RlbmN5IG9mIGN1cnNvciBzdHlsZSBiZXR3ZWVuIGltYWdlLXR5cGVcXHJcXG4gKiAgICBgaW5wdXRgIGFuZCBvdGhlcnMuXFxyXFxuICogNC4gUmVtb3ZlIGlubmVyIHNwYWNpbmcgaW4gSUUgNyB3aXRob3V0IGFmZmVjdGluZyBub3JtYWwgdGV4dCBpbnB1dHMuXFxyXFxuICogICAgS25vd24gaXNzdWU6IGlubmVyIHNwYWNpbmcgcmVtYWlucyBpbiBJRSA2LlxcclxcbiAqL1xcclxcblxcclxcbmJ1dHRvbixcXHJcXG5odG1sIGlucHV0W3R5cGU9XFxcImJ1dHRvblxcXCJdLCAvKiAxICovXFxyXFxuaW5wdXRbdHlwZT1cXFwicmVzZXRcXFwiXSxcXHJcXG5pbnB1dFt0eXBlPVxcXCJzdWJtaXRcXFwiXSB7XFxyXFxuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAyICovXFxyXFxuICAgIGN1cnNvcjogcG9pbnRlcjsgLyogMyAqL1xcclxcbiAgICAqb3ZlcmZsb3c6IHZpc2libGU7ICAvKiA0ICovXFxyXFxufVxcclxcblxcclxcbi8qKlxcclxcbiAqIFJlLXNldCBkZWZhdWx0IGN1cnNvciBmb3IgZGlzYWJsZWQgZWxlbWVudHMuXFxyXFxuICovXFxyXFxuXFxyXFxuYnV0dG9uW2Rpc2FibGVkXSxcXHJcXG5odG1sIGlucHV0W2Rpc2FibGVkXSB7XFxyXFxuICAgIGN1cnNvcjogZGVmYXVsdDtcXHJcXG59XFxyXFxuXFxyXFxuLyoqXFxyXFxuICogMS4gQWRkcmVzcyBib3ggc2l6aW5nIHNldCB0byBjb250ZW50LWJveCBpbiBJRSA4LzkuXFxyXFxuICogMi4gUmVtb3ZlIGV4Y2VzcyBwYWRkaW5nIGluIElFIDgvOS5cXHJcXG4gKiAzLiBSZW1vdmUgZXhjZXNzIHBhZGRpbmcgaW4gSUUgNy5cXHJcXG4gKiAgICBLbm93biBpc3N1ZTogZXhjZXNzIHBhZGRpbmcgcmVtYWlucyBpbiBJRSA2LlxcclxcbiAqL1xcclxcblxcclxcbmlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl0sXFxyXFxuaW5wdXRbdHlwZT1cXFwicmFkaW9cXFwiXSB7XFxyXFxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IC8qIDEgKi9cXHJcXG4gICAgcGFkZGluZzogMDsgLyogMiAqL1xcclxcbiAgICAqaGVpZ2h0OiAxM3B4OyAvKiAzICovXFxyXFxuICAgICp3aWR0aDogMTNweDsgLyogMyAqL1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiAxLiBBZGRyZXNzIGBhcHBlYXJhbmNlYCBzZXQgdG8gYHNlYXJjaGZpZWxkYCBpbiBTYWZhcmkgNSBhbmQgQ2hyb21lLlxcclxcbiAqIDIuIEFkZHJlc3MgYGJveC1zaXppbmdgIHNldCB0byBgYm9yZGVyLWJveGAgaW4gU2FmYXJpIDUgYW5kIENocm9tZVxcclxcbiAqICAgIChpbmNsdWRlIGAtbW96YCB0byBmdXR1cmUtcHJvb2YpLlxcclxcbiAqL1xcclxcblxcclxcbmlucHV0W3R5cGU9XFxcInNlYXJjaFxcXCJdIHtcXHJcXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7IC8qIDEgKi9cXHJcXG4gICAgLW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXHJcXG4gICAgLXdlYmtpdC1ib3gtc2l6aW5nOiBjb250ZW50LWJveDsgLyogMiAqL1xcclxcbiAgICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXHJcXG59XFxyXFxuXFxyXFxuLyoqXFxyXFxuICogUmVtb3ZlIGlubmVyIHBhZGRpbmcgYW5kIHNlYXJjaCBjYW5jZWwgYnV0dG9uIGluIFNhZmFyaSA1IGFuZCBDaHJvbWVcXHJcXG4gKiBvbiBPUyBYLlxcclxcbiAqL1xcclxcblxcclxcbmlucHV0W3R5cGU9XFxcInNlYXJjaFxcXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxcclxcbmlucHV0W3R5cGU9XFxcInNlYXJjaFxcXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcXHJcXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgYm9yZGVyIGluIEZpcmVmb3ggMysuXFxyXFxuICovXFxyXFxuXFxyXFxuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxcclxcbmlucHV0OjotbW96LWZvY3VzLWlubmVyIHtcXHJcXG4gICAgYm9yZGVyOiAwO1xcclxcbiAgICBwYWRkaW5nOiAwO1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiAxLiBSZW1vdmUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUgNi83LzgvOS5cXHJcXG4gKiAyLiBJbXByb3ZlIHJlYWRhYmlsaXR5IGFuZCBhbGlnbm1lbnQgaW4gYWxsIGJyb3dzZXJzLlxcclxcbiAqL1xcclxcblxcclxcbnRleHRhcmVhIHtcXHJcXG4gICAgb3ZlcmZsb3c6IGF1dG87IC8qIDEgKi9cXHJcXG4gICAgdmVydGljYWwtYWxpZ246IHRvcDsgLyogMiAqL1xcclxcbn1cXHJcXG5cXHJcXG4vKipcXHJcXG4gKiBSZW1vdmUgbW9zdCBzcGFjaW5nIGJldHdlZW4gdGFibGUgY2VsbHMuXFxyXFxuICovXFxyXFxuXFxyXFxudGFibGUge1xcclxcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcclxcbiAgICBib3JkZXItc3BhY2luZzogMDtcXHJcXG59XFxyXFxuXFxyXFxuaHRtbCxcXHJcXG5idXR0b24sXFxyXFxuaW5wdXQsXFxyXFxuc2VsZWN0LFxcclxcbnRleHRhcmVhIHtcXHJcXG4gICAgY29sb3I6ICMyMjI7XFxyXFxufVxcclxcblxcclxcblxcclxcbjo6LW1vei1zZWxlY3Rpb24ge1xcclxcbiAgICBiYWNrZ3JvdW5kOiAjYjNkNGZjO1xcclxcbiAgICB0ZXh0LXNoYWRvdzogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuOjpzZWxlY3Rpb24ge1xcclxcbiAgICBiYWNrZ3JvdW5kOiAjYjNkNGZjO1xcclxcbiAgICB0ZXh0LXNoYWRvdzogbm9uZTtcXHJcXG59XFxyXFxuXFxyXFxuaW1nIHtcXHJcXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXHJcXG59XFxyXFxuXFxyXFxuZmllbGRzZXQge1xcclxcbiAgICBib3JkZXI6IDA7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgcGFkZGluZzogMDtcXHJcXG59XFxyXFxuXFxyXFxudGV4dGFyZWEge1xcclxcbiAgICByZXNpemU6IHZlcnRpY2FsO1xcclxcbn1cXHJcXG5cXHJcXG4uY2hyb21lZnJhbWUge1xcclxcbiAgICBtYXJnaW46IDAuMmVtIDA7XFxyXFxuICAgIGJhY2tncm91bmQ6ICNjY2M7XFxyXFxuICAgIGNvbG9yOiAjMDAwO1xcclxcbiAgICBwYWRkaW5nOiAwLjJlbSAwO1xcclxcbn1cXHJcXG5cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IHRoaXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgdmFyIGlkID0gdGhpc1trXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpOyAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ydW50aW1lLmpzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls4LFwiPj0gNC4zLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJnYW1lLWFyZW5hXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiZmlyc3QtcGxheWVyLWFyZW5hXFxcIj48L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwibWlkZGxlLWJpc2VjdG9yXFxcIj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInJvdW5kcy1jb250YWluZXJcXFwiPlxcclxcbiAgICAgICAgICAgIDxwPlJvdW5kIDxzcGFuIGNsYXNzPVxcXCJyb3VuZC1udW1cXFwiPjE8L3NwYW4+PC9wPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzZWNvbmQtcGxheWVyLWFyZW5hXFxcIj48L2Rpdj5cXHJcXG48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pOyIsInZhciBIYW5kbGViYXJzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9oYW5kbGViYXJzL3J1bnRpbWUuanNcIik7XG5mdW5jdGlvbiBfX2RlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgKG9iai5fX2VzTW9kdWxlID8gb2JqW1wiZGVmYXVsdFwiXSA6IG9iaik7IH1cbm1vZHVsZS5leHBvcnRzID0gKEhhbmRsZWJhcnNbXCJkZWZhdWx0XCJdIHx8IEhhbmRsZWJhcnMpLnRlbXBsYXRlKHtcIjFcIjpmdW5jdGlvbihjb250YWluZXIsZGVwdGgwLGhlbHBlcnMscGFydGlhbHMsZGF0YSkge1xuICAgIHJldHVybiBcIiAgICA8ZGl2IGNsYXNzPVxcXCJib2FyZC1ibG9ja1xcXCI+PC9kaXY+XFxyXFxuXCI7XG59LFwiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIHN0YWNrMSwgbG9va3VwUHJvcGVydHkgPSBjb250YWluZXIubG9va3VwUHJvcGVydHkgfHwgZnVuY3Rpb24ocGFyZW50LCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJlbnQsIHByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH07XG5cbiAgcmV0dXJuICgoc3RhY2sxID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcImVhY2hcIikuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcImJsb2Nrc1wiKSA6IGRlcHRoMCkse1wibmFtZVwiOlwiZWFjaFwiLFwiaGFzaFwiOnt9LFwiZm5cIjpjb250YWluZXIucHJvZ3JhbSgxLCBkYXRhLCAwKSxcImludmVyc2VcIjpjb250YWluZXIubm9vcCxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6MSxcImNvbHVtblwiOjB9LFwiZW5kXCI6e1wibGluZVwiOjMsXCJjb2x1bW5cIjo5fX19KSkgIT0gbnVsbCA/IHN0YWNrMSA6IFwiXCIpO1xufSxcInVzZURhdGFcIjp0cnVlfSk7IiwidmFyIEhhbmRsZWJhcnMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvcnVudGltZS5qc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwibW9kYWwtY29udGFpbmVyXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiZ2FtZS10eXBlLW1vZGFsXFxcIj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcIm1vZGFsLWhlYWRlclxcXCI+XFxyXFxuICAgICAgICAgICAgPGgyPkdhbWUgVHlwZTwvaDI+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcIm1vZGFsLWJvZHlcXFwiPlxcclxcbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzPVxcXCJzZWN0aW9uLXR5cGUtb3B0aW9uc1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxmb3JtIGlkPVxcXCJmb3JtLWdhbWUtdHlwZVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVxcXCJzaW5nbGUtcGxheWVyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cXFwicmFkaW9cXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVxcXCJzaW5nbGUtcGxheWVyXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVxcXCJnYW1lLXR5cGVcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPVxcXCIxXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5TaW5nbGUgUGxheWVyPC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XFxcIm11bHRpcGxheWVyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cXFwicmFkaW9cXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkPVxcXCJtdWx0aXBsYXllclxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT1cXFwiZ2FtZS10eXBlXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT1cXFwiMlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPk11bHRpcGxheWVyPC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cXHJcXG4gICAgICAgICAgICAgICAgPC9mb3JtPlxcclxcbiAgICAgICAgICAgIDwvc2VjdGlvbj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGhyIGNsYXNzPVxcXCJpY3ktaHJcXFwiIC8+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1vcHRpb25zXFxcIj5cXHJcXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4tcGxheVxcXCI+UGxheTwvYnV0dG9uPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7IiwidmFyIEhhbmRsZWJhcnMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvcnVudGltZS5qc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwibW9kYWwtY29udGFpbmVyXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiZ3JpZC1zaXplLW1vZGFsXFxcIj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcIm1vZGFsLWhlYWRlclxcXCI+XFxyXFxuICAgICAgICAgICAgPGgyPk9wdGlvbnM8L2gyPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1ib2R5XFxcIj5cXHJcXG4gICAgICAgICAgICA8c2VjdGlvbiBjbGFzcz1cXFwic2VjdGlvbi1ncmlkLXNpemVcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8aGVhZGVyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGgzPkdyaWQgU2l6ZTwvaDM+XFxyXFxuICAgICAgICAgICAgICAgIDwvaGVhZGVyPlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwid2lkdGgtbGFiZWxcXFwiPldpZHRoPC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ3aWR0aC1jb3VudGVyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJtaW51c1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHN2Z1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cXFwiYmkgYmktZGFzaC1sZ1xcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgID5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGhcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9XFxcIk0yIDhhLjUuNSAwIDAgMSAuNS0uNWgxMWEuNS41IDAgMCAxIDAgMWgtMTFBLjUuNSAwIDAgMSAyIDhaXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9wYXRoPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcIm51bWJlclxcXCI+PC9zcGFuPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcInBsdXNcXFwiPjxzdmdcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD1cXFwiMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD1cXFwiMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw9XFxcImN1cnJlbnRDb2xvclxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcImJpIGJpLXBsdXMtbGdcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPVxcXCJNOCAyYS41LjUgMCAwIDEgLjUuNXY1aDVhLjUuNSAwIDAgMSAwIDFoLTV2NWEuNS41IDAgMCAxLTEgMHYtNWgtNWEuNS41IDAgMCAxIDAtMWg1di01QS41LjUgMCAwIDEgOCAyWlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvcGF0aD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz48L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaGVpZ2h0LWxhYmVsXFxcIj5IZWlnaHQ8L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImhlaWdodC1jb3VudGVyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJtaW51c1xcXCI+PHN2Z1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cXFwiYmkgYmktZGFzaC1sZ1xcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgID5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGhcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9XFxcIk0yIDhhLjUuNSAwIDAgMSAuNS0uNWgxMWEuNS41IDAgMCAxIDAgMWgtMTFBLjUuNSAwIDAgMSAyIDhaXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9wYXRoPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJudW1iZXJcXFwiPjE8L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwicGx1c1xcXCI+PHN2Z1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cXFwiYmkgYmktcGx1cy1sZ1xcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgID5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGhcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9XFxcIk04IDJhLjUuNSAwIDAgMSAuNS41djVoNWEuNS41IDAgMCAxIDAgMWgtNXY1YS41LjUgMCAwIDEtMSAwdi01aC01YS41LjUgMCAwIDEgMC0xaDV2LTVBLjUuNSAwIDAgMSA4IDJaXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+PC9wYXRoPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPjwvc3Bhbj5cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImJvYXJkXFxcIj48L2Rpdj5cXHJcXG4gICAgICAgICAgICA8L3NlY3Rpb24+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxociBjbGFzcz1cXFwiaWN5LWhyXFxcIiAvPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibW9kYWwtb3B0aW9uc1xcXCI+XFxyXFxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuLW5leHRcXFwiPk5leHQ8L2J1dHRvbj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibW9kYWwtc3BhY2VyXFxcIj48L2Rpdj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTsiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ydW50aW1lLmpzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls4LFwiPj0gNC4zLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJtb2RhbC1jb250YWluZXJcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJydWxlcy1tb2RhbFxcXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1oZWFkZXJcXFwiPlxcclxcbiAgICAgICAgICAgIDxoMj5SdWxlczwvaDI+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcIm1vZGFsLWJvZHlcXFwiPlxcclxcbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzPVxcXCJzZWN0aW9uLW92ZXJ2aWV3XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGhlYWRlcj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxoMz5PdmVydmlldzwvaDM+XFxyXFxuICAgICAgICAgICAgICAgIDwvaGVhZGVyPlxcclxcbiAgICAgICAgICAgICAgICA8cD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIEJhdHRsZXNoaXAgaXMgYSB3YXItdGhlbWVkIGJvYXJkIGdhbWUgZm9yIHR3byBwbGF5ZXJzIGluIHdoaWNoIHRoZSBvcHBvbmVudHMgdHJ5XFxyXFxuICAgICAgICAgICAgICAgICAgICB0byBndWVzcyB0aGUgbG9jYXRpb24gb2YgdGhlaXIgb3Bwb25lbnQncyB3YXJzaGlwcyBhbmQgc2luayB0aGVtLlxcclxcbiAgICAgICAgICAgICAgICA8L3A+XFxyXFxuICAgICAgICAgICAgPC9zZWN0aW9uPlxcclxcbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzPVxcXCJzZWN0aW9uLWdhbWVwbGF5XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGhlYWRlcj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxoMz5HYW1lcGxheTwvaDM+XFxyXFxuICAgICAgICAgICAgICAgIDwvaGVhZGVyPlxcclxcbiAgICAgICAgICAgICAgICA8b2w+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8bGk+Qm90aCBwbGF5ZXJzIGFncmVlIG9uIHRoZSBzaXplIG9mIHRoZWlyIGJvYXJkcy48L2xpPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGxpPkJvdGggcGxheWVycyBhZ3JlZSBvbiB0aGUgbnVtYmVyIG9mIHRoZSBzaGlwcyBhbmQgdGhlaXIgbGVuZ3RoIHdoaWNoIHdpbGwgYmVcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWQgb24gdGhlIGJvYXJkcy48L2xpPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGxpPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIEVhY2ggcGxheWVyIGhpZGVzIHRoZWlyIHNoaXBzIGluIHRoZWlyIGJvYXJkLiBOb3RlOiBNYWtlIHN1cmUgdGhhdCB0aGUgb3RoZXJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIgY2FuIG5vdCBzZWUgdGhlIHNjcmVlbiB3aGlsZSB5b3VyIGFyZSBwbGFjaW5nIHRoZSBzaGlwcy5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8bGk+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgV2hlbiB0aGUgZ2FtZSBzdGFydHMgcGxheWVycyB0YWtlIHR1cm5zIGF0dGFja2luZyB0aGVpciBlbmVteSBib2FyZCwgdGhpcyBpc1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUgYnkgY2hvb3NpbmcgYSBjZWxsIG9uIHRoZSBib2FyZC5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8dWw+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHRoZXJlIGlzIGEgcGFydCBvZiB0aGUgc2hpcCB1bmRlciB0aGUgYXR0YWNrZWQgY2VsbCB0aGVuIHRoZVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNrIHN1Y2NlZGVkIGFuZCB0aGUgcGxheWVyIGNvbnRpbnVlIHRvIGF0dGFjayBhbm90aGVyIGNlbGwuXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE90aGVyd2lzZSB0aGUgYXR0YWNrIGZhaWxlZCBhbmQgdGhlIG90aGVyIHBsYXllciBzdGFydHMgaGlzIHR1cm4uXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8bGk+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHdpbm5lciBpcyB0aGUgZmlyc3QgdG8gcmV2ZWFsIGFsbCB0aGUgaGlkZGVuIHNoaXBzIGluIHRoZWlyIGVuZW15J3NcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBib2FyZC5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XFxyXFxuICAgICAgICAgICAgICAgIDwvb2w+XFxyXFxuICAgICAgICAgICAgPC9zZWN0aW9uPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8aHIgY2xhc3M9XFxcImljeS1oclxcXCIgLz5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcIm1vZGFsLW9wdGlvbnNcXFwiPlxcclxcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0bi1zdGFydFxcXCI+U3RhcnQ8L2J1dHRvbj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibW9kYWwtc3BhY2VyXFxcIj48L2Rpdj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTsiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ydW50aW1lLmpzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls4LFwiPj0gNC4zLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJtb2RhbC1jb250YWluZXJcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzaGlwcy1jaG9vc2luZy1tb2RhbFxcXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1oZWFkZXJcXFwiPlxcclxcbiAgICAgICAgICAgIDxoMj5PcHRpb25zPC9oMj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibW9kYWwtYm9keVxcXCI+XFxyXFxuICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3M9XFxcInNlY3Rpb24tY2hvb3NlLXNoaXBzXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGhlYWRlcj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxoMz5DaG9vc2UgU2hpcHM8L2gzPlxcclxcbiAgICAgICAgICAgICAgICA8L2hlYWRlcj5cXHJcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwic2hpcHNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicGFnZXMtY29udGFpbmVyXFxcIj48L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcInBhZ2luYXRpb25cXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYXJyb3ctY29udGFpbmVyIGFycm93LWNvbnRhaW5lci1idXR0b25cXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdmdcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcImxlZnQtYXJyb3dcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9XFxcIjE2XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9XFxcIjE2XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsPVxcXCJjdXJyZW50Q29sb3JcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJiaSBiaS1jYXJldC1sZWZ0LWZpbGxcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdCb3g9XFxcIjAgMCAxNiAxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPVxcXCJtMy44NiA4Ljc1MyA1LjQ4MiA0Ljc5NmMuNjQ2LjU2NiAxLjY1OC4xMDYgMS42NTgtLjc1M1YzLjIwNGExIDEgMCAwIDAtMS42NTktLjc1M2wtNS40OCA0Ljc5NmExIDEgMCAwIDAgMCAxLjUwNnpcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3BhdGg+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxwPjxzcGFuIGNsYXNzPVxcXCJjdXJyZW50LXBhZ2VcXFwiPjE8L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgL1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJwYWdlcy1udW1cXFwiPjwvc3Bhbj48L3A+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJhcnJvdy1jb250YWluZXIgYXJyb3ctY29udGFpbmVyLWJ1dHRvblxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHN2Z1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cXFwicmlnaHQtYXJyb3dcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9XFxcIjE2XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9XFxcIjE2XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsPVxcXCJjdXJyZW50Q29sb3JcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJiaSBiaS1jYXJldC1yaWdodC1maWxsXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3Qm94PVxcXCIwIDAgMTYgMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZD1cXFwibTEyLjE0IDguNzUzLTUuNDgyIDQuNzk2Yy0uNjQ2LjU2Ni0xLjY1OC4xMDYtMS42NTgtLjc1M1YzLjIwNGExIDEgMCAwIDEgMS42NTktLjc1M2w1LjQ4IDQuNzk2YTEgMSAwIDAgMSAwIDEuNTA2elxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvcGF0aD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8L3NlY3Rpb24+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxociBjbGFzcz1cXFwiaWN5LWhyXFxcIiAvPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwibW9kYWwtb3B0aW9uc1xcXCI+XFxyXFxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuLWJhY2tcXFwiPkJhY2s8L2J1dHRvbj5cXHJcXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4tc3VibWl0XFxcIj5OZXh0PC9idXR0b24+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcIm1vZGFsLXNwYWNlclxcXCI+PC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7IiwidmFyIEhhbmRsZWJhcnMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvcnVudGltZS5qc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgdmFyIGhlbHBlciwgYWxpYXMxPWRlcHRoMCAhPSBudWxsID8gZGVwdGgwIDogKGNvbnRhaW5lci5udWxsQ29udGV4dCB8fCB7fSksIGFsaWFzMj1jb250YWluZXIuaG9va3MuaGVscGVyTWlzc2luZywgYWxpYXMzPVwiZnVuY3Rpb25cIiwgYWxpYXM0PWNvbnRhaW5lci5lc2NhcGVFeHByZXNzaW9uLCBsb29rdXBQcm9wZXJ0eSA9IGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eSB8fCBmdW5jdGlvbihwYXJlbnQsIHByb3BlcnR5TmFtZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmVudCwgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBwYXJlbnRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfTtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJzaGlwLWNvbnRhaW5lclxcXCIgZGF0YS1sZW5ndGg9XFxcIlwiXG4gICAgKyBhbGlhczQoKChoZWxwZXIgPSAoaGVscGVyID0gbG9va3VwUHJvcGVydHkoaGVscGVycyxcInNoaXBMZW5ndGhcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwic2hpcExlbmd0aFwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwic2hpcExlbmd0aFwiLFwiaGFzaFwiOnt9LFwiZGF0YVwiOmRhdGEsXCJsb2NcIjp7XCJzdGFydFwiOntcImxpbmVcIjoxLFwiY29sdW1uXCI6NDF9LFwiZW5kXCI6e1wibGluZVwiOjEsXCJjb2x1bW5cIjo1NX19fSkgOiBoZWxwZXIpKSlcbiAgICArIFwiXFxcIj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwic2hpcCBhY3RpdmVcXFwiPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2hpcC1ibG9ja1xcXCI+PC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb3VudFxcXCI+XFxyXFxuICAgICAgICB4XFxyXFxuICAgICAgICA8c3BhbiBjbGFzcz1cXFwibnVtYmVyXFxcIj5cIlxuICAgICsgYWxpYXM0KCgoaGVscGVyID0gKGhlbHBlciA9IGxvb2t1cFByb3BlcnR5KGhlbHBlcnMsXCJzaGlwQ291bnRcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwic2hpcENvdW50XCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJzaGlwQ291bnRcIixcImhhc2hcIjp7fSxcImRhdGFcIjpkYXRhLFwibG9jXCI6e1wic3RhcnRcIjp7XCJsaW5lXCI6NyxcImNvbHVtblwiOjI5fSxcImVuZFwiOntcImxpbmVcIjo3LFwiY29sdW1uXCI6NDJ9fX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvc3Bhbj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTsiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ydW50aW1lLmpzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls4LFwiPj0gNC4zLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgaGVscGVyLCBhbGlhczE9ZGVwdGgwICE9IG51bGwgPyBkZXB0aDAgOiAoY29udGFpbmVyLm51bGxDb250ZXh0IHx8IHt9KSwgYWxpYXMyPWNvbnRhaW5lci5ob29rcy5oZWxwZXJNaXNzaW5nLCBhbGlhczM9XCJmdW5jdGlvblwiLCBhbGlhczQ9Y29udGFpbmVyLmVzY2FwZUV4cHJlc3Npb24sIGxvb2t1cFByb3BlcnR5ID0gY29udGFpbmVyLmxvb2t1cFByb3BlcnR5IHx8IGZ1bmN0aW9uKHBhcmVudCwgcHJvcGVydHlOYW1lKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyZW50LCBwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcmVudFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9O1xuXG4gIHJldHVybiBcIjxkaXYgY2xhc3M9XFxcInNoaXAtY29udGFpbmVyXFxcIiBkYXRhLWxlbmd0aD1cXFwiXCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwic2hpcExlbmd0aFwiKSB8fCAoZGVwdGgwICE9IG51bGwgPyBsb29rdXBQcm9wZXJ0eShkZXB0aDAsXCJzaGlwTGVuZ3RoXCIpIDogZGVwdGgwKSkgIT0gbnVsbCA/IGhlbHBlciA6IGFsaWFzMiksKHR5cGVvZiBoZWxwZXIgPT09IGFsaWFzMyA/IGhlbHBlci5jYWxsKGFsaWFzMSx7XCJuYW1lXCI6XCJzaGlwTGVuZ3RoXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjEsXCJjb2x1bW5cIjo0MX0sXCJlbmRcIjp7XCJsaW5lXCI6MSxcImNvbHVtblwiOjU1fX19KSA6IGhlbHBlcikpKVxuICAgICsgXCJcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjb3VudGVyXFxcIj5cXHJcXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJtaW51c1xcXCI+XFxyXFxuICAgICAgICAgICAgPHN2Z1xcclxcbiAgICAgICAgICAgICAgICB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiXFxyXFxuICAgICAgICAgICAgICAgIHdpZHRoPVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgaGVpZ2h0PVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIlxcclxcbiAgICAgICAgICAgICAgICBjbGFzcz1cXFwiYmkgYmktZGFzaC1sZ1xcXCJcXHJcXG4gICAgICAgICAgICAgICAgdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIlxcclxcbiAgICAgICAgICAgID5cXHJcXG4gICAgICAgICAgICAgICAgPHBhdGhcXHJcXG4gICAgICAgICAgICAgICAgICAgIGZpbGwtcnVsZT1cXFwiZXZlbm9kZFxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgIGQ9XFxcIk0yIDhhLjUuNSAwIDAgMSAuNS0uNWgxMWEuNS41IDAgMCAxIDAgMWgtMTFBLjUuNSAwIDAgMSAyIDhaXFxcIlxcclxcbiAgICAgICAgICAgICAgICA+PC9wYXRoPlxcclxcbiAgICAgICAgICAgIDwvc3ZnPlxcclxcbiAgICAgICAgPC9zcGFuPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2hpcFxcXCI+XFxyXFxuICAgICAgICAgICAgXFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJwbHVzXFxcIj48c3ZnXFxyXFxuICAgICAgICAgICAgICAgIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCJcXHJcXG4gICAgICAgICAgICAgICAgd2lkdGg9XFxcIjE2XFxcIlxcclxcbiAgICAgICAgICAgICAgICBoZWlnaHQ9XFxcIjE2XFxcIlxcclxcbiAgICAgICAgICAgICAgICBmaWxsPVxcXCJjdXJyZW50Q29sb3JcXFwiXFxyXFxuICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJiaSBiaS1wbHVzLWxnXFxcIlxcclxcbiAgICAgICAgICAgICAgICB2aWV3Qm94PVxcXCIwIDAgMTYgMTZcXFwiXFxyXFxuICAgICAgICAgICAgPlxcclxcbiAgICAgICAgICAgICAgICA8cGF0aFxcclxcbiAgICAgICAgICAgICAgICAgICAgZmlsbC1ydWxlPVxcXCJldmVub2RkXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgZD1cXFwiTTggMmEuNS41IDAgMCAxIC41LjV2NWg1YS41LjUgMCAwIDEgMCAxaC01djVhLjUuNSAwIDAgMS0xIDB2LTVoLTVhLjUuNSAwIDAgMSAwLTFoNXYtNUEuNS41IDAgMCAxIDggMlpcXFwiXFxyXFxuICAgICAgICAgICAgICAgID48L3BhdGg+XFxyXFxuICAgICAgICAgICAgPC9zdmc+PC9zcGFuPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY291bnRcXFwiPlxcclxcbiAgICAgICAgeFxcclxcbiAgICAgICAgPHNwYW4gY2xhc3M9XFxcIm51bWJlclxcXCI+XCJcbiAgICArIGFsaWFzNCgoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwic2hpcENvdW50XCIpIHx8IChkZXB0aDAgIT0gbnVsbCA/IGxvb2t1cFByb3BlcnR5KGRlcHRoMCxcInNoaXBDb3VudFwiKSA6IGRlcHRoMCkpICE9IG51bGwgPyBoZWxwZXIgOiBhbGlhczIpLCh0eXBlb2YgaGVscGVyID09PSBhbGlhczMgPyBoZWxwZXIuY2FsbChhbGlhczEse1wibmFtZVwiOlwic2hpcENvdW50XCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjM3LFwiY29sdW1uXCI6Mjl9LFwiZW5kXCI6e1wibGluZVwiOjM3LFwiY29sdW1uXCI6NDJ9fX0pIDogaGVscGVyKSkpXG4gICAgKyBcIjwvc3Bhbj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+XCI7XG59LFwidXNlRGF0YVwiOnRydWV9KTsiLCJ2YXIgSGFuZGxlYmFycyA9IHJlcXVpcmUoXCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvaGFuZGxlYmFycy9ydW50aW1lLmpzXCIpO1xuZnVuY3Rpb24gX19kZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIChvYmouX19lc01vZHVsZSA/IG9ialtcImRlZmF1bHRcIl0gOiBvYmopOyB9XG5tb2R1bGUuZXhwb3J0cyA9IChIYW5kbGViYXJzW1wiZGVmYXVsdFwiXSB8fCBIYW5kbGViYXJzKS50ZW1wbGF0ZSh7XCJjb21waWxlclwiOls4LFwiPj0gNC4zLjBcIl0sXCJtYWluXCI6ZnVuY3Rpb24oY29udGFpbmVyLGRlcHRoMCxoZWxwZXJzLHBhcnRpYWxzLGRhdGEpIHtcbiAgICB2YXIgaGVscGVyLCBsb29rdXBQcm9wZXJ0eSA9IGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eSB8fCBmdW5jdGlvbihwYXJlbnQsIHByb3BlcnR5TmFtZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmVudCwgcHJvcGVydHlOYW1lKSkge1xuICAgICAgICAgIHJldHVybiBwYXJlbnRbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkXG4gICAgfTtcblxuICByZXR1cm4gXCI8ZGl2IGNsYXNzPVxcXCJtb2RhbC1jb250YWluZXJcXFwiPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2hpcHMtcGxhY2luZy1tb2RhbFxcXCI+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwibW9kYWwtaGVhZGVyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGgyPlwiXG4gICAgKyBjb250YWluZXIuZXNjYXBlRXhwcmVzc2lvbigoKGhlbHBlciA9IChoZWxwZXIgPSBsb29rdXBQcm9wZXJ0eShoZWxwZXJzLFwicGxheWVyTGFiZWxcIikgfHwgKGRlcHRoMCAhPSBudWxsID8gbG9va3VwUHJvcGVydHkoZGVwdGgwLFwicGxheWVyTGFiZWxcIikgOiBkZXB0aDApKSAhPSBudWxsID8gaGVscGVyIDogY29udGFpbmVyLmhvb2tzLmhlbHBlck1pc3NpbmcpLCh0eXBlb2YgaGVscGVyID09PSBcImZ1bmN0aW9uXCIgPyBoZWxwZXIuY2FsbChkZXB0aDAgIT0gbnVsbCA/IGRlcHRoMCA6IChjb250YWluZXIubnVsbENvbnRleHQgfHwge30pLHtcIm5hbWVcIjpcInBsYXllckxhYmVsXCIsXCJoYXNoXCI6e30sXCJkYXRhXCI6ZGF0YSxcImxvY1wiOntcInN0YXJ0XCI6e1wibGluZVwiOjQsXCJjb2x1bW5cIjoyMH0sXCJlbmRcIjp7XCJsaW5lXCI6NCxcImNvbHVtblwiOjM1fX19KSA6IGhlbHBlcikpKVxuICAgICsgXCI8L2gyPlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIm1vZGFsLWJvZHlcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8c2VjdGlvbiBjbGFzcz1cXFwic2VjdGlvbi1wbGF5ZXItbmFtZVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8aGVhZGVyPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5QbGF5ZXIgTmFtZTwvaDM+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L2hlYWRlcj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxmb3JtIGNsYXNzPVxcXCJmb3JtLXBsYXllci1uYW1lXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmbG9hdGluZy1sYWJlbC1pbnB1dFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cXFwidGV4dFxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XFxcIm5hbWVcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZD1cXFwibmFtZVxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVxcXCIgXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlPVxcXCJvZmZcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XFxcIm5hbWVcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9mb3JtPlxcclxcbiAgICAgICAgICAgICAgICA8L3NlY3Rpb24+XFxyXFxuICAgICAgICAgICAgICAgIDxociBjbGFzcz1cXFwiaWN5LWhyXFxcIiAvPlxcclxcbiAgICAgICAgICAgICAgICA8c2VjdGlvbiBjbGFzcz1cXFwicGxhY2Utc2hpcHNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGhlYWRlcj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDM+UGxhY2UgU2hpcHM8L2gzPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9oZWFkZXI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzaGlwc1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicGFnZXMtY29udGFpbmVyXFxcIj5cXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwYWdpbmF0aW9uXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYXJyb3ctY29udGFpbmVyIGFycm93LWNvbnRhaW5lci1idXR0b25cXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN2Z1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJsZWZ0LWFycm93XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD1cXFwiMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsPVxcXCJjdXJyZW50Q29sb3JcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcImJpIGJpLWNhcmV0LWxlZnQtZmlsbFxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3Qm94PVxcXCIwIDAgMTYgMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGhcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZD1cXFwibTMuODYgOC43NTMgNS40ODIgNC43OTZjLjY0Ni41NjYgMS42NTguMTA2IDEuNjU4LS43NTNWMy4yMDRhMSAxIDAgMCAwLTEuNjU5LS43NTNsLTUuNDggNC43OTZhMSAxIDAgMCAwIDAgMS41MDZ6XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L3BhdGg+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPjxzcGFuIGNsYXNzPVxcXCJjdXJyZW50LXBhZ2VcXFwiPjE8L3NwYW4+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwicGFnZXMtbnVtXFxcIj48L3NwYW4+PC9wPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJhcnJvdy1jb250YWluZXIgYXJyb3ctY29udGFpbmVyLWJ1dHRvblxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZnXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcInJpZ2h0LWFycm93XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD1cXFwiMTZcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsPVxcXCJjdXJyZW50Q29sb3JcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcImJpIGJpLWNhcmV0LXJpZ2h0LWZpbGxcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9XFxcIm0xMi4xNCA4Ljc1My01LjQ4MiA0Ljc5NmMtLjY0Ni41NjYtMS42NTguMTA2LTEuNjU4LS43NTNWMy4yMDRhMSAxIDAgMCAxIDEuNjU5LS43NTNsNS40OCA0Ljc5NmExIDEgMCAwIDEgMCAxLjUwNnpcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvcGF0aD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYm9hcmQtY29udGFpbmVyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJib2FyZFxcXCI+PC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwicGxhY2Utb3B0aW9uc1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0bi1oIGFjdGl2ZVxcXCI+SDwvYnV0dG9uPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4tdlxcXCI+VjwvYnV0dG9uPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG4tcmVtb3ZlXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmdcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9XFxcIjIwXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD1cXFwiMjBcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbD1cXFwid2hpdGVcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcImJpIGJpLXRyYXNoLWZpbGxcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9XFxcIk0yLjUgMWExIDEgMCAwIDAtMSAxdjFhMSAxIDAgMCAwIDEgMUgzdjlhMiAyIDAgMCAwIDIgMmg2YTIgMiAwIDAgMCAyLTJWNGguNWExIDEgMCAwIDAgMS0xVjJhMSAxIDAgMCAwLTEtMUgxMGExIDEgMCAwIDAtMS0xSDdhMSAxIDAgMCAwLTEgMUgyLjV6bTMgNGEuNS41IDAgMCAxIC41LjV2N2EuNS41IDAgMCAxLTEgMHYtN2EuNS41IDAgMCAxIC41LS41ek04IDVhLjUuNSAwIDAgMSAuNS41djdhLjUuNSAwIDAgMS0xIDB2LTdBLjUuNSAwIDAgMSA4IDV6bTMgLjV2N2EuNS41IDAgMCAxLTEgMHYtN2EuNS41IDAgMCAxIDEgMHpcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvcGF0aD5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYXV0by1wbGFjZS1jb250YWluZXJcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XFxcImJ0bi1hdXRvLXBsYWNlXFxcIj5SYW5kb20gUGxhY2luZzwvYnV0dG9uPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXCJ0ZXh0LWVycm9yIGQtbm9uZVxcXCI+KkNvdWxkbid0IHBsYWNlIHNoaXBzPC9wPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICAgICAgICAgIDwvc2VjdGlvbj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgICAgICA8aHIgY2xhc3M9XFxcImljeS1oclxcXCIgLz5cXHJcXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1vcHRpb25zXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuLWJhY2tcXFwiPkJhY2s8L2J1dHRvbj5cXHJcXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cXFwiYnRuLXN1Ym1pdFxcXCI+TmV4dDwvYnV0dG9uPlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcIm1vZGFsLXNwYWNlclxcXCI+PC9kaXY+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZGl2PlwiO1xufSxcInVzZURhdGFcIjp0cnVlfSk7IiwidmFyIEhhbmRsZWJhcnMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2hhbmRsZWJhcnMvcnVudGltZS5qc1wiKTtcbmZ1bmN0aW9uIF9fZGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiAob2JqLl9fZXNNb2R1bGUgPyBvYmpbXCJkZWZhdWx0XCJdIDogb2JqKTsgfVxubW9kdWxlLmV4cG9ydHMgPSAoSGFuZGxlYmFyc1tcImRlZmF1bHRcIl0gfHwgSGFuZGxlYmFycykudGVtcGxhdGUoe1wiY29tcGlsZXJcIjpbOCxcIj49IDQuMy4wXCJdLFwibWFpblwiOmZ1bmN0aW9uKGNvbnRhaW5lcixkZXB0aDAsaGVscGVycyxwYXJ0aWFscyxkYXRhKSB7XG4gICAgcmV0dXJuIFwiPGRpdiBjbGFzcz1cXFwidHVybi1yb3dcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ0dXJuLWNvbnRhaW5lclxcXCI+XFxyXFxuICAgICAgICA8cD5Zb3VyIFR1cm48L3A+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvZGl2PlxcclxcblxcclxcbjxkaXYgY2xhc3M9XFxcImJvYXJkXFxcIj5cXHJcXG5cXHJcXG48L2Rpdj5cXHJcXG5cXHJcXG48ZGl2IGNsYXNzPVxcXCJzaGlwcy1yZW1haW5lZC1jb250YWluZXItcmVzcG9uc2l2ZVxcXCI+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcInNoaXBzXFxcIj5cXHJcXG5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcInBhZ2luYXRpb25cXFwiPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiYXJyb3ctY29udGFpbmVyXFxcIj5cXHJcXG4gICAgICAgICAgICA8c3ZnXFxyXFxuICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJsZWZ0LWFycm93XFxcIlxcclxcbiAgICAgICAgICAgICAgICB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiXFxyXFxuICAgICAgICAgICAgICAgIHdpZHRoPVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgaGVpZ2h0PVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIlxcclxcbiAgICAgICAgICAgICAgICBjbGFzcz1cXFwiYmkgYmktY2FyZXQtbGVmdC1maWxsXFxcIlxcclxcbiAgICAgICAgICAgICAgICB2aWV3Qm94PVxcXCIwIDAgMTYgMTZcXFwiXFxyXFxuICAgICAgICAgICAgPlxcclxcbiAgICAgICAgICAgICAgICA8cGF0aFxcclxcbiAgICAgICAgICAgICAgICAgICAgZD1cXFwibTMuODYgOC43NTMgNS40ODIgNC43OTZjLjY0Ni41NjYgMS42NTguMTA2IDEuNjU4LS43NTNWMy4yMDRhMSAxIDAgMCAwLTEuNjU5LS43NTNsLTUuNDggNC43OTZhMSAxIDAgMCAwIDAgMS41MDZ6XFxcIlxcclxcbiAgICAgICAgICAgICAgICA+PC9wYXRoPlxcclxcbiAgICAgICAgICAgIDwvc3ZnPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJhcnJvdy1jb250YWluZXJcXFwiPlxcclxcbiAgICAgICAgICAgIDxzdmdcXHJcXG4gICAgICAgICAgICAgICAgY2xhc3M9XFxcInJpZ2h0LWFycm93XFxcIlxcclxcbiAgICAgICAgICAgICAgICB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiXFxyXFxuICAgICAgICAgICAgICAgIHdpZHRoPVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgaGVpZ2h0PVxcXCIxNlxcXCJcXHJcXG4gICAgICAgICAgICAgICAgZmlsbD1cXFwiY3VycmVudENvbG9yXFxcIlxcclxcbiAgICAgICAgICAgICAgICBjbGFzcz1cXFwiYmkgYmktY2FyZXQtcmlnaHQtZmlsbFxcXCJcXHJcXG4gICAgICAgICAgICAgICAgdmlld0JveD1cXFwiMCAwIDE2IDE2XFxcIlxcclxcbiAgICAgICAgICAgID5cXHJcXG4gICAgICAgICAgICAgICAgPHBhdGhcXHJcXG4gICAgICAgICAgICAgICAgICAgIGQ9XFxcIm0xMi4xNCA4Ljc1My01LjQ4MiA0Ljc5NmMtLjY0Ni41NjYtMS42NTguMTA2LTEuNjU4LS43NTNWMy4yMDRhMSAxIDAgMCAxIDEuNjU5LS43NTNsNS40OCA0Ljc5NmExIDEgMCAwIDEgMCAxLjUwNnpcXFwiXFxyXFxuICAgICAgICAgICAgICAgID48L3BhdGg+XFxyXFxuICAgICAgICAgICAgPC9zdmc+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImluZm9cXFwiPlxcclxcbiAgICAgICAgPGltZyBzcmM9XFxcIi4uL2Fzc2V0cy9pbWcvaW5mby1jaXJjbGUtZmlsbC5zdmdcXFwiIGFsdD1cXFwiXFxcIiAvPlxcclxcbiAgICA8L2Rpdj5cXHJcXG48L2Rpdj5cXHJcXG5cXHJcXG48ZGl2IGNsYXNzPVxcXCJzY29yZS1jb250YWluZXJcXFwiPlxcclxcbiAgICA8cCBjbGFzcz1cXFwibmFtZVxcXCI+PC9wPlxcclxcbiAgICA8cD5XaW5zOiA8c3BhbiBjbGFzcz1cXFwid2luc1xcXCI+MDwvc3Bhbj48L3A+XFxyXFxuICAgIDxwPkxvc3NlczogPHNwYW4gY2xhc3M9XFxcImxvc3Nlc1xcXCI+MDwvc3Bhbj48L3A+XFxyXFxuPC9kaXY+XFxyXFxuXFxyXFxuPGRpdiBjbGFzcz1cXFwiZGFya2VuaW5nXFxcIj48L2Rpdj5cIjtcbn0sXCJ1c2VEYXRhXCI6dHJ1ZX0pOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IG5ld09ialsnZGVmYXVsdCddID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxudmFyIF9oYW5kbGViYXJzQmFzZSA9IHJlcXVpcmUoJy4vaGFuZGxlYmFycy9iYXNlJyk7XG5cbnZhciBiYXNlID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2hhbmRsZWJhcnNCYXNlKTtcblxuLy8gRWFjaCBvZiB0aGVzZSBhdWdtZW50IHRoZSBIYW5kbGViYXJzIG9iamVjdC4gTm8gbmVlZCB0byBzZXR1cCBoZXJlLlxuLy8gKFRoaXMgaXMgZG9uZSB0byBlYXNpbHkgc2hhcmUgY29kZSBiZXR3ZWVuIGNvbW1vbmpzIGFuZCBicm93c2UgZW52cylcblxudmFyIF9oYW5kbGViYXJzU2FmZVN0cmluZyA9IHJlcXVpcmUoJy4vaGFuZGxlYmFycy9zYWZlLXN0cmluZycpO1xuXG52YXIgX2hhbmRsZWJhcnNTYWZlU3RyaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhbmRsZWJhcnNTYWZlU3RyaW5nKTtcblxudmFyIF9oYW5kbGViYXJzRXhjZXB0aW9uID0gcmVxdWlyZSgnLi9oYW5kbGViYXJzL2V4Y2VwdGlvbicpO1xuXG52YXIgX2hhbmRsZWJhcnNFeGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc0V4Y2VwdGlvbik7XG5cbnZhciBfaGFuZGxlYmFyc1V0aWxzID0gcmVxdWlyZSgnLi9oYW5kbGViYXJzL3V0aWxzJyk7XG5cbnZhciBVdGlscyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF9oYW5kbGViYXJzVXRpbHMpO1xuXG52YXIgX2hhbmRsZWJhcnNSdW50aW1lID0gcmVxdWlyZSgnLi9oYW5kbGViYXJzL3J1bnRpbWUnKTtcblxudmFyIHJ1bnRpbWUgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfaGFuZGxlYmFyc1J1bnRpbWUpO1xuXG52YXIgX2hhbmRsZWJhcnNOb0NvbmZsaWN0ID0gcmVxdWlyZSgnLi9oYW5kbGViYXJzL25vLWNvbmZsaWN0Jyk7XG5cbnZhciBfaGFuZGxlYmFyc05vQ29uZmxpY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFuZGxlYmFyc05vQ29uZmxpY3QpO1xuXG4vLyBGb3IgY29tcGF0aWJpbGl0eSBhbmQgdXNhZ2Ugb3V0c2lkZSBvZiBtb2R1bGUgc3lzdGVtcywgbWFrZSB0aGUgSGFuZGxlYmFycyBvYmplY3QgYSBuYW1lc3BhY2VcbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgdmFyIGhiID0gbmV3IGJhc2UuSGFuZGxlYmFyc0Vudmlyb25tZW50KCk7XG5cbiAgVXRpbHMuZXh0ZW5kKGhiLCBiYXNlKTtcbiAgaGIuU2FmZVN0cmluZyA9IF9oYW5kbGViYXJzU2FmZVN0cmluZzJbJ2RlZmF1bHQnXTtcbiAgaGIuRXhjZXB0aW9uID0gX2hhbmRsZWJhcnNFeGNlcHRpb24yWydkZWZhdWx0J107XG4gIGhiLlV0aWxzID0gVXRpbHM7XG4gIGhiLmVzY2FwZUV4cHJlc3Npb24gPSBVdGlscy5lc2NhcGVFeHByZXNzaW9uO1xuXG4gIGhiLlZNID0gcnVudGltZTtcbiAgaGIudGVtcGxhdGUgPSBmdW5jdGlvbiAoc3BlYykge1xuICAgIHJldHVybiBydW50aW1lLnRlbXBsYXRlKHNwZWMsIGhiKTtcbiAgfTtcblxuICByZXR1cm4gaGI7XG59XG5cbnZhciBpbnN0ID0gY3JlYXRlKCk7XG5pbnN0LmNyZWF0ZSA9IGNyZWF0ZTtcblxuX2hhbmRsZWJhcnNOb0NvbmZsaWN0MlsnZGVmYXVsdCddKGluc3QpO1xuXG5pbnN0WydkZWZhdWx0J10gPSBpbnN0O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBpbnN0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TG5KMWJuUnBiV1V1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3T3pzN09FSkJRWE5DTEcxQ1FVRnRRanM3U1VGQk4wSXNTVUZCU1RzN096czdiME5CU1U4c01FSkJRVEJDT3pzN08yMURRVU16UWl4M1FrRkJkMEk3T3pzN0swSkJRM1pDTEc5Q1FVRnZRanM3U1VGQkwwSXNTMEZCU3pzN2FVTkJRMUVzYzBKQlFYTkNPenRKUVVGdVF5eFBRVUZQT3p0dlEwRkZTU3d3UWtGQk1FSTdPenM3TzBGQlIycEVMRk5CUVZNc1RVRkJUU3hIUVVGSE8wRkJRMmhDTEUxQlFVa3NSVUZCUlN4SFFVRkhMRWxCUVVrc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RlFVRkZMRU5CUVVNN08wRkJSVEZETEU5QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEzWkNMRWxCUVVVc1EwRkJReXhWUVVGVkxHOURRVUZoTEVOQlFVTTdRVUZETTBJc1NVRkJSU3hEUVVGRExGTkJRVk1zYlVOQlFWa3NRMEZCUXp0QlFVTjZRaXhKUVVGRkxFTkJRVU1zUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXp0QlFVTnFRaXhKUVVGRkxFTkJRVU1zWjBKQlFXZENMRWRCUVVjc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkRPenRCUVVVM1F5eEpRVUZGTEVOQlFVTXNSVUZCUlN4SFFVRkhMRTlCUVU4c1EwRkJRenRCUVVOb1FpeEpRVUZGTEVOQlFVTXNVVUZCVVN4SFFVRkhMRlZCUVZNc1NVRkJTU3hGUVVGRk8wRkJRek5DTEZkQlFVOHNUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdSMEZEYmtNc1EwRkJRenM3UVVGRlJpeFRRVUZQTEVWQlFVVXNRMEZCUXp0RFFVTllPenRCUVVWRUxFbEJRVWtzU1VGQlNTeEhRVUZITEUxQlFVMHNSVUZCUlN4RFFVRkRPMEZCUTNCQ0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRPenRCUVVWeVFpeHJRMEZCVnl4SlFVRkpMRU5CUVVNc1EwRkJRenM3UVVGRmFrSXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF6czdjVUpCUlZJc1NVRkJTU0lzSW1acGJHVWlPaUpvWVc1a2JHVmlZWEp6TG5KMWJuUnBiV1V1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ0tpQmhjeUJpWVhObElHWnliMjBnSnk0dmFHRnVaR3hsWW1GeWN5OWlZWE5sSnp0Y2JseHVMeThnUldGamFDQnZaaUIwYUdWelpTQmhkV2R0Wlc1MElIUm9aU0JJWVc1a2JHVmlZWEp6SUc5aWFtVmpkQzRnVG04Z2JtVmxaQ0IwYnlCelpYUjFjQ0JvWlhKbExseHVMeThnS0ZSb2FYTWdhWE1nWkc5dVpTQjBieUJsWVhOcGJIa2djMmhoY21VZ1kyOWtaU0JpWlhSM1pXVnVJR052YlcxdmJtcHpJR0Z1WkNCaWNtOTNjMlVnWlc1MmN5bGNibWx0Y0c5eWRDQlRZV1psVTNSeWFXNW5JR1p5YjIwZ0p5NHZhR0Z1Wkd4bFltRnljeTl6WVdabExYTjBjbWx1WnljN1hHNXBiWEJ2Y25RZ1JYaGpaWEIwYVc5dUlHWnliMjBnSnk0dmFHRnVaR3hsWW1GeWN5OWxlR05sY0hScGIyNG5PMXh1YVcxd2IzSjBJQ29nWVhNZ1ZYUnBiSE1nWm5KdmJTQW5MaTlvWVc1a2JHVmlZWEp6TDNWMGFXeHpKenRjYm1sdGNHOXlkQ0FxSUdGeklISjFiblJwYldVZ1puSnZiU0FuTGk5b1lXNWtiR1ZpWVhKekwzSjFiblJwYldVbk8xeHVYRzVwYlhCdmNuUWdibTlEYjI1bWJHbGpkQ0JtY205dElDY3VMMmhoYm1Sc1pXSmhjbk12Ym04dFkyOXVabXhwWTNRbk8xeHVYRzR2THlCR2IzSWdZMjl0Y0dGMGFXSnBiR2wwZVNCaGJtUWdkWE5oWjJVZ2IzVjBjMmxrWlNCdlppQnRiMlIxYkdVZ2MzbHpkR1Z0Y3l3Z2JXRnJaU0IwYUdVZ1NHRnVaR3hsWW1GeWN5QnZZbXBsWTNRZ1lTQnVZVzFsYzNCaFkyVmNibVoxYm1OMGFXOXVJR055WldGMFpTZ3BJSHRjYmlBZ2JHVjBJR2hpSUQwZ2JtVjNJR0poYzJVdVNHRnVaR3hsWW1GeWMwVnVkbWx5YjI1dFpXNTBLQ2s3WEc1Y2JpQWdWWFJwYkhNdVpYaDBaVzVrS0doaUxDQmlZWE5sS1R0Y2JpQWdhR0l1VTJGbVpWTjBjbWx1WnlBOUlGTmhabVZUZEhKcGJtYzdYRzRnSUdoaUxrVjRZMlZ3ZEdsdmJpQTlJRVY0WTJWd2RHbHZianRjYmlBZ2FHSXVWWFJwYkhNZ1BTQlZkR2xzY3p0Y2JpQWdhR0l1WlhOallYQmxSWGh3Y21WemMybHZiaUE5SUZWMGFXeHpMbVZ6WTJGd1pVVjRjSEpsYzNOcGIyNDdYRzVjYmlBZ2FHSXVWazBnUFNCeWRXNTBhVzFsTzF4dUlDQm9ZaTUwWlcxd2JHRjBaU0E5SUdaMWJtTjBhVzl1S0hOd1pXTXBJSHRjYmlBZ0lDQnlaWFIxY200Z2NuVnVkR2x0WlM1MFpXMXdiR0YwWlNoemNHVmpMQ0JvWWlrN1hHNGdJSDA3WEc1Y2JpQWdjbVYwZFhKdUlHaGlPMXh1ZlZ4dVhHNXNaWFFnYVc1emRDQTlJR055WldGMFpTZ3BPMXh1YVc1emRDNWpjbVZoZEdVZ1BTQmpjbVZoZEdVN1hHNWNibTV2UTI5dVpteHBZM1FvYVc1emRDazdYRzVjYm1sdWMzUmJKMlJsWm1GMWJIUW5YU0E5SUdsdWMzUTdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR2x1YzNRN1hHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLkhhbmRsZWJhcnNFbnZpcm9ubWVudCA9IEhhbmRsZWJhcnNFbnZpcm9ubWVudDtcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIF9leGNlcHRpb24gPSByZXF1aXJlKCcuL2V4Y2VwdGlvbicpO1xuXG52YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xuXG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMnKTtcblxudmFyIF9kZWNvcmF0b3JzID0gcmVxdWlyZSgnLi9kZWNvcmF0b3JzJyk7XG5cbnZhciBfbG9nZ2VyID0gcmVxdWlyZSgnLi9sb2dnZXInKTtcblxudmFyIF9sb2dnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9nZ2VyKTtcblxudmFyIF9pbnRlcm5hbFByb3RvQWNjZXNzID0gcmVxdWlyZSgnLi9pbnRlcm5hbC9wcm90by1hY2Nlc3MnKTtcblxudmFyIFZFUlNJT04gPSAnNC43LjcnO1xuZXhwb3J0cy5WRVJTSU9OID0gVkVSU0lPTjtcbnZhciBDT01QSUxFUl9SRVZJU0lPTiA9IDg7XG5leHBvcnRzLkNPTVBJTEVSX1JFVklTSU9OID0gQ09NUElMRVJfUkVWSVNJT047XG52YXIgTEFTVF9DT01QQVRJQkxFX0NPTVBJTEVSX1JFVklTSU9OID0gNztcblxuZXhwb3J0cy5MQVNUX0NPTVBBVElCTEVfQ09NUElMRVJfUkVWSVNJT04gPSBMQVNUX0NPTVBBVElCTEVfQ09NUElMRVJfUkVWSVNJT047XG52YXIgUkVWSVNJT05fQ0hBTkdFUyA9IHtcbiAgMTogJzw9IDEuMC5yYy4yJywgLy8gMS4wLnJjLjIgaXMgYWN0dWFsbHkgcmV2MiBidXQgZG9lc24ndCByZXBvcnQgaXRcbiAgMjogJz09IDEuMC4wLXJjLjMnLFxuICAzOiAnPT0gMS4wLjAtcmMuNCcsXG4gIDQ6ICc9PSAxLngueCcsXG4gIDU6ICc9PSAyLjAuMC1hbHBoYS54JyxcbiAgNjogJz49IDIuMC4wLWJldGEuMScsXG4gIDc6ICc+PSA0LjAuMCA8NC4zLjAnLFxuICA4OiAnPj0gNC4zLjAnXG59O1xuXG5leHBvcnRzLlJFVklTSU9OX0NIQU5HRVMgPSBSRVZJU0lPTl9DSEFOR0VTO1xudmFyIG9iamVjdFR5cGUgPSAnW29iamVjdCBPYmplY3RdJztcblxuZnVuY3Rpb24gSGFuZGxlYmFyc0Vudmlyb25tZW50KGhlbHBlcnMsIHBhcnRpYWxzLCBkZWNvcmF0b3JzKSB7XG4gIHRoaXMuaGVscGVycyA9IGhlbHBlcnMgfHwge307XG4gIHRoaXMucGFydGlhbHMgPSBwYXJ0aWFscyB8fCB7fTtcbiAgdGhpcy5kZWNvcmF0b3JzID0gZGVjb3JhdG9ycyB8fCB7fTtcblxuICBfaGVscGVycy5yZWdpc3RlckRlZmF1bHRIZWxwZXJzKHRoaXMpO1xuICBfZGVjb3JhdG9ycy5yZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzKHRoaXMpO1xufVxuXG5IYW5kbGViYXJzRW52aXJvbm1lbnQucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogSGFuZGxlYmFyc0Vudmlyb25tZW50LFxuXG4gIGxvZ2dlcjogX2xvZ2dlcjJbJ2RlZmF1bHQnXSxcbiAgbG9nOiBfbG9nZ2VyMlsnZGVmYXVsdCddLmxvZyxcblxuICByZWdpc3RlckhlbHBlcjogZnVuY3Rpb24gcmVnaXN0ZXJIZWxwZXIobmFtZSwgZm4pIHtcbiAgICBpZiAoX3V0aWxzLnRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIGlmIChmbikge1xuICAgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnQXJnIG5vdCBzdXBwb3J0ZWQgd2l0aCBtdWx0aXBsZSBoZWxwZXJzJyk7XG4gICAgICB9XG4gICAgICBfdXRpbHMuZXh0ZW5kKHRoaXMuaGVscGVycywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGVscGVyc1tuYW1lXSA9IGZuO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlckhlbHBlcjogZnVuY3Rpb24gdW5yZWdpc3RlckhlbHBlcihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuaGVscGVyc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uIHJlZ2lzdGVyUGFydGlhbChuYW1lLCBwYXJ0aWFsKSB7XG4gICAgaWYgKF91dGlscy50b1N0cmluZy5jYWxsKG5hbWUpID09PSBvYmplY3RUeXBlKSB7XG4gICAgICBfdXRpbHMuZXh0ZW5kKHRoaXMucGFydGlhbHMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIHBhcnRpYWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdBdHRlbXB0aW5nIHRvIHJlZ2lzdGVyIGEgcGFydGlhbCBjYWxsZWQgXCInICsgbmFtZSArICdcIiBhcyB1bmRlZmluZWQnKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucGFydGlhbHNbbmFtZV0gPSBwYXJ0aWFsO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlclBhcnRpYWw6IGZ1bmN0aW9uIHVucmVnaXN0ZXJQYXJ0aWFsKG5hbWUpIHtcbiAgICBkZWxldGUgdGhpcy5wYXJ0aWFsc1tuYW1lXTtcbiAgfSxcblxuICByZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24gcmVnaXN0ZXJEZWNvcmF0b3IobmFtZSwgZm4pIHtcbiAgICBpZiAoX3V0aWxzLnRvU3RyaW5nLmNhbGwobmFtZSkgPT09IG9iamVjdFR5cGUpIHtcbiAgICAgIGlmIChmbikge1xuICAgICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnQXJnIG5vdCBzdXBwb3J0ZWQgd2l0aCBtdWx0aXBsZSBkZWNvcmF0b3JzJyk7XG4gICAgICB9XG4gICAgICBfdXRpbHMuZXh0ZW5kKHRoaXMuZGVjb3JhdG9ycywgbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGVjb3JhdG9yc1tuYW1lXSA9IGZuO1xuICAgIH1cbiAgfSxcbiAgdW5yZWdpc3RlckRlY29yYXRvcjogZnVuY3Rpb24gdW5yZWdpc3RlckRlY29yYXRvcihuYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuZGVjb3JhdG9yc1tuYW1lXTtcbiAgfSxcbiAgLyoqXG4gICAqIFJlc2V0IHRoZSBtZW1vcnkgb2YgaWxsZWdhbCBwcm9wZXJ0eSBhY2Nlc3NlcyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIGxvZ2dlZC5cbiAgICogQGRlcHJlY2F0ZWQgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiBoYW5kbGViYXJzIHRlc3QtY2FzZXNcbiAgICovXG4gIHJlc2V0TG9nZ2VkUHJvcGVydHlBY2Nlc3NlczogZnVuY3Rpb24gcmVzZXRMb2dnZWRQcm9wZXJ0eUFjY2Vzc2VzKCkge1xuICAgIF9pbnRlcm5hbFByb3RvQWNjZXNzLnJlc2V0TG9nZ2VkUHJvcGVydGllcygpO1xuICB9XG59O1xuXG52YXIgbG9nID0gX2xvZ2dlcjJbJ2RlZmF1bHQnXS5sb2c7XG5cbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5jcmVhdGVGcmFtZSA9IF91dGlscy5jcmVhdGVGcmFtZTtcbmV4cG9ydHMubG9nZ2VyID0gX2xvZ2dlcjJbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJKaGMyVXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdjVUpCUVRoRExGTkJRVk03TzNsQ1FVTnFReXhoUVVGaE96czdPM1ZDUVVOSkxGZEJRVmM3T3pCQ1FVTlNMR05CUVdNN08zTkNRVU55UXl4VlFVRlZPenM3TzIxRFFVTlRMSGxDUVVGNVFqczdRVUZGZUVRc1NVRkJUU3hQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZET3p0QlFVTjRRaXhKUVVGTkxHbENRVUZwUWl4SFFVRkhMRU5CUVVNc1EwRkJRenM3UVVGRE5VSXNTVUZCVFN4cFEwRkJhVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdPenRCUVVVMVF5eEpRVUZOTEdkQ1FVRm5RaXhIUVVGSE8wRkJRemxDTEVkQlFVTXNSVUZCUlN4aFFVRmhPMEZCUTJoQ0xFZEJRVU1zUlVGQlJTeGxRVUZsTzBGQlEyeENMRWRCUVVNc1JVRkJSU3hsUVVGbE8wRkJRMnhDTEVkQlFVTXNSVUZCUlN4VlFVRlZPMEZCUTJJc1IwRkJReXhGUVVGRkxHdENRVUZyUWp0QlFVTnlRaXhIUVVGRExFVkJRVVVzYVVKQlFXbENPMEZCUTNCQ0xFZEJRVU1zUlVGQlJTeHBRa0ZCYVVJN1FVRkRjRUlzUjBGQlF5eEZRVUZGTEZWQlFWVTdRMEZEWkN4RFFVRkRPenM3UVVGRlJpeEpRVUZOTEZWQlFWVXNSMEZCUnl4cFFrRkJhVUlzUTBGQlF6czdRVUZGT1VJc1UwRkJVeXh4UWtGQmNVSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1VVRkJVU3hGUVVGRkxGVkJRVlVzUlVGQlJUdEJRVU51UlN4TlFVRkpMRU5CUVVNc1QwRkJUeXhIUVVGSExFOUJRVThzU1VGQlNTeEZRVUZGTEVOQlFVTTdRVUZETjBJc1RVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eFJRVUZSTEVsQlFVa3NSVUZCUlN4RFFVRkRPMEZCUXk5Q0xFMUJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NWVUZCVlN4SlFVRkpMRVZCUVVVc1EwRkJRenM3UVVGRmJrTXNhME5CUVhWQ0xFbEJRVWtzUTBGQlF5eERRVUZETzBGQlF6ZENMSGREUVVFd1FpeEpRVUZKTEVOQlFVTXNRMEZCUXp0RFFVTnFRenM3UVVGRlJDeHhRa0ZCY1VJc1EwRkJReXhUUVVGVExFZEJRVWM3UVVGRGFFTXNZVUZCVnl4RlFVRkZMSEZDUVVGeFFqczdRVUZGYkVNc1VVRkJUU3h4UWtGQlVUdEJRVU5rTEV0QlFVY3NSVUZCUlN4dlFrRkJUeXhIUVVGSE96dEJRVVZtTEdkQ1FVRmpMRVZCUVVVc2QwSkJRVk1zU1VGQlNTeEZRVUZGTEVWQlFVVXNSVUZCUlR0QlFVTnFReXhSUVVGSkxHZENRVUZUTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhWUVVGVkxFVkJRVVU3UVVGRGRFTXNWVUZCU1N4RlFVRkZMRVZCUVVVN1FVRkRUaXhqUVVGTkxESkNRVUZqTEhsRFFVRjVReXhEUVVGRExFTkJRVU03VDBGRGFFVTdRVUZEUkN4dlFrRkJUeXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUXpWQ0xFMUJRVTA3UVVGRFRDeFZRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dExRVU42UWp0SFFVTkdPMEZCUTBRc2EwSkJRV2RDTEVWQlFVVXNNRUpCUVZNc1NVRkJTU3hGUVVGRk8wRkJReTlDTEZkQlFVOHNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEhRVU16UWpzN1FVRkZSQ3hwUWtGQlpTeEZRVUZGTEhsQ1FVRlRMRWxCUVVrc1JVRkJSU3hQUVVGUExFVkJRVVU3UVVGRGRrTXNVVUZCU1N4blFrRkJVeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NWVUZCVlN4RlFVRkZPMEZCUTNSRExHOUNRVUZQTEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03UzBGRE4wSXNUVUZCVFR0QlFVTk1MRlZCUVVrc1QwRkJUeXhQUVVGUExFdEJRVXNzVjBGQlZ5eEZRVUZGTzBGQlEyeERMR05CUVUwc2VVVkJRM2RETEVsQlFVa3NiMEpCUTJwRUxFTkJRVU03VDBGRFNEdEJRVU5FTEZWQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzVDBGQlR5eERRVUZETzB0QlF5OUNPMGRCUTBZN1FVRkRSQ3h0UWtGQmFVSXNSVUZCUlN3eVFrRkJVeXhKUVVGSkxFVkJRVVU3UVVGRGFFTXNWMEZCVHl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBkQlF6VkNPenRCUVVWRUxHMUNRVUZwUWl4RlFVRkZMREpDUVVGVExFbEJRVWtzUlVGQlJTeEZRVUZGTEVWQlFVVTdRVUZEY0VNc1VVRkJTU3huUWtGQlV5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1ZVRkJWU3hGUVVGRk8wRkJRM1JETEZWQlFVa3NSVUZCUlN4RlFVRkZPMEZCUTA0c1kwRkJUU3d5UWtGQll5dzBRMEZCTkVNc1EwRkJReXhEUVVGRE8wOUJRMjVGTzBGQlEwUXNiMEpCUVU4c1NVRkJTU3hEUVVGRExGVkJRVlVzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0TFFVTXZRaXhOUVVGTk8wRkJRMHdzVlVGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU03UzBGRE5VSTdSMEZEUmp0QlFVTkVMSEZDUVVGdFFpeEZRVUZGTERaQ1FVRlRMRWxCUVVrc1JVRkJSVHRCUVVOc1F5eFhRVUZQTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UjBGRE9VSTdPenM3TzBGQlMwUXNOa0pCUVRKQ0xFVkJRVUVzZFVOQlFVYzdRVUZETlVJc1owUkJRWFZDTEVOQlFVTTdSMEZEZWtJN1EwRkRSaXhEUVVGRE96dEJRVVZMTEVsQlFVa3NSMEZCUnl4SFFVRkhMRzlDUVVGUExFZEJRVWNzUTBGQlF6czdPMUZCUlc1Q0xGZEJRVmM3VVVGQlJTeE5RVUZOSWl3aVptbHNaU0k2SW1KaGMyVXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnZXlCamNtVmhkR1ZHY21GdFpTd2daWGgwWlc1a0xDQjBiMU4wY21sdVp5QjlJR1p5YjIwZ0p5NHZkWFJwYkhNbk8xeHVhVzF3YjNKMElFVjRZMlZ3ZEdsdmJpQm1jbTl0SUNjdUwyVjRZMlZ3ZEdsdmJpYzdYRzVwYlhCdmNuUWdleUJ5WldkcGMzUmxja1JsWm1GMWJIUklaV3h3WlhKeklIMGdabkp2YlNBbkxpOW9aV3h3WlhKekp6dGNibWx0Y0c5eWRDQjdJSEpsWjJsemRHVnlSR1ZtWVhWc2RFUmxZMjl5WVhSdmNuTWdmU0JtY205dElDY3VMMlJsWTI5eVlYUnZjbk1uTzF4dWFXMXdiM0owSUd4dloyZGxjaUJtY205dElDY3VMMnh2WjJkbGNpYzdYRzVwYlhCdmNuUWdleUJ5WlhObGRFeHZaMmRsWkZCeWIzQmxjblJwWlhNZ2ZTQm1jbTl0SUNjdUwybHVkR1Z5Ym1Gc0wzQnliM1J2TFdGalkyVnpjeWM3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JXUlZKVFNVOU9JRDBnSnpRdU55NDNKenRjYm1WNGNHOXlkQ0JqYjI1emRDQkRUMDFRU1V4RlVsOVNSVlpKVTBsUFRpQTlJRGc3WEc1bGVIQnZjblFnWTI5dWMzUWdURUZUVkY5RFQwMVFRVlJKUWt4RlgwTlBUVkJKVEVWU1gxSkZWa2xUU1U5T0lEMGdOenRjYmx4dVpYaHdiM0owSUdOdmJuTjBJRkpGVmtsVFNVOU9YME5JUVU1SFJWTWdQU0I3WEc0Z0lERTZJQ2M4UFNBeExqQXVjbU11TWljc0lDOHZJREV1TUM1eVl5NHlJR2x6SUdGamRIVmhiR3g1SUhKbGRqSWdZblYwSUdSdlpYTnVKM1FnY21Wd2IzSjBJR2wwWEc0Z0lESTZJQ2M5UFNBeExqQXVNQzF5WXk0ekp5eGNiaUFnTXpvZ0p6MDlJREV1TUM0d0xYSmpMalFuTEZ4dUlDQTBPaUFuUFQwZ01TNTRMbmduTEZ4dUlDQTFPaUFuUFQwZ01pNHdMakF0WVd4d2FHRXVlQ2NzWEc0Z0lEWTZJQ2MrUFNBeUxqQXVNQzFpWlhSaExqRW5MRnh1SUNBM09pQW5QajBnTkM0d0xqQWdQRFF1TXk0d0p5eGNiaUFnT0RvZ0p6NDlJRFF1TXk0d0oxeHVmVHRjYmx4dVkyOXVjM1FnYjJKcVpXTjBWSGx3WlNBOUlDZGJiMkpxWldOMElFOWlhbVZqZEYwbk8xeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdTR0Z1Wkd4bFltRnljMFZ1ZG1seWIyNXRaVzUwS0dobGJIQmxjbk1zSUhCaGNuUnBZV3h6TENCa1pXTnZjbUYwYjNKektTQjdYRzRnSUhSb2FYTXVhR1ZzY0dWeWN5QTlJR2hsYkhCbGNuTWdmSHdnZTMwN1hHNGdJSFJvYVhNdWNHRnlkR2xoYkhNZ1BTQndZWEowYVdGc2N5QjhmQ0I3ZlR0Y2JpQWdkR2hwY3k1a1pXTnZjbUYwYjNKeklEMGdaR1ZqYjNKaGRHOXljeUI4ZkNCN2ZUdGNibHh1SUNCeVpXZHBjM1JsY2tSbFptRjFiSFJJWld4d1pYSnpLSFJvYVhNcE8xeHVJQ0J5WldkcGMzUmxja1JsWm1GMWJIUkVaV052Y21GMGIzSnpLSFJvYVhNcE8xeHVmVnh1WEc1SVlXNWtiR1ZpWVhKelJXNTJhWEp2Ym0xbGJuUXVjSEp2ZEc5MGVYQmxJRDBnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjam9nU0dGdVpHeGxZbUZ5YzBWdWRtbHliMjV0Wlc1MExGeHVYRzRnSUd4dloyZGxjam9nYkc5bloyVnlMRnh1SUNCc2IyYzZJR3h2WjJkbGNpNXNiMmNzWEc1Y2JpQWdjbVZuYVhOMFpYSklaV3h3WlhJNklHWjFibU4wYVc5dUtHNWhiV1VzSUdadUtTQjdYRzRnSUNBZ2FXWWdLSFJ2VTNSeWFXNW5MbU5oYkd3b2JtRnRaU2tnUFQwOUlHOWlhbVZqZEZSNWNHVXBJSHRjYmlBZ0lDQWdJR2xtSUNobWJpa2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhoalpYQjBhVzl1S0NkQmNtY2dibTkwSUhOMWNIQnZjblJsWkNCM2FYUm9JRzExYkhScGNHeGxJR2hsYkhCbGNuTW5LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR1Y0ZEdWdVpDaDBhR2x6TG1obGJIQmxjbk1zSUc1aGJXVXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFHbHpMbWhsYkhCbGNuTmJibUZ0WlYwZ1BTQm1ianRjYmlBZ0lDQjlYRzRnSUgwc1hHNGdJSFZ1Y21WbmFYTjBaWEpJWld4d1pYSTZJR1oxYm1OMGFXOXVLRzVoYldVcElIdGNiaUFnSUNCa1pXeGxkR1VnZEdocGN5NW9aV3h3WlhKelcyNWhiV1ZkTzF4dUlDQjlMRnh1WEc0Z0lISmxaMmx6ZEdWeVVHRnlkR2xoYkRvZ1puVnVZM1JwYjI0b2JtRnRaU3dnY0dGeWRHbGhiQ2tnZTF4dUlDQWdJR2xtSUNoMGIxTjBjbWx1Wnk1allXeHNLRzVoYldVcElEMDlQU0J2WW1wbFkzUlVlWEJsS1NCN1hHNGdJQ0FnSUNCbGVIUmxibVFvZEdocGN5NXdZWEowYVdGc2N5d2dibUZ0WlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnY0dGeWRHbGhiQ0E5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWNFkyVndkR2x2YmloY2JpQWdJQ0FnSUNBZ0lDQmdRWFIwWlcxd2RHbHVaeUIwYnlCeVpXZHBjM1JsY2lCaElIQmhjblJwWVd3Z1kyRnNiR1ZrSUZ3aUpIdHVZVzFsZlZ3aUlHRnpJSFZ1WkdWbWFXNWxaR0JjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhSb2FYTXVjR0Z5ZEdsaGJITmJibUZ0WlYwZ1BTQndZWEowYVdGc08xeHVJQ0FnSUgxY2JpQWdmU3hjYmlBZ2RXNXlaV2RwYzNSbGNsQmhjblJwWVd3NklHWjFibU4wYVc5dUtHNWhiV1VwSUh0Y2JpQWdJQ0JrWld4bGRHVWdkR2hwY3k1d1lYSjBhV0ZzYzF0dVlXMWxYVHRjYmlBZ2ZTeGNibHh1SUNCeVpXZHBjM1JsY2tSbFkyOXlZWFJ2Y2pvZ1puVnVZM1JwYjI0b2JtRnRaU3dnWm00cElIdGNiaUFnSUNCcFppQW9kRzlUZEhKcGJtY3VZMkZzYkNodVlXMWxLU0E5UFQwZ2IySnFaV04wVkhsd1pTa2dlMXh1SUNBZ0lDQWdhV1lnS0dadUtTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGZUdObGNIUnBiMjRvSjBGeVp5QnViM1FnYzNWd2NHOXlkR1ZrSUhkcGRHZ2diWFZzZEdsd2JHVWdaR1ZqYjNKaGRHOXljeWNwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWlhoMFpXNWtLSFJvYVhNdVpHVmpiM0poZEc5eWN5d2dibUZ0WlNrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSFJvYVhNdVpHVmpiM0poZEc5eWMxdHVZVzFsWFNBOUlHWnVPMXh1SUNBZ0lIMWNiaUFnZlN4Y2JpQWdkVzV5WldkcGMzUmxja1JsWTI5eVlYUnZjam9nWm5WdVkzUnBiMjRvYm1GdFpTa2dlMXh1SUNBZ0lHUmxiR1YwWlNCMGFHbHpMbVJsWTI5eVlYUnZjbk5iYm1GdFpWMDdYRzRnSUgwc1hHNGdJQzhxS2x4dUlDQWdLaUJTWlhObGRDQjBhR1VnYldWdGIzSjVJRzltSUdsc2JHVm5ZV3dnY0hKdmNHVnlkSGtnWVdOalpYTnpaWE1nZEdoaGRDQm9ZWFpsSUdGc2NtVmhaSGtnWW1WbGJpQnNiMmRuWldRdVhHNGdJQ0FxSUVCa1pYQnlaV05oZEdWa0lITm9iM1ZzWkNCdmJteDVJR0psSUhWelpXUWdhVzRnYUdGdVpHeGxZbUZ5Y3lCMFpYTjBMV05oYzJWelhHNGdJQ0FxTDF4dUlDQnlaWE5sZEV4dloyZGxaRkJ5YjNCbGNuUjVRV05qWlhOelpYTW9LU0I3WEc0Z0lDQWdjbVZ6WlhSTWIyZG5aV1JRY205d1pYSjBhV1Z6S0NrN1hHNGdJSDFjYm4wN1hHNWNibVY0Y0c5eWRDQnNaWFFnYkc5bklEMGdiRzluWjJWeUxteHZaenRjYmx4dVpYaHdiM0owSUhzZ1kzSmxZWFJsUm5KaGJXVXNJR3h2WjJkbGNpQjlPMXh1SWwxOVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5yZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzID0gcmVnaXN0ZXJEZWZhdWx0RGVjb3JhdG9ycztcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF9kZWNvcmF0b3JzSW5saW5lID0gcmVxdWlyZSgnLi9kZWNvcmF0b3JzL2lubGluZScpO1xuXG52YXIgX2RlY29yYXRvcnNJbmxpbmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVjb3JhdG9yc0lubGluZSk7XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyRGVmYXVsdERlY29yYXRvcnMoaW5zdGFuY2UpIHtcbiAgX2RlY29yYXRvcnNJbmxpbmUyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMlJsWTI5eVlYUnZjbk11YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenM3WjBOQlFUSkNMSEZDUVVGeFFqczdPenRCUVVWNlF5eFRRVUZUTEhsQ1FVRjVRaXhEUVVGRExGRkJRVkVzUlVGQlJUdEJRVU5zUkN4blEwRkJaU3hSUVVGUkxFTkJRVU1zUTBGQlF6dERRVU14UWlJc0ltWnBiR1VpT2lKa1pXTnZjbUYwYjNKekxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJSEpsWjJsemRHVnlTVzVzYVc1bElHWnliMjBnSnk0dlpHVmpiM0poZEc5eWN5OXBibXhwYm1Vbk8xeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdjbVZuYVhOMFpYSkVaV1poZFd4MFJHVmpiM0poZEc5eWN5aHBibk4wWVc1alpTa2dlMXh1SUNCeVpXZHBjM1JsY2tsdWJHbHVaU2hwYm5OMFlXNWpaU2s3WEc1OVhHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJEZWNvcmF0b3IoJ2lubGluZScsIGZ1bmN0aW9uIChmbiwgcHJvcHMsIGNvbnRhaW5lciwgb3B0aW9ucykge1xuICAgIHZhciByZXQgPSBmbjtcbiAgICBpZiAoIXByb3BzLnBhcnRpYWxzKSB7XG4gICAgICBwcm9wcy5wYXJ0aWFscyA9IHt9O1xuICAgICAgcmV0ID0gZnVuY3Rpb24gKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbmV3IHBhcnRpYWxzIHN0YWNrIGZyYW1lIHByaW9yIHRvIGV4ZWMuXG4gICAgICAgIHZhciBvcmlnaW5hbCA9IGNvbnRhaW5lci5wYXJ0aWFscztcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gX3V0aWxzLmV4dGVuZCh7fSwgb3JpZ2luYWwsIHByb3BzLnBhcnRpYWxzKTtcbiAgICAgICAgdmFyIHJldCA9IGZuKGNvbnRleHQsIG9wdGlvbnMpO1xuICAgICAgICBjb250YWluZXIucGFydGlhbHMgPSBvcmlnaW5hbDtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcHJvcHMucGFydGlhbHNbb3B0aW9ucy5hcmdzWzBdXSA9IG9wdGlvbnMuZm47XG5cbiAgICByZXR1cm4gcmV0O1xuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJSbFkyOXlZWFJ2Y25NdmFXNXNhVzVsTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdjVUpCUVhWQ0xGVkJRVlU3TzNGQ1FVVnNRaXhWUVVGVExGRkJRVkVzUlVGQlJUdEJRVU5vUXl4VlFVRlJMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNVVUZCVVN4RlFVRkZMRlZCUVZNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFRRVUZUTEVWQlFVVXNUMEZCVHl4RlFVRkZPMEZCUXpORkxGRkJRVWtzUjBGQlJ5eEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTmlMRkZCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVVVGQlVTeEZRVUZGTzBGQlEyNUNMRmRCUVVzc1EwRkJReXhSUVVGUkxFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEzQkNMRk5CUVVjc1IwRkJSeXhWUVVGVExFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVTdPMEZCUlM5Q0xGbEJRVWtzVVVGQlVTeEhRVUZITEZOQlFWTXNRMEZCUXl4UlFVRlJMRU5CUVVNN1FVRkRiRU1zYVVKQlFWTXNRMEZCUXl4UlFVRlJMRWRCUVVjc1kwRkJUeXhGUVVGRkxFVkJRVVVzVVVGQlVTeEZRVUZGTEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenRCUVVNeFJDeFpRVUZKTEVkQlFVY3NSMEZCUnl4RlFVRkZMRU5CUVVNc1QwRkJUeXhGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETzBGQlF5OUNMR2xDUVVGVExFTkJRVU1zVVVGQlVTeEhRVUZITEZGQlFWRXNRMEZCUXp0QlFVTTVRaXhsUVVGUExFZEJRVWNzUTBGQlF6dFBRVU5hTEVOQlFVTTdTMEZEU0RzN1FVRkZSQ3hUUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eFBRVUZQTEVOQlFVTXNSVUZCUlN4RFFVRkRPenRCUVVVM1F5eFhRVUZQTEVkQlFVY3NRMEZCUXp0SFFVTmFMRU5CUVVNc1EwRkJRenREUVVOS0lpd2labWxzWlNJNkltbHViR2x1WlM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQjdJR1Y0ZEdWdVpDQjlJR1p5YjIwZ0p5NHVMM1YwYVd4ekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNG9hVzV6ZEdGdVkyVXBJSHRjYmlBZ2FXNXpkR0Z1WTJVdWNtVm5hWE4wWlhKRVpXTnZjbUYwYjNJb0oybHViR2x1WlNjc0lHWjFibU4wYVc5dUtHWnVMQ0J3Y205d2N5d2dZMjl1ZEdGcGJtVnlMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdiR1YwSUhKbGRDQTlJR1p1TzF4dUlDQWdJR2xtSUNnaGNISnZjSE11Y0dGeWRHbGhiSE1wSUh0Y2JpQWdJQ0FnSUhCeWIzQnpMbkJoY25ScFlXeHpJRDBnZTMwN1hHNGdJQ0FnSUNCeVpYUWdQU0JtZFc1amRHbHZiaWhqYjI1MFpYaDBMQ0J2Y0hScGIyNXpLU0I3WEc0Z0lDQWdJQ0FnSUM4dklFTnlaV0YwWlNCaElHNWxkeUJ3WVhKMGFXRnNjeUJ6ZEdGamF5Qm1jbUZ0WlNCd2NtbHZjaUIwYnlCbGVHVmpMbHh1SUNBZ0lDQWdJQ0JzWlhRZ2IzSnBaMmx1WVd3Z1BTQmpiMjUwWVdsdVpYSXVjR0Z5ZEdsaGJITTdYRzRnSUNBZ0lDQWdJR052Ym5SaGFXNWxjaTV3WVhKMGFXRnNjeUE5SUdWNGRHVnVaQ2g3ZlN3Z2IzSnBaMmx1WVd3c0lIQnliM0J6TG5CaGNuUnBZV3h6S1R0Y2JpQWdJQ0FnSUNBZ2JHVjBJSEpsZENBOUlHWnVLR052Ym5SbGVIUXNJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lDQWdJQ0JqYjI1MFlXbHVaWEl1Y0dGeWRHbGhiSE1nUFNCdmNtbG5hVzVoYkR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGREdGNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NISnZjSE11Y0dGeWRHbGhiSE5iYjNCMGFXOXVjeTVoY21keld6QmRYU0E5SUc5d2RHbHZibk11Wm00N1hHNWNiaUFnSUNCeVpYUjFjbTRnY21WME8xeHVJQ0I5S1R0Y2JuMWNiaUpkZlE9PVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGVycm9yUHJvcHMgPSBbJ2Rlc2NyaXB0aW9uJywgJ2ZpbGVOYW1lJywgJ2xpbmVOdW1iZXInLCAnZW5kTGluZU51bWJlcicsICdtZXNzYWdlJywgJ25hbWUnLCAnbnVtYmVyJywgJ3N0YWNrJ107XG5cbmZ1bmN0aW9uIEV4Y2VwdGlvbihtZXNzYWdlLCBub2RlKSB7XG4gIHZhciBsb2MgPSBub2RlICYmIG5vZGUubG9jLFxuICAgICAgbGluZSA9IHVuZGVmaW5lZCxcbiAgICAgIGVuZExpbmVOdW1iZXIgPSB1bmRlZmluZWQsXG4gICAgICBjb2x1bW4gPSB1bmRlZmluZWQsXG4gICAgICBlbmRDb2x1bW4gPSB1bmRlZmluZWQ7XG5cbiAgaWYgKGxvYykge1xuICAgIGxpbmUgPSBsb2Muc3RhcnQubGluZTtcbiAgICBlbmRMaW5lTnVtYmVyID0gbG9jLmVuZC5saW5lO1xuICAgIGNvbHVtbiA9IGxvYy5zdGFydC5jb2x1bW47XG4gICAgZW5kQ29sdW1uID0gbG9jLmVuZC5jb2x1bW47XG5cbiAgICBtZXNzYWdlICs9ICcgLSAnICsgbGluZSArICc6JyArIGNvbHVtbjtcbiAgfVxuXG4gIHZhciB0bXAgPSBFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcblxuICAvLyBVbmZvcnR1bmF0ZWx5IGVycm9ycyBhcmUgbm90IGVudW1lcmFibGUgaW4gQ2hyb21lIChhdCBsZWFzdCksIHNvIGBmb3IgcHJvcCBpbiB0bXBgIGRvZXNuJ3Qgd29yay5cbiAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgZXJyb3JQcm9wcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdGhpc1tlcnJvclByb3BzW2lkeF1dID0gdG1wW2Vycm9yUHJvcHNbaWR4XV07XG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBFeGNlcHRpb24pO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBpZiAobG9jKSB7XG4gICAgICB0aGlzLmxpbmVOdW1iZXIgPSBsaW5lO1xuICAgICAgdGhpcy5lbmRMaW5lTnVtYmVyID0gZW5kTGluZU51bWJlcjtcblxuICAgICAgLy8gV29yayBhcm91bmQgaXNzdWUgdW5kZXIgc2FmYXJpIHdoZXJlIHdlIGNhbid0IGRpcmVjdGx5IHNldCB0aGUgY29sdW1uIHZhbHVlXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvbHVtbicsIHtcbiAgICAgICAgICB2YWx1ZTogY29sdW1uLFxuICAgICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZW5kQ29sdW1uJywge1xuICAgICAgICAgIHZhbHVlOiBlbmRDb2x1bW4sXG4gICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29sdW1uID0gY29sdW1uO1xuICAgICAgICB0aGlzLmVuZENvbHVtbiA9IGVuZENvbHVtbjtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKG5vcCkge1xuICAgIC8qIElnbm9yZSBpZiB0aGUgYnJvd3NlciBpcyB2ZXJ5IHBhcnRpY3VsYXIgKi9cbiAgfVxufVxuXG5FeGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IEV4Y2VwdGlvbjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMlY0WTJWd2RHbHZiaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN1FVRkJRU3hKUVVGTkxGVkJRVlVzUjBGQlJ5eERRVU5xUWl4aFFVRmhMRVZCUTJJc1ZVRkJWU3hGUVVOV0xGbEJRVmtzUlVGRFdpeGxRVUZsTEVWQlEyWXNVMEZCVXl4RlFVTlVMRTFCUVUwc1JVRkRUaXhSUVVGUkxFVkJRMUlzVDBGQlR5eERRVU5TTEVOQlFVTTdPMEZCUlVZc1UwRkJVeXhUUVVGVExFTkJRVU1zVDBGQlR5eEZRVUZGTEVsQlFVa3NSVUZCUlR0QlFVTm9ReXhOUVVGSkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWRCUVVjN1RVRkRlRUlzU1VGQlNTeFpRVUZCTzAxQlEwb3NZVUZCWVN4WlFVRkJPMDFCUTJJc1RVRkJUU3haUVVGQk8wMUJRMDRzVTBGQlV5eFpRVUZCTEVOQlFVTTdPMEZCUlZvc1RVRkJTU3hIUVVGSExFVkJRVVU3UVVGRFVDeFJRVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU03UVVGRGRFSXNhVUpCUVdFc1IwRkJSeXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXp0QlFVTTNRaXhWUVVGTkxFZEJRVWNzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNN1FVRkRNVUlzWVVGQlV5eEhRVUZITEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRE96dEJRVVV6UWl4WFFVRlBMRWxCUVVrc1MwRkJTeXhIUVVGSExFbEJRVWtzUjBGQlJ5eEhRVUZITEVkQlFVY3NUVUZCVFN4RFFVRkRPMGRCUTNoRE96dEJRVVZFTEUxQlFVa3NSMEZCUnl4SFFVRkhMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03T3p0QlFVY3hSQ3hQUVVGTExFbEJRVWtzUjBGQlJ5eEhRVUZITEVOQlFVTXNSVUZCUlN4SFFVRkhMRWRCUVVjc1ZVRkJWU3hEUVVGRExFMUJRVTBzUlVGQlJTeEhRVUZITEVWQlFVVXNSVUZCUlR0QlFVTm9SQ3hSUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRExGVkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMGRCUXpsRE96czdRVUZIUkN4TlFVRkpMRXRCUVVzc1EwRkJReXhwUWtGQmFVSXNSVUZCUlR0QlFVTXpRaXhUUVVGTExFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1NVRkJTU3hGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETzBkQlF6RkRPenRCUVVWRUxFMUJRVWs3UVVGRFJpeFJRVUZKTEVkQlFVY3NSVUZCUlR0QlFVTlFMRlZCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETzBGQlEzWkNMRlZCUVVrc1EwRkJReXhoUVVGaExFZEJRVWNzWVVGQllTeERRVUZET3pzN08wRkJTVzVETEZWQlFVa3NUVUZCVFN4RFFVRkRMR05CUVdNc1JVRkJSVHRCUVVONlFpeGpRVUZOTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hSUVVGUkxFVkJRVVU3UVVGRGNFTXNaVUZCU3l4RlFVRkZMRTFCUVUwN1FVRkRZaXh2UWtGQlZTeEZRVUZGTEVsQlFVazdVMEZEYWtJc1EwRkJReXhEUVVGRE8wRkJRMGdzWTBGQlRTeERRVUZETEdOQlFXTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1YwRkJWeXhGUVVGRk8wRkJRM1pETEdWQlFVc3NSVUZCUlN4VFFVRlRPMEZCUTJoQ0xHOUNRVUZWTEVWQlFVVXNTVUZCU1R0VFFVTnFRaXhEUVVGRExFTkJRVU03VDBGRFNpeE5RVUZOTzBGQlEwd3NXVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU03UVVGRGNrSXNXVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhUUVVGVExFTkJRVU03VDBGRE5VSTdTMEZEUmp0SFFVTkdMRU5CUVVNc1QwRkJUeXhIUVVGSExFVkJRVVU3TzBkQlJXSTdRMEZEUmpzN1FVRkZSQ3hUUVVGVExFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NTMEZCU3l4RlFVRkZMRU5CUVVNN08zRkNRVVZ1UWl4VFFVRlRJaXdpWm1sc1pTSTZJbVY0WTJWd2RHbHZiaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltTnZibk4wSUdWeWNtOXlVSEp2Y0hNZ1BTQmJYRzRnSUNka1pYTmpjbWx3ZEdsdmJpY3NYRzRnSUNkbWFXeGxUbUZ0WlNjc1hHNGdJQ2RzYVc1bFRuVnRZbVZ5Snl4Y2JpQWdKMlZ1WkV4cGJtVk9kVzFpWlhJbkxGeHVJQ0FuYldWemMyRm5aU2NzWEc0Z0lDZHVZVzFsSnl4Y2JpQWdKMjUxYldKbGNpY3NYRzRnSUNkemRHRmpheWRjYmwwN1hHNWNibVoxYm1OMGFXOXVJRVY0WTJWd2RHbHZiaWh0WlhOellXZGxMQ0J1YjJSbEtTQjdYRzRnSUd4bGRDQnNiMk1nUFNCdWIyUmxJQ1ltSUc1dlpHVXViRzlqTEZ4dUlDQWdJR3hwYm1Vc1hHNGdJQ0FnWlc1a1RHbHVaVTUxYldKbGNpeGNiaUFnSUNCamIyeDFiVzRzWEc0Z0lDQWdaVzVrUTI5c2RXMXVPMXh1WEc0Z0lHbG1JQ2hzYjJNcElIdGNiaUFnSUNCc2FXNWxJRDBnYkc5akxuTjBZWEowTG14cGJtVTdYRzRnSUNBZ1pXNWtUR2x1WlU1MWJXSmxjaUE5SUd4dll5NWxibVF1YkdsdVpUdGNiaUFnSUNCamIyeDFiVzRnUFNCc2IyTXVjM1JoY25RdVkyOXNkVzF1TzF4dUlDQWdJR1Z1WkVOdmJIVnRiaUE5SUd4dll5NWxibVF1WTI5c2RXMXVPMXh1WEc0Z0lDQWdiV1Z6YzJGblpTQXJQU0FuSUMwZ0p5QXJJR3hwYm1VZ0t5QW5PaWNnS3lCamIyeDFiVzQ3WEc0Z0lIMWNibHh1SUNCc1pYUWdkRzF3SUQwZ1JYSnliM0l1Y0hKdmRHOTBlWEJsTG1OdmJuTjBjblZqZEc5eUxtTmhiR3dvZEdocGN5d2diV1Z6YzJGblpTazdYRzVjYmlBZ0x5OGdWVzVtYjNKMGRXNWhkR1ZzZVNCbGNuSnZjbk1nWVhKbElHNXZkQ0JsYm5WdFpYSmhZbXhsSUdsdUlFTm9jbTl0WlNBb1lYUWdiR1ZoYzNRcExDQnpieUJnWm05eUlIQnliM0FnYVc0Z2RHMXdZQ0JrYjJWemJpZDBJSGR2Y21zdVhHNGdJR1p2Y2lBb2JHVjBJR2xrZUNBOUlEQTdJR2xrZUNBOElHVnljbTl5VUhKdmNITXViR1Z1WjNSb095QnBaSGdyS3lrZ2UxeHVJQ0FnSUhSb2FYTmJaWEp5YjNKUWNtOXdjMXRwWkhoZFhTQTlJSFJ0Y0Z0bGNuSnZjbEJ5YjNCelcybGtlRjFkTzF4dUlDQjlYRzVjYmlBZ0x5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHVnNjMlVnS2k5Y2JpQWdhV1lnS0VWeWNtOXlMbU5oY0hSMWNtVlRkR0ZqYTFSeVlXTmxLU0I3WEc0Z0lDQWdSWEp5YjNJdVkyRndkSFZ5WlZOMFlXTnJWSEpoWTJVb2RHaHBjeXdnUlhoalpYQjBhVzl1S1R0Y2JpQWdmVnh1WEc0Z0lIUnllU0I3WEc0Z0lDQWdhV1lnS0d4dll5a2dlMXh1SUNBZ0lDQWdkR2hwY3k1c2FXNWxUblZ0WW1WeUlEMGdiR2x1WlR0Y2JpQWdJQ0FnSUhSb2FYTXVaVzVrVEdsdVpVNTFiV0psY2lBOUlHVnVaRXhwYm1WT2RXMWlaWEk3WEc1Y2JpQWdJQ0FnSUM4dklGZHZjbXNnWVhKdmRXNWtJR2x6YzNWbElIVnVaR1Z5SUhOaFptRnlhU0IzYUdWeVpTQjNaU0JqWVc0bmRDQmthWEpsWTNSc2VTQnpaWFFnZEdobElHTnZiSFZ0YmlCMllXeDFaVnh1SUNBZ0lDQWdMeW9nYVhOMFlXNWlkV3dnYVdkdWIzSmxJRzVsZUhRZ0tpOWNiaUFnSUNBZ0lHbG1JQ2hQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrcElIdGNiaUFnSUNBZ0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hSb2FYTXNJQ2RqYjJ4MWJXNG5MQ0I3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdOdmJIVnRiaXhjYmlBZ0lDQWdJQ0FnSUNCbGJuVnRaWEpoWW14bE9pQjBjblZsWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZEdocGN5d2dKMlZ1WkVOdmJIVnRiaWNzSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ1pXNWtRMjlzZFcxdUxGeHVJQ0FnSUNBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVmNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZiSFZ0YmlBOUlHTnZiSFZ0Ymp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYm1SRGIyeDFiVzRnUFNCbGJtUkRiMngxYlc0N1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlJR05oZEdOb0lDaHViM0FwSUh0Y2JpQWdJQ0F2S2lCSloyNXZjbVVnYVdZZ2RHaGxJR0p5YjNkelpYSWdhWE1nZG1WeWVTQndZWEowYVdOMWJHRnlJQ292WEc0Z0lIMWNibjFjYmx4dVJYaGpaWEIwYVc5dUxuQnliM1J2ZEhsd1pTQTlJRzVsZHlCRmNuSnZjaWdwTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCRmVHTmxjSFJwYjI0N1hHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLnJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMgPSByZWdpc3RlckRlZmF1bHRIZWxwZXJzO1xuZXhwb3J0cy5tb3ZlSGVscGVyVG9Ib29rcyA9IG1vdmVIZWxwZXJUb0hvb2tzO1xuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmcgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmxvY2staGVscGVyLW1pc3NpbmcnKTtcblxudmFyIF9oZWxwZXJzQmxvY2tIZWxwZXJNaXNzaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNCbG9ja0hlbHBlck1pc3NpbmcpO1xuXG52YXIgX2hlbHBlcnNFYWNoID0gcmVxdWlyZSgnLi9oZWxwZXJzL2VhY2gnKTtcblxudmFyIF9oZWxwZXJzRWFjaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWxwZXJzRWFjaCk7XG5cbnZhciBfaGVscGVyc0hlbHBlck1pc3NpbmcgPSByZXF1aXJlKCcuL2hlbHBlcnMvaGVscGVyLW1pc3NpbmcnKTtcblxudmFyIF9oZWxwZXJzSGVscGVyTWlzc2luZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWxwZXJzSGVscGVyTWlzc2luZyk7XG5cbnZhciBfaGVscGVyc0lmID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lmJyk7XG5cbnZhciBfaGVscGVyc0lmMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNJZik7XG5cbnZhciBfaGVscGVyc0xvZyA9IHJlcXVpcmUoJy4vaGVscGVycy9sb2cnKTtcblxudmFyIF9oZWxwZXJzTG9nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlbHBlcnNMb2cpO1xuXG52YXIgX2hlbHBlcnNMb29rdXAgPSByZXF1aXJlKCcuL2hlbHBlcnMvbG9va3VwJyk7XG5cbnZhciBfaGVscGVyc0xvb2t1cDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oZWxwZXJzTG9va3VwKTtcblxudmFyIF9oZWxwZXJzV2l0aCA9IHJlcXVpcmUoJy4vaGVscGVycy93aXRoJyk7XG5cbnZhciBfaGVscGVyc1dpdGgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGVscGVyc1dpdGgpO1xuXG5mdW5jdGlvbiByZWdpc3RlckRlZmF1bHRIZWxwZXJzKGluc3RhbmNlKSB7XG4gIF9oZWxwZXJzQmxvY2tIZWxwZXJNaXNzaW5nMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcbiAgX2hlbHBlcnNFYWNoMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcbiAgX2hlbHBlcnNIZWxwZXJNaXNzaW5nMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcbiAgX2hlbHBlcnNJZjJbJ2RlZmF1bHQnXShpbnN0YW5jZSk7XG4gIF9oZWxwZXJzTG9nMlsnZGVmYXVsdCddKGluc3RhbmNlKTtcbiAgX2hlbHBlcnNMb29rdXAyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xuICBfaGVscGVyc1dpdGgyWydkZWZhdWx0J10oaW5zdGFuY2UpO1xufVxuXG5mdW5jdGlvbiBtb3ZlSGVscGVyVG9Ib29rcyhpbnN0YW5jZSwgaGVscGVyTmFtZSwga2VlcEhlbHBlcikge1xuICBpZiAoaW5zdGFuY2UuaGVscGVyc1toZWxwZXJOYW1lXSkge1xuICAgIGluc3RhbmNlLmhvb2tzW2hlbHBlck5hbWVdID0gaW5zdGFuY2UuaGVscGVyc1toZWxwZXJOYW1lXTtcbiAgICBpZiAoIWtlZXBIZWxwZXIpIHtcbiAgICAgIGRlbGV0ZSBpbnN0YW5jZS5oZWxwZXJzW2hlbHBlck5hbWVdO1xuICAgIH1cbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMmhsYkhCbGNuTXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdPM2xEUVVGMVF5eG5RMEZCWjBNN096czdNa0pCUXpsRExHZENRVUZuUWpzN096dHZRMEZEVUN3d1FrRkJNRUk3T3pzN2VVSkJRM0pETEdOQlFXTTdPenM3TUVKQlEySXNaVUZCWlRzN096czJRa0ZEV2l4clFrRkJhMEk3T3pzN01rSkJRM0JDTEdkQ1FVRm5RanM3T3p0QlFVVnNReXhUUVVGVExITkNRVUZ6UWl4RFFVRkRMRkZCUVZFc1JVRkJSVHRCUVVNdlF5eDVRMEZCTWtJc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRGNrTXNNa0pCUVdFc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGRGRrSXNiME5CUVhOQ0xGRkJRVkVzUTBGQlF5eERRVUZETzBGQlEyaERMSGxDUVVGWExGRkJRVkVzUTBGQlF5eERRVUZETzBGQlEzSkNMREJDUVVGWkxGRkJRVkVzUTBGQlF5eERRVUZETzBGQlEzUkNMRFpDUVVGbExGRkJRVkVzUTBGQlF5eERRVUZETzBGQlEzcENMREpDUVVGaExGRkJRVkVzUTBGQlF5eERRVUZETzBOQlEzaENPenRCUVVWTkxGTkJRVk1zYVVKQlFXbENMRU5CUVVNc1VVRkJVU3hGUVVGRkxGVkJRVlVzUlVGQlJTeFZRVUZWTEVWQlFVVTdRVUZEYkVVc1RVRkJTU3hSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZPMEZCUTJoRExGbEJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0QlFVTXhSQ3hSUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTzBGQlEyWXNZVUZCVHl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzB0QlEzSkRPMGRCUTBZN1EwRkRSaUlzSW1acGJHVWlPaUpvWld4d1pYSnpMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUhKbFoybHpkR1Z5UW14dlkydElaV3h3WlhKTmFYTnphVzVuSUdaeWIyMGdKeTR2YUdWc2NHVnljeTlpYkc5amF5MW9aV3h3WlhJdGJXbHpjMmx1WnljN1hHNXBiWEJ2Y25RZ2NtVm5hWE4wWlhKRllXTm9JR1p5YjIwZ0p5NHZhR1ZzY0dWeWN5OWxZV05vSnp0Y2JtbHRjRzl5ZENCeVpXZHBjM1JsY2tobGJIQmxjazFwYzNOcGJtY2dabkp2YlNBbkxpOW9aV3h3WlhKekwyaGxiSEJsY2kxdGFYTnphVzVuSnp0Y2JtbHRjRzl5ZENCeVpXZHBjM1JsY2tsbUlHWnliMjBnSnk0dmFHVnNjR1Z5Y3k5cFppYzdYRzVwYlhCdmNuUWdjbVZuYVhOMFpYSk1iMmNnWm5KdmJTQW5MaTlvWld4d1pYSnpMMnh2WnljN1hHNXBiWEJ2Y25RZ2NtVm5hWE4wWlhKTWIyOXJkWEFnWm5KdmJTQW5MaTlvWld4d1pYSnpMMnh2YjJ0MWNDYzdYRzVwYlhCdmNuUWdjbVZuYVhOMFpYSlhhWFJvSUdaeWIyMGdKeTR2YUdWc2NHVnljeTkzYVhSb0p6dGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSEpsWjJsemRHVnlSR1ZtWVhWc2RFaGxiSEJsY25Nb2FXNXpkR0Z1WTJVcElIdGNiaUFnY21WbmFYTjBaWEpDYkc5amEwaGxiSEJsY2sxcGMzTnBibWNvYVc1emRHRnVZMlVwTzF4dUlDQnlaV2RwYzNSbGNrVmhZMmdvYVc1emRHRnVZMlVwTzF4dUlDQnlaV2RwYzNSbGNraGxiSEJsY2sxcGMzTnBibWNvYVc1emRHRnVZMlVwTzF4dUlDQnlaV2RwYzNSbGNrbG1LR2x1YzNSaGJtTmxLVHRjYmlBZ2NtVm5hWE4wWlhKTWIyY29hVzV6ZEdGdVkyVXBPMXh1SUNCeVpXZHBjM1JsY2t4dmIydDFjQ2hwYm5OMFlXNWpaU2s3WEc0Z0lISmxaMmx6ZEdWeVYybDBhQ2hwYm5OMFlXNWpaU2s3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnRiM1psU0dWc2NHVnlWRzlJYjI5cmN5aHBibk4wWVc1alpTd2dhR1ZzY0dWeVRtRnRaU3dnYTJWbGNFaGxiSEJsY2lrZ2UxeHVJQ0JwWmlBb2FXNXpkR0Z1WTJVdWFHVnNjR1Z5YzF0b1pXeHdaWEpPWVcxbFhTa2dlMXh1SUNBZ0lHbHVjM1JoYm1ObExtaHZiMnR6VzJobGJIQmxjazVoYldWZElEMGdhVzV6ZEdGdVkyVXVhR1ZzY0dWeWMxdG9aV3h3WlhKT1lXMWxYVHRjYmlBZ0lDQnBaaUFvSVd0bFpYQklaV3h3WlhJcElIdGNiaUFnSUNBZ0lHUmxiR1YwWlNCcGJuTjBZVzVqWlM1b1pXeHdaWEp6VzJobGJIQmxjazVoYldWZE8xeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dUlsMTlcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignYmxvY2tIZWxwZXJNaXNzaW5nJywgZnVuY3Rpb24gKGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgICB2YXIgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcbiAgICAgICAgZm4gPSBvcHRpb25zLmZuO1xuXG4gICAgaWYgKGNvbnRleHQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBmbih0aGlzKTtcbiAgICB9IGVsc2UgaWYgKGNvbnRleHQgPT09IGZhbHNlIHx8IGNvbnRleHQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGludmVyc2UodGhpcyk7XG4gICAgfSBlbHNlIGlmIChfdXRpbHMuaXNBcnJheShjb250ZXh0KSkge1xuICAgICAgaWYgKGNvbnRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAob3B0aW9ucy5pZHMpIHtcbiAgICAgICAgICBvcHRpb25zLmlkcyA9IFtvcHRpb25zLm5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnMuZWFjaChjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnZlcnNlKHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIHZhciBkYXRhID0gX3V0aWxzLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgICAgIGRhdGEuY29udGV4dFBhdGggPSBfdXRpbHMuYXBwZW5kQ29udGV4dFBhdGgob3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoLCBvcHRpb25zLm5hbWUpO1xuICAgICAgICBvcHRpb25zID0geyBkYXRhOiBkYXRhIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmbihjb250ZXh0LCBvcHRpb25zKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMmhsYkhCbGNuTXZZbXh2WTJzdGFHVnNjR1Z5TFcxcGMzTnBibWN1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096dHhRa0ZCZDBRc1ZVRkJWVHM3Y1VKQlJXNUVMRlZCUVZNc1VVRkJVU3hGUVVGRk8wRkJRMmhETEZWQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc2IwSkJRVzlDTEVWQlFVVXNWVUZCVXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRk8wRkJRM1pGTEZGQlFVa3NUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJReXhQUVVGUE8xRkJRek5DTEVWQlFVVXNSMEZCUnl4UFFVRlBMRU5CUVVNc1JVRkJSU3hEUVVGRE96dEJRVVZzUWl4UlFVRkpMRTlCUVU4c1MwRkJTeXhKUVVGSkxFVkJRVVU3UVVGRGNFSXNZVUZCVHl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UzBGRGFrSXNUVUZCVFN4SlFVRkpMRTlCUVU4c1MwRkJTeXhMUVVGTExFbEJRVWtzVDBGQlR5eEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTXZReXhoUVVGUExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0TFFVTjBRaXhOUVVGTkxFbEJRVWtzWlVGQlVTeFBRVUZQTEVOQlFVTXNSVUZCUlR0QlFVTXpRaXhWUVVGSkxFOUJRVThzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RlFVRkZPMEZCUTNSQ0xGbEJRVWtzVDBGQlR5eERRVUZETEVkQlFVY3NSVUZCUlR0QlFVTm1MR2xDUVVGUExFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xTkJRemxDT3p0QlFVVkVMR1ZCUVU4c1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8wOUJRMmhFTEUxQlFVMDdRVUZEVEN4bFFVRlBMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFBRVU4wUWp0TFFVTkdMRTFCUVUwN1FVRkRUQ3hWUVVGSkxFOUJRVThzUTBGQlF5eEpRVUZKTEVsQlFVa3NUMEZCVHl4RFFVRkRMRWRCUVVjc1JVRkJSVHRCUVVNdlFpeFpRVUZKTEVsQlFVa3NSMEZCUnl4dFFrRkJXU3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZEY2tNc1dVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eDVRa0ZEYWtJc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVWQlEzaENMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRMklzUTBGQlF6dEJRVU5HTEdWQlFVOHNSMEZCUnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF6dFBRVU14UWpzN1FVRkZSQ3hoUVVGUExFVkJRVVVzUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1MwRkROMEk3UjBGRFJpeERRVUZETEVOQlFVTTdRMEZEU2lJc0ltWnBiR1VpT2lKaWJHOWpheTFvWld4d1pYSXRiV2x6YzJsdVp5NXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3SUdGd2NHVnVaRU52Ym5SbGVIUlFZWFJvTENCamNtVmhkR1ZHY21GdFpTd2dhWE5CY25KaGVTQjlJR1p5YjIwZ0p5NHVMM1YwYVd4ekp6dGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNG9hVzV6ZEdGdVkyVXBJSHRjYmlBZ2FXNXpkR0Z1WTJVdWNtVm5hWE4wWlhKSVpXeHdaWElvSjJKc2IyTnJTR1ZzY0dWeVRXbHpjMmx1Wnljc0lHWjFibU4wYVc5dUtHTnZiblJsZUhRc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNCc1pYUWdhVzUyWlhKelpTQTlJRzl3ZEdsdmJuTXVhVzUyWlhKelpTeGNiaUFnSUNBZ0lHWnVJRDBnYjNCMGFXOXVjeTVtYmp0Y2JseHVJQ0FnSUdsbUlDaGpiMjUwWlhoMElEMDlQU0IwY25WbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptNG9kR2hwY3lrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoamIyNTBaWGgwSUQwOVBTQm1ZV3h6WlNCOGZDQmpiMjUwWlhoMElEMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCcGJuWmxjbk5sS0hSb2FYTXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9hWE5CY25KaGVTaGpiMjUwWlhoMEtTa2dlMXh1SUNBZ0lDQWdhV1lnS0dOdmJuUmxlSFF1YkdWdVozUm9JRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVwWkhNcElIdGNiaUFnSUNBZ0lDQWdJQ0J2Y0hScGIyNXpMbWxrY3lBOUlGdHZjSFJwYjI1ekxtNWhiV1ZkTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHbHVjM1JoYm1ObExtaGxiSEJsY25NdVpXRmphQ2hqYjI1MFpYaDBMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnBiblpsY25ObEtIUm9hWE1wTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVrWVhSaElDWW1JRzl3ZEdsdmJuTXVhV1J6S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JrWVhSaElEMGdZM0psWVhSbFJuSmhiV1VvYjNCMGFXOXVjeTVrWVhSaEtUdGNiaUFnSUNBZ0lDQWdaR0YwWVM1amIyNTBaWGgwVUdGMGFDQTlJR0Z3Y0dWdVpFTnZiblJsZUhSUVlYUm9LRnh1SUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk11WkdGMFlTNWpiMjUwWlhoMFVHRjBhQ3hjYmlBZ0lDQWdJQ0FnSUNCdmNIUnBiMjV6TG01aGJXVmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnYjNCMGFXOXVjeUE5SUhzZ1pHRjBZVG9nWkdGMFlTQjlPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabTRvWTI5dWRHVjRkQ3dnYjNCMGFXOXVjeWs3WEc0Z0lDQWdmVnh1SUNCOUtUdGNibjFjYmlKZGZRPT1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbnZhciBfZXhjZXB0aW9uID0gcmVxdWlyZSgnLi4vZXhjZXB0aW9uJyk7XG5cbnZhciBfZXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4Y2VwdGlvbik7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignZWFjaCcsIGZ1bmN0aW9uIChjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnTXVzdCBwYXNzIGl0ZXJhdG9yIHRvICNlYWNoJyk7XG4gICAgfVxuXG4gICAgdmFyIGZuID0gb3B0aW9ucy5mbixcbiAgICAgICAgaW52ZXJzZSA9IG9wdGlvbnMuaW52ZXJzZSxcbiAgICAgICAgaSA9IDAsXG4gICAgICAgIHJldCA9ICcnLFxuICAgICAgICBkYXRhID0gdW5kZWZpbmVkLFxuICAgICAgICBjb250ZXh0UGF0aCA9IHVuZGVmaW5lZDtcblxuICAgIGlmIChvcHRpb25zLmRhdGEgJiYgb3B0aW9ucy5pZHMpIHtcbiAgICAgIGNvbnRleHRQYXRoID0gX3V0aWxzLmFwcGVuZENvbnRleHRQYXRoKG9wdGlvbnMuZGF0YS5jb250ZXh0UGF0aCwgb3B0aW9ucy5pZHNbMF0pICsgJy4nO1xuICAgIH1cblxuICAgIGlmIChfdXRpbHMuaXNGdW5jdGlvbihjb250ZXh0KSkge1xuICAgICAgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5kYXRhKSB7XG4gICAgICBkYXRhID0gX3V0aWxzLmNyZWF0ZUZyYW1lKG9wdGlvbnMuZGF0YSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhlY0l0ZXJhdGlvbihmaWVsZCwgaW5kZXgsIGxhc3QpIHtcbiAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgIGRhdGEua2V5ID0gZmllbGQ7XG4gICAgICAgIGRhdGEuaW5kZXggPSBpbmRleDtcbiAgICAgICAgZGF0YS5maXJzdCA9IGluZGV4ID09PSAwO1xuICAgICAgICBkYXRhLmxhc3QgPSAhIWxhc3Q7XG5cbiAgICAgICAgaWYgKGNvbnRleHRQYXRoKSB7XG4gICAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IGNvbnRleHRQYXRoICsgZmllbGQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0ID0gcmV0ICsgZm4oY29udGV4dFtmaWVsZF0sIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgYmxvY2tQYXJhbXM6IF91dGlscy5ibG9ja1BhcmFtcyhbY29udGV4dFtmaWVsZF0sIGZpZWxkXSwgW2NvbnRleHRQYXRoICsgZmllbGQsIG51bGxdKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoX3V0aWxzLmlzQXJyYXkoY29udGV4dCkpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IGNvbnRleHQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgaWYgKGkgaW4gY29udGV4dCkge1xuICAgICAgICAgICAgZXhlY0l0ZXJhdGlvbihpLCBpLCBpID09PSBjb250ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChnbG9iYWwuU3ltYm9sICYmIGNvbnRleHRbZ2xvYmFsLlN5bWJvbC5pdGVyYXRvcl0pIHtcbiAgICAgICAgdmFyIG5ld0NvbnRleHQgPSBbXTtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gY29udGV4dFtnbG9iYWwuU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgICBmb3IgKHZhciBpdCA9IGl0ZXJhdG9yLm5leHQoKTsgIWl0LmRvbmU7IGl0ID0gaXRlcmF0b3IubmV4dCgpKSB7XG4gICAgICAgICAgbmV3Q29udGV4dC5wdXNoKGl0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0ID0gbmV3Q29udGV4dDtcbiAgICAgICAgZm9yICh2YXIgaiA9IGNvbnRleHQubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgZXhlY0l0ZXJhdGlvbihpLCBpLCBpID09PSBjb250ZXh0Lmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBwcmlvcktleSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgIE9iamVjdC5rZXlzKGNvbnRleHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgLy8gV2UncmUgcnVubmluZyB0aGUgaXRlcmF0aW9ucyBvbmUgc3RlcCBvdXQgb2Ygc3luYyBzbyB3ZSBjYW4gZGV0ZWN0XG4gICAgICAgICAgICAvLyB0aGUgbGFzdCBpdGVyYXRpb24gd2l0aG91dCBoYXZlIHRvIHNjYW4gdGhlIG9iamVjdCB0d2ljZSBhbmQgY3JlYXRlXG4gICAgICAgICAgICAvLyBhbiBpdGVybWVkaWF0ZSBrZXlzIGFycmF5LlxuICAgICAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgZXhlY0l0ZXJhdGlvbihwcmlvcktleSwgaSAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJpb3JLZXkgPSBrZXk7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKHByaW9yS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV4ZWNJdGVyYXRpb24ocHJpb3JLZXksIGkgLSAxLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGkgPT09IDApIHtcbiAgICAgIHJldCA9IGludmVyc2UodGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyaGxiSEJsY25NdlpXRmphQzVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPM0ZDUVUxUExGVkJRVlU3TzNsQ1FVTkxMR05CUVdNN096czdjVUpCUlhKQ0xGVkJRVk1zVVVGQlVTeEZRVUZGTzBGQlEyaERMRlZCUVZFc1EwRkJReXhqUVVGakxFTkJRVU1zVFVGQlRTeEZRVUZGTEZWQlFWTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1JVRkJSVHRCUVVONlJDeFJRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZPMEZCUTFvc1dVRkJUU3d5UWtGQll5dzJRa0ZCTmtJc1EwRkJReXhEUVVGRE8wdEJRM0JFT3p0QlFVVkVMRkZCUVVrc1JVRkJSU3hIUVVGSExFOUJRVThzUTBGQlF5eEZRVUZGTzFGQlEycENMRTlCUVU4c1IwRkJSeXhQUVVGUExFTkJRVU1zVDBGQlR6dFJRVU42UWl4RFFVRkRMRWRCUVVjc1EwRkJRenRSUVVOTUxFZEJRVWNzUjBGQlJ5eEZRVUZGTzFGQlExSXNTVUZCU1N4WlFVRkJPMUZCUTBvc1YwRkJWeXhaUVVGQkxFTkJRVU03TzBGQlJXUXNVVUZCU1N4UFFVRlBMRU5CUVVNc1NVRkJTU3hKUVVGSkxFOUJRVThzUTBGQlF5eEhRVUZITEVWQlFVVTdRVUZETDBJc2FVSkJRVmNzUjBGRFZDeDVRa0ZCYTBJc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVWQlFVVXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVkQlFVY3NRMEZCUXp0TFFVTnlSVHM3UVVGRlJDeFJRVUZKTEd0Q1FVRlhMRTlCUVU4c1EwRkJReXhGUVVGRk8wRkJRM1pDTEdGQlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzB0QlF6bENPenRCUVVWRUxGRkJRVWtzVDBGQlR5eERRVUZETEVsQlFVa3NSVUZCUlR0QlFVTm9RaXhWUVVGSkxFZEJRVWNzYlVKQlFWa3NUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wdEJRMnhET3p0QlFVVkVMR0ZCUVZNc1lVRkJZU3hEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTVUZCU1N4RlFVRkZPMEZCUTNwRExGVkJRVWtzU1VGQlNTeEZRVUZGTzBGQlExSXNXVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhMUVVGTExFTkJRVU03UVVGRGFrSXNXVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU03UVVGRGJrSXNXVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFdEJRVXNzUTBGQlF5eERRVUZETzBGQlEzcENMRmxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXpzN1FVRkZia0lzV1VGQlNTeFhRVUZYTEVWQlFVVTdRVUZEWml4alFVRkpMRU5CUVVNc1YwRkJWeXhIUVVGSExGZEJRVmNzUjBGQlJ5eExRVUZMTEVOQlFVTTdVMEZEZUVNN1QwRkRSanM3UVVGRlJDeFRRVUZITEVkQlEwUXNSMEZCUnl4SFFVTklMRVZCUVVVc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVTdRVUZEYWtJc1dVRkJTU3hGUVVGRkxFbEJRVWs3UVVGRFZpeHRRa0ZCVnl4RlFVRkZMRzFDUVVOWUxFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZMRXRCUVVzc1EwRkJReXhGUVVOMlFpeERRVUZETEZkQlFWY3NSMEZCUnl4TFFVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRelZDTzA5QlEwWXNRMEZCUXl4RFFVRkRPMHRCUTA0N08wRkJSVVFzVVVGQlNTeFBRVUZQTEVsQlFVa3NUMEZCVHl4UFFVRlBMRXRCUVVzc1VVRkJVU3hGUVVGRk8wRkJRekZETEZWQlFVa3NaVUZCVVN4UFFVRlBMRU5CUVVNc1JVRkJSVHRCUVVOd1FpeGhRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRTlCUVU4c1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVOMlF5eGpRVUZKTEVOQlFVTXNTVUZCU1N4UFFVRlBMRVZCUVVVN1FVRkRhRUlzZVVKQlFXRXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUzBGQlN5eFBRVUZQTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8xZEJReTlETzFOQlEwWTdUMEZEUml4TlFVRk5MRWxCUVVrc1RVRkJUU3hEUVVGRExFMUJRVTBzU1VGQlNTeFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zUlVGQlJUdEJRVU16UkN4WlFVRk5MRlZCUVZVc1IwRkJSeXhGUVVGRkxFTkJRVU03UVVGRGRFSXNXVUZCVFN4UlFVRlJMRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRVZCUVVVc1EwRkJRenRCUVVOdVJDeGhRVUZMTEVsQlFVa3NSVUZCUlN4SFFVRkhMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpMRVZCUVVVc1JVRkJSU3hIUVVGSExGRkJRVkVzUTBGQlF5eEpRVUZKTEVWQlFVVXNSVUZCUlR0QlFVTTNSQ3h2UWtGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03VTBGRE0wSTdRVUZEUkN4bFFVRlBMRWRCUVVjc1ZVRkJWU3hEUVVGRE8wRkJRM0pDTEdGQlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8wRkJRM1pETEhWQ1FVRmhMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEV0QlFVc3NUMEZCVHl4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU12UXp0UFFVTkdMRTFCUVUwN08wRkJRMHdzWTBGQlNTeFJRVUZSTEZsQlFVRXNRMEZCUXpzN1FVRkZZaXhuUWtGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlFTeEhRVUZITEVWQlFVazdPenM3UVVGSmJFTXNaMEpCUVVrc1VVRkJVU3hMUVVGTExGTkJRVk1zUlVGQlJUdEJRVU14UWl3eVFrRkJZU3hEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1lVRkRhRU03UVVGRFJDeHZRa0ZCVVN4SFFVRkhMRWRCUVVjc1EwRkJRenRCUVVObUxHRkJRVU1zUlVGQlJTeERRVUZETzFkQlEwd3NRMEZCUXl4RFFVRkRPMEZCUTBnc1kwRkJTU3hSUVVGUkxFdEJRVXNzVTBGQlV5eEZRVUZGTzBGQlF6RkNMSGxDUVVGaExFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03VjBGRGRFTTdPMDlCUTBZN1MwRkRSanM3UVVGRlJDeFJRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVN1FVRkRXQ3hUUVVGSExFZEJRVWNzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUTNKQ096dEJRVVZFTEZkQlFVOHNSMEZCUnl4RFFVRkRPMGRCUTFvc1EwRkJReXhEUVVGRE8wTkJRMG9pTENKbWFXeGxJam9pWldGamFDNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3WEc0Z0lHRndjR1Z1WkVOdmJuUmxlSFJRWVhSb0xGeHVJQ0JpYkc5amExQmhjbUZ0Y3l4Y2JpQWdZM0psWVhSbFJuSmhiV1VzWEc0Z0lHbHpRWEp5WVhrc1hHNGdJR2x6Um5WdVkzUnBiMjVjYm4wZ1puSnZiU0FuTGk0dmRYUnBiSE1uTzF4dWFXMXdiM0owSUVWNFkyVndkR2x2YmlCbWNtOXRJQ2N1TGk5bGVHTmxjSFJwYjI0bk8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpaHBibk4wWVc1alpTa2dlMXh1SUNCcGJuTjBZVzVqWlM1eVpXZHBjM1JsY2tobGJIQmxjaWduWldGamFDY3NJR1oxYm1OMGFXOXVLR052Ym5SbGVIUXNJRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQnBaaUFvSVc5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmVHTmxjSFJwYjI0b0owMTFjM1FnY0dGemN5QnBkR1Z5WVhSdmNpQjBieUFqWldGamFDY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHeGxkQ0JtYmlBOUlHOXdkR2x2Ym5NdVptNHNYRzRnSUNBZ0lDQnBiblpsY25ObElEMGdiM0IwYVc5dWN5NXBiblpsY25ObExGeHVJQ0FnSUNBZ2FTQTlJREFzWEc0Z0lDQWdJQ0J5WlhRZ1BTQW5KeXhjYmlBZ0lDQWdJR1JoZEdFc1hHNGdJQ0FnSUNCamIyNTBaWGgwVUdGMGFEdGNibHh1SUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbVJoZEdFZ0ppWWdiM0IwYVc5dWN5NXBaSE1wSUh0Y2JpQWdJQ0FnSUdOdmJuUmxlSFJRWVhSb0lEMWNiaUFnSUNBZ0lDQWdZWEJ3Wlc1a1EyOXVkR1Y0ZEZCaGRHZ29iM0IwYVc5dWN5NWtZWFJoTG1OdmJuUmxlSFJRWVhSb0xDQnZjSFJwYjI1ekxtbGtjMXN3WFNrZ0t5QW5MaWM3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dselJuVnVZM1JwYjI0b1kyOXVkR1Y0ZENrcElIdGNiaUFnSUNBZ0lHTnZiblJsZUhRZ1BTQmpiMjUwWlhoMExtTmhiR3dvZEdocGN5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVaR0YwWVNrZ2UxeHVJQ0FnSUNBZ1pHRjBZU0E5SUdOeVpXRjBaVVp5WVcxbEtHOXdkR2x2Ym5NdVpHRjBZU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdablZ1WTNScGIyNGdaWGhsWTBsMFpYSmhkR2x2YmlobWFXVnNaQ3dnYVc1a1pYZ3NJR3hoYzNRcElIdGNiaUFnSUNBZ0lHbG1JQ2hrWVhSaEtTQjdYRzRnSUNBZ0lDQWdJR1JoZEdFdWEyVjVJRDBnWm1sbGJHUTdYRzRnSUNBZ0lDQWdJR1JoZEdFdWFXNWtaWGdnUFNCcGJtUmxlRHRjYmlBZ0lDQWdJQ0FnWkdGMFlTNW1hWEp6ZENBOUlHbHVaR1Y0SUQwOVBTQXdPMXh1SUNBZ0lDQWdJQ0JrWVhSaExteGhjM1FnUFNBaElXeGhjM1E3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR052Ym5SbGVIUlFZWFJvS1NCN1hHNGdJQ0FnSUNBZ0lDQWdaR0YwWVM1amIyNTBaWGgwVUdGMGFDQTlJR052Ym5SbGVIUlFZWFJvSUNzZ1ptbGxiR1E3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBJRDFjYmlBZ0lDQWdJQ0FnY21WMElDdGNiaUFnSUNBZ0lDQWdabTRvWTI5dWRHVjRkRnRtYVdWc1pGMHNJSHRjYmlBZ0lDQWdJQ0FnSUNCa1lYUmhPaUJrWVhSaExGeHVJQ0FnSUNBZ0lDQWdJR0pzYjJOclVHRnlZVzF6T2lCaWJHOWphMUJoY21GdGN5aGNiaUFnSUNBZ0lDQWdJQ0FnSUZ0amIyNTBaWGgwVzJacFpXeGtYU3dnWm1sbGJHUmRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1cyTnZiblJsZUhSUVlYUm9JQ3NnWm1sbGJHUXNJRzUxYkd4ZFhHNGdJQ0FnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb1kyOXVkR1Y0ZENBbUppQjBlWEJsYjJZZ1kyOXVkR1Y0ZENBOVBUMGdKMjlpYW1WamRDY3BJSHRjYmlBZ0lDQWdJR2xtSUNocGMwRnljbUY1S0dOdmJuUmxlSFFwS1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHb2dQU0JqYjI1MFpYaDBMbXhsYm1kMGFEc2dhU0E4SUdvN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hwSUdsdUlHTnZiblJsZUhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWNFpXTkpkR1Z5WVhScGIyNG9hU3dnYVN3Z2FTQTlQVDBnWTI5dWRHVjRkQzVzWlc1bmRHZ2dMU0F4S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvWjJ4dlltRnNMbE41YldKdmJDQW1KaUJqYjI1MFpYaDBXMmRzYjJKaGJDNVRlVzFpYjJ3dWFYUmxjbUYwYjNKZEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHNWxkME52Ym5SbGVIUWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYVhSbGNtRjBiM0lnUFNCamIyNTBaWGgwVzJkc2IySmhiQzVUZVcxaWIyd3VhWFJsY21GMGIzSmRLQ2s3WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdsMElEMGdhWFJsY21GMGIzSXVibVY0ZENncE95QWhhWFF1Wkc5dVpUc2dhWFFnUFNCcGRHVnlZWFJ2Y2k1dVpYaDBLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQnVaWGREYjI1MFpYaDBMbkIxYzJnb2FYUXVkbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR052Ym5SbGVIUWdQU0J1WlhkRGIyNTBaWGgwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcUlEMGdZMjl1ZEdWNGRDNXNaVzVuZEdnN0lHa2dQQ0JxT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNCbGVHVmpTWFJsY21GMGFXOXVLR2tzSUdrc0lHa2dQVDA5SUdOdmJuUmxlSFF1YkdWdVozUm9JQzBnTVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J3Y21sdmNrdGxlVHRjYmx4dUlDQWdJQ0FnSUNCUFltcGxZM1F1YTJWNWN5aGpiMjUwWlhoMEtTNW1iM0pGWVdOb0tHdGxlU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnVjJVbmNtVWdjblZ1Ym1sdVp5QjBhR1VnYVhSbGNtRjBhVzl1Y3lCdmJtVWdjM1JsY0NCdmRYUWdiMllnYzNsdVl5QnpieUIzWlNCallXNGdaR1YwWldOMFhHNGdJQ0FnSUNBZ0lDQWdMeThnZEdobElHeGhjM1FnYVhSbGNtRjBhVzl1SUhkcGRHaHZkWFFnYUdGMlpTQjBieUJ6WTJGdUlIUm9aU0J2WW1wbFkzUWdkSGRwWTJVZ1lXNWtJR055WldGMFpWeHVJQ0FnSUNBZ0lDQWdJQzh2SUdGdUlHbDBaWEp0WldScFlYUmxJR3RsZVhNZ1lYSnlZWGt1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSEJ5YVc5eVMyVjVJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdWNFpXTkpkR1Z5WVhScGIyNG9jSEpwYjNKTFpYa3NJR2tnTFNBeEtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2NISnBiM0pMWlhrZ1BTQnJaWGs3WEc0Z0lDQWdJQ0FnSUNBZ2FTc3JPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJ5YVc5eVMyVjVJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0JsZUdWalNYUmxjbUYwYVc5dUtIQnlhVzl5UzJWNUxDQnBJQzBnTVN3Z2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2FTQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ2NtVjBJRDBnYVc1MlpYSnpaU2gwYUdsektUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnY21WME8xeHVJQ0I5S1R0Y2JuMWNiaUpkZlE9PVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX2V4Y2VwdGlvbiA9IHJlcXVpcmUoJy4uL2V4Y2VwdGlvbicpO1xuXG52YXIgX2V4Y2VwdGlvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGNlcHRpb24pO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgaW5zdGFuY2UucmVnaXN0ZXJIZWxwZXIoJ2hlbHBlck1pc3NpbmcnLCBmdW5jdGlvbiAoKSAvKiBbYXJncywgXW9wdGlvbnMgKi97XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIC8vIEEgbWlzc2luZyBmaWVsZCBpbiBhIHt7Zm9vfX0gY29uc3RydWN0LlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU29tZW9uZSBpcyBhY3R1YWxseSB0cnlpbmcgdG8gY2FsbCBzb21ldGhpbmcsIGJsb3cgdXAuXG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnTWlzc2luZyBoZWxwZXI6IFwiJyArIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV0ubmFtZSArICdcIicpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyaGxiSEJsY25NdmFHVnNjR1Z5TFcxcGMzTnBibWN1YW5NaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdPenQ1UWtGQmMwSXNZMEZCWXpzN096dHhRa0ZGY2tJc1ZVRkJVeXhSUVVGUkxFVkJRVVU3UVVGRGFFTXNWVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhsUVVGbExFVkJRVVVzYVVOQlFXZERPMEZCUTNaRkxGRkJRVWtzVTBGQlV5eERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRMRVZCUVVVN08wRkJSVEZDTEdGQlFVOHNVMEZCVXl4RFFVRkRPMHRCUTJ4Q0xFMUJRVTA3TzBGQlJVd3NXVUZCVFN3eVFrRkRTaXh0UWtGQmJVSXNSMEZCUnl4VFFVRlRMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRWRCUVVjc1IwRkJSeXhEUVVOcVJTeERRVUZETzB0QlEwZzdSMEZEUml4RFFVRkRMRU5CUVVNN1EwRkRTaUlzSW1acGJHVWlPaUpvWld4d1pYSXRiV2x6YzJsdVp5NXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0JGZUdObGNIUnBiMjRnWm5KdmJTQW5MaTR2WlhoalpYQjBhVzl1Snp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0b2FXNXpkR0Z1WTJVcElIdGNiaUFnYVc1emRHRnVZMlV1Y21WbmFYTjBaWEpJWld4d1pYSW9KMmhsYkhCbGNrMXBjM05wYm1jbkxDQm1kVzVqZEdsdmJpZ3ZLaUJiWVhKbmN5d2dYVzl3ZEdsdmJuTWdLaThwSUh0Y2JpQWdJQ0JwWmlBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBOVBUMGdNU2tnZTF4dUlDQWdJQ0FnTHk4Z1FTQnRhWE56YVc1bklHWnBaV3hrSUdsdUlHRWdlM3RtYjI5OWZTQmpiMjV6ZEhKMVkzUXVYRzRnSUNBZ0lDQnlaWFIxY200Z2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0F2THlCVGIyMWxiMjVsSUdseklHRmpkSFZoYkd4NUlIUnllV2x1WnlCMGJ5QmpZV3hzSUhOdmJXVjBhR2x1Wnl3Z1lteHZkeUIxY0M1Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmVHTmxjSFJwYjI0b1hHNGdJQ0FnSUNBZ0lDZE5hWE56YVc1bklHaGxiSEJsY2pvZ1hDSW5JQ3NnWVhKbmRXMWxiblJ6VzJGeVozVnRaVzUwY3k1c1pXNW5kR2dnTFNBeFhTNXVZVzFsSUNzZ0oxd2lKMXh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzRnSUgwcE8xeHVmVnh1SWwxOVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuLy8gaXN0YW5idWwgaWdub3JlIG5leHRcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxudmFyIF9leGNlcHRpb24gPSByZXF1aXJlKCcuLi9leGNlcHRpb24nKTtcblxudmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdpZicsIGZ1bmN0aW9uIChjb25kaXRpb25hbCwgb3B0aW9ucykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9IDIpIHtcbiAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCcjaWYgcmVxdWlyZXMgZXhhY3RseSBvbmUgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgaWYgKF91dGlscy5pc0Z1bmN0aW9uKGNvbmRpdGlvbmFsKSkge1xuICAgICAgY29uZGl0aW9uYWwgPSBjb25kaXRpb25hbC5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIC8vIERlZmF1bHQgYmVoYXZpb3IgaXMgdG8gcmVuZGVyIHRoZSBwb3NpdGl2ZSBwYXRoIGlmIHRoZSB2YWx1ZSBpcyB0cnV0aHkgYW5kIG5vdCBlbXB0eS5cbiAgICAvLyBUaGUgYGluY2x1ZGVaZXJvYCBvcHRpb24gbWF5IGJlIHNldCB0byB0cmVhdCB0aGUgY29uZHRpb25hbCBhcyBwdXJlbHkgbm90IGVtcHR5IGJhc2VkIG9uIHRoZVxuICAgIC8vIGJlaGF2aW9yIG9mIGlzRW1wdHkuIEVmZmVjdGl2ZWx5IHRoaXMgZGV0ZXJtaW5lcyBpZiAwIGlzIGhhbmRsZWQgYnkgdGhlIHBvc2l0aXZlIHBhdGggb3IgbmVnYXRpdmUuXG4gICAgaWYgKCFvcHRpb25zLmhhc2guaW5jbHVkZVplcm8gJiYgIWNvbmRpdGlvbmFsIHx8IF91dGlscy5pc0VtcHR5KGNvbmRpdGlvbmFsKSkge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9wdGlvbnMuZm4odGhpcyk7XG4gICAgfVxuICB9KTtcblxuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcigndW5sZXNzJywgZnVuY3Rpb24gKGNvbmRpdGlvbmFsLCBvcHRpb25zKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT0gMikge1xuICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJyN1bmxlc3MgcmVxdWlyZXMgZXhhY3RseSBvbmUgYXJndW1lbnQnKTtcbiAgICB9XG4gICAgcmV0dXJuIGluc3RhbmNlLmhlbHBlcnNbJ2lmJ10uY2FsbCh0aGlzLCBjb25kaXRpb25hbCwge1xuICAgICAgZm46IG9wdGlvbnMuaW52ZXJzZSxcbiAgICAgIGludmVyc2U6IG9wdGlvbnMuZm4sXG4gICAgICBoYXNoOiBvcHRpb25zLmhhc2hcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyaGxiSEJsY25NdmFXWXVhbk1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096dHhRa0ZCYjBNc1ZVRkJWVHM3ZVVKQlEzaENMR05CUVdNN096czdjVUpCUlhKQ0xGVkJRVk1zVVVGQlVTeEZRVUZGTzBGQlEyaERMRlZCUVZFc1EwRkJReXhqUVVGakxFTkJRVU1zU1VGQlNTeEZRVUZGTEZWQlFWTXNWMEZCVnl4RlFVRkZMRTlCUVU4c1JVRkJSVHRCUVVNelJDeFJRVUZKTEZOQlFWTXNRMEZCUXl4TlFVRk5MRWxCUVVrc1EwRkJReXhGUVVGRk8wRkJRM3BDTEZsQlFVMHNNa0pCUVdNc2JVTkJRVzFETEVOQlFVTXNRMEZCUXp0TFFVTXhSRHRCUVVORUxGRkJRVWtzYTBKQlFWY3NWMEZCVnl4RFFVRkRMRVZCUVVVN1FVRkRNMElzYVVKQlFWY3NSMEZCUnl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzB0QlEzUkRPenM3T3p0QlFVdEVMRkZCUVVrc1FVRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4SlFVRkpMRU5CUVVNc1YwRkJWeXhKUVVGTExHVkJRVkVzVjBGQlZ5eERRVUZETEVWQlFVVTdRVUZEZGtVc1lVRkJUeXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUXpsQ0xFMUJRVTA3UVVGRFRDeGhRVUZQTEU5QlFVOHNRMEZCUXl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UzBGRGVrSTdSMEZEUml4RFFVRkRMRU5CUVVNN08wRkJSVWdzVlVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4UlFVRlJMRVZCUVVVc1ZVRkJVeXhYUVVGWExFVkJRVVVzVDBGQlR5eEZRVUZGTzBGQlF5OUVMRkZCUVVrc1UwRkJVeXhEUVVGRExFMUJRVTBzU1VGQlNTeERRVUZETEVWQlFVVTdRVUZEZWtJc1dVRkJUU3d5UWtGQll5eDFRMEZCZFVNc1EwRkJReXhEUVVGRE8wdEJRemxFTzBGQlEwUXNWMEZCVHl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1YwRkJWeXhGUVVGRk8wRkJRM0JFTEZGQlFVVXNSVUZCUlN4UFFVRlBMRU5CUVVNc1QwRkJUenRCUVVOdVFpeGhRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRMRVZCUVVVN1FVRkRia0lzVlVGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXl4SlFVRkpPMHRCUTI1Q0xFTkJRVU1zUTBGQlF6dEhRVU5LTEVOQlFVTXNRMEZCUXp0RFFVTktJaXdpWm1sc1pTSTZJbWxtTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIc2dhWE5GYlhCMGVTd2dhWE5HZFc1amRHbHZiaUI5SUdaeWIyMGdKeTR1TDNWMGFXeHpKenRjYm1sdGNHOXlkQ0JGZUdObGNIUnBiMjRnWm5KdmJTQW5MaTR2WlhoalpYQjBhVzl1Snp0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0b2FXNXpkR0Z1WTJVcElIdGNiaUFnYVc1emRHRnVZMlV1Y21WbmFYTjBaWEpJWld4d1pYSW9KMmxtSnl3Z1puVnVZM1JwYjI0b1kyOXVaR2wwYVc5dVlXd3NJRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQnBaaUFvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0FoUFNBeUtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWGhqWlhCMGFXOXVLQ2NqYVdZZ2NtVnhkV2x5WlhNZ1pYaGhZM1JzZVNCdmJtVWdZWEpuZFcxbGJuUW5LVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR2x6Um5WdVkzUnBiMjRvWTI5dVpHbDBhVzl1WVd3cEtTQjdYRzRnSUNBZ0lDQmpiMjVrYVhScGIyNWhiQ0E5SUdOdmJtUnBkR2x2Ym1Gc0xtTmhiR3dvZEdocGN5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdSR1ZtWVhWc2RDQmlaV2hoZG1sdmNpQnBjeUIwYnlCeVpXNWtaWElnZEdobElIQnZjMmwwYVhabElIQmhkR2dnYVdZZ2RHaGxJSFpoYkhWbElHbHpJSFJ5ZFhSb2VTQmhibVFnYm05MElHVnRjSFI1TGx4dUlDQWdJQzh2SUZSb1pTQmdhVzVqYkhWa1pWcGxjbTlnSUc5d2RHbHZiaUJ0WVhrZ1ltVWdjMlYwSUhSdklIUnlaV0YwSUhSb1pTQmpiMjVrZEdsdmJtRnNJR0Z6SUhCMWNtVnNlU0J1YjNRZ1pXMXdkSGtnWW1GelpXUWdiMjRnZEdobFhHNGdJQ0FnTHk4Z1ltVm9ZWFpwYjNJZ2IyWWdhWE5GYlhCMGVTNGdSV1ptWldOMGFYWmxiSGtnZEdocGN5QmtaWFJsY20xcGJtVnpJR2xtSURBZ2FYTWdhR0Z1Wkd4bFpDQmllU0IwYUdVZ2NHOXphWFJwZG1VZ2NHRjBhQ0J2Y2lCdVpXZGhkR2wyWlM1Y2JpQWdJQ0JwWmlBb0tDRnZjSFJwYjI1ekxtaGhjMmd1YVc1amJIVmtaVnBsY204Z0ppWWdJV052Ym1ScGRHbHZibUZzS1NCOGZDQnBjMFZ0Y0hSNUtHTnZibVJwZEdsdmJtRnNLU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzl3ZEdsdmJuTXVhVzUyWlhKelpTaDBhR2x6S1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHOXdkR2x2Ym5NdVptNG9kR2hwY3lrN1hHNGdJQ0FnZlZ4dUlDQjlLVHRjYmx4dUlDQnBibk4wWVc1alpTNXlaV2RwYzNSbGNraGxiSEJsY2lnbmRXNXNaWE56Snl3Z1puVnVZM1JwYjI0b1kyOXVaR2wwYVc5dVlXd3NJRzl3ZEdsdmJuTXBJSHRjYmlBZ0lDQnBaaUFvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0FoUFNBeUtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWGhqWlhCMGFXOXVLQ2NqZFc1c1pYTnpJSEpsY1hWcGNtVnpJR1Y0WVdOMGJIa2diMjVsSUdGeVozVnRaVzUwSnlrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnBibk4wWVc1alpTNW9aV3h3WlhKeld5ZHBaaWRkTG1OaGJHd29kR2hwY3l3Z1kyOXVaR2wwYVc5dVlXd3NJSHRjYmlBZ0lDQWdJR1p1T2lCdmNIUnBiMjV6TG1sdWRtVnljMlVzWEc0Z0lDQWdJQ0JwYm5abGNuTmxPaUJ2Y0hScGIyNXpMbVp1TEZ4dUlDQWdJQ0FnYUdGemFEb2diM0IwYVc5dWN5NW9ZWE5vWEc0Z0lDQWdmU2s3WEc0Z0lIMHBPMXh1ZlZ4dUlsMTlcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnJlZ2lzdGVySGVscGVyKCdsb2cnLCBmdW5jdGlvbiAoKSAvKiBtZXNzYWdlLCBvcHRpb25zICove1xuICAgIHZhciBhcmdzID0gW3VuZGVmaW5lZF0sXG4gICAgICAgIG9wdGlvbnMgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gICAgfVxuXG4gICAgdmFyIGxldmVsID0gMTtcbiAgICBpZiAob3B0aW9ucy5oYXNoLmxldmVsICE9IG51bGwpIHtcbiAgICAgIGxldmVsID0gb3B0aW9ucy5oYXNoLmxldmVsO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuZGF0YS5sZXZlbCAhPSBudWxsKSB7XG4gICAgICBsZXZlbCA9IG9wdGlvbnMuZGF0YS5sZXZlbDtcbiAgICB9XG4gICAgYXJnc1swXSA9IGxldmVsO1xuXG4gICAgaW5zdGFuY2UubG9nLmFwcGx5KGluc3RhbmNlLCBhcmdzKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwyaGxiSEJsY25NdmJHOW5MbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN2NVSkJRV1VzVlVGQlV5eFJRVUZSTEVWQlFVVTdRVUZEYUVNc1ZVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eExRVUZMTEVWQlFVVXNhME5CUVdsRE8wRkJRemxFTEZGQlFVa3NTVUZCU1N4SFFVRkhMRU5CUVVNc1UwRkJVeXhEUVVGRE8xRkJRM0JDTEU5QlFVOHNSMEZCUnl4VFFVRlRMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTTFReXhUUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1UwRkJVeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1FVRkROME1zVlVGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dExRVU42UWpzN1FVRkZSQ3hSUVVGSkxFdEJRVXNzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZEWkN4UlFVRkpMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEpRVUZKTEVsQlFVa3NSVUZCUlR0QlFVTTVRaXhYUVVGTExFZEJRVWNzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNN1MwRkROVUlzVFVGQlRTeEpRVUZKTEU5QlFVOHNRMEZCUXl4SlFVRkpMRWxCUVVrc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVsQlFVa3NTVUZCU1N4RlFVRkZPMEZCUTNKRUxGZEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJRenRMUVVNMVFqdEJRVU5FTEZGQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU03TzBGQlJXaENMRmxCUVZFc1EwRkJReXhIUVVGSExFMUJRVUVzUTBGQldpeFJRVUZSTEVWQlFWRXNTVUZCU1N4RFFVRkRMRU5CUVVNN1IwRkRka0lzUTBGQlF5eERRVUZETzBOQlEwb2lMQ0ptYVd4bElqb2liRzluTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2laWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0b2FXNXpkR0Z1WTJVcElIdGNiaUFnYVc1emRHRnVZMlV1Y21WbmFYTjBaWEpJWld4d1pYSW9KMnh2Wnljc0lHWjFibU4wYVc5dUtDOHFJRzFsYzNOaFoyVXNJRzl3ZEdsdmJuTWdLaThwSUh0Y2JpQWdJQ0JzWlhRZ1lYSm5jeUE5SUZ0MWJtUmxabWx1WldSZExGeHVJQ0FnSUNBZ2IzQjBhVzl1Y3lBOUlHRnlaM1Z0Wlc1MGMxdGhjbWQxYldWdWRITXViR1Z1WjNSb0lDMGdNVjA3WEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JoY21kMWJXVnVkSE11YkdWdVozUm9JQzBnTVRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0JoY21kekxuQjFjMmdvWVhKbmRXMWxiblJ6VzJsZEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCc1pYUWdiR1YyWld3Z1BTQXhPMXh1SUNBZ0lHbG1JQ2h2Y0hScGIyNXpMbWhoYzJndWJHVjJaV3dnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnYkdWMlpXd2dQU0J2Y0hScGIyNXpMbWhoYzJndWJHVjJaV3c3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h2Y0hScGIyNXpMbVJoZEdFZ0ppWWdiM0IwYVc5dWN5NWtZWFJoTG14bGRtVnNJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJR3hsZG1Wc0lEMGdiM0IwYVc5dWN5NWtZWFJoTG14bGRtVnNPMXh1SUNBZ0lIMWNiaUFnSUNCaGNtZHpXekJkSUQwZ2JHVjJaV3c3WEc1Y2JpQWdJQ0JwYm5OMFlXNWpaUzVzYjJjb0xpNHVZWEpuY3lrN1hHNGdJSDBwTzF4dWZWeHVJbDE5XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignbG9va3VwJywgZnVuY3Rpb24gKG9iaiwgZmllbGQsIG9wdGlvbnMpIHtcbiAgICBpZiAoIW9iaikge1xuICAgICAgLy8gTm90ZSBmb3IgNS4wOiBDaGFuZ2UgdG8gXCJvYmogPT0gbnVsbFwiIGluIDUuMFxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnMubG9va3VwUHJvcGVydHkob2JqLCBmaWVsZCk7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMmhsYkhCbGNuTXZiRzl2YTNWd0xtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3Y1VKQlFXVXNWVUZCVXl4UlFVRlJMRVZCUVVVN1FVRkRhRU1zVlVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4UlFVRlJMRVZCUVVVc1ZVRkJVeXhIUVVGSExFVkJRVVVzUzBGQlN5eEZRVUZGTEU5QlFVOHNSVUZCUlR0QlFVTTVSQ3hSUVVGSkxFTkJRVU1zUjBGQlJ5eEZRVUZGT3p0QlFVVlNMR0ZCUVU4c1IwRkJSeXhEUVVGRE8wdEJRMW83UVVGRFJDeFhRVUZQTEU5QlFVOHNRMEZCUXl4alFVRmpMRU5CUVVNc1IwRkJSeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzBkQlF6TkRMRU5CUVVNc1EwRkJRenREUVVOS0lpd2labWxzWlNJNklteHZiMnQxY0M1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUtHbHVjM1JoYm1ObEtTQjdYRzRnSUdsdWMzUmhibU5sTG5KbFoybHpkR1Z5U0dWc2NHVnlLQ2RzYjI5cmRYQW5MQ0JtZFc1amRHbHZiaWh2WW1vc0lHWnBaV3hrTENCdmNIUnBiMjV6S1NCN1hHNGdJQ0FnYVdZZ0tDRnZZbW9wSUh0Y2JpQWdJQ0FnSUM4dklFNXZkR1VnWm05eUlEVXVNRG9nUTJoaGJtZGxJSFJ2SUZ3aWIySnFJRDA5SUc1MWJHeGNJaUJwYmlBMUxqQmNiaUFnSUNBZ0lISmxkSFZ5YmlCdlltbzdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ2Y0hScGIyNXpMbXh2YjJ0MWNGQnliM0JsY25SNUtHOWlhaXdnWm1sbGJHUXBPMXh1SUNCOUtUdGNibjFjYmlKZGZRPT1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbnZhciBfZXhjZXB0aW9uID0gcmVxdWlyZSgnLi4vZXhjZXB0aW9uJyk7XG5cbnZhciBfZXhjZXB0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4Y2VwdGlvbik7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5yZWdpc3RlckhlbHBlcignd2l0aCcsIGZ1bmN0aW9uIChjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggIT0gMikge1xuICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJyN3aXRoIHJlcXVpcmVzIGV4YWN0bHkgb25lIGFyZ3VtZW50Jyk7XG4gICAgfVxuICAgIGlmIChfdXRpbHMuaXNGdW5jdGlvbihjb250ZXh0KSkge1xuICAgICAgY29udGV4dCA9IGNvbnRleHQuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICB2YXIgZm4gPSBvcHRpb25zLmZuO1xuXG4gICAgaWYgKCFfdXRpbHMuaXNFbXB0eShjb250ZXh0KSkge1xuICAgICAgdmFyIGRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICBpZiAob3B0aW9ucy5kYXRhICYmIG9wdGlvbnMuaWRzKSB7XG4gICAgICAgIGRhdGEgPSBfdXRpbHMuY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgZGF0YS5jb250ZXh0UGF0aCA9IF91dGlscy5hcHBlbmRDb250ZXh0UGF0aChvcHRpb25zLmRhdGEuY29udGV4dFBhdGgsIG9wdGlvbnMuaWRzWzBdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuKGNvbnRleHQsIHtcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgYmxvY2tQYXJhbXM6IF91dGlscy5ibG9ja1BhcmFtcyhbY29udGV4dF0sIFtkYXRhICYmIGRhdGEuY29udGV4dFBhdGhdKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJobGJIQmxjbk12ZDJsMGFDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN08zRkNRVTFQTEZWQlFWVTdPM2xDUVVOTExHTkJRV003T3pzN2NVSkJSWEpDTEZWQlFWTXNVVUZCVVN4RlFVRkZPMEZCUTJoRExGVkJRVkVzUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4RlFVRkZMRlZCUVZNc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJUdEJRVU42UkN4UlFVRkpMRk5CUVZNc1EwRkJReXhOUVVGTkxFbEJRVWtzUTBGQlF5eEZRVUZGTzBGQlEzcENMRmxCUVUwc01rSkJRV01zY1VOQlFYRkRMRU5CUVVNc1EwRkJRenRMUVVNMVJEdEJRVU5FTEZGQlFVa3NhMEpCUVZjc1QwRkJUeXhEUVVGRExFVkJRVVU3UVVGRGRrSXNZVUZCVHl4SFFVRkhMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTMEZET1VJN08wRkJSVVFzVVVGQlNTeEZRVUZGTEVkQlFVY3NUMEZCVHl4RFFVRkRMRVZCUVVVc1EwRkJRenM3UVVGRmNFSXNVVUZCU1N4RFFVRkRMR1ZCUVZFc1QwRkJUeXhEUVVGRExFVkJRVVU3UVVGRGNrSXNWVUZCU1N4SlFVRkpMRWRCUVVjc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF6dEJRVU40UWl4VlFVRkpMRTlCUVU4c1EwRkJReXhKUVVGSkxFbEJRVWtzVDBGQlR5eERRVUZETEVkQlFVY3NSVUZCUlR0QlFVTXZRaXhaUVVGSkxFZEJRVWNzYlVKQlFWa3NUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMnBETEZsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc2VVSkJRMnBDTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVONFFpeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVObUxFTkJRVU03VDBGRFNEczdRVUZGUkN4aFFVRlBMRVZCUVVVc1EwRkJReXhQUVVGUExFVkJRVVU3UVVGRGFrSXNXVUZCU1N4RlFVRkZMRWxCUVVrN1FVRkRWaXh0UWtGQlZ5eEZRVUZGTEcxQ1FVRlpMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVVzUTBGQlF5eEpRVUZKTEVsQlFVa3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8wOUJRMmhGTEVOQlFVTXNRMEZCUXp0TFFVTktMRTFCUVUwN1FVRkRUQ3hoUVVGUExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1MwRkRPVUk3UjBGRFJpeERRVUZETEVOQlFVTTdRMEZEU2lJc0ltWnBiR1VpT2lKM2FYUm9MbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUh0Y2JpQWdZWEJ3Wlc1a1EyOXVkR1Y0ZEZCaGRHZ3NYRzRnSUdKc2IyTnJVR0Z5WVcxekxGeHVJQ0JqY21WaGRHVkdjbUZ0WlN4Y2JpQWdhWE5GYlhCMGVTeGNiaUFnYVhOR2RXNWpkR2x2Ymx4dWZTQm1jbTl0SUNjdUxpOTFkR2xzY3ljN1hHNXBiWEJ2Y25RZ1JYaGpaWEIwYVc5dUlHWnliMjBnSnk0dUwyVjRZMlZ3ZEdsdmJpYzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVLR2x1YzNSaGJtTmxLU0I3WEc0Z0lHbHVjM1JoYm1ObExuSmxaMmx6ZEdWeVNHVnNjR1Z5S0NkM2FYUm9KeXdnWm5WdVkzUnBiMjRvWTI5dWRHVjRkQ3dnYjNCMGFXOXVjeWtnZTF4dUlDQWdJR2xtSUNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUNFOUlESXBJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGZUdObGNIUnBiMjRvSnlOM2FYUm9JSEpsY1hWcGNtVnpJR1Y0WVdOMGJIa2diMjVsSUdGeVozVnRaVzUwSnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNocGMwWjFibU4wYVc5dUtHTnZiblJsZUhRcEtTQjdYRzRnSUNBZ0lDQmpiMjUwWlhoMElEMGdZMjl1ZEdWNGRDNWpZV3hzS0hSb2FYTXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHeGxkQ0JtYmlBOUlHOXdkR2x2Ym5NdVptNDdYRzVjYmlBZ0lDQnBaaUFvSVdselJXMXdkSGtvWTI5dWRHVjRkQ2twSUh0Y2JpQWdJQ0FnSUd4bGRDQmtZWFJoSUQwZ2IzQjBhVzl1Y3k1a1lYUmhPMXh1SUNBZ0lDQWdhV1lnS0c5d2RHbHZibk11WkdGMFlTQW1KaUJ2Y0hScGIyNXpMbWxrY3lrZ2UxeHVJQ0FnSUNBZ0lDQmtZWFJoSUQwZ1kzSmxZWFJsUm5KaGJXVW9iM0IwYVc5dWN5NWtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ1pHRjBZUzVqYjI1MFpYaDBVR0YwYUNBOUlHRndjR1Z1WkVOdmJuUmxlSFJRWVhSb0tGeHVJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTXVaR0YwWVM1amIyNTBaWGgwVUdGMGFDeGNiaUFnSUNBZ0lDQWdJQ0J2Y0hScGIyNXpMbWxrYzFzd1hWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabTRvWTI5dWRHVjRkQ3dnZTF4dUlDQWdJQ0FnSUNCa1lYUmhPaUJrWVhSaExGeHVJQ0FnSUNBZ0lDQmliRzlqYTFCaGNtRnRjem9nWW14dlkydFFZWEpoYlhNb1cyTnZiblJsZUhSZExDQmJaR0YwWVNBbUppQmtZWFJoTG1OdmJuUmxlSFJRWVhSb1hTbGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYjNCMGFXOXVjeTVwYm5abGNuTmxLSFJvYVhNcE8xeHVJQ0FnSUgxY2JpQWdmU2s3WEc1OVhHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmNyZWF0ZU5ld0xvb2t1cE9iamVjdCA9IGNyZWF0ZU5ld0xvb2t1cE9iamVjdDtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IG9iamVjdCB3aXRoIFwibnVsbFwiLXByb3RvdHlwZSB0byBhdm9pZCB0cnV0aHkgcmVzdWx0cyBvbiBwcm90b3R5cGUgcHJvcGVydGllcy5cbiAqIFRoZSByZXN1bHRpbmcgb2JqZWN0IGNhbiBiZSB1c2VkIHdpdGggXCJvYmplY3RbcHJvcGVydHldXCIgdG8gY2hlY2sgaWYgYSBwcm9wZXJ0eSBleGlzdHNcbiAqIEBwYXJhbSB7Li4ub2JqZWN0fSBzb3VyY2VzIGEgdmFyYXJncyBwYXJhbWV0ZXIgb2Ygc291cmNlIG9iamVjdHMgdGhhdCB3aWxsIGJlIG1lcmdlZFxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVOZXdMb29rdXBPYmplY3QoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzb3VyY2VzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgc291cmNlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBfdXRpbHMuZXh0ZW5kLmFwcGx5KHVuZGVmaW5lZCwgW09iamVjdC5jcmVhdGUobnVsbCldLmNvbmNhdChzb3VyY2VzKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMmx1ZEdWeWJtRnNMMk55WldGMFpTMXVaWGN0Ykc5dmEzVndMVzlpYW1WamRDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3p0eFFrRkJkVUlzVlVGQlZUczdPenM3T3pzN08wRkJVVEZDTEZOQlFWTXNjVUpCUVhGQ0xFZEJRV0U3YjBOQlFWUXNUMEZCVHp0QlFVRlFMRmRCUVU4N096dEJRVU01UXl4VFFVRlBMR2REUVVGUExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVVzc1QwRkJUeXhGUVVGRExFTkJRVU03UTBGRGFFUWlMQ0ptYVd4bElqb2lZM0psWVhSbExXNWxkeTFzYjI5cmRYQXRiMkpxWldOMExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJSHNnWlhoMFpXNWtJSDBnWm5KdmJTQW5MaTR2ZFhScGJITW5PMXh1WEc0dktpcGNiaUFxSUVOeVpXRjBaU0JoSUc1bGR5QnZZbXBsWTNRZ2QybDBhQ0JjSW01MWJHeGNJaTF3Y205MGIzUjVjR1VnZEc4Z1lYWnZhV1FnZEhKMWRHaDVJSEpsYzNWc2RITWdiMjRnY0hKdmRHOTBlWEJsSUhCeWIzQmxjblJwWlhNdVhHNGdLaUJVYUdVZ2NtVnpkV3gwYVc1bklHOWlhbVZqZENCallXNGdZbVVnZFhObFpDQjNhWFJvSUZ3aWIySnFaV04wVzNCeWIzQmxjblI1WFZ3aUlIUnZJR05vWldOcklHbG1JR0VnY0hKdmNHVnlkSGtnWlhocGMzUnpYRzRnS2lCQWNHRnlZVzBnZXk0dUxtOWlhbVZqZEgwZ2MyOTFjbU5sY3lCaElIWmhjbUZ5WjNNZ2NHRnlZVzFsZEdWeUlHOW1JSE52ZFhKalpTQnZZbXBsWTNSeklIUm9ZWFFnZDJsc2JDQmlaU0J0WlhKblpXUmNiaUFxSUVCeVpYUjFjbTV6SUh0dlltcGxZM1I5WEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmpjbVZoZEdWT1pYZE1iMjlyZFhCUFltcGxZM1FvTGk0dWMyOTFjbU5sY3lrZ2UxeHVJQ0J5WlhSMWNtNGdaWGgwWlc1a0tFOWlhbVZqZEM1amNtVmhkR1VvYm5Wc2JDa3NJQzR1TG5OdmRYSmpaWE1wTzF4dWZWeHVJbDE5XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmNyZWF0ZVByb3RvQWNjZXNzQ29udHJvbCA9IGNyZWF0ZVByb3RvQWNjZXNzQ29udHJvbDtcbmV4cG9ydHMucmVzdWx0SXNBbGxvd2VkID0gcmVzdWx0SXNBbGxvd2VkO1xuZXhwb3J0cy5yZXNldExvZ2dlZFByb3BlcnRpZXMgPSByZXNldExvZ2dlZFByb3BlcnRpZXM7XG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqWydkZWZhdWx0J10gPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG52YXIgX2NyZWF0ZU5ld0xvb2t1cE9iamVjdCA9IHJlcXVpcmUoJy4vY3JlYXRlLW5ldy1sb29rdXAtb2JqZWN0Jyk7XG5cbnZhciBfbG9nZ2VyID0gcmVxdWlyZSgnLi4vbG9nZ2VyJyk7XG5cbnZhciBsb2dnZXIgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfbG9nZ2VyKTtcblxudmFyIGxvZ2dlZFByb3BlcnRpZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBjcmVhdGVQcm90b0FjY2Vzc0NvbnRyb2wocnVudGltZU9wdGlvbnMpIHtcbiAgdmFyIGRlZmF1bHRNZXRob2RXaGl0ZUxpc3QgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBkZWZhdWx0TWV0aG9kV2hpdGVMaXN0Wydjb25zdHJ1Y3RvciddID0gZmFsc2U7XG4gIGRlZmF1bHRNZXRob2RXaGl0ZUxpc3RbJ19fZGVmaW5lR2V0dGVyX18nXSA9IGZhbHNlO1xuICBkZWZhdWx0TWV0aG9kV2hpdGVMaXN0WydfX2RlZmluZVNldHRlcl9fJ10gPSBmYWxzZTtcbiAgZGVmYXVsdE1ldGhvZFdoaXRlTGlzdFsnX19sb29rdXBHZXR0ZXJfXyddID0gZmFsc2U7XG5cbiAgdmFyIGRlZmF1bHRQcm9wZXJ0eVdoaXRlTGlzdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b1xuICBkZWZhdWx0UHJvcGVydHlXaGl0ZUxpc3RbJ19fcHJvdG9fXyddID0gZmFsc2U7XG5cbiAgcmV0dXJuIHtcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICB3aGl0ZWxpc3Q6IF9jcmVhdGVOZXdMb29rdXBPYmplY3QuY3JlYXRlTmV3TG9va3VwT2JqZWN0KGRlZmF1bHRQcm9wZXJ0eVdoaXRlTGlzdCwgcnVudGltZU9wdGlvbnMuYWxsb3dlZFByb3RvUHJvcGVydGllcyksXG4gICAgICBkZWZhdWx0VmFsdWU6IHJ1bnRpbWVPcHRpb25zLmFsbG93UHJvdG9Qcm9wZXJ0aWVzQnlEZWZhdWx0XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICB3aGl0ZWxpc3Q6IF9jcmVhdGVOZXdMb29rdXBPYmplY3QuY3JlYXRlTmV3TG9va3VwT2JqZWN0KGRlZmF1bHRNZXRob2RXaGl0ZUxpc3QsIHJ1bnRpbWVPcHRpb25zLmFsbG93ZWRQcm90b01ldGhvZHMpLFxuICAgICAgZGVmYXVsdFZhbHVlOiBydW50aW1lT3B0aW9ucy5hbGxvd1Byb3RvTWV0aG9kc0J5RGVmYXVsdFxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVzdWx0SXNBbGxvd2VkKHJlc3VsdCwgcHJvdG9BY2Nlc3NDb250cm9sLCBwcm9wZXJ0eU5hbWUpIHtcbiAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY2hlY2tXaGl0ZUxpc3QocHJvdG9BY2Nlc3NDb250cm9sLm1ldGhvZHMsIHByb3BlcnR5TmFtZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNoZWNrV2hpdGVMaXN0KHByb3RvQWNjZXNzQ29udHJvbC5wcm9wZXJ0aWVzLCBwcm9wZXJ0eU5hbWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrV2hpdGVMaXN0KHByb3RvQWNjZXNzQ29udHJvbEZvclR5cGUsIHByb3BlcnR5TmFtZSkge1xuICBpZiAocHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZS53aGl0ZWxpc3RbcHJvcGVydHlOYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHByb3RvQWNjZXNzQ29udHJvbEZvclR5cGUud2hpdGVsaXN0W3Byb3BlcnR5TmFtZV0gPT09IHRydWU7XG4gIH1cbiAgaWYgKHByb3RvQWNjZXNzQ29udHJvbEZvclR5cGUuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcHJvdG9BY2Nlc3NDb250cm9sRm9yVHlwZS5kZWZhdWx0VmFsdWU7XG4gIH1cbiAgbG9nVW5leHBlY2VkUHJvcGVydHlBY2Nlc3NPbmNlKHByb3BlcnR5TmFtZSk7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbG9nVW5leHBlY2VkUHJvcGVydHlBY2Nlc3NPbmNlKHByb3BlcnR5TmFtZSkge1xuICBpZiAobG9nZ2VkUHJvcGVydGllc1twcm9wZXJ0eU5hbWVdICE9PSB0cnVlKSB7XG4gICAgbG9nZ2VkUHJvcGVydGllc1twcm9wZXJ0eU5hbWVdID0gdHJ1ZTtcbiAgICBsb2dnZXIubG9nKCdlcnJvcicsICdIYW5kbGViYXJzOiBBY2Nlc3MgaGFzIGJlZW4gZGVuaWVkIHRvIHJlc29sdmUgdGhlIHByb3BlcnR5IFwiJyArIHByb3BlcnR5TmFtZSArICdcIiBiZWNhdXNlIGl0IGlzIG5vdCBhbiBcIm93biBwcm9wZXJ0eVwiIG9mIGl0cyBwYXJlbnQuXFxuJyArICdZb3UgY2FuIGFkZCBhIHJ1bnRpbWUgb3B0aW9uIHRvIGRpc2FibGUgdGhlIGNoZWNrIG9yIHRoaXMgd2FybmluZzpcXG4nICsgJ1NlZSBodHRwczovL2hhbmRsZWJhcnNqcy5jb20vYXBpLXJlZmVyZW5jZS9ydW50aW1lLW9wdGlvbnMuaHRtbCNvcHRpb25zLXRvLWNvbnRyb2wtcHJvdG90eXBlLWFjY2VzcyBmb3IgZGV0YWlscycpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2V0TG9nZ2VkUHJvcGVydGllcygpIHtcbiAgT2JqZWN0LmtleXMobG9nZ2VkUHJvcGVydGllcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcGVydHlOYW1lKSB7XG4gICAgZGVsZXRlIGxvZ2dlZFByb3BlcnRpZXNbcHJvcGVydHlOYW1lXTtcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMmx1ZEdWeWJtRnNMM0J5YjNSdkxXRmpZMlZ6Y3k1cWN5SmRMQ0p1WVcxbGN5STZXMTBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN08zRkRRVUZ6UXl3MFFrRkJORUk3TzNOQ1FVTXhReXhYUVVGWE96dEpRVUYyUWl4TlFVRk5PenRCUVVWc1FpeEpRVUZOTEdkQ1FVRm5RaXhIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN08wRkJSWFJETEZOQlFWTXNkMEpCUVhkQ0xFTkJRVU1zWTBGQll5eEZRVUZGTzBGQlEzWkVMRTFCUVVrc2MwSkJRWE5DTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU5xUkN4M1FrRkJjMElzUTBGQlF5eGhRVUZoTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkRPVU1zZDBKQlFYTkNMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkRia1FzZDBKQlFYTkNMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkRia1FzZDBKQlFYTkNMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNN08wRkJSVzVFTEUxQlFVa3NkMEpCUVhkQ0xFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenM3UVVGRmJrUXNNRUpCUVhkQ0xFTkJRVU1zVjBGQlZ5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRPenRCUVVVNVF5eFRRVUZQTzBGQlEwd3NZMEZCVlN4RlFVRkZPMEZCUTFZc1pVRkJVeXhGUVVGRkxEWkRRVU5VTEhkQ1FVRjNRaXhGUVVONFFpeGpRVUZqTEVOQlFVTXNjMEpCUVhOQ0xFTkJRM1JETzBGQlEwUXNhMEpCUVZrc1JVRkJSU3hqUVVGakxFTkJRVU1zTmtKQlFUWkNPMHRCUXpORU8wRkJRMFFzVjBGQlR5eEZRVUZGTzBGQlExQXNaVUZCVXl4RlFVRkZMRFpEUVVOVUxITkNRVUZ6UWl4RlFVTjBRaXhqUVVGakxFTkJRVU1zYlVKQlFXMUNMRU5CUTI1RE8wRkJRMFFzYTBKQlFWa3NSVUZCUlN4alFVRmpMRU5CUVVNc01FSkJRVEJDTzB0QlEzaEVPMGRCUTBZc1EwRkJRenREUVVOSU96dEJRVVZOTEZOQlFWTXNaVUZCWlN4RFFVRkRMRTFCUVUwc1JVRkJSU3hyUWtGQmEwSXNSVUZCUlN4WlFVRlpMRVZCUVVVN1FVRkRlRVVzVFVGQlNTeFBRVUZQTEUxQlFVMHNTMEZCU3l4VlFVRlZMRVZCUVVVN1FVRkRhRU1zVjBGQlR5eGpRVUZqTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZsQlFWa3NRMEZCUXl4RFFVRkRPMGRCUTJwRkxFMUJRVTA3UVVGRFRDeFhRVUZQTEdOQlFXTXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eFZRVUZWTEVWQlFVVXNXVUZCV1N4RFFVRkRMRU5CUVVNN1IwRkRjRVU3UTBGRFJqczdRVUZGUkN4VFFVRlRMR05CUVdNc1EwRkJReXg1UWtGQmVVSXNSVUZCUlN4WlFVRlpMRVZCUVVVN1FVRkRMMFFzVFVGQlNTeDVRa0ZCZVVJc1EwRkJReXhUUVVGVExFTkJRVU1zV1VGQldTeERRVUZETEV0QlFVc3NVMEZCVXl4RlFVRkZPMEZCUTI1RkxGZEJRVThzZVVKQlFYbENMRU5CUVVNc1UwRkJVeXhEUVVGRExGbEJRVmtzUTBGQlF5eExRVUZMTEVsQlFVa3NRMEZCUXp0SFFVTnVSVHRCUVVORUxFMUJRVWtzZVVKQlFYbENMRU5CUVVNc1dVRkJXU3hMUVVGTExGTkJRVk1zUlVGQlJUdEJRVU40UkN4WFFVRlBMSGxDUVVGNVFpeERRVUZETEZsQlFWa3NRMEZCUXp0SFFVTXZRenRCUVVORUxHZERRVUU0UWl4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGRE8wRkJRemRETEZOQlFVOHNTMEZCU3l4RFFVRkRPME5CUTJRN08wRkJSVVFzVTBGQlV5dzRRa0ZCT0VJc1EwRkJReXhaUVVGWkxFVkJRVVU3UVVGRGNFUXNUVUZCU1N4blFrRkJaMElzUTBGQlF5eFpRVUZaTEVOQlFVTXNTMEZCU3l4SlFVRkpMRVZCUVVVN1FVRkRNME1zYjBKQlFXZENMRU5CUVVNc1dVRkJXU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETzBGQlEzUkRMRlZCUVUwc1EwRkJReXhIUVVGSExFTkJRMUlzVDBGQlR5eEZRVU5RTEdsRlFVRXJSQ3haUVVGWkxHOUpRVU5JTEc5SVFVTXlReXhEUVVOd1NDeERRVUZETzBkQlEwZzdRMEZEUmpzN1FVRkZUU3hUUVVGVExIRkNRVUZ4UWl4SFFVRkhPMEZCUTNSRExGRkJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCUVN4WlFVRlpMRVZCUVVrN1FVRkRjRVFzVjBGQlR5eG5Ra0ZCWjBJc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dEhRVU4yUXl4RFFVRkRMRU5CUVVNN1EwRkRTaUlzSW1acGJHVWlPaUp3Y205MGJ5MWhZMk5sYzNNdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdleUJqY21WaGRHVk9aWGRNYjI5cmRYQlBZbXBsWTNRZ2ZTQm1jbTl0SUNjdUwyTnlaV0YwWlMxdVpYY3RiRzl2YTNWd0xXOWlhbVZqZENjN1hHNXBiWEJ2Y25RZ0tpQmhjeUJzYjJkblpYSWdabkp2YlNBbkxpNHZiRzluWjJWeUp6dGNibHh1WTI5dWMzUWdiRzluWjJWa1VISnZjR1Z5ZEdsbGN5QTlJRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2s3WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCamNtVmhkR1ZRY205MGIwRmpZMlZ6YzBOdmJuUnliMndvY25WdWRHbHRaVTl3ZEdsdmJuTXBJSHRjYmlBZ2JHVjBJR1JsWm1GMWJIUk5aWFJvYjJSWGFHbDBaVXhwYzNRZ1BTQlBZbXBsWTNRdVkzSmxZWFJsS0c1MWJHd3BPMXh1SUNCa1pXWmhkV3gwVFdWMGFHOWtWMmhwZEdWTWFYTjBXeWRqYjI1emRISjFZM1J2Y2lkZElEMGdabUZzYzJVN1hHNGdJR1JsWm1GMWJIUk5aWFJvYjJSWGFHbDBaVXhwYzNSYkoxOWZaR1ZtYVc1bFIyVjBkR1Z5WDE4blhTQTlJR1poYkhObE8xeHVJQ0JrWldaaGRXeDBUV1YwYUc5a1YyaHBkR1ZNYVhOMFd5ZGZYMlJsWm1sdVpWTmxkSFJsY2w5ZkoxMGdQU0JtWVd4elpUdGNiaUFnWkdWbVlYVnNkRTFsZEdodlpGZG9hWFJsVEdsemRGc25YMTlzYjI5cmRYQkhaWFIwWlhKZlh5ZGRJRDBnWm1Gc2MyVTdYRzVjYmlBZ2JHVjBJR1JsWm1GMWJIUlFjbTl3WlhKMGVWZG9hWFJsVEdsemRDQTlJRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2s3WEc0Z0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnVieTF3Y205MGIxeHVJQ0JrWldaaGRXeDBVSEp2Y0dWeWRIbFhhR2wwWlV4cGMzUmJKMTlmY0hKdmRHOWZYeWRkSUQwZ1ptRnNjMlU3WEc1Y2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNCd2NtOXdaWEowYVdWek9pQjdYRzRnSUNBZ0lDQjNhR2wwWld4cGMzUTZJR055WldGMFpVNWxkMHh2YjJ0MWNFOWlhbVZqZENoY2JpQWdJQ0FnSUNBZ1pHVm1ZWFZzZEZCeWIzQmxjblI1VjJocGRHVk1hWE4wTEZ4dUlDQWdJQ0FnSUNCeWRXNTBhVzFsVDNCMGFXOXVjeTVoYkd4dmQyVmtVSEp2ZEc5UWNtOXdaWEowYVdWelhHNGdJQ0FnSUNBcExGeHVJQ0FnSUNBZ1pHVm1ZWFZzZEZaaGJIVmxPaUJ5ZFc1MGFXMWxUM0IwYVc5dWN5NWhiR3h2ZDFCeWIzUnZVSEp2Y0dWeWRHbGxjMEo1UkdWbVlYVnNkRnh1SUNBZ0lIMHNYRzRnSUNBZ2JXVjBhRzlrY3pvZ2UxeHVJQ0FnSUNBZ2QyaHBkR1ZzYVhOME9pQmpjbVZoZEdWT1pYZE1iMjlyZFhCUFltcGxZM1FvWEc0Z0lDQWdJQ0FnSUdSbFptRjFiSFJOWlhSb2IyUlhhR2wwWlV4cGMzUXNYRzRnSUNBZ0lDQWdJSEoxYm5ScGJXVlBjSFJwYjI1ekxtRnNiRzkzWldSUWNtOTBiMDFsZEdodlpITmNiaUFnSUNBZ0lDa3NYRzRnSUNBZ0lDQmtaV1poZFd4MFZtRnNkV1U2SUhKMWJuUnBiV1ZQY0hScGIyNXpMbUZzYkc5M1VISnZkRzlOWlhSb2IyUnpRbmxFWldaaGRXeDBYRzRnSUNBZ2ZWeHVJQ0I5TzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdjbVZ6ZFd4MFNYTkJiR3h2ZDJWa0tISmxjM1ZzZEN3Z2NISnZkRzlCWTJObGMzTkRiMjUwY205c0xDQndjbTl3WlhKMGVVNWhiV1VwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJ5WlhOMWJIUWdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNCeVpYUjFjbTRnWTJobFkydFhhR2wwWlV4cGMzUW9jSEp2ZEc5QlkyTmxjM05EYjI1MGNtOXNMbTFsZEdodlpITXNJSEJ5YjNCbGNuUjVUbUZ0WlNrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVjBkWEp1SUdOb1pXTnJWMmhwZEdWTWFYTjBLSEJ5YjNSdlFXTmpaWE56UTI5dWRISnZiQzV3Y205d1pYSjBhV1Z6TENCd2NtOXdaWEowZVU1aGJXVXBPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUdOb1pXTnJWMmhwZEdWTWFYTjBLSEJ5YjNSdlFXTmpaWE56UTI5dWRISnZiRVp2Y2xSNWNHVXNJSEJ5YjNCbGNuUjVUbUZ0WlNrZ2UxeHVJQ0JwWmlBb2NISnZkRzlCWTJObGMzTkRiMjUwY205c1JtOXlWSGx3WlM1M2FHbDBaV3hwYzNSYmNISnZjR1Z5ZEhsT1lXMWxYU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhCeWIzUnZRV05qWlhOelEyOXVkSEp2YkVadmNsUjVjR1V1ZDJocGRHVnNhWE4wVzNCeWIzQmxjblI1VG1GdFpWMGdQVDA5SUhSeWRXVTdYRzRnSUgxY2JpQWdhV1lnS0hCeWIzUnZRV05qWlhOelEyOXVkSEp2YkVadmNsUjVjR1V1WkdWbVlYVnNkRlpoYkhWbElDRTlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjSEp2ZEc5QlkyTmxjM05EYjI1MGNtOXNSbTl5Vkhsd1pTNWtaV1poZFd4MFZtRnNkV1U3WEc0Z0lIMWNiaUFnYkc5blZXNWxlSEJsWTJWa1VISnZjR1Z5ZEhsQlkyTmxjM05QYm1ObEtIQnliM0JsY25SNVRtRnRaU2s3WEc0Z0lISmxkSFZ5YmlCbVlXeHpaVHRjYm4xY2JseHVablZ1WTNScGIyNGdiRzluVlc1bGVIQmxZMlZrVUhKdmNHVnlkSGxCWTJObGMzTlBibU5sS0hCeWIzQmxjblI1VG1GdFpTa2dlMXh1SUNCcFppQW9iRzluWjJWa1VISnZjR1Z5ZEdsbGMxdHdjbTl3WlhKMGVVNWhiV1ZkSUNFOVBTQjBjblZsS1NCN1hHNGdJQ0FnYkc5bloyVmtVSEp2Y0dWeWRHbGxjMXR3Y205d1pYSjBlVTVoYldWZElEMGdkSEoxWlR0Y2JpQWdJQ0JzYjJkblpYSXViRzluS0Z4dUlDQWdJQ0FnSjJWeWNtOXlKeXhjYmlBZ0lDQWdJR0JJWVc1a2JHVmlZWEp6T2lCQlkyTmxjM01nYUdGeklHSmxaVzRnWkdWdWFXVmtJSFJ2SUhKbGMyOXNkbVVnZEdobElIQnliM0JsY25SNUlGd2lKSHR3Y205d1pYSjBlVTVoYldWOVhDSWdZbVZqWVhWelpTQnBkQ0JwY3lCdWIzUWdZVzRnWENKdmQyNGdjSEp2Y0dWeWRIbGNJaUJ2WmlCcGRITWdjR0Z5Wlc1MExseGNibUFnSzF4dUlDQWdJQ0FnSUNCZ1dXOTFJR05oYmlCaFpHUWdZU0J5ZFc1MGFXMWxJRzl3ZEdsdmJpQjBieUJrYVhOaFlteGxJSFJvWlNCamFHVmpheUJ2Y2lCMGFHbHpJSGRoY201cGJtYzZYRnh1WUNBclhHNGdJQ0FnSUNBZ0lHQlRaV1VnYUhSMGNITTZMeTlvWVc1a2JHVmlZWEp6YW5NdVkyOXRMMkZ3YVMxeVpXWmxjbVZ1WTJVdmNuVnVkR2x0WlMxdmNIUnBiMjV6TG1oMGJXd2piM0IwYVc5dWN5MTBieTFqYjI1MGNtOXNMWEJ5YjNSdmRIbHdaUzFoWTJObGMzTWdabTl5SUdSbGRHRnBiSE5nWEc0Z0lDQWdLVHRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnY21WelpYUk1iMmRuWldSUWNtOXdaWEowYVdWektDa2dlMXh1SUNCUFltcGxZM1F1YTJWNWN5aHNiMmRuWldSUWNtOXdaWEowYVdWektTNW1iM0pGWVdOb0tIQnliM0JsY25SNVRtRnRaU0E5UGlCN1hHNGdJQ0FnWkdWc1pYUmxJR3h2WjJkbFpGQnliM0JsY25ScFpYTmJjSEp2Y0dWeWRIbE9ZVzFsWFR0Y2JpQWdmU2s3WEc1OVhHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLndyYXBIZWxwZXIgPSB3cmFwSGVscGVyO1xuXG5mdW5jdGlvbiB3cmFwSGVscGVyKGhlbHBlciwgdHJhbnNmb3JtT3B0aW9uc0ZuKSB7XG4gIGlmICh0eXBlb2YgaGVscGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gVGhpcyBzaG91bGQgbm90IGhhcHBlbiwgYnV0IGFwcGFyZW50bHkgaXQgZG9lcyBpbiBodHRwczovL2dpdGh1Yi5jb20vd3ljYXRzL2hhbmRsZWJhcnMuanMvaXNzdWVzLzE2MzlcbiAgICAvLyBXZSB0cnkgdG8gbWFrZSB0aGUgd3JhcHBlciBsZWFzdC1pbnZhc2l2ZSBieSBub3Qgd3JhcHBpbmcgaXQsIGlmIHRoZSBoZWxwZXIgaXMgbm90IGEgZnVuY3Rpb24uXG4gICAgcmV0dXJuIGhlbHBlcjtcbiAgfVxuICB2YXIgd3JhcHBlciA9IGZ1bmN0aW9uIHdyYXBwZXIoKSAvKiBkeW5hbWljIGFyZ3VtZW50cyAqL3tcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gICAgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXSA9IHRyYW5zZm9ybU9wdGlvbnNGbihvcHRpb25zKTtcbiAgICByZXR1cm4gaGVscGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG4gIHJldHVybiB3cmFwcGVyO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJsdWRHVnlibUZzTDNkeVlYQklaV3h3WlhJdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3UVVGQlR5eFRRVUZUTEZWQlFWVXNRMEZCUXl4TlFVRk5MRVZCUVVVc2EwSkJRV3RDTEVWQlFVVTdRVUZEY2tRc1RVRkJTU3hQUVVGUExFMUJRVTBzUzBGQlN5eFZRVUZWTEVWQlFVVTdPenRCUVVkb1F5eFhRVUZQTEUxQlFVMHNRMEZCUXp0SFFVTm1PMEZCUTBRc1RVRkJTU3hQUVVGUExFZEJRVWNzVTBGQlZpeFBRVUZQTERCQ1FVRnhRenRCUVVNNVF5eFJRVUZOTEU5QlFVOHNSMEZCUnl4VFFVRlRMRU5CUVVNc1UwRkJVeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTm9SQ3hoUVVGVExFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhyUWtGQmEwSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRCUVVNNVJDeFhRVUZQTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETzBkQlEzUkRMRU5CUVVNN1FVRkRSaXhUUVVGUExFOUJRVThzUTBGQlF6dERRVU5vUWlJc0ltWnBiR1VpT2lKM2NtRndTR1ZzY0dWeUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWlhod2IzSjBJR1oxYm1OMGFXOXVJSGR5WVhCSVpXeHdaWElvYUdWc2NHVnlMQ0IwY21GdWMyWnZjbTFQY0hScGIyNXpSbTRwSUh0Y2JpQWdhV1lnS0hSNWNHVnZaaUJvWld4d1pYSWdJVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBdkx5QlVhR2x6SUhOb2IzVnNaQ0J1YjNRZ2FHRndjR1Z1TENCaWRYUWdZWEJ3WVhKbGJuUnNlU0JwZENCa2IyVnpJR2x1SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5M2VXTmhkSE12YUdGdVpHeGxZbUZ5Y3k1cWN5OXBjM04xWlhNdk1UWXpPVnh1SUNBZ0lDOHZJRmRsSUhSeWVTQjBieUJ0WVd0bElIUm9aU0IzY21Gd2NHVnlJR3hsWVhOMExXbHVkbUZ6YVhabElHSjVJRzV2ZENCM2NtRndjR2x1WnlCcGRDd2dhV1lnZEdobElHaGxiSEJsY2lCcGN5QnViM1FnWVNCbWRXNWpkR2x2Ymk1Y2JpQWdJQ0J5WlhSMWNtNGdhR1ZzY0dWeU8xeHVJQ0I5WEc0Z0lHeGxkQ0IzY21Gd2NHVnlJRDBnWm5WdVkzUnBiMjRvTHlvZ1pIbHVZVzFwWXlCaGNtZDFiV1Z1ZEhNZ0tpOHBJSHRjYmlBZ0lDQmpiMjV6ZENCdmNIUnBiMjV6SUQwZ1lYSm5kVzFsYm5SelcyRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ0xTQXhYVHRjYmlBZ0lDQmhjbWQxYldWdWRITmJZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQXRJREZkSUQwZ2RISmhibk5tYjNKdFQzQjBhVzl1YzBadUtHOXdkR2x2Ym5NcE8xeHVJQ0FnSUhKbGRIVnliaUJvWld4d1pYSXVZWEJ3Ykhrb2RHaHBjeXdnWVhKbmRXMWxiblJ6S1R0Y2JpQWdmVHRjYmlBZ2NtVjBkWEp1SUhkeVlYQndaWEk3WEc1OVhHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBsb2dnZXIgPSB7XG4gIG1ldGhvZE1hcDogWydkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InXSxcbiAgbGV2ZWw6ICdpbmZvJyxcblxuICAvLyBNYXBzIGEgZ2l2ZW4gbGV2ZWwgdmFsdWUgdG8gdGhlIGBtZXRob2RNYXBgIGluZGV4ZXMgYWJvdmUuXG4gIGxvb2t1cExldmVsOiBmdW5jdGlvbiBsb29rdXBMZXZlbChsZXZlbCkge1xuICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgbGV2ZWxNYXAgPSBfdXRpbHMuaW5kZXhPZihsb2dnZXIubWV0aG9kTWFwLCBsZXZlbC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgIGlmIChsZXZlbE1hcCA+PSAwKSB7XG4gICAgICAgIGxldmVsID0gbGV2ZWxNYXA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXZlbCA9IHBhcnNlSW50KGxldmVsLCAxMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxldmVsO1xuICB9LFxuXG4gIC8vIENhbiBiZSBvdmVycmlkZGVuIGluIHRoZSBob3N0IGVudmlyb25tZW50XG4gIGxvZzogZnVuY3Rpb24gbG9nKGxldmVsKSB7XG4gICAgbGV2ZWwgPSBsb2dnZXIubG9va3VwTGV2ZWwobGV2ZWwpO1xuXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBsb2dnZXIubG9va3VwTGV2ZWwobG9nZ2VyLmxldmVsKSA8PSBsZXZlbCkge1xuICAgICAgdmFyIG1ldGhvZCA9IGxvZ2dlci5tZXRob2RNYXBbbGV2ZWxdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGlmICghY29uc29sZVttZXRob2RdKSB7XG4gICAgICAgIG1ldGhvZCA9ICdsb2cnO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWVzc2FnZSA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgbWVzc2FnZVtfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGVbbWV0aG9kXS5hcHBseShjb25zb2xlLCBtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfVxuICB9XG59O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBsb2dnZXI7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDJ4dloyZGxjaTVxY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pT3pzN08zRkNRVUYzUWl4VFFVRlRPenRCUVVWcVF5eEpRVUZKTEUxQlFVMHNSMEZCUnp0QlFVTllMRmRCUVZNc1JVRkJSU3hEUVVGRExFOUJRVThzUlVGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RlFVRkZMRTlCUVU4c1EwRkJRenRCUVVNM1F5eFBRVUZMTEVWQlFVVXNUVUZCVFRzN08wRkJSMklzWVVGQlZ5eEZRVUZGTEhGQ1FVRlRMRXRCUVVzc1JVRkJSVHRCUVVNelFpeFJRVUZKTEU5QlFVOHNTMEZCU3l4TFFVRkxMRkZCUVZFc1JVRkJSVHRCUVVNM1FpeFZRVUZKTEZGQlFWRXNSMEZCUnl4bFFVRlJMRTFCUVUwc1EwRkJReXhUUVVGVExFVkJRVVVzUzBGQlN5eERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRPVVFzVlVGQlNTeFJRVUZSTEVsQlFVa3NRMEZCUXl4RlFVRkZPMEZCUTJwQ0xHRkJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVTTdUMEZEYkVJc1RVRkJUVHRCUVVOTUxHRkJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8wOUJRemRDTzB0QlEwWTdPMEZCUlVRc1YwRkJUeXhMUVVGTExFTkJRVU03UjBGRFpEczdPMEZCUjBRc1MwRkJSeXhGUVVGRkxHRkJRVk1zUzBGQlN5eEZRVUZqTzBGQlF5OUNMRk5CUVVzc1IwRkJSeXhOUVVGTkxFTkJRVU1zVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPenRCUVVWc1F5eFJRVU5GTEU5QlFVOHNUMEZCVHl4TFFVRkxMRmRCUVZjc1NVRkRPVUlzVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUzBGQlN5eEZRVU42UXp0QlFVTkJMRlZCUVVrc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN08wRkJSWEpETEZWQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVU3UVVGRGNFSXNZMEZCVFN4SFFVRkhMRXRCUVVzc1EwRkJRenRQUVVOb1FqczdkME5CV0cxQ0xFOUJRVTg3UVVGQlVDeGxRVUZQT3pzN1FVRlpNMElzWVVGQlR5eERRVUZETEUxQlFVMHNUMEZCUXl4RFFVRm1MRTlCUVU4c1JVRkJXU3hQUVVGUExFTkJRVU1zUTBGQlF6dExRVU0zUWp0SFFVTkdPME5CUTBZc1EwRkJRenM3Y1VKQlJXRXNUVUZCVFNJc0ltWnBiR1VpT2lKc2IyZG5aWEl1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2V5QnBibVJsZUU5bUlIMGdabkp2YlNBbkxpOTFkR2xzY3ljN1hHNWNibXhsZENCc2IyZG5aWElnUFNCN1hHNGdJRzFsZEdodlpFMWhjRG9nV3lka1pXSjFaeWNzSUNkcGJtWnZKeXdnSjNkaGNtNG5MQ0FuWlhKeWIzSW5YU3hjYmlBZ2JHVjJaV3c2SUNkcGJtWnZKeXhjYmx4dUlDQXZMeUJOWVhCeklHRWdaMmwyWlc0Z2JHVjJaV3dnZG1Gc2RXVWdkRzhnZEdobElHQnRaWFJvYjJSTllYQmdJR2x1WkdWNFpYTWdZV0p2ZG1VdVhHNGdJR3h2YjJ0MWNFeGxkbVZzT2lCbWRXNWpkR2x2Ymloc1pYWmxiQ2tnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnYkdWMlpXd2dQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNCc1pYUWdiR1YyWld4TllYQWdQU0JwYm1SbGVFOW1LR3h2WjJkbGNpNXRaWFJvYjJSTllYQXNJR3hsZG1Wc0xuUnZURzkzWlhKRFlYTmxLQ2twTzF4dUlDQWdJQ0FnYVdZZ0tHeGxkbVZzVFdGd0lENDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjJaV3dnUFNCc1pYWmxiRTFoY0R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUd4bGRtVnNJRDBnY0dGeWMyVkpiblFvYkdWMlpXd3NJREV3S1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdiR1YyWld3N1hHNGdJSDBzWEc1Y2JpQWdMeThnUTJGdUlHSmxJRzkyWlhKeWFXUmtaVzRnYVc0Z2RHaGxJR2h2YzNRZ1pXNTJhWEp2Ym0xbGJuUmNiaUFnYkc5bk9pQm1kVzVqZEdsdmJpaHNaWFpsYkN3Z0xpNHViV1Z6YzJGblpTa2dlMXh1SUNBZ0lHeGxkbVZzSUQwZ2JHOW5aMlZ5TG14dmIydDFjRXhsZG1Wc0tHeGxkbVZzS1R0Y2JseHVJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lIUjVjR1Z2WmlCamIyNXpiMnhsSUNFOVBTQW5kVzVrWldacGJtVmtKeUFtSmx4dUlDQWdJQ0FnYkc5bloyVnlMbXh2YjJ0MWNFeGxkbVZzS0d4dloyZGxjaTVzWlhabGJDa2dQRDBnYkdWMlpXeGNiaUFnSUNBcElIdGNiaUFnSUNBZ0lHeGxkQ0J0WlhSb2IyUWdQU0JzYjJkblpYSXViV1YwYUc5a1RXRndXMnhsZG1Wc1hUdGNiaUFnSUNBZ0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnVieTFqYjI1emIyeGxYRzRnSUNBZ0lDQnBaaUFvSVdOdmJuTnZiR1ZiYldWMGFHOWtYU2tnZTF4dUlDQWdJQ0FnSUNCdFpYUm9iMlFnUFNBbmJHOW5KenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR052Ym5OdmJHVmJiV1YwYUc5a1hTZ3VMaTV0WlhOellXZGxLVHNnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQnVieTFqYjI1emIyeGxYRzRnSUNBZ2ZWeHVJQ0I5WEc1OU8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQnNiMmRuWlhJN1hHNGlYWDA9XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGZ1bmN0aW9uIChIYW5kbGViYXJzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHZhciByb290ID0gdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB3aW5kb3csXG4gICAgICAkSGFuZGxlYmFycyA9IHJvb3QuSGFuZGxlYmFycztcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgSGFuZGxlYmFycy5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChyb290LkhhbmRsZWJhcnMgPT09IEhhbmRsZWJhcnMpIHtcbiAgICAgIHJvb3QuSGFuZGxlYmFycyA9ICRIYW5kbGViYXJzO1xuICAgIH1cbiAgICByZXR1cm4gSGFuZGxlYmFycztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDJ4cFlpOW9ZVzVrYkdWaVlYSnpMMjV2TFdOdmJtWnNhV04wTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdjVUpCUVdVc1ZVRkJVeXhWUVVGVkxFVkJRVVU3TzBGQlJXeERMRTFCUVVrc1NVRkJTU3hIUVVGSExFOUJRVThzVFVGQlRTeExRVUZMTEZkQlFWY3NSMEZCUnl4TlFVRk5MRWRCUVVjc1RVRkJUVHROUVVONFJDeFhRVUZYTEVkQlFVY3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJRenM3UVVGRmFFTXNXVUZCVlN4RFFVRkRMRlZCUVZVc1IwRkJSeXhaUVVGWE8wRkJRMnBETEZGQlFVa3NTVUZCU1N4RFFVRkRMRlZCUVZVc1MwRkJTeXhWUVVGVkxFVkJRVVU3UVVGRGJFTXNWVUZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhYUVVGWExFTkJRVU03UzBGREwwSTdRVUZEUkN4WFFVRlBMRlZCUVZVc1EwRkJRenRIUVVOdVFpeERRVUZETzBOQlEwZ2lMQ0ptYVd4bElqb2libTh0WTI5dVpteHBZM1F1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmloSVlXNWtiR1ZpWVhKektTQjdYRzRnSUM4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCdVpYaDBJQ292WEc0Z0lHeGxkQ0J5YjI5MElEMGdkSGx3Wlc5bUlHZHNiMkpoYkNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCbmJHOWlZV3dnT2lCM2FXNWtiM2NzWEc0Z0lDQWdKRWhoYm1Sc1pXSmhjbk1nUFNCeWIyOTBMa2hoYm1Sc1pXSmhjbk03WEc0Z0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnVaWGgwSUNvdlhHNGdJRWhoYm1Sc1pXSmhjbk11Ym05RGIyNW1iR2xqZENBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lHbG1JQ2h5YjI5MExraGhibVJzWldKaGNuTWdQVDA5SUVoaGJtUnNaV0poY25NcElIdGNiaUFnSUNBZ0lISnZiM1F1U0dGdVpHeGxZbUZ5Y3lBOUlDUklZVzVrYkdWaVlYSnpPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnU0dGdVpHeGxZbUZ5Y3p0Y2JpQWdmVHRjYm4xY2JpSmRmUT09XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmNoZWNrUmV2aXNpb24gPSBjaGVja1JldmlzaW9uO1xuZXhwb3J0cy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuZXhwb3J0cy53cmFwUHJvZ3JhbSA9IHdyYXBQcm9ncmFtO1xuZXhwb3J0cy5yZXNvbHZlUGFydGlhbCA9IHJlc29sdmVQYXJ0aWFsO1xuZXhwb3J0cy5pbnZva2VQYXJ0aWFsID0gaW52b2tlUGFydGlhbDtcbmV4cG9ydHMubm9vcCA9IG5vb3A7XG4vLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmpbJ2RlZmF1bHQnXSA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbnZhciBVdGlscyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKF91dGlscyk7XG5cbnZhciBfZXhjZXB0aW9uID0gcmVxdWlyZSgnLi9leGNlcHRpb24nKTtcblxudmFyIF9leGNlcHRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhjZXB0aW9uKTtcblxudmFyIF9iYXNlID0gcmVxdWlyZSgnLi9iYXNlJyk7XG5cbnZhciBfaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xuXG52YXIgX2ludGVybmFsV3JhcEhlbHBlciA9IHJlcXVpcmUoJy4vaW50ZXJuYWwvd3JhcEhlbHBlcicpO1xuXG52YXIgX2ludGVybmFsUHJvdG9BY2Nlc3MgPSByZXF1aXJlKCcuL2ludGVybmFsL3Byb3RvLWFjY2VzcycpO1xuXG5mdW5jdGlvbiBjaGVja1JldmlzaW9uKGNvbXBpbGVySW5mbykge1xuICB2YXIgY29tcGlsZXJSZXZpc2lvbiA9IGNvbXBpbGVySW5mbyAmJiBjb21waWxlckluZm9bMF0gfHwgMSxcbiAgICAgIGN1cnJlbnRSZXZpc2lvbiA9IF9iYXNlLkNPTVBJTEVSX1JFVklTSU9OO1xuXG4gIGlmIChjb21waWxlclJldmlzaW9uID49IF9iYXNlLkxBU1RfQ09NUEFUSUJMRV9DT01QSUxFUl9SRVZJU0lPTiAmJiBjb21waWxlclJldmlzaW9uIDw9IF9iYXNlLkNPTVBJTEVSX1JFVklTSU9OKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNvbXBpbGVyUmV2aXNpb24gPCBfYmFzZS5MQVNUX0NPTVBBVElCTEVfQ09NUElMRVJfUkVWSVNJT04pIHtcbiAgICB2YXIgcnVudGltZVZlcnNpb25zID0gX2Jhc2UuUkVWSVNJT05fQ0hBTkdFU1tjdXJyZW50UmV2aXNpb25dLFxuICAgICAgICBjb21waWxlclZlcnNpb25zID0gX2Jhc2UuUkVWSVNJT05fQ0hBTkdFU1tjb21waWxlclJldmlzaW9uXTtcbiAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnVGVtcGxhdGUgd2FzIHByZWNvbXBpbGVkIHdpdGggYW4gb2xkZXIgdmVyc2lvbiBvZiBIYW5kbGViYXJzIHRoYW4gdGhlIGN1cnJlbnQgcnVudGltZS4gJyArICdQbGVhc2UgdXBkYXRlIHlvdXIgcHJlY29tcGlsZXIgdG8gYSBuZXdlciB2ZXJzaW9uICgnICsgcnVudGltZVZlcnNpb25zICsgJykgb3IgZG93bmdyYWRlIHlvdXIgcnVudGltZSB0byBhbiBvbGRlciB2ZXJzaW9uICgnICsgY29tcGlsZXJWZXJzaW9ucyArICcpLicpO1xuICB9IGVsc2Uge1xuICAgIC8vIFVzZSB0aGUgZW1iZWRkZWQgdmVyc2lvbiBpbmZvIHNpbmNlIHRoZSBydW50aW1lIGRvZXNuJ3Qga25vdyBhYm91dCB0aGlzIHJldmlzaW9uIHlldFxuICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdUZW1wbGF0ZSB3YXMgcHJlY29tcGlsZWQgd2l0aCBhIG5ld2VyIHZlcnNpb24gb2YgSGFuZGxlYmFycyB0aGFuIHRoZSBjdXJyZW50IHJ1bnRpbWUuICcgKyAnUGxlYXNlIHVwZGF0ZSB5b3VyIHJ1bnRpbWUgdG8gYSBuZXdlciB2ZXJzaW9uICgnICsgY29tcGlsZXJJbmZvWzFdICsgJykuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGVtcGxhdGUodGVtcGxhdGVTcGVjLCBlbnYpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgaWYgKCFlbnYpIHtcbiAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnTm8gZW52aXJvbm1lbnQgcGFzc2VkIHRvIHRlbXBsYXRlJyk7XG4gIH1cbiAgaWYgKCF0ZW1wbGF0ZVNwZWMgfHwgIXRlbXBsYXRlU3BlYy5tYWluKSB7XG4gICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1Vua25vd24gdGVtcGxhdGUgb2JqZWN0OiAnICsgdHlwZW9mIHRlbXBsYXRlU3BlYyk7XG4gIH1cblxuICB0ZW1wbGF0ZVNwZWMubWFpbi5kZWNvcmF0b3IgPSB0ZW1wbGF0ZVNwZWMubWFpbl9kO1xuXG4gIC8vIE5vdGU6IFVzaW5nIGVudi5WTSByZWZlcmVuY2VzIHJhdGhlciB0aGFuIGxvY2FsIHZhciByZWZlcmVuY2VzIHRocm91Z2hvdXQgdGhpcyBzZWN0aW9uIHRvIGFsbG93XG4gIC8vIGZvciBleHRlcm5hbCB1c2VycyB0byBvdmVycmlkZSB0aGVzZSBhcyBwc2V1ZG8tc3VwcG9ydGVkIEFQSXMuXG4gIGVudi5WTS5jaGVja1JldmlzaW9uKHRlbXBsYXRlU3BlYy5jb21waWxlcik7XG5cbiAgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZm9yIHByZWNvbXBpbGVkIHRlbXBsYXRlcyB3aXRoIGNvbXBpbGVyLXZlcnNpb24gNyAoPDQuMy4wKVxuICB2YXIgdGVtcGxhdGVXYXNQcmVjb21waWxlZFdpdGhDb21waWxlclY3ID0gdGVtcGxhdGVTcGVjLmNvbXBpbGVyICYmIHRlbXBsYXRlU3BlYy5jb21waWxlclswXSA9PT0gNztcblxuICBmdW5jdGlvbiBpbnZva2VQYXJ0aWFsV3JhcHBlcihwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgICAgY29udGV4dCA9IFV0aWxzLmV4dGVuZCh7fSwgY29udGV4dCwgb3B0aW9ucy5oYXNoKTtcbiAgICAgIGlmIChvcHRpb25zLmlkcykge1xuICAgICAgICBvcHRpb25zLmlkc1swXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHBhcnRpYWwgPSBlbnYuVk0ucmVzb2x2ZVBhcnRpYWwuY2FsbCh0aGlzLCBwYXJ0aWFsLCBjb250ZXh0LCBvcHRpb25zKTtcblxuICAgIHZhciBleHRlbmRlZE9wdGlvbnMgPSBVdGlscy5leHRlbmQoe30sIG9wdGlvbnMsIHtcbiAgICAgIGhvb2tzOiB0aGlzLmhvb2tzLFxuICAgICAgcHJvdG9BY2Nlc3NDb250cm9sOiB0aGlzLnByb3RvQWNjZXNzQ29udHJvbFxuICAgIH0pO1xuXG4gICAgdmFyIHJlc3VsdCA9IGVudi5WTS5pbnZva2VQYXJ0aWFsLmNhbGwodGhpcywgcGFydGlhbCwgY29udGV4dCwgZXh0ZW5kZWRPcHRpb25zKTtcblxuICAgIGlmIChyZXN1bHQgPT0gbnVsbCAmJiBlbnYuY29tcGlsZSkge1xuICAgICAgb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdID0gZW52LmNvbXBpbGUocGFydGlhbCwgdGVtcGxhdGVTcGVjLmNvbXBpbGVyT3B0aW9ucywgZW52KTtcbiAgICAgIHJlc3VsdCA9IG9wdGlvbnMucGFydGlhbHNbb3B0aW9ucy5uYW1lXShjb250ZXh0LCBleHRlbmRlZE9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAocmVzdWx0ICE9IG51bGwpIHtcbiAgICAgIGlmIChvcHRpb25zLmluZGVudCkge1xuICAgICAgICB2YXIgbGluZXMgPSByZXN1bHQuc3BsaXQoJ1xcbicpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpbmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGlmICghbGluZXNbaV0gJiYgaSArIDEgPT09IGwpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxpbmVzW2ldID0gb3B0aW9ucy5pbmRlbnQgKyBsaW5lc1tpXTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSBsaW5lcy5qb2luKCdcXG4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdUaGUgcGFydGlhbCAnICsgb3B0aW9ucy5uYW1lICsgJyBjb3VsZCBub3QgYmUgY29tcGlsZWQgd2hlbiBydW5uaW5nIGluIHJ1bnRpbWUtb25seSBtb2RlJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gSnVzdCBhZGQgd2F0ZXJcbiAgdmFyIGNvbnRhaW5lciA9IHtcbiAgICBzdHJpY3Q6IGZ1bmN0aW9uIHN0cmljdChvYmosIG5hbWUsIGxvYykge1xuICAgICAgaWYgKCFvYmogfHwgIShuYW1lIGluIG9iaikpIHtcbiAgICAgICAgdGhyb3cgbmV3IF9leGNlcHRpb24yWydkZWZhdWx0J10oJ1wiJyArIG5hbWUgKyAnXCIgbm90IGRlZmluZWQgaW4gJyArIG9iaiwge1xuICAgICAgICAgIGxvYzogbG9jXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eShvYmosIG5hbWUpO1xuICAgIH0sXG4gICAgbG9va3VwUHJvcGVydHk6IGZ1bmN0aW9uIGxvb2t1cFByb3BlcnR5KHBhcmVudCwgcHJvcGVydHlOYW1lKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gcGFyZW50W3Byb3BlcnR5TmFtZV07XG4gICAgICBpZiAocmVzdWx0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyZW50LCBwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChfaW50ZXJuYWxQcm90b0FjY2Vzcy5yZXN1bHRJc0FsbG93ZWQocmVzdWx0LCBjb250YWluZXIucHJvdG9BY2Nlc3NDb250cm9sLCBwcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sXG4gICAgbG9va3VwOiBmdW5jdGlvbiBsb29rdXAoZGVwdGhzLCBuYW1lKSB7XG4gICAgICB2YXIgbGVuID0gZGVwdGhzLmxlbmd0aDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRlcHRoc1tpXSAmJiBjb250YWluZXIubG9va3VwUHJvcGVydHkoZGVwdGhzW2ldLCBuYW1lKTtcbiAgICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGRlcHRoc1tpXVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbGFtYmRhOiBmdW5jdGlvbiBsYW1iZGEoY3VycmVudCwgY29udGV4dCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBjdXJyZW50ID09PSAnZnVuY3Rpb24nID8gY3VycmVudC5jYWxsKGNvbnRleHQpIDogY3VycmVudDtcbiAgICB9LFxuXG4gICAgZXNjYXBlRXhwcmVzc2lvbjogVXRpbHMuZXNjYXBlRXhwcmVzc2lvbixcbiAgICBpbnZva2VQYXJ0aWFsOiBpbnZva2VQYXJ0aWFsV3JhcHBlcixcblxuICAgIGZuOiBmdW5jdGlvbiBmbihpKSB7XG4gICAgICB2YXIgcmV0ID0gdGVtcGxhdGVTcGVjW2ldO1xuICAgICAgcmV0LmRlY29yYXRvciA9IHRlbXBsYXRlU3BlY1tpICsgJ19kJ107XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0sXG5cbiAgICBwcm9ncmFtczogW10sXG4gICAgcHJvZ3JhbTogZnVuY3Rpb24gcHJvZ3JhbShpLCBkYXRhLCBkZWNsYXJlZEJsb2NrUGFyYW1zLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gICAgICB2YXIgcHJvZ3JhbVdyYXBwZXIgPSB0aGlzLnByb2dyYW1zW2ldLFxuICAgICAgICAgIGZuID0gdGhpcy5mbihpKTtcbiAgICAgIGlmIChkYXRhIHx8IGRlcHRocyB8fCBibG9ja1BhcmFtcyB8fCBkZWNsYXJlZEJsb2NrUGFyYW1zKSB7XG4gICAgICAgIHByb2dyYW1XcmFwcGVyID0gd3JhcFByb2dyYW0odGhpcywgaSwgZm4sIGRhdGEsIGRlY2xhcmVkQmxvY2tQYXJhbXMsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICAgICAgfSBlbHNlIGlmICghcHJvZ3JhbVdyYXBwZXIpIHtcbiAgICAgICAgcHJvZ3JhbVdyYXBwZXIgPSB0aGlzLnByb2dyYW1zW2ldID0gd3JhcFByb2dyYW0odGhpcywgaSwgZm4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb2dyYW1XcmFwcGVyO1xuICAgIH0sXG5cbiAgICBkYXRhOiBmdW5jdGlvbiBkYXRhKHZhbHVlLCBkZXB0aCkge1xuICAgICAgd2hpbGUgKHZhbHVlICYmIGRlcHRoLS0pIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5fcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgbWVyZ2VJZk5lZWRlZDogZnVuY3Rpb24gbWVyZ2VJZk5lZWRlZChwYXJhbSwgY29tbW9uKSB7XG4gICAgICB2YXIgb2JqID0gcGFyYW0gfHwgY29tbW9uO1xuXG4gICAgICBpZiAocGFyYW0gJiYgY29tbW9uICYmIHBhcmFtICE9PSBjb21tb24pIHtcbiAgICAgICAgb2JqID0gVXRpbHMuZXh0ZW5kKHt9LCBjb21tb24sIHBhcmFtKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9LFxuICAgIC8vIEFuIGVtcHR5IG9iamVjdCB0byB1c2UgYXMgcmVwbGFjZW1lbnQgZm9yIG51bGwtY29udGV4dHNcbiAgICBudWxsQ29udGV4dDogT2JqZWN0LnNlYWwoe30pLFxuXG4gICAgbm9vcDogZW52LlZNLm5vb3AsXG4gICAgY29tcGlsZXJJbmZvOiB0ZW1wbGF0ZVNwZWMuY29tcGlsZXJcbiAgfTtcblxuICBmdW5jdGlvbiByZXQoY29udGV4dCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMV07XG5cbiAgICB2YXIgZGF0YSA9IG9wdGlvbnMuZGF0YTtcblxuICAgIHJldC5fc2V0dXAob3B0aW9ucyk7XG4gICAgaWYgKCFvcHRpb25zLnBhcnRpYWwgJiYgdGVtcGxhdGVTcGVjLnVzZURhdGEpIHtcbiAgICAgIGRhdGEgPSBpbml0RGF0YShjb250ZXh0LCBkYXRhKTtcbiAgICB9XG4gICAgdmFyIGRlcHRocyA9IHVuZGVmaW5lZCxcbiAgICAgICAgYmxvY2tQYXJhbXMgPSB0ZW1wbGF0ZVNwZWMudXNlQmxvY2tQYXJhbXMgPyBbXSA6IHVuZGVmaW5lZDtcbiAgICBpZiAodGVtcGxhdGVTcGVjLnVzZURlcHRocykge1xuICAgICAgaWYgKG9wdGlvbnMuZGVwdGhzKSB7XG4gICAgICAgIGRlcHRocyA9IGNvbnRleHQgIT0gb3B0aW9ucy5kZXB0aHNbMF0gPyBbY29udGV4dF0uY29uY2F0KG9wdGlvbnMuZGVwdGhzKSA6IG9wdGlvbnMuZGVwdGhzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVwdGhzID0gW2NvbnRleHRdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1haW4oY29udGV4dCAvKiwgb3B0aW9ucyovKSB7XG4gICAgICByZXR1cm4gJycgKyB0ZW1wbGF0ZVNwZWMubWFpbihjb250YWluZXIsIGNvbnRleHQsIGNvbnRhaW5lci5oZWxwZXJzLCBjb250YWluZXIucGFydGlhbHMsIGRhdGEsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICAgIH1cblxuICAgIG1haW4gPSBleGVjdXRlRGVjb3JhdG9ycyh0ZW1wbGF0ZVNwZWMubWFpbiwgbWFpbiwgY29udGFpbmVyLCBvcHRpb25zLmRlcHRocyB8fCBbXSwgZGF0YSwgYmxvY2tQYXJhbXMpO1xuICAgIHJldHVybiBtYWluKGNvbnRleHQsIG9wdGlvbnMpO1xuICB9XG5cbiAgcmV0LmlzVG9wID0gdHJ1ZTtcblxuICByZXQuX3NldHVwID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMucGFydGlhbCkge1xuICAgICAgdmFyIG1lcmdlZEhlbHBlcnMgPSBVdGlscy5leHRlbmQoe30sIGVudi5oZWxwZXJzLCBvcHRpb25zLmhlbHBlcnMpO1xuICAgICAgd3JhcEhlbHBlcnNUb1Bhc3NMb29rdXBQcm9wZXJ0eShtZXJnZWRIZWxwZXJzLCBjb250YWluZXIpO1xuICAgICAgY29udGFpbmVyLmhlbHBlcnMgPSBtZXJnZWRIZWxwZXJzO1xuXG4gICAgICBpZiAodGVtcGxhdGVTcGVjLnVzZVBhcnRpYWwpIHtcbiAgICAgICAgLy8gVXNlIG1lcmdlSWZOZWVkZWQgaGVyZSB0byBwcmV2ZW50IGNvbXBpbGluZyBnbG9iYWwgcGFydGlhbHMgbXVsdGlwbGUgdGltZXNcbiAgICAgICAgY29udGFpbmVyLnBhcnRpYWxzID0gY29udGFpbmVyLm1lcmdlSWZOZWVkZWQob3B0aW9ucy5wYXJ0aWFscywgZW52LnBhcnRpYWxzKTtcbiAgICAgIH1cbiAgICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlUGFydGlhbCB8fCB0ZW1wbGF0ZVNwZWMudXNlRGVjb3JhdG9ycykge1xuICAgICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IFV0aWxzLmV4dGVuZCh7fSwgZW52LmRlY29yYXRvcnMsIG9wdGlvbnMuZGVjb3JhdG9ycyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRhaW5lci5ob29rcyA9IHt9O1xuICAgICAgY29udGFpbmVyLnByb3RvQWNjZXNzQ29udHJvbCA9IF9pbnRlcm5hbFByb3RvQWNjZXNzLmNyZWF0ZVByb3RvQWNjZXNzQ29udHJvbChvcHRpb25zKTtcblxuICAgICAgdmFyIGtlZXBIZWxwZXJJbkhlbHBlcnMgPSBvcHRpb25zLmFsbG93Q2FsbHNUb0hlbHBlck1pc3NpbmcgfHwgdGVtcGxhdGVXYXNQcmVjb21waWxlZFdpdGhDb21waWxlclY3O1xuICAgICAgX2hlbHBlcnMubW92ZUhlbHBlclRvSG9va3MoY29udGFpbmVyLCAnaGVscGVyTWlzc2luZycsIGtlZXBIZWxwZXJJbkhlbHBlcnMpO1xuICAgICAgX2hlbHBlcnMubW92ZUhlbHBlclRvSG9va3MoY29udGFpbmVyLCAnYmxvY2tIZWxwZXJNaXNzaW5nJywga2VlcEhlbHBlckluSGVscGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRhaW5lci5wcm90b0FjY2Vzc0NvbnRyb2wgPSBvcHRpb25zLnByb3RvQWNjZXNzQ29udHJvbDsgLy8gaW50ZXJuYWwgb3B0aW9uXG4gICAgICBjb250YWluZXIuaGVscGVycyA9IG9wdGlvbnMuaGVscGVycztcbiAgICAgIGNvbnRhaW5lci5wYXJ0aWFscyA9IG9wdGlvbnMucGFydGlhbHM7XG4gICAgICBjb250YWluZXIuZGVjb3JhdG9ycyA9IG9wdGlvbnMuZGVjb3JhdG9ycztcbiAgICAgIGNvbnRhaW5lci5ob29rcyA9IG9wdGlvbnMuaG9va3M7XG4gICAgfVxuICB9O1xuXG4gIHJldC5fY2hpbGQgPSBmdW5jdGlvbiAoaSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocykge1xuICAgIGlmICh0ZW1wbGF0ZVNwZWMudXNlQmxvY2tQYXJhbXMgJiYgIWJsb2NrUGFyYW1zKSB7XG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnbXVzdCBwYXNzIGJsb2NrIHBhcmFtcycpO1xuICAgIH1cbiAgICBpZiAodGVtcGxhdGVTcGVjLnVzZURlcHRocyAmJiAhZGVwdGhzKSB7XG4gICAgICB0aHJvdyBuZXcgX2V4Y2VwdGlvbjJbJ2RlZmF1bHQnXSgnbXVzdCBwYXNzIHBhcmVudCBkZXB0aHMnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gd3JhcFByb2dyYW0oY29udGFpbmVyLCBpLCB0ZW1wbGF0ZVNwZWNbaV0sIGRhdGEsIDAsIGJsb2NrUGFyYW1zLCBkZXB0aHMpO1xuICB9O1xuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiB3cmFwUHJvZ3JhbShjb250YWluZXIsIGksIGZuLCBkYXRhLCBkZWNsYXJlZEJsb2NrUGFyYW1zLCBibG9ja1BhcmFtcywgZGVwdGhzKSB7XG4gIGZ1bmN0aW9uIHByb2coY29udGV4dCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMV07XG5cbiAgICB2YXIgY3VycmVudERlcHRocyA9IGRlcHRocztcbiAgICBpZiAoZGVwdGhzICYmIGNvbnRleHQgIT0gZGVwdGhzWzBdICYmICEoY29udGV4dCA9PT0gY29udGFpbmVyLm51bGxDb250ZXh0ICYmIGRlcHRoc1swXSA9PT0gbnVsbCkpIHtcbiAgICAgIGN1cnJlbnREZXB0aHMgPSBbY29udGV4dF0uY29uY2F0KGRlcHRocyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZuKGNvbnRhaW5lciwgY29udGV4dCwgY29udGFpbmVyLmhlbHBlcnMsIGNvbnRhaW5lci5wYXJ0aWFscywgb3B0aW9ucy5kYXRhIHx8IGRhdGEsIGJsb2NrUGFyYW1zICYmIFtvcHRpb25zLmJsb2NrUGFyYW1zXS5jb25jYXQoYmxvY2tQYXJhbXMpLCBjdXJyZW50RGVwdGhzKTtcbiAgfVxuXG4gIHByb2cgPSBleGVjdXRlRGVjb3JhdG9ycyhmbiwgcHJvZywgY29udGFpbmVyLCBkZXB0aHMsIGRhdGEsIGJsb2NrUGFyYW1zKTtcblxuICBwcm9nLnByb2dyYW0gPSBpO1xuICBwcm9nLmRlcHRoID0gZGVwdGhzID8gZGVwdGhzLmxlbmd0aCA6IDA7XG4gIHByb2cuYmxvY2tQYXJhbXMgPSBkZWNsYXJlZEJsb2NrUGFyYW1zIHx8IDA7XG4gIHJldHVybiBwcm9nO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgY3VycmVudGx5IHBhcnQgb2YgdGhlIG9mZmljaWFsIEFQSSwgdGhlcmVmb3JlIGltcGxlbWVudGF0aW9uIGRldGFpbHMgc2hvdWxkIG5vdCBiZSBjaGFuZ2VkLlxuICovXG5cbmZ1bmN0aW9uIHJlc29sdmVQYXJ0aWFsKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgaWYgKCFwYXJ0aWFsKSB7XG4gICAgaWYgKG9wdGlvbnMubmFtZSA9PT0gJ0BwYXJ0aWFsLWJsb2NrJykge1xuICAgICAgcGFydGlhbCA9IG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJ0aWFsID0gb3B0aW9ucy5wYXJ0aWFsc1tvcHRpb25zLm5hbWVdO1xuICAgIH1cbiAgfSBlbHNlIGlmICghcGFydGlhbC5jYWxsICYmICFvcHRpb25zLm5hbWUpIHtcbiAgICAvLyBUaGlzIGlzIGEgZHluYW1pYyBwYXJ0aWFsIHRoYXQgcmV0dXJuZWQgYSBzdHJpbmdcbiAgICBvcHRpb25zLm5hbWUgPSBwYXJ0aWFsO1xuICAgIHBhcnRpYWwgPSBvcHRpb25zLnBhcnRpYWxzW3BhcnRpYWxdO1xuICB9XG4gIHJldHVybiBwYXJ0aWFsO1xufVxuXG5mdW5jdGlvbiBpbnZva2VQYXJ0aWFsKHBhcnRpYWwsIGNvbnRleHQsIG9wdGlvbnMpIHtcbiAgLy8gVXNlIHRoZSBjdXJyZW50IGNsb3N1cmUgY29udGV4dCB0byBzYXZlIHRoZSBwYXJ0aWFsLWJsb2NrIGlmIHRoaXMgcGFydGlhbFxuICB2YXIgY3VycmVudFBhcnRpYWxCbG9jayA9IG9wdGlvbnMuZGF0YSAmJiBvcHRpb25zLmRhdGFbJ3BhcnRpYWwtYmxvY2snXTtcbiAgb3B0aW9ucy5wYXJ0aWFsID0gdHJ1ZTtcbiAgaWYgKG9wdGlvbnMuaWRzKSB7XG4gICAgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoID0gb3B0aW9ucy5pZHNbMF0gfHwgb3B0aW9ucy5kYXRhLmNvbnRleHRQYXRoO1xuICB9XG5cbiAgdmFyIHBhcnRpYWxCbG9jayA9IHVuZGVmaW5lZDtcbiAgaWYgKG9wdGlvbnMuZm4gJiYgb3B0aW9ucy5mbiAhPT0gbm9vcCkge1xuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICBvcHRpb25zLmRhdGEgPSBfYmFzZS5jcmVhdGVGcmFtZShvcHRpb25zLmRhdGEpO1xuICAgICAgLy8gV3JhcHBlciBmdW5jdGlvbiB0byBnZXQgYWNjZXNzIHRvIGN1cnJlbnRQYXJ0aWFsQmxvY2sgZnJvbSB0aGUgY2xvc3VyZVxuICAgICAgdmFyIGZuID0gb3B0aW9ucy5mbjtcbiAgICAgIHBhcnRpYWxCbG9jayA9IG9wdGlvbnMuZGF0YVsncGFydGlhbC1ibG9jayddID0gZnVuY3Rpb24gcGFydGlhbEJsb2NrV3JhcHBlcihjb250ZXh0KSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMV07XG5cbiAgICAgICAgLy8gUmVzdG9yZSB0aGUgcGFydGlhbC1ibG9jayBmcm9tIHRoZSBjbG9zdXJlIGZvciB0aGUgZXhlY3V0aW9uIG9mIHRoZSBibG9ja1xuICAgICAgICAvLyBpLmUuIHRoZSBwYXJ0IGluc2lkZSB0aGUgYmxvY2sgb2YgdGhlIHBhcnRpYWwgY2FsbC5cbiAgICAgICAgb3B0aW9ucy5kYXRhID0gX2Jhc2UuY3JlYXRlRnJhbWUob3B0aW9ucy5kYXRhKTtcbiAgICAgICAgb3B0aW9ucy5kYXRhWydwYXJ0aWFsLWJsb2NrJ10gPSBjdXJyZW50UGFydGlhbEJsb2NrO1xuICAgICAgICByZXR1cm4gZm4oY29udGV4dCwgb3B0aW9ucyk7XG4gICAgICB9O1xuICAgICAgaWYgKGZuLnBhcnRpYWxzKSB7XG4gICAgICAgIG9wdGlvbnMucGFydGlhbHMgPSBVdGlscy5leHRlbmQoe30sIG9wdGlvbnMucGFydGlhbHMsIGZuLnBhcnRpYWxzKTtcbiAgICAgIH1cbiAgICB9KSgpO1xuICB9XG5cbiAgaWYgKHBhcnRpYWwgPT09IHVuZGVmaW5lZCAmJiBwYXJ0aWFsQmxvY2spIHtcbiAgICBwYXJ0aWFsID0gcGFydGlhbEJsb2NrO1xuICB9XG5cbiAgaWYgKHBhcnRpYWwgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBfZXhjZXB0aW9uMlsnZGVmYXVsdCddKCdUaGUgcGFydGlhbCAnICsgb3B0aW9ucy5uYW1lICsgJyBjb3VsZCBub3QgYmUgZm91bmQnKTtcbiAgfSBlbHNlIGlmIChwYXJ0aWFsIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICByZXR1cm4gcGFydGlhbChjb250ZXh0LCBvcHRpb25zKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBub29wKCkge1xuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhKGNvbnRleHQsIGRhdGEpIHtcbiAgaWYgKCFkYXRhIHx8ICEoJ3Jvb3QnIGluIGRhdGEpKSB7XG4gICAgZGF0YSA9IGRhdGEgPyBfYmFzZS5jcmVhdGVGcmFtZShkYXRhKSA6IHt9O1xuICAgIGRhdGEucm9vdCA9IGNvbnRleHQ7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGV4ZWN1dGVEZWNvcmF0b3JzKGZuLCBwcm9nLCBjb250YWluZXIsIGRlcHRocywgZGF0YSwgYmxvY2tQYXJhbXMpIHtcbiAgaWYgKGZuLmRlY29yYXRvcikge1xuICAgIHZhciBwcm9wcyA9IHt9O1xuICAgIHByb2cgPSBmbi5kZWNvcmF0b3IocHJvZywgcHJvcHMsIGNvbnRhaW5lciwgZGVwdGhzICYmIGRlcHRoc1swXSwgZGF0YSwgYmxvY2tQYXJhbXMsIGRlcHRocyk7XG4gICAgVXRpbHMuZXh0ZW5kKHByb2csIHByb3BzKTtcbiAgfVxuICByZXR1cm4gcHJvZztcbn1cblxuZnVuY3Rpb24gd3JhcEhlbHBlcnNUb1Bhc3NMb29rdXBQcm9wZXJ0eShtZXJnZWRIZWxwZXJzLCBjb250YWluZXIpIHtcbiAgT2JqZWN0LmtleXMobWVyZ2VkSGVscGVycykuZm9yRWFjaChmdW5jdGlvbiAoaGVscGVyTmFtZSkge1xuICAgIHZhciBoZWxwZXIgPSBtZXJnZWRIZWxwZXJzW2hlbHBlck5hbWVdO1xuICAgIG1lcmdlZEhlbHBlcnNbaGVscGVyTmFtZV0gPSBwYXNzTG9va3VwUHJvcGVydHlPcHRpb24oaGVscGVyLCBjb250YWluZXIpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcGFzc0xvb2t1cFByb3BlcnR5T3B0aW9uKGhlbHBlciwgY29udGFpbmVyKSB7XG4gIHZhciBsb29rdXBQcm9wZXJ0eSA9IGNvbnRhaW5lci5sb29rdXBQcm9wZXJ0eTtcbiAgcmV0dXJuIF9pbnRlcm5hbFdyYXBIZWxwZXIud3JhcEhlbHBlcihoZWxwZXIsIGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgcmV0dXJuIFV0aWxzLmV4dGVuZCh7IGxvb2t1cFByb3BlcnR5OiBsb29rdXBQcm9wZXJ0eSB9LCBvcHRpb25zKTtcbiAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwzSjFiblJwYldVdWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPenM3T3pzN2NVSkJRWFZDTEZOQlFWTTdPMGxCUVhCQ0xFdEJRVXM3TzNsQ1FVTkxMR0ZCUVdFN096czdiMEpCVFRWQ0xGRkJRVkU3TzNWQ1FVTnRRaXhYUVVGWE96dHJRMEZEYkVJc2RVSkJRWFZDT3p0dFEwRkpNME1zZVVKQlFYbENPenRCUVVWNlFpeFRRVUZUTEdGQlFXRXNRMEZCUXl4WlFVRlpMRVZCUVVVN1FVRkRNVU1zVFVGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhCUVVGRExGbEJRVmtzU1VGQlNTeFpRVUZaTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVzc1EwRkJRenROUVVNM1JDeGxRVUZsTERCQ1FVRnZRaXhEUVVGRE96dEJRVVYwUXl4TlFVTkZMR2RDUVVGblFpd3lRMEZCY1VNc1NVRkRja1FzWjBKQlFXZENMREpDUVVGeFFpeEZRVU55UXp0QlFVTkJMRmRCUVU4N1IwRkRVanM3UVVGRlJDeE5RVUZKTEdkQ1FVRm5RaXd3UTBGQmIwTXNSVUZCUlR0QlFVTjRSQ3hSUVVGTkxHVkJRV1VzUjBGQlJ5eDFRa0ZCYVVJc1pVRkJaU3hEUVVGRE8xRkJRM1pFTEdkQ1FVRm5RaXhIUVVGSExIVkNRVUZwUWl4blFrRkJaMElzUTBGQlF5eERRVUZETzBGQlEzaEVMRlZCUVUwc01rSkJRMG9zZVVaQlFYbEdMRWRCUTNaR0xIRkVRVUZ4UkN4SFFVTnlSQ3hsUVVGbExFZEJRMllzYlVSQlFXMUVMRWRCUTI1RUxHZENRVUZuUWl4SFFVTm9RaXhKUVVGSkxFTkJRMUFzUTBGQlF6dEhRVU5JTEUxQlFVMDdPMEZCUlV3c1ZVRkJUU3d5UWtGRFNpeDNSa0ZCZDBZc1IwRkRkRVlzYVVSQlFXbEVMRWRCUTJwRUxGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZEWml4SlFVRkpMRU5CUTFBc1EwRkJRenRIUVVOSU8wTkJRMFk3TzBGQlJVMHNVMEZCVXl4UlFVRlJMRU5CUVVNc1dVRkJXU3hGUVVGRkxFZEJRVWNzUlVGQlJUczdRVUZGTVVNc1RVRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJUdEJRVU5TTEZWQlFVMHNNa0pCUVdNc2JVTkJRVzFETEVOQlFVTXNRMEZCUXp0SFFVTXhSRHRCUVVORUxFMUJRVWtzUTBGQlF5eFpRVUZaTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hGUVVGRk8wRkJRM1pETEZWQlFVMHNNa0pCUVdNc01rSkJRVEpDTEVkQlFVY3NUMEZCVHl4WlFVRlpMRU5CUVVNc1EwRkJRenRIUVVONFJUczdRVUZGUkN4alFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eFpRVUZaTEVOQlFVTXNUVUZCVFN4RFFVRkRPenM3TzBGQlNXeEVMRXRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zWVVGQllTeERRVUZETEZsQlFWa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRenM3TzBGQlJ6VkRMRTFCUVUwc2IwTkJRVzlETEVkQlEzaERMRmxCUVZrc1EwRkJReXhSUVVGUkxFbEJRVWtzV1VGQldTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03TzBGQlJURkVMRmRCUVZNc2IwSkJRVzlDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1JVRkJSU3hQUVVGUExFVkJRVVU3UVVGRGRrUXNVVUZCU1N4UFFVRlBMRU5CUVVNc1NVRkJTU3hGUVVGRk8wRkJRMmhDTEdGQlFVOHNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzUlVGQlJTeFBRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRMnhFTEZWQlFVa3NUMEZCVHl4RFFVRkRMRWRCUVVjc1JVRkJSVHRCUVVObUxHVkJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRE8wOUJRM1pDTzB0QlEwWTdRVUZEUkN4WFFVRlBMRWRCUVVjc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPenRCUVVWMFJTeFJRVUZKTEdWQlFXVXNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzUlVGQlJTeFBRVUZQTEVWQlFVVTdRVUZET1VNc1YwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTzBGQlEycENMSGRDUVVGclFpeEZRVUZGTEVsQlFVa3NRMEZCUXl4clFrRkJhMEk3UzBGRE5VTXNRMEZCUXl4RFFVRkRPenRCUVVWSUxGRkJRVWtzVFVGQlRTeEhRVUZITEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzUTBGRGNFTXNTVUZCU1N4RlFVTktMRTlCUVU4c1JVRkRVQ3hQUVVGUExFVkJRMUFzWlVGQlpTeERRVU5vUWl4RFFVRkRPenRCUVVWR0xGRkJRVWtzVFVGQlRTeEpRVUZKTEVsQlFVa3NTVUZCU1N4SFFVRkhMRU5CUVVNc1QwRkJUeXhGUVVGRk8wRkJRMnBETEdGQlFVOHNRMEZCUXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUXpGRExFOUJRVThzUlVGRFVDeFpRVUZaTEVOQlFVTXNaVUZCWlN4RlFVTTFRaXhIUVVGSExFTkJRMG9zUTBGQlF6dEJRVU5HTEZsQlFVMHNSMEZCUnl4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4UFFVRlBMRVZCUVVVc1pVRkJaU3hEUVVGRExFTkJRVU03UzBGRGJrVTdRVUZEUkN4UlFVRkpMRTFCUVUwc1NVRkJTU3hKUVVGSkxFVkJRVVU3UVVGRGJFSXNWVUZCU1N4UFFVRlBMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRMnhDTEZsQlFVa3NTMEZCU3l4SFFVRkhMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdRVUZETDBJc1lVRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVNMVF5eGpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZPMEZCUXpWQ0xHdENRVUZOTzFkQlExQTdPMEZCUlVRc1pVRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEU5QlFVOHNRMEZCUXl4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFOQlEzUkRPMEZCUTBRc1kwRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1QwRkRNMEk3UVVGRFJDeGhRVUZQTEUxQlFVMHNRMEZCUXp0TFFVTm1MRTFCUVUwN1FVRkRUQ3haUVVGTkxESkNRVU5LTEdOQlFXTXNSMEZEV2l4UFFVRlBMRU5CUVVNc1NVRkJTU3hIUVVOYUxEQkVRVUV3UkN4RFFVTTNSQ3hEUVVGRE8wdEJRMGc3UjBGRFJqczdPMEZCUjBRc1RVRkJTU3hUUVVGVExFZEJRVWM3UVVGRFpDeFZRVUZOTEVWQlFVVXNaMEpCUVZNc1IwRkJSeXhGUVVGRkxFbEJRVWtzUlVGQlJTeEhRVUZITEVWQlFVVTdRVUZETDBJc1ZVRkJTU3hEUVVGRExFZEJRVWNzU1VGQlNTeEZRVUZGTEVsQlFVa3NTVUZCU1N4SFFVRkhMRU5CUVVFc1FVRkJReXhGUVVGRk8wRkJRekZDTEdOQlFVMHNNa0pCUVdNc1IwRkJSeXhIUVVGSExFbEJRVWtzUjBGQlJ5eHRRa0ZCYlVJc1IwRkJSeXhIUVVGSExFVkJRVVU3UVVGRE1VUXNZVUZCUnl4RlFVRkZMRWRCUVVjN1UwRkRWQ3hEUVVGRExFTkJRVU03VDBGRFNqdEJRVU5FTEdGQlFVOHNVMEZCVXl4RFFVRkRMR05CUVdNc1EwRkJReXhIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdTMEZETlVNN1FVRkRSQ3hyUWtGQll5eEZRVUZGTEhkQ1FVRlRMRTFCUVUwc1JVRkJSU3haUVVGWkxFVkJRVVU3UVVGRE4wTXNWVUZCU1N4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzBGQlEyeERMRlZCUVVrc1RVRkJUU3hKUVVGSkxFbEJRVWtzUlVGQlJUdEJRVU5zUWl4bFFVRlBMRTFCUVUwc1EwRkJRenRQUVVObU8wRkJRMFFzVlVGQlNTeE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEZsQlFWa3NRMEZCUXl4RlFVRkZPMEZCUXpsRUxHVkJRVThzVFVGQlRTeERRVUZETzA5QlEyWTdPMEZCUlVRc1ZVRkJTU3h4UTBGQlowSXNUVUZCVFN4RlFVRkZMRk5CUVZNc1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4WlFVRlpMRU5CUVVNc1JVRkJSVHRCUVVOMlJTeGxRVUZQTEUxQlFVMHNRMEZCUXp0UFFVTm1PMEZCUTBRc1lVRkJUeXhUUVVGVExFTkJRVU03UzBGRGJFSTdRVUZEUkN4VlFVRk5MRVZCUVVVc1owSkJRVk1zVFVGQlRTeEZRVUZGTEVsQlFVa3NSVUZCUlR0QlFVTTNRaXhWUVVGTkxFZEJRVWNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRPMEZCUXpGQ0xGZEJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhIUVVGSExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdRVUZETlVJc1dVRkJTU3hOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRk5CUVZNc1EwRkJReXhqUVVGakxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8wRkJRM0JGTEZsQlFVa3NUVUZCVFN4SlFVRkpMRWxCUVVrc1JVRkJSVHRCUVVOc1FpeHBRa0ZCVHl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVMEZEZUVJN1QwRkRSanRMUVVOR08wRkJRMFFzVlVGQlRTeEZRVUZGTEdkQ1FVRlRMRTlCUVU4c1JVRkJSU3hQUVVGUExFVkJRVVU3UVVGRGFrTXNZVUZCVHl4UFFVRlBMRTlCUVU4c1MwRkJTeXhWUVVGVkxFZEJRVWNzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhQUVVGUExFTkJRVU03UzBGRGVFVTdPMEZCUlVRc2IwSkJRV2RDTEVWQlFVVXNTMEZCU3l4RFFVRkRMR2RDUVVGblFqdEJRVU40UXl4cFFrRkJZU3hGUVVGRkxHOUNRVUZ2UWpzN1FVRkZia01zVFVGQlJTeEZRVUZGTEZsQlFWTXNRMEZCUXl4RlFVRkZPMEZCUTJRc1ZVRkJTU3hIUVVGSExFZEJRVWNzV1VGQldTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUXpGQ0xGTkJRVWNzUTBGQlF5eFRRVUZUTEVkQlFVY3NXVUZCV1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU4yUXl4aFFVRlBMRWRCUVVjc1EwRkJRenRMUVVOYU96dEJRVVZFTEZsQlFWRXNSVUZCUlN4RlFVRkZPMEZCUTFvc1YwRkJUeXhGUVVGRkxHbENRVUZUTEVOQlFVTXNSVUZCUlN4SlFVRkpMRVZCUVVVc2JVSkJRVzFDTEVWQlFVVXNWMEZCVnl4RlFVRkZMRTFCUVUwc1JVRkJSVHRCUVVOdVJTeFZRVUZKTEdOQlFXTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF6dFZRVU51UXl4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTnNRaXhWUVVGSkxFbEJRVWtzU1VGQlNTeE5RVUZOTEVsQlFVa3NWMEZCVnl4SlFVRkpMRzFDUVVGdFFpeEZRVUZGTzBGQlEzaEVMSE5DUVVGakxFZEJRVWNzVjBGQlZ5eERRVU14UWl4SlFVRkpMRVZCUTBvc1EwRkJReXhGUVVORUxFVkJRVVVzUlVGRFJpeEpRVUZKTEVWQlEwb3NiVUpCUVcxQ0xFVkJRMjVDTEZkQlFWY3NSVUZEV0N4TlFVRk5MRU5CUTFBc1EwRkJRenRQUVVOSUxFMUJRVTBzU1VGQlNTeERRVUZETEdOQlFXTXNSVUZCUlR0QlFVTXhRaXh6UWtGQll5eEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzVjBGQlZ5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU03VDBGRE9VUTdRVUZEUkN4aFFVRlBMR05CUVdNc1EwRkJRenRMUVVOMlFqczdRVUZGUkN4UlFVRkpMRVZCUVVVc1kwRkJVeXhMUVVGTExFVkJRVVVzUzBGQlN5eEZRVUZGTzBGQlF6TkNMR0ZCUVU4c1MwRkJTeXhKUVVGSkxFdEJRVXNzUlVGQlJTeEZRVUZGTzBGQlEzWkNMR0ZCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETzA5QlEzWkNPMEZCUTBRc1lVRkJUeXhMUVVGTExFTkJRVU03UzBGRFpEdEJRVU5FTEdsQ1FVRmhMRVZCUVVVc2RVSkJRVk1zUzBGQlN5eEZRVUZGTEUxQlFVMHNSVUZCUlR0QlFVTnlReXhWUVVGSkxFZEJRVWNzUjBGQlJ5eExRVUZMTEVsQlFVa3NUVUZCVFN4RFFVRkRPenRCUVVVeFFpeFZRVUZKTEV0QlFVc3NTVUZCU1N4TlFVRk5MRWxCUVVrc1MwRkJTeXhMUVVGTExFMUJRVTBzUlVGQlJUdEJRVU4yUXl4WFFVRkhMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTEVWQlFVVXNUVUZCVFN4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8wOUJRM1pET3p0QlFVVkVMR0ZCUVU4c1IwRkJSeXhEUVVGRE8wdEJRMW83TzBGQlJVUXNaVUZCVnl4RlFVRkZMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZET3p0QlFVVTFRaXhSUVVGSkxFVkJRVVVzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpPMEZCUTJwQ0xHZENRVUZaTEVWQlFVVXNXVUZCV1N4RFFVRkRMRkZCUVZFN1IwRkRjRU1zUTBGQlF6czdRVUZGUml4WFFVRlRMRWRCUVVjc1EwRkJReXhQUVVGUExFVkJRV2RDTzFGQlFXUXNUMEZCVHl4NVJFRkJSeXhGUVVGRk96dEJRVU5vUXl4UlFVRkpMRWxCUVVrc1IwRkJSeXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZET3p0QlFVVjRRaXhQUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMEZCUTNCQ0xGRkJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4SlFVRkpMRmxCUVZrc1EwRkJReXhQUVVGUExFVkJRVVU3UVVGRE5VTXNWVUZCU1N4SFFVRkhMRkZCUVZFc1EwRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdTMEZEYUVNN1FVRkRSQ3hSUVVGSkxFMUJRVTBzV1VGQlFUdFJRVU5TTEZkQlFWY3NSMEZCUnl4WlFVRlpMRU5CUVVNc1kwRkJZeXhIUVVGSExFVkJRVVVzUjBGQlJ5eFRRVUZUTEVOQlFVTTdRVUZETjBRc1VVRkJTU3haUVVGWkxFTkJRVU1zVTBGQlV5eEZRVUZGTzBGQlF6RkNMRlZCUVVrc1QwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJUdEJRVU5zUWl4alFVRk5MRWRCUTBvc1QwRkJUeXhKUVVGSkxFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUTNoQ0xFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGRGFFTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJRenRQUVVOMFFpeE5RVUZOTzBGQlEwd3NZMEZCVFN4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03VDBGRGNFSTdTMEZEUmpzN1FVRkZSQ3hoUVVGVExFbEJRVWtzUTBGQlF5eFBRVUZQTEdkQ1FVRm5RanRCUVVOdVF5eGhRVU5GTEVWQlFVVXNSMEZEUml4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVObUxGTkJRVk1zUlVGRFZDeFBRVUZQTEVWQlExQXNVMEZCVXl4RFFVRkRMRTlCUVU4c1JVRkRha0lzVTBGQlV5eERRVUZETEZGQlFWRXNSVUZEYkVJc1NVRkJTU3hGUVVOS0xGZEJRVmNzUlVGRFdDeE5RVUZOTEVOQlExQXNRMEZEUkR0TFFVTklPenRCUVVWRUxGRkJRVWtzUjBGQlJ5eHBRa0ZCYVVJc1EwRkRkRUlzV1VGQldTeERRVUZETEVsQlFVa3NSVUZEYWtJc1NVRkJTU3hGUVVOS0xGTkJRVk1zUlVGRFZDeFBRVUZQTEVOQlFVTXNUVUZCVFN4SlFVRkpMRVZCUVVVc1JVRkRjRUlzU1VGQlNTeEZRVU5LTEZkQlFWY3NRMEZEV2l4RFFVRkRPMEZCUTBZc1YwRkJUeXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMGRCUXk5Q096dEJRVVZFTEV0QlFVY3NRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRE96dEJRVVZxUWl4TFFVRkhMRU5CUVVNc1RVRkJUU3hIUVVGSExGVkJRVk1zVDBGQlR5eEZRVUZGTzBGQlF6ZENMRkZCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eEZRVUZGTzBGQlEzQkNMRlZCUVVrc1lVRkJZU3hIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMRWRCUVVjc1EwRkJReXhQUVVGUExFVkJRVVVzVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMEZCUTI1RkxIRkRRVUVyUWl4RFFVRkRMR0ZCUVdFc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6dEJRVU14UkN4bFFVRlRMRU5CUVVNc1QwRkJUeXhIUVVGSExHRkJRV0VzUTBGQlF6czdRVUZGYkVNc1ZVRkJTU3haUVVGWkxFTkJRVU1zVlVGQlZTeEZRVUZGT3p0QlFVVXpRaXhwUWtGQlV5eERRVUZETEZGQlFWRXNSMEZCUnl4VFFVRlRMRU5CUVVNc1lVRkJZU3hEUVVNeFF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4RlFVTm9RaXhIUVVGSExFTkJRVU1zVVVGQlVTeERRVU5pTEVOQlFVTTdUMEZEU0R0QlFVTkVMRlZCUVVrc1dVRkJXU3hEUVVGRExGVkJRVlVzU1VGQlNTeFpRVUZaTEVOQlFVTXNZVUZCWVN4RlFVRkZPMEZCUTNwRUxHbENRVUZUTEVOQlFVTXNWVUZCVlN4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRMnBETEVWQlFVVXNSVUZEUml4SFFVRkhMRU5CUVVNc1ZVRkJWU3hGUVVOa0xFOUJRVThzUTBGQlF5eFZRVUZWTEVOQlEyNUNMRU5CUVVNN1QwRkRTRHM3UVVGRlJDeGxRVUZUTEVOQlFVTXNTMEZCU3l4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVOeVFpeGxRVUZUTEVOQlFVTXNhMEpCUVd0Q0xFZEJRVWNzT0VOQlFYbENMRTlCUVU4c1EwRkJReXhEUVVGRE96dEJRVVZxUlN4VlFVRkpMRzFDUVVGdFFpeEhRVU55UWl4UFFVRlBMRU5CUVVNc2VVSkJRWGxDTEVsQlEycERMRzlEUVVGdlF5eERRVUZETzBGQlEzWkRMR2xEUVVGclFpeFRRVUZUTEVWQlFVVXNaVUZCWlN4RlFVRkZMRzFDUVVGdFFpeERRVUZETEVOQlFVTTdRVUZEYmtVc2FVTkJRV3RDTEZOQlFWTXNSVUZCUlN4dlFrRkJiMElzUlVGQlJTeHRRa0ZCYlVJc1EwRkJReXhEUVVGRE8wdEJRM3BGTEUxQlFVMDdRVUZEVEN4bFFVRlRMRU5CUVVNc2EwSkJRV3RDTEVkQlFVY3NUMEZCVHl4RFFVRkRMR3RDUVVGclFpeERRVUZETzBGQlF6RkVMR1ZCUVZNc1EwRkJReXhQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXp0QlFVTndReXhsUVVGVExFTkJRVU1zVVVGQlVTeEhRVUZITEU5QlFVOHNRMEZCUXl4UlFVRlJMRU5CUVVNN1FVRkRkRU1zWlVGQlV5eERRVUZETEZWQlFWVXNSMEZCUnl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hEUVVGRE8wRkJRekZETEdWQlFWTXNRMEZCUXl4TFFVRkxMRWRCUVVjc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF6dExRVU5xUXp0SFFVTkdMRU5CUVVNN08wRkJSVVlzUzBGQlJ5eERRVUZETEUxQlFVMHNSMEZCUnl4VlFVRlRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFVkJRVVVzVjBGQlZ5eEZRVUZGTEUxQlFVMHNSVUZCUlR0QlFVTnNSQ3hSUVVGSkxGbEJRVmtzUTBGQlF5eGpRVUZqTEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVN1FVRkRMME1zV1VGQlRTd3lRa0ZCWXl4M1FrRkJkMElzUTBGQlF5eERRVUZETzB0QlF5OURPMEZCUTBRc1VVRkJTU3haUVVGWkxFTkJRVU1zVTBGQlV5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZPMEZCUTNKRExGbEJRVTBzTWtKQlFXTXNlVUpCUVhsQ0xFTkJRVU1zUTBGQlF6dExRVU5vUkRzN1FVRkZSQ3hYUVVGUExGZEJRVmNzUTBGRGFFSXNVMEZCVXl4RlFVTlVMRU5CUVVNc1JVRkRSQ3haUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlEyWXNTVUZCU1N4RlFVTktMRU5CUVVNc1JVRkRSQ3hYUVVGWExFVkJRMWdzVFVGQlRTeERRVU5RTEVOQlFVTTdSMEZEU0N4RFFVRkRPMEZCUTBZc1UwRkJUeXhIUVVGSExFTkJRVU03UTBGRFdqczdRVUZGVFN4VFFVRlRMRmRCUVZjc1EwRkRla0lzVTBGQlV5eEZRVU5VTEVOQlFVTXNSVUZEUkN4RlFVRkZMRVZCUTBZc1NVRkJTU3hGUVVOS0xHMUNRVUZ0UWl4RlFVTnVRaXhYUVVGWExFVkJRMWdzVFVGQlRTeEZRVU5PTzBGQlEwRXNWMEZCVXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGblFqdFJRVUZrTEU5QlFVOHNlVVJCUVVjc1JVRkJSVHM3UVVGRGFrTXNVVUZCU1N4aFFVRmhMRWRCUVVjc1RVRkJUU3hEUVVGRE8wRkJRek5DTEZGQlEwVXNUVUZCVFN4SlFVTk9MRTlCUVU4c1NVRkJTU3hOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVsQlEzQkNMRVZCUVVVc1QwRkJUeXhMUVVGTExGTkJRVk1zUTBGQlF5eFhRVUZYTEVsQlFVa3NUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFbEJRVWtzUTBGQlFTeEJRVUZETEVWQlF6RkVPMEZCUTBFc2JVSkJRV0VzUjBGQlJ5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dExRVU14UXpzN1FVRkZSQ3hYUVVGUExFVkJRVVVzUTBGRFVDeFRRVUZUTEVWQlExUXNUMEZCVHl4RlFVTlFMRk5CUVZNc1EwRkJReXhQUVVGUExFVkJRMnBDTEZOQlFWTXNRMEZCUXl4UlFVRlJMRVZCUTJ4Q0xFOUJRVThzUTBGQlF5eEpRVUZKTEVsQlFVa3NTVUZCU1N4RlFVTndRaXhYUVVGWExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eEZRVU40UkN4aFFVRmhMRU5CUTJRc1EwRkJRenRIUVVOSU96dEJRVVZFTEUxQlFVa3NSMEZCUnl4cFFrRkJhVUlzUTBGQlF5eEZRVUZGTEVWQlFVVXNTVUZCU1N4RlFVRkZMRk5CUVZNc1JVRkJSU3hOUVVGTkxFVkJRVVVzU1VGQlNTeEZRVUZGTEZkQlFWY3NRMEZCUXl4RFFVRkRPenRCUVVWNlJTeE5RVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRU5CUVVNc1EwRkJRenRCUVVOcVFpeE5RVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTjRReXhOUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEcxQ1FVRnRRaXhKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU0xUXl4VFFVRlBMRWxCUVVrc1EwRkJRenREUVVOaU96czdPenM3UVVGTFRTeFRRVUZUTEdOQlFXTXNRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJUdEJRVU40UkN4TlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRk8wRkJRMW9zVVVGQlNTeFBRVUZQTEVOQlFVTXNTVUZCU1N4TFFVRkxMR2RDUVVGblFpeEZRVUZGTzBGQlEzSkRMR0ZCUVU4c1IwRkJSeXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPMHRCUTNwRExFMUJRVTA3UVVGRFRDeGhRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTMEZETVVNN1IwRkRSaXhOUVVGTkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUlVGQlJUczdRVUZGZWtNc1YwRkJUeXhEUVVGRExFbEJRVWtzUjBGQlJ5eFBRVUZQTEVOQlFVTTdRVUZEZGtJc1YwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1IwRkRja003UVVGRFJDeFRRVUZQTEU5QlFVOHNRMEZCUXp0RFFVTm9RanM3UVVGRlRTeFRRVUZUTEdGQlFXRXNRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJUczdRVUZGZGtRc1RVRkJUU3h0UWtGQmJVSXNSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hKUVVGSkxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNN1FVRkRNVVVzVTBGQlR5eERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNN1FVRkRka0lzVFVGQlNTeFBRVUZQTEVOQlFVTXNSMEZCUnl4RlFVRkZPMEZCUTJZc1YwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVkQlFVY3NUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJRenRIUVVOMlJUczdRVUZGUkN4TlFVRkpMRmxCUVZrc1dVRkJRU3hEUVVGRE8wRkJRMnBDTEUxQlFVa3NUMEZCVHl4RFFVRkRMRVZCUVVVc1NVRkJTU3hQUVVGUExFTkJRVU1zUlVGQlJTeExRVUZMTEVsQlFVa3NSVUZCUlRzN1FVRkRja01zWVVGQlR5eERRVUZETEVsQlFVa3NSMEZCUnl4clFrRkJXU3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdPMEZCUlhwRExGVkJRVWtzUlVGQlJTeEhRVUZITEU5QlFVOHNRMEZCUXl4RlFVRkZMRU5CUVVNN1FVRkRjRUlzYTBKQlFWa3NSMEZCUnl4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eEhRVUZITEZOQlFWTXNiVUpCUVcxQ0xFTkJRM3BGTEU5QlFVOHNSVUZGVUR0WlFVUkJMRTlCUVU4c2VVUkJRVWNzUlVGQlJUczdPenRCUVVsYUxHVkJRVThzUTBGQlF5eEpRVUZKTEVkQlFVY3NhMEpCUVZrc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBGQlEzcERMR1ZCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEVkQlFVY3NiVUpCUVcxQ0xFTkJRVU03UVVGRGNFUXNaVUZCVHl4RlFVRkZMRU5CUVVNc1QwRkJUeXhGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETzA5QlF6ZENMRU5CUVVNN1FVRkRSaXhWUVVGSkxFVkJRVVVzUTBGQlF5eFJRVUZSTEVWQlFVVTdRVUZEWml4bFFVRlBMRU5CUVVNc1VVRkJVU3hIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4RlFVRkZMRTlCUVU4c1EwRkJReXhSUVVGUkxFVkJRVVVzUlVGQlJTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMDlCUTNCRk96dEhRVU5HT3p0QlFVVkVMRTFCUVVrc1QwRkJUeXhMUVVGTExGTkJRVk1zU1VGQlNTeFpRVUZaTEVWQlFVVTdRVUZEZWtNc1YwRkJUeXhIUVVGSExGbEJRVmtzUTBGQlF6dEhRVU40UWpzN1FVRkZSQ3hOUVVGSkxFOUJRVThzUzBGQlN5eFRRVUZUTEVWQlFVVTdRVUZEZWtJc1ZVRkJUU3d5UWtGQll5eGpRVUZqTEVkQlFVY3NUMEZCVHl4RFFVRkRMRWxCUVVrc1IwRkJSeXh4UWtGQmNVSXNRMEZCUXl4RFFVRkRPMGRCUXpWRkxFMUJRVTBzU1VGQlNTeFBRVUZQTEZsQlFWa3NVVUZCVVN4RlFVRkZPMEZCUTNSRExGZEJRVThzVDBGQlR5eERRVUZETEU5QlFVOHNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRIUVVOc1F6dERRVU5HT3p0QlFVVk5MRk5CUVZNc1NVRkJTU3hIUVVGSE8wRkJRM0pDTEZOQlFVOHNSVUZCUlN4RFFVRkRPME5CUTFnN08wRkJSVVFzVTBGQlV5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RlFVRkZMRWxCUVVrc1JVRkJSVHRCUVVNdlFpeE5RVUZKTEVOQlFVTXNTVUZCU1N4SlFVRkpMRVZCUVVVc1RVRkJUU3hKUVVGSkxFbEJRVWtzUTBGQlFTeEJRVUZETEVWQlFVVTdRVUZET1VJc1VVRkJTU3hIUVVGSExFbEJRVWtzUjBGQlJ5eHJRa0ZCV1N4SlFVRkpMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU03UVVGRGNrTXNVVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhQUVVGUExFTkJRVU03UjBGRGNrSTdRVUZEUkN4VFFVRlBMRWxCUVVrc1EwRkJRenREUVVOaU96dEJRVVZFTEZOQlFWTXNhVUpCUVdsQ0xFTkJRVU1zUlVGQlJTeEZRVUZGTEVsQlFVa3NSVUZCUlN4VFFVRlRMRVZCUVVVc1RVRkJUU3hGUVVGRkxFbEJRVWtzUlVGQlJTeFhRVUZYTEVWQlFVVTdRVUZEZWtVc1RVRkJTU3hGUVVGRkxFTkJRVU1zVTBGQlV5eEZRVUZGTzBGQlEyaENMRkZCUVVrc1MwRkJTeXhIUVVGSExFVkJRVVVzUTBGQlF6dEJRVU5tTEZGQlFVa3NSMEZCUnl4RlFVRkZMRU5CUVVNc1UwRkJVeXhEUVVOcVFpeEpRVUZKTEVWQlEwb3NTMEZCU3l4RlFVTk1MRk5CUVZNc1JVRkRWQ3hOUVVGTkxFbEJRVWtzVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVTnVRaXhKUVVGSkxFVkJRMG9zVjBGQlZ5eEZRVU5ZTEUxQlFVMHNRMEZEVUN4RFFVRkRPMEZCUTBZc1UwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1IwRkRNMEk3UVVGRFJDeFRRVUZQTEVsQlFVa3NRMEZCUXp0RFFVTmlPenRCUVVWRUxGTkJRVk1zSzBKQlFTdENMRU5CUVVNc1lVRkJZU3hGUVVGRkxGTkJRVk1zUlVGQlJUdEJRVU5xUlN4UlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRkJMRlZCUVZVc1JVRkJTVHRCUVVNdlF5eFJRVUZKTEUxQlFVMHNSMEZCUnl4aFFVRmhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03UVVGRGRrTXNhVUpCUVdFc1EwRkJReXhWUVVGVkxFTkJRVU1zUjBGQlJ5eDNRa0ZCZDBJc1EwRkJReXhOUVVGTkxFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTTdSMEZEZWtVc1EwRkJReXhEUVVGRE8wTkJRMG83TzBGQlJVUXNVMEZCVXl4M1FrRkJkMElzUTBGQlF5eE5RVUZOTEVWQlFVVXNVMEZCVXl4RlFVRkZPMEZCUTI1RUxFMUJRVTBzWTBGQll5eEhRVUZITEZOQlFWTXNRMEZCUXl4alFVRmpMRU5CUVVNN1FVRkRhRVFzVTBGQlR5d3JRa0ZCVnl4TlFVRk5MRVZCUVVVc1ZVRkJRU3hQUVVGUExFVkJRVWs3UVVGRGJrTXNWMEZCVHl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzWTBGQll5eEZRVUZrTEdOQlFXTXNSVUZCUlN4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRE8wZEJRMnhFTEVOQlFVTXNRMEZCUXp0RFFVTktJaXdpWm1sc1pTSTZJbkoxYm5ScGJXVXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnS2lCaGN5QlZkR2xzY3lCbWNtOXRJQ2N1TDNWMGFXeHpKenRjYm1sdGNHOXlkQ0JGZUdObGNIUnBiMjRnWm5KdmJTQW5MaTlsZUdObGNIUnBiMjRuTzF4dWFXMXdiM0owSUh0Y2JpQWdRMDlOVUVsTVJWSmZVa1ZXU1ZOSlQwNHNYRzRnSUdOeVpXRjBaVVp5WVcxbExGeHVJQ0JNUVZOVVgwTlBUVkJCVkVsQ1RFVmZRMDlOVUVsTVJWSmZVa1ZXU1ZOSlQwNHNYRzRnSUZKRlZrbFRTVTlPWDBOSVFVNUhSVk5jYm4wZ1puSnZiU0FuTGk5aVlYTmxKenRjYm1sdGNHOXlkQ0I3SUcxdmRtVklaV3h3WlhKVWIwaHZiMnR6SUgwZ1puSnZiU0FuTGk5b1pXeHdaWEp6Snp0Y2JtbHRjRzl5ZENCN0lIZHlZWEJJWld4d1pYSWdmU0JtY205dElDY3VMMmx1ZEdWeWJtRnNMM2R5WVhCSVpXeHdaWEluTzF4dWFXMXdiM0owSUh0Y2JpQWdZM0psWVhSbFVISnZkRzlCWTJObGMzTkRiMjUwY205c0xGeHVJQ0J5WlhOMWJIUkpjMEZzYkc5M1pXUmNibjBnWm5KdmJTQW5MaTlwYm5SbGNtNWhiQzl3Y205MGJ5MWhZMk5sYzNNbk8xeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdZMmhsWTJ0U1pYWnBjMmx2YmloamIyMXdhV3hsY2tsdVptOHBJSHRjYmlBZ1kyOXVjM1FnWTI5dGNHbHNaWEpTWlhacGMybHZiaUE5SUNoamIyMXdhV3hsY2tsdVptOGdKaVlnWTI5dGNHbHNaWEpKYm1adld6QmRLU0I4ZkNBeExGeHVJQ0FnSUdOMWNuSmxiblJTWlhacGMybHZiaUE5SUVOUFRWQkpURVZTWDFKRlZrbFRTVTlPTzF4dVhHNGdJR2xtSUNoY2JpQWdJQ0JqYjIxd2FXeGxjbEpsZG1semFXOXVJRDQ5SUV4QlUxUmZRMDlOVUVGVVNVSk1SVjlEVDAxUVNVeEZVbDlTUlZaSlUwbFBUaUFtSmx4dUlDQWdJR052YlhCcGJHVnlVbVYyYVhOcGIyNGdQRDBnUTA5TlVFbE1SVkpmVWtWV1NWTkpUMDVjYmlBZ0tTQjdYRzRnSUNBZ2NtVjBkWEp1TzF4dUlDQjlYRzVjYmlBZ2FXWWdLR052YlhCcGJHVnlVbVYyYVhOcGIyNGdQQ0JNUVZOVVgwTlBUVkJCVkVsQ1RFVmZRMDlOVUVsTVJWSmZVa1ZXU1ZOSlQwNHBJSHRjYmlBZ0lDQmpiMjV6ZENCeWRXNTBhVzFsVm1WeWMybHZibk1nUFNCU1JWWkpVMGxQVGw5RFNFRk9SMFZUVzJOMWNuSmxiblJTWlhacGMybHZibDBzWEc0Z0lDQWdJQ0JqYjIxd2FXeGxjbFpsY25OcGIyNXpJRDBnVWtWV1NWTkpUMDVmUTBoQlRrZEZVMXRqYjIxd2FXeGxjbEpsZG1semFXOXVYVHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWGhqWlhCMGFXOXVLRnh1SUNBZ0lDQWdKMVJsYlhCc1lYUmxJSGRoY3lCd2NtVmpiMjF3YVd4bFpDQjNhWFJvSUdGdUlHOXNaR1Z5SUhabGNuTnBiMjRnYjJZZ1NHRnVaR3hsWW1GeWN5QjBhR0Z1SUhSb1pTQmpkWEp5Wlc1MElISjFiblJwYldVdUlDY2dLMXh1SUNBZ0lDQWdJQ0FuVUd4bFlYTmxJSFZ3WkdGMFpTQjViM1Z5SUhCeVpXTnZiWEJwYkdWeUlIUnZJR0VnYm1WM1pYSWdkbVZ5YzJsdmJpQW9KeUFyWEc0Z0lDQWdJQ0FnSUhKMWJuUnBiV1ZXWlhKemFXOXVjeUFyWEc0Z0lDQWdJQ0FnSUNjcElHOXlJR1J2ZDI1bmNtRmtaU0I1YjNWeUlISjFiblJwYldVZ2RHOGdZVzRnYjJ4a1pYSWdkbVZ5YzJsdmJpQW9KeUFyWEc0Z0lDQWdJQ0FnSUdOdmJYQnBiR1Z5Vm1WeWMybHZibk1nSzF4dUlDQWdJQ0FnSUNBbktTNG5YRzRnSUNBZ0tUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQXZMeUJWYzJVZ2RHaGxJR1Z0WW1Wa1pHVmtJSFpsY25OcGIyNGdhVzVtYnlCemFXNWpaU0IwYUdVZ2NuVnVkR2x0WlNCa2IyVnpiaWQwSUd0dWIzY2dZV0p2ZFhRZ2RHaHBjeUJ5WlhacGMybHZiaUI1WlhSY2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhoalpYQjBhVzl1S0Z4dUlDQWdJQ0FnSjFSbGJYQnNZWFJsSUhkaGN5QndjbVZqYjIxd2FXeGxaQ0IzYVhSb0lHRWdibVYzWlhJZ2RtVnljMmx2YmlCdlppQklZVzVrYkdWaVlYSnpJSFJvWVc0Z2RHaGxJR04xY25KbGJuUWdjblZ1ZEdsdFpTNGdKeUFyWEc0Z0lDQWdJQ0FnSUNkUWJHVmhjMlVnZFhCa1lYUmxJSGx2ZFhJZ2NuVnVkR2x0WlNCMGJ5QmhJRzVsZDJWeUlIWmxjbk5wYjI0Z0tDY2dLMXh1SUNBZ0lDQWdJQ0JqYjIxd2FXeGxja2x1Wm05Yk1WMGdLMXh1SUNBZ0lDQWdJQ0FuS1M0blhHNGdJQ0FnS1R0Y2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2RHVnRjR3hoZEdVb2RHVnRjR3hoZEdWVGNHVmpMQ0JsYm5ZcElIdGNiaUFnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUc1bGVIUWdLaTljYmlBZ2FXWWdLQ0ZsYm5ZcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYaGpaWEIwYVc5dUtDZE9ieUJsYm5acGNtOXViV1Z1ZENCd1lYTnpaV1FnZEc4Z2RHVnRjR3hoZEdVbktUdGNiaUFnZlZ4dUlDQnBaaUFvSVhSbGJYQnNZWFJsVTNCbFl5QjhmQ0FoZEdWdGNHeGhkR1ZUY0dWakxtMWhhVzRwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhoalpYQjBhVzl1S0NkVmJtdHViM2R1SUhSbGJYQnNZWFJsSUc5aWFtVmpkRG9nSnlBcklIUjVjR1Z2WmlCMFpXMXdiR0YwWlZOd1pXTXBPMXh1SUNCOVhHNWNiaUFnZEdWdGNHeGhkR1ZUY0dWakxtMWhhVzR1WkdWamIzSmhkRzl5SUQwZ2RHVnRjR3hoZEdWVGNHVmpMbTFoYVc1ZlpEdGNibHh1SUNBdkx5Qk9iM1JsT2lCVmMybHVaeUJsYm5ZdVZrMGdjbVZtWlhKbGJtTmxjeUJ5WVhSb1pYSWdkR2hoYmlCc2IyTmhiQ0IyWVhJZ2NtVm1aWEpsYm1ObGN5QjBhSEp2ZFdkb2IzVjBJSFJvYVhNZ2MyVmpkR2x2YmlCMGJ5QmhiR3h2ZDF4dUlDQXZMeUJtYjNJZ1pYaDBaWEp1WVd3Z2RYTmxjbk1nZEc4Z2IzWmxjbkpwWkdVZ2RHaGxjMlVnWVhNZ2NITmxkV1J2TFhOMWNIQnZjblJsWkNCQlVFbHpMbHh1SUNCbGJuWXVWazB1WTJobFkydFNaWFpwYzJsdmJpaDBaVzF3YkdGMFpWTndaV011WTI5dGNHbHNaWElwTzF4dVhHNGdJQzh2SUdKaFkydDNZWEprY3lCamIyMXdZWFJwWW1sc2FYUjVJR1p2Y2lCd2NtVmpiMjF3YVd4bFpDQjBaVzF3YkdGMFpYTWdkMmwwYUNCamIyMXdhV3hsY2kxMlpYSnphVzl1SURjZ0tEdzBMak11TUNsY2JpQWdZMjl1YzNRZ2RHVnRjR3hoZEdWWFlYTlFjbVZqYjIxd2FXeGxaRmRwZEdoRGIyMXdhV3hsY2xZM0lEMWNiaUFnSUNCMFpXMXdiR0YwWlZOd1pXTXVZMjl0Y0dsc1pYSWdKaVlnZEdWdGNHeGhkR1ZUY0dWakxtTnZiWEJwYkdWeVd6QmRJRDA5UFNBM08xeHVYRzRnSUdaMWJtTjBhVzl1SUdsdWRtOXJaVkJoY25ScFlXeFhjbUZ3Y0dWeUtIQmhjblJwWVd3c0lHTnZiblJsZUhRc0lHOXdkR2x2Ym5NcElIdGNiaUFnSUNCcFppQW9iM0IwYVc5dWN5NW9ZWE5vS1NCN1hHNGdJQ0FnSUNCamIyNTBaWGgwSUQwZ1ZYUnBiSE11WlhoMFpXNWtLSHQ5TENCamIyNTBaWGgwTENCdmNIUnBiMjV6TG1oaGMyZ3BPMXh1SUNBZ0lDQWdhV1lnS0c5d2RHbHZibk11YVdSektTQjdYRzRnSUNBZ0lDQWdJRzl3ZEdsdmJuTXVhV1J6V3pCZElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjR0Z5ZEdsaGJDQTlJR1Z1ZGk1V1RTNXlaWE52YkhabFVHRnlkR2xoYkM1allXeHNLSFJvYVhNc0lIQmhjblJwWVd3c0lHTnZiblJsZUhRc0lHOXdkR2x2Ym5NcE8xeHVYRzRnSUNBZ2JHVjBJR1Y0ZEdWdVpHVmtUM0IwYVc5dWN5QTlJRlYwYVd4ekxtVjRkR1Z1WkNoN2ZTd2diM0IwYVc5dWN5d2dlMXh1SUNBZ0lDQWdhRzl2YTNNNklIUm9hWE11YUc5dmEzTXNYRzRnSUNBZ0lDQndjbTkwYjBGalkyVnpjME52Ym5SeWIydzZJSFJvYVhNdWNISnZkRzlCWTJObGMzTkRiMjUwY205c1hHNGdJQ0FnZlNrN1hHNWNiaUFnSUNCc1pYUWdjbVZ6ZFd4MElEMGdaVzUyTGxaTkxtbHVkbTlyWlZCaGNuUnBZV3d1WTJGc2JDaGNiaUFnSUNBZ0lIUm9hWE1zWEc0Z0lDQWdJQ0J3WVhKMGFXRnNMRnh1SUNBZ0lDQWdZMjl1ZEdWNGRDeGNiaUFnSUNBZ0lHVjRkR1Z1WkdWa1QzQjBhVzl1YzF4dUlDQWdJQ2s3WEc1Y2JpQWdJQ0JwWmlBb2NtVnpkV3gwSUQwOUlHNTFiR3dnSmlZZ1pXNTJMbU52YlhCcGJHVXBJSHRjYmlBZ0lDQWdJRzl3ZEdsdmJuTXVjR0Z5ZEdsaGJITmJiM0IwYVc5dWN5NXVZVzFsWFNBOUlHVnVkaTVqYjIxd2FXeGxLRnh1SUNBZ0lDQWdJQ0J3WVhKMGFXRnNMRnh1SUNBZ0lDQWdJQ0IwWlcxd2JHRjBaVk53WldNdVkyOXRjR2xzWlhKUGNIUnBiMjV6TEZ4dUlDQWdJQ0FnSUNCbGJuWmNiaUFnSUNBZ0lDazdYRzRnSUNBZ0lDQnlaWE4xYkhRZ1BTQnZjSFJwYjI1ekxuQmhjblJwWVd4elcyOXdkR2x2Ym5NdWJtRnRaVjBvWTI5dWRHVjRkQ3dnWlhoMFpXNWtaV1JQY0hScGIyNXpLVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSEpsYzNWc2RDQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeTVwYm1SbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnYkdWMElHeHBibVZ6SUQwZ2NtVnpkV3gwTG5Od2JHbDBLQ2RjWEc0bktUdGNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBc0lHd2dQU0JzYVc1bGN5NXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9JV3hwYm1WelcybGRJQ1ltSUdrZ0t5QXhJRDA5UFNCc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0JzYVc1bGMxdHBYU0E5SUc5d2RHbHZibk11YVc1a1pXNTBJQ3NnYkdsdVpYTmJhVjA3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVnpkV3gwSUQwZ2JHbHVaWE11YW05cGJpZ25YRnh1SnlrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYaGpaWEIwYVc5dUtGeHVJQ0FnSUNBZ0lDQW5WR2hsSUhCaGNuUnBZV3dnSnlBclhHNGdJQ0FnSUNBZ0lDQWdiM0IwYVc5dWN5NXVZVzFsSUN0Y2JpQWdJQ0FnSUNBZ0lDQW5JR052ZFd4a0lHNXZkQ0JpWlNCamIyMXdhV3hsWkNCM2FHVnVJSEoxYm01cGJtY2dhVzRnY25WdWRHbHRaUzF2Ym14NUlHMXZaR1VuWEc0Z0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4dklFcDFjM1FnWVdSa0lIZGhkR1Z5WEc0Z0lHeGxkQ0JqYjI1MFlXbHVaWElnUFNCN1hHNGdJQ0FnYzNSeWFXTjBPaUJtZFc1amRHbHZiaWh2WW1vc0lHNWhiV1VzSUd4dll5a2dlMXh1SUNBZ0lDQWdhV1lnS0NGdlltb2dmSHdnSVNodVlXMWxJR2x1SUc5aWFpa3BJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWNFkyVndkR2x2YmlnblhDSW5JQ3NnYm1GdFpTQXJJQ2RjSWlCdWIzUWdaR1ZtYVc1bFpDQnBiaUFuSUNzZ2IySnFMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ2JHOWpPaUJzYjJOY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z1kyOXVkR0ZwYm1WeUxteHZiMnQxY0ZCeWIzQmxjblI1S0c5aWFpd2dibUZ0WlNrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JzYjI5cmRYQlFjbTl3WlhKMGVUb2dablZ1WTNScGIyNG9jR0Z5Wlc1MExDQndjbTl3WlhKMGVVNWhiV1VwSUh0Y2JpQWdJQ0FnSUd4bGRDQnlaWE4xYkhRZ1BTQndZWEpsYm5SYmNISnZjR1Z5ZEhsT1lXMWxYVHRjYmlBZ0lDQWdJR2xtSUNoeVpYTjFiSFFnUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0U5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNod1lYSmxiblFzSUhCeWIzQmxjblI1VG1GdFpTa3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0hKbGMzVnNkRWx6UVd4c2IzZGxaQ2h5WlhOMWJIUXNJR052Ym5SaGFXNWxjaTV3Y205MGIwRmpZMlZ6YzBOdmJuUnliMndzSUhCeWIzQmxjblI1VG1GdFpTa3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCMWJtUmxabWx1WldRN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JzYjI5cmRYQTZJR1oxYm1OMGFXOXVLR1JsY0hSb2N5d2dibUZ0WlNrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnYkdWdUlEMGdaR1Z3ZEdoekxteGxibWQwYUR0Y2JpQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2JHVnVPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdiR1YwSUhKbGMzVnNkQ0E5SUdSbGNIUm9jMXRwWFNBbUppQmpiMjUwWVdsdVpYSXViRzl2YTNWd1VISnZjR1Z5ZEhrb1pHVndkR2h6VzJsZExDQnVZVzFsS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEpsYzNWc2RDQWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1JsY0hSb2MxdHBYVnR1WVcxbFhUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzRnSUNBZ2JHRnRZbVJoT2lCbWRXNWpkR2x2YmloamRYSnlaVzUwTENCamIyNTBaWGgwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEhsd1pXOW1JR04xY25KbGJuUWdQVDA5SUNkbWRXNWpkR2x2YmljZ1B5QmpkWEp5Wlc1MExtTmhiR3dvWTI5dWRHVjRkQ2tnT2lCamRYSnlaVzUwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JsYzJOaGNHVkZlSEJ5WlhOemFXOXVPaUJWZEdsc2N5NWxjMk5oY0dWRmVIQnlaWE56YVc5dUxGeHVJQ0FnSUdsdWRtOXJaVkJoY25ScFlXdzZJR2x1ZG05clpWQmhjblJwWVd4WGNtRndjR1Z5TEZ4dVhHNGdJQ0FnWm00NklHWjFibU4wYVc5dUtHa3BJSHRjYmlBZ0lDQWdJR3hsZENCeVpYUWdQU0IwWlcxd2JHRjBaVk53WldOYmFWMDdYRzRnSUNBZ0lDQnlaWFF1WkdWamIzSmhkRzl5SUQwZ2RHVnRjR3hoZEdWVGNHVmpXMmtnS3lBblgyUW5YVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnlaWFE3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSEJ5YjJkeVlXMXpPaUJiWFN4Y2JpQWdJQ0J3Y205bmNtRnRPaUJtZFc1amRHbHZiaWhwTENCa1lYUmhMQ0JrWldOc1lYSmxaRUpzYjJOclVHRnlZVzF6TENCaWJHOWphMUJoY21GdGN5d2daR1Z3ZEdoektTQjdYRzRnSUNBZ0lDQnNaWFFnY0hKdlozSmhiVmR5WVhCd1pYSWdQU0IwYUdsekxuQnliMmR5WVcxelcybGRMRnh1SUNBZ0lDQWdJQ0JtYmlBOUlIUm9hWE11Wm00b2FTazdYRzRnSUNBZ0lDQnBaaUFvWkdGMFlTQjhmQ0JrWlhCMGFITWdmSHdnWW14dlkydFFZWEpoYlhNZ2ZId2daR1ZqYkdGeVpXUkNiRzlqYTFCaGNtRnRjeWtnZTF4dUlDQWdJQ0FnSUNCd2NtOW5jbUZ0VjNKaGNIQmxjaUE5SUhkeVlYQlFjbTluY21GdEtGeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNc1hHNGdJQ0FnSUNBZ0lDQWdhU3hjYmlBZ0lDQWdJQ0FnSUNCbWJpeGNiaUFnSUNBZ0lDQWdJQ0JrWVhSaExGeHVJQ0FnSUNBZ0lDQWdJR1JsWTJ4aGNtVmtRbXh2WTJ0UVlYSmhiWE1zWEc0Z0lDQWdJQ0FnSUNBZ1lteHZZMnRRWVhKaGJYTXNYRzRnSUNBZ0lDQWdJQ0FnWkdWd2RHaHpYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0NGd2NtOW5jbUZ0VjNKaGNIQmxjaWtnZTF4dUlDQWdJQ0FnSUNCd2NtOW5jbUZ0VjNKaGNIQmxjaUE5SUhSb2FYTXVjSEp2WjNKaGJYTmJhVjBnUFNCM2NtRndVSEp2WjNKaGJTaDBhR2x6TENCcExDQm1iaWs3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjSEp2WjNKaGJWZHlZWEJ3WlhJN1hHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdSaGRHRTZJR1oxYm1OMGFXOXVLSFpoYkhWbExDQmtaWEIwYUNrZ2UxeHVJQ0FnSUNBZ2QyaHBiR1VnS0haaGJIVmxJQ1ltSUdSbGNIUm9MUzBwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnNkV1VnUFNCMllXeDFaUzVmY0dGeVpXNTBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlIWmhiSFZsTzF4dUlDQWdJSDBzWEc0Z0lDQWdiV1Z5WjJWSlprNWxaV1JsWkRvZ1puVnVZM1JwYjI0b2NHRnlZVzBzSUdOdmJXMXZiaWtnZTF4dUlDQWdJQ0FnYkdWMElHOWlhaUE5SUhCaGNtRnRJSHg4SUdOdmJXMXZianRjYmx4dUlDQWdJQ0FnYVdZZ0tIQmhjbUZ0SUNZbUlHTnZiVzF2YmlBbUppQndZWEpoYlNBaFBUMGdZMjl0Ylc5dUtTQjdYRzRnSUNBZ0lDQWdJRzlpYWlBOUlGVjBhV3h6TG1WNGRHVnVaQ2g3ZlN3Z1kyOXRiVzl1TENCd1lYSmhiU2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJ2WW1vN1hHNGdJQ0FnZlN4Y2JpQWdJQ0F2THlCQmJpQmxiWEIwZVNCdlltcGxZM1FnZEc4Z2RYTmxJR0Z6SUhKbGNHeGhZMlZ0Wlc1MElHWnZjaUJ1ZFd4c0xXTnZiblJsZUhSelhHNGdJQ0FnYm5Wc2JFTnZiblJsZUhRNklFOWlhbVZqZEM1elpXRnNLSHQ5S1N4Y2JseHVJQ0FnSUc1dmIzQTZJR1Z1ZGk1V1RTNXViMjl3TEZ4dUlDQWdJR052YlhCcGJHVnlTVzVtYnpvZ2RHVnRjR3hoZEdWVGNHVmpMbU52YlhCcGJHVnlYRzRnSUgwN1hHNWNiaUFnWm5WdVkzUnBiMjRnY21WMEtHTnZiblJsZUhRc0lHOXdkR2x2Ym5NZ1BTQjdmU2tnZTF4dUlDQWdJR3hsZENCa1lYUmhJRDBnYjNCMGFXOXVjeTVrWVhSaE8xeHVYRzRnSUNBZ2NtVjBMbDl6WlhSMWNDaHZjSFJwYjI1ektUdGNiaUFnSUNCcFppQW9JVzl3ZEdsdmJuTXVjR0Z5ZEdsaGJDQW1KaUIwWlcxd2JHRjBaVk53WldNdWRYTmxSR0YwWVNrZ2UxeHVJQ0FnSUNBZ1pHRjBZU0E5SUdsdWFYUkVZWFJoS0dOdmJuUmxlSFFzSUdSaGRHRXBPMXh1SUNBZ0lIMWNiaUFnSUNCc1pYUWdaR1Z3ZEdoekxGeHVJQ0FnSUNBZ1lteHZZMnRRWVhKaGJYTWdQU0IwWlcxd2JHRjBaVk53WldNdWRYTmxRbXh2WTJ0UVlYSmhiWE1nUHlCYlhTQTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQnBaaUFvZEdWdGNHeGhkR1ZUY0dWakxuVnpaVVJsY0hSb2N5a2dlMXh1SUNBZ0lDQWdhV1lnS0c5d2RHbHZibk11WkdWd2RHaHpLU0I3WEc0Z0lDQWdJQ0FnSUdSbGNIUm9jeUE5WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkR1Y0ZENBaFBTQnZjSFJwYjI1ekxtUmxjSFJvYzFzd1hWeHVJQ0FnSUNBZ0lDQWdJQ0FnUHlCYlkyOXVkR1Y0ZEYwdVkyOXVZMkYwS0c5d2RHbHZibk11WkdWd2RHaHpLVnh1SUNBZ0lDQWdJQ0FnSUNBZ09pQnZjSFJwYjI1ekxtUmxjSFJvY3p0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdSbGNIUm9jeUE5SUZ0amIyNTBaWGgwWFR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JtZFc1amRHbHZiaUJ0WVdsdUtHTnZiblJsZUhRZ0x5b3NJRzl3ZEdsdmJuTXFMeWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJQ0FnSnljZ0sxeHVJQ0FnSUNBZ0lDQjBaVzF3YkdGMFpWTndaV011YldGcGJpaGNiaUFnSUNBZ0lDQWdJQ0JqYjI1MFlXbHVaWElzWEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkR1Y0ZEN4Y2JpQWdJQ0FnSUNBZ0lDQmpiMjUwWVdsdVpYSXVhR1ZzY0dWeWN5eGNiaUFnSUNBZ0lDQWdJQ0JqYjI1MFlXbHVaWEl1Y0dGeWRHbGhiSE1zWEc0Z0lDQWdJQ0FnSUNBZ1pHRjBZU3hjYmlBZ0lDQWdJQ0FnSUNCaWJHOWphMUJoY21GdGN5eGNiaUFnSUNBZ0lDQWdJQ0JrWlhCMGFITmNiaUFnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnRZV2x1SUQwZ1pYaGxZM1YwWlVSbFkyOXlZWFJ2Y25Nb1hHNGdJQ0FnSUNCMFpXMXdiR0YwWlZOd1pXTXViV0ZwYml4Y2JpQWdJQ0FnSUcxaGFXNHNYRzRnSUNBZ0lDQmpiMjUwWVdsdVpYSXNYRzRnSUNBZ0lDQnZjSFJwYjI1ekxtUmxjSFJvY3lCOGZDQmJYU3hjYmlBZ0lDQWdJR1JoZEdFc1hHNGdJQ0FnSUNCaWJHOWphMUJoY21GdGMxeHVJQ0FnSUNrN1hHNGdJQ0FnY21WMGRYSnVJRzFoYVc0b1kyOXVkR1Y0ZEN3Z2IzQjBhVzl1Y3lrN1hHNGdJSDFjYmx4dUlDQnlaWFF1YVhOVWIzQWdQU0IwY25WbE8xeHVYRzRnSUhKbGRDNWZjMlYwZFhBZ1BTQm1kVzVqZEdsdmJpaHZjSFJwYjI1ektTQjdYRzRnSUNBZ2FXWWdLQ0Z2Y0hScGIyNXpMbkJoY25ScFlXd3BJSHRjYmlBZ0lDQWdJR3hsZENCdFpYSm5aV1JJWld4d1pYSnpJRDBnVlhScGJITXVaWGgwWlc1a0tIdDlMQ0JsYm5ZdWFHVnNjR1Z5Y3l3Z2IzQjBhVzl1Y3k1b1pXeHdaWEp6S1R0Y2JpQWdJQ0FnSUhkeVlYQklaV3h3WlhKelZHOVFZWE56VEc5dmEzVndVSEp2Y0dWeWRIa29iV1Z5WjJWa1NHVnNjR1Z5Y3l3Z1kyOXVkR0ZwYm1WeUtUdGNiaUFnSUNBZ0lHTnZiblJoYVc1bGNpNW9aV3h3WlhKeklEMGdiV1Z5WjJWa1NHVnNjR1Z5Y3p0Y2JseHVJQ0FnSUNBZ2FXWWdLSFJsYlhCc1lYUmxVM0JsWXk1MWMyVlFZWEowYVdGc0tTQjdYRzRnSUNBZ0lDQWdJQzh2SUZWelpTQnRaWEpuWlVsbVRtVmxaR1ZrSUdobGNtVWdkRzhnY0hKbGRtVnVkQ0JqYjIxd2FXeHBibWNnWjJ4dlltRnNJSEJoY25ScFlXeHpJRzExYkhScGNHeGxJSFJwYldWelhHNGdJQ0FnSUNBZ0lHTnZiblJoYVc1bGNpNXdZWEowYVdGc2N5QTlJR052Ym5SaGFXNWxjaTV0WlhKblpVbG1UbVZsWkdWa0tGeHVJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTXVjR0Z5ZEdsaGJITXNYRzRnSUNBZ0lDQWdJQ0FnWlc1MkxuQmhjblJwWVd4elhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaUFvZEdWdGNHeGhkR1ZUY0dWakxuVnpaVkJoY25ScFlXd2dmSHdnZEdWdGNHeGhkR1ZUY0dWakxuVnpaVVJsWTI5eVlYUnZjbk1wSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVkR0ZwYm1WeUxtUmxZMjl5WVhSdmNuTWdQU0JWZEdsc2N5NWxlSFJsYm1Rb1hHNGdJQ0FnSUNBZ0lDQWdlMzBzWEc0Z0lDQWdJQ0FnSUNBZ1pXNTJMbVJsWTI5eVlYUnZjbk1zWEc0Z0lDQWdJQ0FnSUNBZ2IzQjBhVzl1Y3k1a1pXTnZjbUYwYjNKelhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR052Ym5SaGFXNWxjaTVvYjI5cmN5QTlJSHQ5TzF4dUlDQWdJQ0FnWTI5dWRHRnBibVZ5TG5CeWIzUnZRV05qWlhOelEyOXVkSEp2YkNBOUlHTnlaV0YwWlZCeWIzUnZRV05qWlhOelEyOXVkSEp2YkNodmNIUnBiMjV6S1R0Y2JseHVJQ0FnSUNBZ2JHVjBJR3RsWlhCSVpXeHdaWEpKYmtobGJIQmxjbk1nUFZ4dUlDQWdJQ0FnSUNCdmNIUnBiMjV6TG1Gc2JHOTNRMkZzYkhOVWIwaGxiSEJsY2sxcGMzTnBibWNnZkh4Y2JpQWdJQ0FnSUNBZ2RHVnRjR3hoZEdWWFlYTlFjbVZqYjIxd2FXeGxaRmRwZEdoRGIyMXdhV3hsY2xZM08xeHVJQ0FnSUNBZ2JXOTJaVWhsYkhCbGNsUnZTRzl2YTNNb1kyOXVkR0ZwYm1WeUxDQW5hR1ZzY0dWeVRXbHpjMmx1Wnljc0lHdGxaWEJJWld4d1pYSkpia2hsYkhCbGNuTXBPMXh1SUNBZ0lDQWdiVzkyWlVobGJIQmxjbFJ2U0c5dmEzTW9ZMjl1ZEdGcGJtVnlMQ0FuWW14dlkydElaV3h3WlhKTmFYTnphVzVuSnl3Z2EyVmxjRWhsYkhCbGNrbHVTR1ZzY0dWeWN5azdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdOdmJuUmhhVzVsY2k1d2NtOTBiMEZqWTJWemMwTnZiblJ5YjJ3Z1BTQnZjSFJwYjI1ekxuQnliM1J2UVdOalpYTnpRMjl1ZEhKdmJEc2dMeThnYVc1MFpYSnVZV3dnYjNCMGFXOXVYRzRnSUNBZ0lDQmpiMjUwWVdsdVpYSXVhR1ZzY0dWeWN5QTlJRzl3ZEdsdmJuTXVhR1ZzY0dWeWN6dGNiaUFnSUNBZ0lHTnZiblJoYVc1bGNpNXdZWEowYVdGc2N5QTlJRzl3ZEdsdmJuTXVjR0Z5ZEdsaGJITTdYRzRnSUNBZ0lDQmpiMjUwWVdsdVpYSXVaR1ZqYjNKaGRHOXljeUE5SUc5d2RHbHZibk11WkdWamIzSmhkRzl5Y3p0Y2JpQWdJQ0FnSUdOdmJuUmhhVzVsY2k1b2IyOXJjeUE5SUc5d2RHbHZibk11YUc5dmEzTTdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dVhHNGdJSEpsZEM1ZlkyaHBiR1FnUFNCbWRXNWpkR2x2YmlocExDQmtZWFJoTENCaWJHOWphMUJoY21GdGN5d2daR1Z3ZEdoektTQjdYRzRnSUNBZ2FXWWdLSFJsYlhCc1lYUmxVM0JsWXk1MWMyVkNiRzlqYTFCaGNtRnRjeUFtSmlBaFlteHZZMnRRWVhKaGJYTXBJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGZUdObGNIUnBiMjRvSjIxMWMzUWdjR0Z6Y3lCaWJHOWpheUJ3WVhKaGJYTW5LVHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFJsYlhCc1lYUmxVM0JsWXk1MWMyVkVaWEIwYUhNZ0ppWWdJV1JsY0hSb2N5a2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVY0WTJWd2RHbHZiaWduYlhWemRDQndZWE56SUhCaGNtVnVkQ0JrWlhCMGFITW5LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2QzSmhjRkJ5YjJkeVlXMG9YRzRnSUNBZ0lDQmpiMjUwWVdsdVpYSXNYRzRnSUNBZ0lDQnBMRnh1SUNBZ0lDQWdkR1Z0Y0d4aGRHVlRjR1ZqVzJsZExGeHVJQ0FnSUNBZ1pHRjBZU3hjYmlBZ0lDQWdJREFzWEc0Z0lDQWdJQ0JpYkc5amExQmhjbUZ0Y3l4Y2JpQWdJQ0FnSUdSbGNIUm9jMXh1SUNBZ0lDazdYRzRnSUgwN1hHNGdJSEpsZEhWeWJpQnlaWFE3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQjNjbUZ3VUhKdlozSmhiU2hjYmlBZ1kyOXVkR0ZwYm1WeUxGeHVJQ0JwTEZ4dUlDQm1iaXhjYmlBZ1pHRjBZU3hjYmlBZ1pHVmpiR0Z5WldSQ2JHOWphMUJoY21GdGN5eGNiaUFnWW14dlkydFFZWEpoYlhNc1hHNGdJR1JsY0hSb2MxeHVLU0I3WEc0Z0lHWjFibU4wYVc5dUlIQnliMmNvWTI5dWRHVjRkQ3dnYjNCMGFXOXVjeUE5SUh0OUtTQjdYRzRnSUNBZ2JHVjBJR04xY25KbGJuUkVaWEIwYUhNZ1BTQmtaWEIwYUhNN1hHNGdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ1pHVndkR2h6SUNZbVhHNGdJQ0FnSUNCamIyNTBaWGgwSUNFOUlHUmxjSFJvYzFzd1hTQW1KbHh1SUNBZ0lDQWdJU2hqYjI1MFpYaDBJRDA5UFNCamIyNTBZV2x1WlhJdWJuVnNiRU52Ym5SbGVIUWdKaVlnWkdWd2RHaHpXekJkSUQwOVBTQnVkV3hzS1Z4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnWTNWeWNtVnVkRVJsY0hSb2N5QTlJRnRqYjI1MFpYaDBYUzVqYjI1allYUW9aR1Z3ZEdoektUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWm00b1hHNGdJQ0FnSUNCamIyNTBZV2x1WlhJc1hHNGdJQ0FnSUNCamIyNTBaWGgwTEZ4dUlDQWdJQ0FnWTI5dWRHRnBibVZ5TG1obGJIQmxjbk1zWEc0Z0lDQWdJQ0JqYjI1MFlXbHVaWEl1Y0dGeWRHbGhiSE1zWEc0Z0lDQWdJQ0J2Y0hScGIyNXpMbVJoZEdFZ2ZId2daR0YwWVN4Y2JpQWdJQ0FnSUdKc2IyTnJVR0Z5WVcxeklDWW1JRnR2Y0hScGIyNXpMbUpzYjJOclVHRnlZVzF6WFM1amIyNWpZWFFvWW14dlkydFFZWEpoYlhNcExGeHVJQ0FnSUNBZ1kzVnljbVZ1ZEVSbGNIUm9jMXh1SUNBZ0lDazdYRzRnSUgxY2JseHVJQ0J3Y205bklEMGdaWGhsWTNWMFpVUmxZMjl5WVhSdmNuTW9abTRzSUhCeWIyY3NJR052Ym5SaGFXNWxjaXdnWkdWd2RHaHpMQ0JrWVhSaExDQmliRzlqYTFCaGNtRnRjeWs3WEc1Y2JpQWdjSEp2Wnk1d2NtOW5jbUZ0SUQwZ2FUdGNiaUFnY0hKdlp5NWtaWEIwYUNBOUlHUmxjSFJvY3lBL0lHUmxjSFJvY3k1c1pXNW5kR2dnT2lBd08xeHVJQ0J3Y205bkxtSnNiMk5yVUdGeVlXMXpJRDBnWkdWamJHRnlaV1JDYkc5amExQmhjbUZ0Y3lCOGZDQXdPMXh1SUNCeVpYUjFjbTRnY0hKdlp6dGNibjFjYmx4dUx5b3FYRzRnS2lCVWFHbHpJR2x6SUdOMWNuSmxiblJzZVNCd1lYSjBJRzltSUhSb1pTQnZabVpwWTJsaGJDQkJVRWtzSUhSb1pYSmxabTl5WlNCcGJYQnNaVzFsYm5SaGRHbHZiaUJrWlhSaGFXeHpJSE5vYjNWc1pDQnViM1FnWW1VZ1kyaGhibWRsWkM1Y2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSEpsYzI5c2RtVlFZWEowYVdGc0tIQmhjblJwWVd3c0lHTnZiblJsZUhRc0lHOXdkR2x2Ym5NcElIdGNiaUFnYVdZZ0tDRndZWEowYVdGc0tTQjdYRzRnSUNBZ2FXWWdLRzl3ZEdsdmJuTXVibUZ0WlNBOVBUMGdKMEJ3WVhKMGFXRnNMV0pzYjJOckp5a2dlMXh1SUNBZ0lDQWdjR0Z5ZEdsaGJDQTlJRzl3ZEdsdmJuTXVaR0YwWVZzbmNHRnlkR2xoYkMxaWJHOWpheWRkTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQndZWEowYVdGc0lEMGdiM0IwYVc5dWN5NXdZWEowYVdGc2MxdHZjSFJwYjI1ekxtNWhiV1ZkTzF4dUlDQWdJSDFjYmlBZ2ZTQmxiSE5sSUdsbUlDZ2hjR0Z5ZEdsaGJDNWpZV3hzSUNZbUlDRnZjSFJwYjI1ekxtNWhiV1VwSUh0Y2JpQWdJQ0F2THlCVWFHbHpJR2x6SUdFZ1pIbHVZVzFwWXlCd1lYSjBhV0ZzSUhSb1lYUWdjbVYwZFhKdVpXUWdZU0J6ZEhKcGJtZGNiaUFnSUNCdmNIUnBiMjV6TG01aGJXVWdQU0J3WVhKMGFXRnNPMXh1SUNBZ0lIQmhjblJwWVd3Z1BTQnZjSFJwYjI1ekxuQmhjblJwWVd4elczQmhjblJwWVd4ZE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCd1lYSjBhV0ZzTzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdhVzUyYjJ0bFVHRnlkR2xoYkNod1lYSjBhV0ZzTENCamIyNTBaWGgwTENCdmNIUnBiMjV6S1NCN1hHNGdJQzh2SUZWelpTQjBhR1VnWTNWeWNtVnVkQ0JqYkc5emRYSmxJR052Ym5SbGVIUWdkRzhnYzJGMlpTQjBhR1VnY0dGeWRHbGhiQzFpYkc5amF5QnBaaUIwYUdseklIQmhjblJwWVd4Y2JpQWdZMjl1YzNRZ1kzVnljbVZ1ZEZCaGNuUnBZV3hDYkc5amF5QTlJRzl3ZEdsdmJuTXVaR0YwWVNBbUppQnZjSFJwYjI1ekxtUmhkR0ZiSjNCaGNuUnBZV3d0WW14dlkyc25YVHRjYmlBZ2IzQjBhVzl1Y3k1d1lYSjBhV0ZzSUQwZ2RISjFaVHRjYmlBZ2FXWWdLRzl3ZEdsdmJuTXVhV1J6S1NCN1hHNGdJQ0FnYjNCMGFXOXVjeTVrWVhSaExtTnZiblJsZUhSUVlYUm9JRDBnYjNCMGFXOXVjeTVwWkhOYk1GMGdmSHdnYjNCMGFXOXVjeTVrWVhSaExtTnZiblJsZUhSUVlYUm9PMXh1SUNCOVhHNWNiaUFnYkdWMElIQmhjblJwWVd4Q2JHOWphenRjYmlBZ2FXWWdLRzl3ZEdsdmJuTXVabTRnSmlZZ2IzQjBhVzl1Y3k1bWJpQWhQVDBnYm05dmNDa2dlMXh1SUNBZ0lHOXdkR2x2Ym5NdVpHRjBZU0E5SUdOeVpXRjBaVVp5WVcxbEtHOXdkR2x2Ym5NdVpHRjBZU2s3WEc0Z0lDQWdMeThnVjNKaGNIQmxjaUJtZFc1amRHbHZiaUIwYnlCblpYUWdZV05qWlhOeklIUnZJR04xY25KbGJuUlFZWEowYVdGc1FteHZZMnNnWm5KdmJTQjBhR1VnWTJ4dmMzVnlaVnh1SUNBZ0lHeGxkQ0JtYmlBOUlHOXdkR2x2Ym5NdVptNDdYRzRnSUNBZ2NHRnlkR2xoYkVKc2IyTnJJRDBnYjNCMGFXOXVjeTVrWVhSaFd5ZHdZWEowYVdGc0xXSnNiMk5ySjEwZ1BTQm1kVzVqZEdsdmJpQndZWEowYVdGc1FteHZZMnRYY21Gd2NHVnlLRnh1SUNBZ0lDQWdZMjl1ZEdWNGRDeGNiaUFnSUNBZ0lHOXdkR2x2Ym5NZ1BTQjdmVnh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdMeThnVW1WemRHOXlaU0IwYUdVZ2NHRnlkR2xoYkMxaWJHOWpheUJtY205dElIUm9aU0JqYkc5emRYSmxJR1p2Y2lCMGFHVWdaWGhsWTNWMGFXOXVJRzltSUhSb1pTQmliRzlqYTF4dUlDQWdJQ0FnTHk4Z2FTNWxMaUIwYUdVZ2NHRnlkQ0JwYm5OcFpHVWdkR2hsSUdKc2IyTnJJRzltSUhSb1pTQndZWEowYVdGc0lHTmhiR3d1WEc0Z0lDQWdJQ0J2Y0hScGIyNXpMbVJoZEdFZ1BTQmpjbVZoZEdWR2NtRnRaU2h2Y0hScGIyNXpMbVJoZEdFcE8xeHVJQ0FnSUNBZ2IzQjBhVzl1Y3k1a1lYUmhXeWR3WVhKMGFXRnNMV0pzYjJOckoxMGdQU0JqZFhKeVpXNTBVR0Z5ZEdsaGJFSnNiMk5yTzF4dUlDQWdJQ0FnY21WMGRYSnVJR1p1S0dOdmJuUmxlSFFzSUc5d2RHbHZibk1wTzF4dUlDQWdJSDA3WEc0Z0lDQWdhV1lnS0dadUxuQmhjblJwWVd4ektTQjdYRzRnSUNBZ0lDQnZjSFJwYjI1ekxuQmhjblJwWVd4eklEMGdWWFJwYkhNdVpYaDBaVzVrS0h0OUxDQnZjSFJwYjI1ekxuQmhjblJwWVd4ekxDQm1iaTV3WVhKMGFXRnNjeWs3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnYVdZZ0tIQmhjblJwWVd3Z1BUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCd1lYSjBhV0ZzUW14dlkyc3BJSHRjYmlBZ0lDQndZWEowYVdGc0lEMGdjR0Z5ZEdsaGJFSnNiMk5yTzF4dUlDQjlYRzVjYmlBZ2FXWWdLSEJoY25ScFlXd2dQVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmVHTmxjSFJwYjI0b0oxUm9aU0J3WVhKMGFXRnNJQ2NnS3lCdmNIUnBiMjV6TG01aGJXVWdLeUFuSUdOdmRXeGtJRzV2ZENCaVpTQm1iM1Z1WkNjcE8xeHVJQ0I5SUdWc2MyVWdhV1lnS0hCaGNuUnBZV3dnYVc1emRHRnVZMlZ2WmlCR2RXNWpkR2x2YmlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ3WVhKMGFXRnNLR052Ym5SbGVIUXNJRzl3ZEdsdmJuTXBPMXh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ1YjI5d0tDa2dlMXh1SUNCeVpYUjFjbTRnSnljN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdsdWFYUkVZWFJoS0dOdmJuUmxlSFFzSUdSaGRHRXBJSHRjYmlBZ2FXWWdLQ0ZrWVhSaElIeDhJQ0VvSjNKdmIzUW5JR2x1SUdSaGRHRXBLU0I3WEc0Z0lDQWdaR0YwWVNBOUlHUmhkR0VnUHlCamNtVmhkR1ZHY21GdFpTaGtZWFJoS1NBNklIdDlPMXh1SUNBZ0lHUmhkR0V1Y205dmRDQTlJR052Ym5SbGVIUTdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHUmhkR0U3WEc1OVhHNWNibVoxYm1OMGFXOXVJR1Y0WldOMWRHVkVaV052Y21GMGIzSnpLR1p1TENCd2NtOW5MQ0JqYjI1MFlXbHVaWElzSUdSbGNIUm9jeXdnWkdGMFlTd2dZbXh2WTJ0UVlYSmhiWE1wSUh0Y2JpQWdhV1lnS0dadUxtUmxZMjl5WVhSdmNpa2dlMXh1SUNBZ0lHeGxkQ0J3Y205d2N5QTlJSHQ5TzF4dUlDQWdJSEJ5YjJjZ1BTQm1iaTVrWldOdmNtRjBiM0lvWEc0Z0lDQWdJQ0J3Y205bkxGeHVJQ0FnSUNBZ2NISnZjSE1zWEc0Z0lDQWdJQ0JqYjI1MFlXbHVaWElzWEc0Z0lDQWdJQ0JrWlhCMGFITWdKaVlnWkdWd2RHaHpXekJkTEZ4dUlDQWdJQ0FnWkdGMFlTeGNiaUFnSUNBZ0lHSnNiMk5yVUdGeVlXMXpMRnh1SUNBZ0lDQWdaR1Z3ZEdoelhHNGdJQ0FnS1R0Y2JpQWdJQ0JWZEdsc2N5NWxlSFJsYm1Rb2NISnZaeXdnY0hKdmNITXBPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQndjbTluTzF4dWZWeHVYRzVtZFc1amRHbHZiaUIzY21Gd1NHVnNjR1Z5YzFSdlVHRnpjMHh2YjJ0MWNGQnliM0JsY25SNUtHMWxjbWRsWkVobGJIQmxjbk1zSUdOdmJuUmhhVzVsY2lrZ2UxeHVJQ0JQWW1wbFkzUXVhMlY1Y3lodFpYSm5aV1JJWld4d1pYSnpLUzVtYjNKRllXTm9LR2hsYkhCbGNrNWhiV1VnUFQ0Z2UxeHVJQ0FnSUd4bGRDQm9aV3h3WlhJZ1BTQnRaWEpuWldSSVpXeHdaWEp6VzJobGJIQmxjazVoYldWZE8xeHVJQ0FnSUcxbGNtZGxaRWhsYkhCbGNuTmJhR1ZzY0dWeVRtRnRaVjBnUFNCd1lYTnpURzl2YTNWd1VISnZjR1Z5ZEhsUGNIUnBiMjRvYUdWc2NHVnlMQ0JqYjI1MFlXbHVaWElwTzF4dUlDQjlLVHRjYm4xY2JseHVablZ1WTNScGIyNGdjR0Z6YzB4dmIydDFjRkJ5YjNCbGNuUjVUM0IwYVc5dUtHaGxiSEJsY2l3Z1kyOXVkR0ZwYm1WeUtTQjdYRzRnSUdOdmJuTjBJR3h2YjJ0MWNGQnliM0JsY25SNUlEMGdZMjl1ZEdGcGJtVnlMbXh2YjJ0MWNGQnliM0JsY25SNU8xeHVJQ0J5WlhSMWNtNGdkM0poY0VobGJIQmxjaWhvWld4d1pYSXNJRzl3ZEdsdmJuTWdQVDRnZTF4dUlDQWdJSEpsZEhWeWJpQlZkR2xzY3k1bGVIUmxibVFvZXlCc2IyOXJkWEJRY205d1pYSjBlU0I5TENCdmNIUnBiMjV6S1R0Y2JpQWdmU2s3WEc1OVhHNGlYWDA9XG4iLCIvLyBCdWlsZCBvdXQgb3VyIGJhc2ljIFNhZmVTdHJpbmcgdHlwZVxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZnVuY3Rpb24gU2FmZVN0cmluZyhzdHJpbmcpIHtcbiAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG59XG5cblNhZmVTdHJpbmcucHJvdG90eXBlLnRvU3RyaW5nID0gU2FmZVN0cmluZy5wcm90b3R5cGUudG9IVE1MID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJycgKyB0aGlzLnN0cmluZztcbn07XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFNhZmVTdHJpbmc7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMeTR1THk0dUwyeHBZaTlvWVc1a2JHVmlZWEp6TDNOaFptVXRjM1J5YVc1bkxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3UVVGRFFTeFRRVUZUTEZWQlFWVXNRMEZCUXl4TlFVRk5MRVZCUVVVN1FVRkRNVUlzVFVGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNN1EwRkRkRUk3TzBGQlJVUXNWVUZCVlN4RFFVRkRMRk5CUVZNc1EwRkJReXhSUVVGUkxFZEJRVWNzVlVGQlZTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRWRCUVVjc1dVRkJWenRCUVVOMlJTeFRRVUZQTEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRE8wTkJRM3BDTEVOQlFVTTdPM0ZDUVVWaExGVkJRVlVpTENKbWFXeGxJam9pYzJGbVpTMXpkSEpwYm1jdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2THlCQ2RXbHNaQ0J2ZFhRZ2IzVnlJR0poYzJsaklGTmhabVZUZEhKcGJtY2dkSGx3WlZ4dVpuVnVZM1JwYjI0Z1UyRm1aVk4wY21sdVp5aHpkSEpwYm1jcElIdGNiaUFnZEdocGN5NXpkSEpwYm1jZ1BTQnpkSEpwYm1jN1hHNTlYRzVjYmxOaFptVlRkSEpwYm1jdWNISnZkRzkwZVhCbExuUnZVM1J5YVc1bklEMGdVMkZtWlZOMGNtbHVaeTV3Y205MGIzUjVjR1V1ZEc5SVZFMU1JRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJSEpsZEhWeWJpQW5KeUFySUhSb2FYTXVjM1J5YVc1bk8xeHVmVHRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnVTJGbVpWTjBjbWx1Wnp0Y2JpSmRmUT09XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmV4dGVuZCA9IGV4dGVuZDtcbmV4cG9ydHMuaW5kZXhPZiA9IGluZGV4T2Y7XG5leHBvcnRzLmVzY2FwZUV4cHJlc3Npb24gPSBlc2NhcGVFeHByZXNzaW9uO1xuZXhwb3J0cy5pc0VtcHR5ID0gaXNFbXB0eTtcbmV4cG9ydHMuY3JlYXRlRnJhbWUgPSBjcmVhdGVGcmFtZTtcbmV4cG9ydHMuYmxvY2tQYXJhbXMgPSBibG9ja1BhcmFtcztcbmV4cG9ydHMuYXBwZW5kQ29udGV4dFBhdGggPSBhcHBlbmRDb250ZXh0UGF0aDtcbnZhciBlc2NhcGUgPSB7XG4gICcmJzogJyZhbXA7JyxcbiAgJzwnOiAnJmx0OycsXG4gICc+JzogJyZndDsnLFxuICAnXCInOiAnJnF1b3Q7JyxcbiAgXCInXCI6ICcmI3gyNzsnLFxuICAnYCc6ICcmI3g2MDsnLFxuICAnPSc6ICcmI3gzRDsnXG59O1xuXG52YXIgYmFkQ2hhcnMgPSAvWyY8PlwiJ2A9XS9nLFxuICAgIHBvc3NpYmxlID0gL1smPD5cIidgPV0vO1xuXG5mdW5jdGlvbiBlc2NhcGVDaGFyKGNocikge1xuICByZXR1cm4gZXNjYXBlW2Nocl07XG59XG5cbmZ1bmN0aW9uIGV4dGVuZChvYmogLyogLCAuLi5zb3VyY2UgKi8pIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gYXJndW1lbnRzW2ldKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFyZ3VtZW50c1tpXSwga2V5KSkge1xuICAgICAgICBvYmpba2V5XSA9IGFyZ3VtZW50c1tpXVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbmV4cG9ydHMudG9TdHJpbmcgPSB0b1N0cmluZztcbi8vIFNvdXJjZWQgZnJvbSBsb2Rhc2hcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXN0aWVqcy9sb2Rhc2gvYmxvYi9tYXN0ZXIvTElDRU5TRS50eHRcbi8qIGVzbGludC1kaXNhYmxlIGZ1bmMtc3R5bGUgKi9cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufTtcbi8vIGZhbGxiYWNrIGZvciBvbGRlciB2ZXJzaW9ucyBvZiBDaHJvbWUgYW5kIFNhZmFyaVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpc0Z1bmN0aW9uKC94LykpIHtcbiAgZXhwb3J0cy5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgJiYgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gIH07XG59XG5leHBvcnRzLmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xuXG4vKiBlc2xpbnQtZW5hYmxlIGZ1bmMtc3R5bGUgKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgPyB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJyYXldJyA6IGZhbHNlO1xufTtcblxuZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTtcbi8vIE9sZGVyIElFIHZlcnNpb25zIGRvIG5vdCBkaXJlY3RseSBzdXBwb3J0IGluZGV4T2Ygc28gd2UgbXVzdCBpbXBsZW1lbnQgb3VyIG93biwgc2FkbHkuXG5cbmZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnJheS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChhcnJheVtpXSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZUV4cHJlc3Npb24oc3RyaW5nKSB7XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGVzY2FwZSBTYWZlU3RyaW5ncywgc2luY2UgdGhleSdyZSBhbHJlYWR5IHNhZmVcbiAgICBpZiAoc3RyaW5nICYmIHN0cmluZy50b0hUTUwpIHtcbiAgICAgIHJldHVybiBzdHJpbmcudG9IVE1MKCk7XG4gICAgfSBlbHNlIGlmIChzdHJpbmcgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSBpZiAoIXN0cmluZykge1xuICAgICAgcmV0dXJuIHN0cmluZyArICcnO1xuICAgIH1cblxuICAgIC8vIEZvcmNlIGEgc3RyaW5nIGNvbnZlcnNpb24gYXMgdGhpcyB3aWxsIGJlIGRvbmUgYnkgdGhlIGFwcGVuZCByZWdhcmRsZXNzIGFuZFxuICAgIC8vIHRoZSByZWdleCB0ZXN0IHdpbGwgZG8gdGhpcyB0cmFuc3BhcmVudGx5IGJlaGluZCB0aGUgc2NlbmVzLCBjYXVzaW5nIGlzc3VlcyBpZlxuICAgIC8vIGFuIG9iamVjdCdzIHRvIHN0cmluZyBoYXMgZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGl0LlxuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nO1xuICB9XG5cbiAgaWYgKCFwb3NzaWJsZS50ZXN0KHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nO1xuICB9XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShiYWRDaGFycywgZXNjYXBlQ2hhcik7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHkodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVGcmFtZShvYmplY3QpIHtcbiAgdmFyIGZyYW1lID0gZXh0ZW5kKHt9LCBvYmplY3QpO1xuICBmcmFtZS5fcGFyZW50ID0gb2JqZWN0O1xuICByZXR1cm4gZnJhbWU7XG59XG5cbmZ1bmN0aW9uIGJsb2NrUGFyYW1zKHBhcmFtcywgaWRzKSB7XG4gIHBhcmFtcy5wYXRoID0gaWRzO1xuICByZXR1cm4gcGFyYW1zO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDb250ZXh0UGF0aChjb250ZXh0UGF0aCwgaWQpIHtcbiAgcmV0dXJuIChjb250ZXh0UGF0aCA/IGNvbnRleHRQYXRoICsgJy4nIDogJycpICsgaWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMMnhwWWk5b1lXNWtiR1ZpWVhKekwzVjBhV3h6TG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3T3pzN1FVRkJRU3hKUVVGTkxFMUJRVTBzUjBGQlJ6dEJRVU5pTEV0QlFVY3NSVUZCUlN4UFFVRlBPMEZCUTFvc1MwRkJSeXhGUVVGRkxFMUJRVTA3UVVGRFdDeExRVUZITEVWQlFVVXNUVUZCVFR0QlFVTllMRXRCUVVjc1JVRkJSU3hSUVVGUk8wRkJRMklzUzBGQlJ5eEZRVUZGTEZGQlFWRTdRVUZEWWl4TFFVRkhMRVZCUVVVc1VVRkJVVHRCUVVOaUxFdEJRVWNzUlVGQlJTeFJRVUZSTzBOQlEyUXNRMEZCUXpzN1FVRkZSaXhKUVVGTkxGRkJRVkVzUjBGQlJ5eFpRVUZaTzBsQlF6TkNMRkZCUVZFc1IwRkJSeXhYUVVGWExFTkJRVU03TzBGQlJYcENMRk5CUVZNc1ZVRkJWU3hEUVVGRExFZEJRVWNzUlVGQlJUdEJRVU4yUWl4VFFVRlBMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dERRVU53UWpzN1FVRkZUU3hUUVVGVExFMUJRVTBzUTBGQlF5eEhRVUZITEc5Q1FVRnZRanRCUVVNMVF5eFBRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzVTBGQlV5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVONlF5eFRRVUZMTEVsQlFVa3NSMEZCUnl4SlFVRkpMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJUdEJRVU0xUWl4VlFVRkpMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVWQlFVVTdRVUZETTBRc1YwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEZOQlFWTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dFBRVU01UWp0TFFVTkdPMGRCUTBZN08wRkJSVVFzVTBGQlR5eEhRVUZITEVOQlFVTTdRMEZEV2pzN1FVRkZUU3hKUVVGSkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJRenM3T3pzN08wRkJTMmhFTEVsQlFVa3NWVUZCVlN4SFFVRkhMRzlDUVVGVExFdEJRVXNzUlVGQlJUdEJRVU12UWl4VFFVRlBMRTlCUVU4c1MwRkJTeXhMUVVGTExGVkJRVlVzUTBGQlF6dERRVU53UXl4RFFVRkRPenM3UVVGSFJpeEpRVUZKTEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSVHRCUVVOdVFpeFZRVTlQTEZWQlFWVXNSMEZRYWtJc1ZVRkJWU3hIUVVGSExGVkJRVk1zUzBGQlN5eEZRVUZGTzBGQlF6TkNMRmRCUTBVc1QwRkJUeXhMUVVGTExFdEJRVXNzVlVGQlZTeEpRVU16UWl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEcxQ1FVRnRRaXhEUVVNMVF6dEhRVU5JTEVOQlFVTTdRMEZEU0R0UlFVTlJMRlZCUVZVc1IwRkJWaXhWUVVGVk96czdPenRCUVVsYUxFbEJRVTBzVDBGQlR5eEhRVU5zUWl4TFFVRkxMRU5CUVVNc1QwRkJUeXhKUVVOaUxGVkJRVk1zUzBGQlN5eEZRVUZGTzBGQlEyUXNVMEZCVHl4TFFVRkxMRWxCUVVrc1QwRkJUeXhMUVVGTExFdEJRVXNzVVVGQlVTeEhRVU55UXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEdkQ1FVRm5RaXhIUVVONlF5eExRVUZMTEVOQlFVTTdRMEZEV0N4RFFVRkRPenM3T3p0QlFVZEhMRk5CUVZNc1QwRkJUeXhEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVTdRVUZEY0VNc1QwRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNSMEZCUnl4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEhRVUZITEVkQlFVY3NSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVOb1JDeFJRVUZKTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhMUVVGTExFVkJRVVU3UVVGRGRFSXNZVUZCVHl4RFFVRkRMRU5CUVVNN1MwRkRWanRIUVVOR08wRkJRMFFzVTBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXp0RFFVTllPenRCUVVWTkxGTkJRVk1zWjBKQlFXZENMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRM1pETEUxQlFVa3NUMEZCVHl4TlFVRk5MRXRCUVVzc1VVRkJVU3hGUVVGRk96dEJRVVU1UWl4UlFVRkpMRTFCUVUwc1NVRkJTU3hOUVVGTkxFTkJRVU1zVFVGQlRTeEZRVUZGTzBGQlF6TkNMR0ZCUVU4c1RVRkJUU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETzB0QlEzaENMRTFCUVUwc1NVRkJTU3hOUVVGTkxFbEJRVWtzU1VGQlNTeEZRVUZGTzBGQlEzcENMR0ZCUVU4c1JVRkJSU3hEUVVGRE8wdEJRMWdzVFVGQlRTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZPMEZCUTJ4Q0xHRkJRVThzVFVGQlRTeEhRVUZITEVWQlFVVXNRMEZCUXp0TFFVTndRanM3T3pzN1FVRkxSQ3hWUVVGTkxFZEJRVWNzUlVGQlJTeEhRVUZITEUxQlFVMHNRMEZCUXp0SFFVTjBRanM3UVVGRlJDeE5RVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJUdEJRVU14UWl4WFFVRlBMRTFCUVUwc1EwRkJRenRIUVVObU8wRkJRMFFzVTBGQlR5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRkZCUVZFc1JVRkJSU3hWUVVGVkxFTkJRVU1zUTBGQlF6dERRVU0zUXpzN1FVRkZUU3hUUVVGVExFOUJRVThzUTBGQlF5eExRVUZMTEVWQlFVVTdRVUZETjBJc1RVRkJTU3hEUVVGRExFdEJRVXNzU1VGQlNTeExRVUZMTEV0QlFVc3NRMEZCUXl4RlFVRkZPMEZCUTNwQ0xGZEJRVThzU1VGQlNTeERRVUZETzBkQlEySXNUVUZCVFN4SlFVRkpMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeExRVUZMTEVOQlFVTXNUVUZCVFN4TFFVRkxMRU5CUVVNc1JVRkJSVHRCUVVNdlF5eFhRVUZQTEVsQlFVa3NRMEZCUXp0SFFVTmlMRTFCUVUwN1FVRkRUQ3hYUVVGUExFdEJRVXNzUTBGQlF6dEhRVU5rTzBOQlEwWTdPMEZCUlUwc1UwRkJVeXhYUVVGWExFTkJRVU1zVFVGQlRTeEZRVUZGTzBGQlEyeERMRTFCUVVrc1MwRkJTeXhIUVVGSExFMUJRVTBzUTBGQlF5eEZRVUZGTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1FVRkRMMElzVDBGQlN5eERRVUZETEU5QlFVOHNSMEZCUnl4TlFVRk5MRU5CUVVNN1FVRkRka0lzVTBGQlR5eExRVUZMTEVOQlFVTTdRMEZEWkRzN1FVRkZUU3hUUVVGVExGZEJRVmNzUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4RlFVRkZPMEZCUTNaRExGRkJRVTBzUTBGQlF5eEpRVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRPMEZCUTJ4Q0xGTkJRVThzVFVGQlRTeERRVUZETzBOQlEyWTdPMEZCUlUwc1UwRkJVeXhwUWtGQmFVSXNRMEZCUXl4WFFVRlhMRVZCUVVVc1JVRkJSU3hGUVVGRk8wRkJRMnBFTEZOQlFVOHNRMEZCUXl4WFFVRlhMRWRCUVVjc1YwRkJWeXhIUVVGSExFZEJRVWNzUjBGQlJ5eEZRVUZGTEVOQlFVRXNSMEZCU1N4RlFVRkZMRU5CUVVNN1EwRkRjRVFpTENKbWFXeGxJam9pZFhScGJITXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKamIyNXpkQ0JsYzJOaGNHVWdQU0I3WEc0Z0lDY21Kem9nSnlaaGJYQTdKeXhjYmlBZ0p6d25PaUFuSm14ME95Y3NYRzRnSUNjK0p6b2dKeVpuZERzbkxGeHVJQ0FuWENJbk9pQW5KbkYxYjNRN0p5eGNiaUFnWENJblhDSTZJQ2NtSTNneU56c25MRnh1SUNBbllDYzZJQ2NtSTNnMk1Ec25MRnh1SUNBblBTYzZJQ2NtSTNnelJEc25YRzU5TzF4dVhHNWpiMjV6ZENCaVlXUkRhR0Z5Y3lBOUlDOWJKancrWENJbllEMWRMMmNzWEc0Z0lIQnZjM05wWW14bElEMGdMMXNtUEQ1Y0lpZGdQVjB2TzF4dVhHNW1kVzVqZEdsdmJpQmxjMk5oY0dWRGFHRnlLR05vY2lrZ2UxeHVJQ0J5WlhSMWNtNGdaWE5qWVhCbFcyTm9jbDA3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmxlSFJsYm1Rb2IySnFJQzhxSUN3Z0xpNHVjMjkxY21ObElDb3ZLU0I3WEc0Z0lHWnZjaUFvYkdWMElHa2dQU0F4T3lCcElEd2dZWEpuZFcxbGJuUnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnWm05eUlDaHNaWFFnYTJWNUlHbHVJR0Z5WjNWdFpXNTBjMXRwWFNrZ2UxeHVJQ0FnSUNBZ2FXWWdLRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2hoY21kMWJXVnVkSE5iYVYwc0lHdGxlU2twSUh0Y2JpQWdJQ0FnSUNBZ2IySnFXMnRsZVYwZ1BTQmhjbWQxYldWdWRITmJhVjFiYTJWNVhUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnlaWFIxY200Z2IySnFPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ2JHVjBJSFJ2VTNSeWFXNW5JRDBnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaenRjYmx4dUx5OGdVMjkxY21ObFpDQm1jbTl0SUd4dlpHRnphRnh1THk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwySmxjM1JwWldwekwyeHZaR0Z6YUM5aWJHOWlMMjFoYzNSbGNpOU1TVU5GVGxORkxuUjRkRnh1THlvZ1pYTnNhVzUwTFdScGMyRmliR1VnWm5WdVl5MXpkSGxzWlNBcUwxeHViR1YwSUdselJuVnVZM1JwYjI0Z1BTQm1kVzVqZEdsdmJpaDJZV3gxWlNrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5ablZ1WTNScGIyNG5PMXh1ZlR0Y2JpOHZJR1poYkd4aVlXTnJJR1p2Y2lCdmJHUmxjaUIyWlhKemFXOXVjeUJ2WmlCRGFISnZiV1VnWVc1a0lGTmhabUZ5YVZ4dUx5b2dhWE4wWVc1aWRXd2dhV2R1YjNKbElHNWxlSFFnS2k5Y2JtbG1JQ2hwYzBaMWJtTjBhVzl1S0M5NEx5a3BJSHRjYmlBZ2FYTkdkVzVqZEdsdmJpQTlJR1oxYm1OMGFXOXVLSFpoYkhWbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUhSNWNHVnZaaUIyWVd4MVpTQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUpseHVJQ0FnSUNBZ2RHOVRkSEpwYm1jdVkyRnNiQ2gyWVd4MVpTa2dQVDA5SUNkYmIySnFaV04wSUVaMWJtTjBhVzl1WFNkY2JpQWdJQ0FwTzF4dUlDQjlPMXh1ZlZ4dVpYaHdiM0owSUhzZ2FYTkdkVzVqZEdsdmJpQjlPMXh1THlvZ1pYTnNhVzUwTFdWdVlXSnNaU0JtZFc1akxYTjBlV3hsSUNvdlhHNWNiaThxSUdsemRHRnVZblZzSUdsbmJtOXlaU0J1WlhoMElDb3ZYRzVsZUhCdmNuUWdZMjl1YzNRZ2FYTkJjbkpoZVNBOVhHNGdJRUZ5Y21GNUxtbHpRWEp5WVhrZ2ZIeGNiaUFnWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RtRnNkV1VnSmlZZ2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmIySnFaV04wSjF4dUlDQWdJQ0FnUHlCMGIxTjBjbWx1Wnk1allXeHNLSFpoYkhWbEtTQTlQVDBnSjF0dlltcGxZM1FnUVhKeVlYbGRKMXh1SUNBZ0lDQWdPaUJtWVd4elpUdGNiaUFnZlR0Y2JseHVMeThnVDJ4a1pYSWdTVVVnZG1WeWMybHZibk1nWkc4Z2JtOTBJR1JwY21WamRHeDVJSE4xY0hCdmNuUWdhVzVrWlhoUFppQnpieUIzWlNCdGRYTjBJR2x0Y0d4bGJXVnVkQ0J2ZFhJZ2IzZHVMQ0J6WVdSc2VTNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnBibVJsZUU5bUtHRnljbUY1TENCMllXeDFaU2tnZTF4dUlDQm1iM0lnS0d4bGRDQnBJRDBnTUN3Z2JHVnVJRDBnWVhKeVlYa3ViR1Z1WjNSb095QnBJRHdnYkdWdU95QnBLeXNwSUh0Y2JpQWdJQ0JwWmlBb1lYSnlZWGxiYVYwZ1BUMDlJSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2FUdGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUMweE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWlhOallYQmxSWGh3Y21WemMybHZiaWh6ZEhKcGJtY3BJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQnpkSEpwYm1jZ0lUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdMeThnWkc5dUozUWdaWE5qWVhCbElGTmhabVZUZEhKcGJtZHpMQ0J6YVc1alpTQjBhR1Y1SjNKbElHRnNjbVZoWkhrZ2MyRm1aVnh1SUNBZ0lHbG1JQ2h6ZEhKcGJtY2dKaVlnYzNSeWFXNW5MblJ2U0ZSTlRDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlITjBjbWx1Wnk1MGIwaFVUVXdvS1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hOMGNtbHVaeUE5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdKeWM3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2doYzNSeWFXNW5LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjM1J5YVc1bklDc2dKeWM3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUm05eVkyVWdZU0J6ZEhKcGJtY2dZMjl1ZG1WeWMybHZiaUJoY3lCMGFHbHpJSGRwYkd3Z1ltVWdaRzl1WlNCaWVTQjBhR1VnWVhCd1pXNWtJSEpsWjJGeVpHeGxjM01nWVc1a1hHNGdJQ0FnTHk4Z2RHaGxJSEpsWjJWNElIUmxjM1FnZDJsc2JDQmtieUIwYUdseklIUnlZVzV6Y0dGeVpXNTBiSGtnWW1Wb2FXNWtJSFJvWlNCelkyVnVaWE1zSUdOaGRYTnBibWNnYVhOemRXVnpJR2xtWEc0Z0lDQWdMeThnWVc0Z2IySnFaV04wSjNNZ2RHOGdjM1J5YVc1bklHaGhjeUJsYzJOaGNHVmtJR05vWVhKaFkzUmxjbk1nYVc0Z2FYUXVYRzRnSUNBZ2MzUnlhVzVuSUQwZ0p5Y2dLeUJ6ZEhKcGJtYzdYRzRnSUgxY2JseHVJQ0JwWmlBb0lYQnZjM05wWW14bExuUmxjM1FvYzNSeWFXNW5LU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnpkSEpwYm1jN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhOMGNtbHVaeTV5WlhCc1lXTmxLR0poWkVOb1lYSnpMQ0JsYzJOaGNHVkRhR0Z5S1R0Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2x6Ulcxd2RIa29kbUZzZFdVcElIdGNiaUFnYVdZZ0tDRjJZV3gxWlNBbUppQjJZV3gxWlNBaFBUMGdNQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQjlJR1ZzYzJVZ2FXWWdLR2x6UVhKeVlYa29kbUZzZFdVcElDWW1JSFpoYkhWbExteGxibWQwYUNBOVBUMGdNQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnZlZ4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdZM0psWVhSbFJuSmhiV1VvYjJKcVpXTjBLU0I3WEc0Z0lHeGxkQ0JtY21GdFpTQTlJR1Y0ZEdWdVpDaDdmU3dnYjJKcVpXTjBLVHRjYmlBZ1puSmhiV1V1WDNCaGNtVnVkQ0E5SUc5aWFtVmpkRHRjYmlBZ2NtVjBkWEp1SUdaeVlXMWxPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1lteHZZMnRRWVhKaGJYTW9jR0Z5WVcxekxDQnBaSE1wSUh0Y2JpQWdjR0Z5WVcxekxuQmhkR2dnUFNCcFpITTdYRzRnSUhKbGRIVnliaUJ3WVhKaGJYTTdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCaGNIQmxibVJEYjI1MFpYaDBVR0YwYUNoamIyNTBaWGgwVUdGMGFDd2dhV1FwSUh0Y2JpQWdjbVYwZFhKdUlDaGpiMjUwWlhoMFVHRjBhQ0EvSUdOdmJuUmxlSFJRWVhSb0lDc2dKeTRuSURvZ0p5Y3BJQ3NnYVdRN1hHNTlYRzRpWFgwPVxuIiwiLy8gQ3JlYXRlIGEgc2ltcGxlIHBhdGggYWxpYXMgdG8gYWxsb3cgYnJvd3NlcmlmeSB0byByZXNvbHZlXG4vLyB0aGUgcnVudGltZSBvbiBhIHN1cHBvcnRlZCBwYXRoLlxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvY2pzL2hhbmRsZWJhcnMucnVudGltZScpWydkZWZhdWx0J107XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMCwyMDExLDIwMTIsMjAxMywyMDE0IE1vcmdhbiBSb2RlcmljayBodHRwOi8vcm9kZXJpY2suZGtcbiAqIExpY2Vuc2U6IE1JVCAtIGh0dHA6Ly9tcmducmRyY2subWl0LWxpY2Vuc2Uub3JnXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL21yb2Rlcmljay9QdWJTdWJKU1xuICovXG5cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIFB1YlN1YiA9IHt9O1xuXG4gICAgaWYgKHJvb3QuUHViU3ViKSB7XG4gICAgICAgIFB1YlN1YiA9IHJvb3QuUHViU3ViO1xuICAgICAgICBjb25zb2xlLndhcm4oXCJQdWJTdWIgYWxyZWFkeSBsb2FkZWQsIHVzaW5nIGV4aXN0aW5nIHZlcnNpb25cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdC5QdWJTdWIgPSBQdWJTdWI7XG4gICAgICAgIGZhY3RvcnkoUHViU3ViKTtcbiAgICB9XG4gICAgLy8gQ29tbW9uSlMgYW5kIE5vZGUuanMgbW9kdWxlIHN1cHBvcnRcbiAgICBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKXtcbiAgICAgICAgaWYgKG1vZHVsZSAhPT0gdW5kZWZpbmVkICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBQdWJTdWI7IC8vIE5vZGUuanMgc3BlY2lmaWMgYG1vZHVsZS5leHBvcnRzYFxuICAgICAgICB9XG4gICAgICAgIGV4cG9ydHMuUHViU3ViID0gUHViU3ViOyAvLyBDb21tb25KUyBtb2R1bGUgMS4xLjEgc3BlY1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBQdWJTdWI7IC8vIENvbW1vbkpTXG4gICAgfVxuICAgIC8vIEFNRCBzdXBwb3J0XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbiAgICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpe1xuICAgICAgICBkZWZpbmUoZnVuY3Rpb24oKSB7IHJldHVybiBQdWJTdWI7IH0pO1xuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZGVmICovXG4gICAgfVxuXG59KCggdHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93ICkgfHwgdGhpcywgZnVuY3Rpb24gKFB1YlN1Yil7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIG1lc3NhZ2VzID0ge30sXG4gICAgICAgIGxhc3RVaWQgPSAtMSxcbiAgICAgICAgQUxMX1NVQlNDUklCSU5HX01TRyA9ICcqJztcblxuICAgIGZ1bmN0aW9uIGhhc0tleXMob2JqKXtcbiAgICAgICAgdmFyIGtleTtcblxuICAgICAgICBmb3IgKGtleSBpbiBvYmope1xuICAgICAgICAgICAgaWYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpICl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHRocm93cyB0aGUgcGFzc2VkIGV4Y2VwdGlvbiwgZm9yIHVzZSBhcyBhcmd1bWVudCBmb3Igc2V0VGltZW91dFxuICAgICAqIEBhbGlhcyB0aHJvd0V4Y2VwdGlvblxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7IE9iamVjdCB9IGV4IEFuIEVycm9yIG9iamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocm93RXhjZXB0aW9uKCBleCApe1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gcmVUaHJvd0V4Y2VwdGlvbigpe1xuICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsbFN1YnNjcmliZXJXaXRoRGVsYXllZEV4Y2VwdGlvbnMoIHN1YnNjcmliZXIsIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIoIG1lc3NhZ2UsIGRhdGEgKTtcbiAgICAgICAgfSBjYXRjaCggZXggKXtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoIHRocm93RXhjZXB0aW9uKCBleCApLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMoIHN1YnNjcmliZXIsIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgc3Vic2NyaWJlciggbWVzc2FnZSwgZGF0YSApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGl2ZXJNZXNzYWdlKCBvcmlnaW5hbE1lc3NhZ2UsIG1hdGNoZWRNZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICl7XG4gICAgICAgIHZhciBzdWJzY3JpYmVycyA9IG1lc3NhZ2VzW21hdGNoZWRNZXNzYWdlXSxcbiAgICAgICAgICAgIGNhbGxTdWJzY3JpYmVyID0gaW1tZWRpYXRlRXhjZXB0aW9ucyA/IGNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMgOiBjYWxsU3Vic2NyaWJlcldpdGhEZWxheWVkRXhjZXB0aW9ucyxcbiAgICAgICAgICAgIHM7XG5cbiAgICAgICAgaWYgKCAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKCBtZXNzYWdlcywgbWF0Y2hlZE1lc3NhZ2UgKSApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAocyBpbiBzdWJzY3JpYmVycyl7XG4gICAgICAgICAgICBpZiAoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzdWJzY3JpYmVycywgcykpe1xuICAgICAgICAgICAgICAgIGNhbGxTdWJzY3JpYmVyKCBzdWJzY3JpYmVyc1tzXSwgb3JpZ2luYWxNZXNzYWdlLCBkYXRhICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEZWxpdmVyeUZ1bmN0aW9uKCBtZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICl7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBkZWxpdmVyTmFtZXNwYWNlZCgpe1xuICAgICAgICAgICAgdmFyIHRvcGljID0gU3RyaW5nKCBtZXNzYWdlICksXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZiggJy4nICk7XG5cbiAgICAgICAgICAgIC8vIGRlbGl2ZXIgdGhlIG1lc3NhZ2UgYXMgaXQgaXMgbm93XG4gICAgICAgICAgICBkZWxpdmVyTWVzc2FnZShtZXNzYWdlLCBtZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gdHJpbSB0aGUgaGllcmFyY2h5IGFuZCBkZWxpdmVyIG1lc3NhZ2UgdG8gZWFjaCBsZXZlbFxuICAgICAgICAgICAgd2hpbGUoIHBvc2l0aW9uICE9PSAtMSApe1xuICAgICAgICAgICAgICAgIHRvcGljID0gdG9waWMuc3Vic3RyKCAwLCBwb3NpdGlvbiApO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdG9waWMubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgICAgICAgICAgICBkZWxpdmVyTWVzc2FnZSggbWVzc2FnZSwgdG9waWMsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVsaXZlck1lc3NhZ2UobWVzc2FnZSwgQUxMX1NVQlNDUklCSU5HX01TRywgZGF0YSwgaW1tZWRpYXRlRXhjZXB0aW9ucyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzRGlyZWN0U3Vic2NyaWJlcnNGb3IoIG1lc3NhZ2UgKSB7XG4gICAgICAgIHZhciB0b3BpYyA9IFN0cmluZyggbWVzc2FnZSApLFxuICAgICAgICAgICAgZm91bmQgPSBCb29sZWFuKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCggbWVzc2FnZXMsIHRvcGljICkgJiYgaGFzS2V5cyhtZXNzYWdlc1t0b3BpY10pKTtcblxuICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVzc2FnZUhhc1N1YnNjcmliZXJzKCBtZXNzYWdlICl7XG4gICAgICAgIHZhciB0b3BpYyA9IFN0cmluZyggbWVzc2FnZSApLFxuICAgICAgICAgICAgZm91bmQgPSBoYXNEaXJlY3RTdWJzY3JpYmVyc0Zvcih0b3BpYykgfHwgaGFzRGlyZWN0U3Vic2NyaWJlcnNGb3IoQUxMX1NVQlNDUklCSU5HX01TRyksXG4gICAgICAgICAgICBwb3NpdGlvbiA9IHRvcGljLmxhc3RJbmRleE9mKCAnLicgKTtcblxuICAgICAgICB3aGlsZSAoICFmb3VuZCAmJiBwb3NpdGlvbiAhPT0gLTEgKXtcbiAgICAgICAgICAgIHRvcGljID0gdG9waWMuc3Vic3RyKCAwLCBwb3NpdGlvbiApO1xuICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZiggJy4nICk7XG4gICAgICAgICAgICBmb3VuZCA9IGhhc0RpcmVjdFN1YnNjcmliZXJzRm9yKHRvcGljKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmb3VuZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwdWJsaXNoKCBtZXNzYWdlLCBkYXRhLCBzeW5jLCBpbW1lZGlhdGVFeGNlcHRpb25zICl7XG4gICAgICAgIG1lc3NhZ2UgPSAodHlwZW9mIG1lc3NhZ2UgPT09ICdzeW1ib2wnKSA/IG1lc3NhZ2UudG9TdHJpbmcoKSA6IG1lc3NhZ2U7XG5cbiAgICAgICAgdmFyIGRlbGl2ZXIgPSBjcmVhdGVEZWxpdmVyeUZ1bmN0aW9uKCBtZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICksXG4gICAgICAgICAgICBoYXNTdWJzY3JpYmVycyA9IG1lc3NhZ2VIYXNTdWJzY3JpYmVycyggbWVzc2FnZSApO1xuXG4gICAgICAgIGlmICggIWhhc1N1YnNjcmliZXJzICl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHN5bmMgPT09IHRydWUgKXtcbiAgICAgICAgICAgIGRlbGl2ZXIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoIGRlbGl2ZXIsIDAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQdWJsaXNoZXMgdGhlIG1lc3NhZ2UsIHBhc3NpbmcgdGhlIGRhdGEgdG8gaXQncyBzdWJzY3JpYmVyc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBwdWJsaXNoXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIH0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBwdWJsaXNoXG4gICAgICogQHBhcmFtIHt9IGRhdGEgVGhlIGRhdGEgdG8gcGFzcyB0byBzdWJzY3JpYmVyc1xuICAgICAqIEByZXR1cm4geyBCb29sZWFuIH1cbiAgICAgKi9cbiAgICBQdWJTdWIucHVibGlzaCA9IGZ1bmN0aW9uKCBtZXNzYWdlLCBkYXRhICl7XG4gICAgICAgIHJldHVybiBwdWJsaXNoKCBtZXNzYWdlLCBkYXRhLCBmYWxzZSwgUHViU3ViLmltbWVkaWF0ZUV4Y2VwdGlvbnMgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUHVibGlzaGVzIHRoZSBtZXNzYWdlIHN5bmNocm9ub3VzbHksIHBhc3NpbmcgdGhlIGRhdGEgdG8gaXQncyBzdWJzY3JpYmVyc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBwdWJsaXNoU3luY1xuICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gcHVibGlzaFxuICAgICAqIEBwYXJhbSB7fSBkYXRhIFRoZSBkYXRhIHRvIHBhc3MgdG8gc3Vic2NyaWJlcnNcbiAgICAgKiBAcmV0dXJuIHsgQm9vbGVhbiB9XG4gICAgICovXG4gICAgUHViU3ViLnB1Ymxpc2hTeW5jID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgcmV0dXJuIHB1Ymxpc2goIG1lc3NhZ2UsIGRhdGEsIHRydWUsIFB1YlN1Yi5pbW1lZGlhdGVFeGNlcHRpb25zICk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdGhlIHBhc3NlZCBmdW5jdGlvbiB0byB0aGUgcGFzc2VkIG1lc3NhZ2UuIEV2ZXJ5IHJldHVybmVkIHRva2VuIGlzIHVuaXF1ZSBhbmQgc2hvdWxkIGJlIHN0b3JlZCBpZiB5b3UgbmVlZCB0byB1bnN1YnNjcmliZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBzdWJzY3JpYmVcbiAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIHN1YnNjcmliZSB0b1xuICAgICAqIEBwYXJhbSB7IEZ1bmN0aW9uIH0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGEgbmV3IG1lc3NhZ2UgaXMgcHVibGlzaGVkXG4gICAgICogQHJldHVybiB7IFN0cmluZyB9XG4gICAgICovXG4gICAgUHViU3ViLnN1YnNjcmliZSA9IGZ1bmN0aW9uKCBtZXNzYWdlLCBmdW5jICl7XG4gICAgICAgIGlmICggdHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVzc2FnZSA9ICh0eXBlb2YgbWVzc2FnZSA9PT0gJ3N5bWJvbCcpID8gbWVzc2FnZS50b1N0cmluZygpIDogbWVzc2FnZTtcblxuICAgICAgICAvLyBtZXNzYWdlIGlzIG5vdCByZWdpc3RlcmVkIHlldFxuICAgICAgICBpZiAoICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoIG1lc3NhZ2VzLCBtZXNzYWdlICkgKXtcbiAgICAgICAgICAgIG1lc3NhZ2VzW21lc3NhZ2VdID0ge307XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmb3JjaW5nIHRva2VuIGFzIFN0cmluZywgdG8gYWxsb3cgZm9yIGZ1dHVyZSBleHBhbnNpb25zIHdpdGhvdXQgYnJlYWtpbmcgdXNhZ2VcbiAgICAgICAgLy8gYW5kIGFsbG93IGZvciBlYXN5IHVzZSBhcyBrZXkgbmFtZXMgZm9yIHRoZSAnbWVzc2FnZXMnIG9iamVjdFxuICAgICAgICB2YXIgdG9rZW4gPSAndWlkXycgKyBTdHJpbmcoKytsYXN0VWlkKTtcbiAgICAgICAgbWVzc2FnZXNbbWVzc2FnZV1bdG9rZW5dID0gZnVuYztcblxuICAgICAgICAvLyByZXR1cm4gdG9rZW4gZm9yIHVuc3Vic2NyaWJpbmdcbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH07XG5cbiAgICBQdWJTdWIuc3Vic2NyaWJlQWxsID0gZnVuY3Rpb24oIGZ1bmMgKXtcbiAgICAgICAgcmV0dXJuIFB1YlN1Yi5zdWJzY3JpYmUoQUxMX1NVQlNDUklCSU5HX01TRywgZnVuYyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdGhlIHBhc3NlZCBmdW5jdGlvbiB0byB0aGUgcGFzc2VkIG1lc3NhZ2Ugb25jZVxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBhbGlhcyBzdWJzY3JpYmVPbmNlXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIH0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBzdWJzY3JpYmUgdG9cbiAgICAgKiBAcGFyYW0geyBGdW5jdGlvbiB9IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhbGwgd2hlbiBhIG5ldyBtZXNzYWdlIGlzIHB1Ymxpc2hlZFxuICAgICAqIEByZXR1cm4geyBQdWJTdWIgfVxuICAgICAqL1xuICAgIFB1YlN1Yi5zdWJzY3JpYmVPbmNlID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGZ1bmMgKXtcbiAgICAgICAgdmFyIHRva2VuID0gUHViU3ViLnN1YnNjcmliZSggbWVzc2FnZSwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8vIGJlZm9yZSBmdW5jIGFwcGx5LCB1bnN1YnNjcmliZSBtZXNzYWdlXG4gICAgICAgICAgICBQdWJTdWIudW5zdWJzY3JpYmUoIHRva2VuICk7XG4gICAgICAgICAgICBmdW5jLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBQdWJTdWI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgc3Vic2NyaXB0aW9uc1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAYWxpYXMgY2xlYXJBbGxTdWJzY3JpcHRpb25zXG4gICAgICovXG4gICAgUHViU3ViLmNsZWFyQWxsU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIGNsZWFyQWxsU3Vic2NyaXB0aW9ucygpe1xuICAgICAgICBtZXNzYWdlcyA9IHt9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhciBzdWJzY3JpcHRpb25zIGJ5IHRoZSB0b3BpY1xuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAYWxpYXMgY2xlYXJBbGxTdWJzY3JpcHRpb25zXG4gICAgICogQHJldHVybiB7IGludCB9XG4gICAgICovXG4gICAgUHViU3ViLmNsZWFyU3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIGNsZWFyU3Vic2NyaXB0aW9ucyh0b3BpYyl7XG4gICAgICAgIHZhciBtO1xuICAgICAgICBmb3IgKG0gaW4gbWVzc2FnZXMpe1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlcywgbSkgJiYgbS5pbmRleE9mKHRvcGljKSA9PT0gMCl7XG4gICAgICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2VzW21dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAgIENvdW50IHN1YnNjcmlwdGlvbnMgYnkgdGhlIHRvcGljXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhbGlhcyBjb3VudFN1YnNjcmlwdGlvbnNcbiAgICAgKiBAcmV0dXJuIHsgQXJyYXkgfVxuICAgICovXG4gICAgUHViU3ViLmNvdW50U3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIGNvdW50U3Vic2NyaXB0aW9ucyh0b3BpYyl7XG4gICAgICAgIHZhciBtO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgICAgdmFyIHRva2VuO1xuICAgICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgICBmb3IgKG0gaW4gbWVzc2FnZXMpIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZXMsIG0pICYmIG0uaW5kZXhPZih0b3BpYykgPT09IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKHRva2VuIGluIG1lc3NhZ2VzW21dKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb3VudDtcbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgICBHZXRzIHN1YnNjcmlwdGlvbnMgYnkgdGhlIHRvcGljXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhbGlhcyBnZXRTdWJzY3JpcHRpb25zXG4gICAgKi9cbiAgICBQdWJTdWIuZ2V0U3Vic2NyaXB0aW9ucyA9IGZ1bmN0aW9uIGdldFN1YnNjcmlwdGlvbnModG9waWMpe1xuICAgICAgICB2YXIgbTtcbiAgICAgICAgdmFyIGxpc3QgPSBbXTtcbiAgICAgICAgZm9yIChtIGluIG1lc3NhZ2VzKXtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZXMsIG0pICYmIG0uaW5kZXhPZih0b3BpYykgPT09IDApe1xuICAgICAgICAgICAgICAgIGxpc3QucHVzaChtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBzdWJzY3JpcHRpb25zXG4gICAgICpcbiAgICAgKiAtIFdoZW4gcGFzc2VkIGEgdG9rZW4sIHJlbW92ZXMgYSBzcGVjaWZpYyBzdWJzY3JpcHRpb24uXG4gICAgICpcblx0ICogLSBXaGVuIHBhc3NlZCBhIGZ1bmN0aW9uLCByZW1vdmVzIGFsbCBzdWJzY3JpcHRpb25zIGZvciB0aGF0IGZ1bmN0aW9uXG4gICAgICpcblx0ICogLSBXaGVuIHBhc3NlZCBhIHRvcGljLCByZW1vdmVzIGFsbCBzdWJzY3JpcHRpb25zIGZvciB0aGF0IHRvcGljIChoaWVyYXJjaHkpXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQHB1YmxpY1xuICAgICAqIEBhbGlhcyBzdWJzY3JpYmVPbmNlXG4gICAgICogQHBhcmFtIHsgU3RyaW5nIHwgRnVuY3Rpb24gfSB2YWx1ZSBBIHRva2VuLCBmdW5jdGlvbiBvciB0b3BpYyB0byB1bnN1YnNjcmliZSBmcm9tXG4gICAgICogQGV4YW1wbGUgLy8gVW5zdWJzY3JpYmluZyB3aXRoIGEgdG9rZW5cbiAgICAgKiB2YXIgdG9rZW4gPSBQdWJTdWIuc3Vic2NyaWJlKCdteXRvcGljJywgbXlGdW5jKTtcbiAgICAgKiBQdWJTdWIudW5zdWJzY3JpYmUodG9rZW4pO1xuICAgICAqIEBleGFtcGxlIC8vIFVuc3Vic2NyaWJpbmcgd2l0aCBhIGZ1bmN0aW9uXG4gICAgICogUHViU3ViLnVuc3Vic2NyaWJlKG15RnVuYyk7XG4gICAgICogQGV4YW1wbGUgLy8gVW5zdWJzY3JpYmluZyBmcm9tIGEgdG9waWNcbiAgICAgKiBQdWJTdWIudW5zdWJzY3JpYmUoJ215dG9waWMnKTtcbiAgICAgKi9cbiAgICBQdWJTdWIudW5zdWJzY3JpYmUgPSBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgIHZhciBkZXNjZW5kYW50VG9waWNFeGlzdHMgPSBmdW5jdGlvbih0b3BpYykge1xuICAgICAgICAgICAgICAgIHZhciBtO1xuICAgICAgICAgICAgICAgIGZvciAoIG0gaW4gbWVzc2FnZXMgKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZXMsIG0pICYmIG0uaW5kZXhPZih0b3BpYykgPT09IDAgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgZGVzY2VuZGFudCBvZiB0aGUgdG9waWMgZXhpc3RzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNUb3BpYyAgICA9IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgKCBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZXMsIHZhbHVlKSB8fCBkZXNjZW5kYW50VG9waWNFeGlzdHModmFsdWUpICksXG4gICAgICAgICAgICBpc1Rva2VuICAgID0gIWlzVG9waWMgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyxcbiAgICAgICAgICAgIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicsXG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZSxcbiAgICAgICAgICAgIG0sIG1lc3NhZ2UsIHQ7XG5cbiAgICAgICAgaWYgKGlzVG9waWMpe1xuICAgICAgICAgICAgUHViU3ViLmNsZWFyU3Vic2NyaXB0aW9ucyh2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKCBtIGluIG1lc3NhZ2VzICl7XG4gICAgICAgICAgICBpZiAoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCggbWVzc2FnZXMsIG0gKSApe1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBtZXNzYWdlc1ttXTtcblxuICAgICAgICAgICAgICAgIGlmICggaXNUb2tlbiAmJiBtZXNzYWdlW3ZhbHVlXSApe1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbWVzc2FnZVt2YWx1ZV07XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAvLyB0b2tlbnMgYXJlIHVuaXF1ZSwgc28gd2UgY2FuIGp1c3Qgc3RvcCBoZXJlXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoIHQgaW4gbWVzc2FnZSApe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCB0KSAmJiBtZXNzYWdlW3RdID09PSB2YWx1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2VbdF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn0pKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuL3R5cGVvZi5qc1wiKVtcImRlZmF1bHRcIl07XG5mdW5jdGlvbiBfcmVnZW5lcmF0b3JSdW50aW1lKCkge1xuICBcInVzZSBzdHJpY3RcIjsgLyohIHJlZ2VuZXJhdG9yLXJ1bnRpbWUgLS0gQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuIC0tIGxpY2Vuc2UgKE1JVCk6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9ibG9iL21haW4vTElDRU5TRSAqL1xuICBtb2R1bGUuZXhwb3J0cyA9IF9yZWdlbmVyYXRvclJ1bnRpbWUgPSBmdW5jdGlvbiBfcmVnZW5lcmF0b3JSdW50aW1lKCkge1xuICAgIHJldHVybiBleHBvcnRzO1xuICB9LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7XG4gIHZhciBleHBvcnRzID0ge30sXG4gICAgT3AgPSBPYmplY3QucHJvdG90eXBlLFxuICAgIGhhc093biA9IE9wLmhhc093blByb3BlcnR5LFxuICAgICRTeW1ib2wgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCA/IFN5bWJvbCA6IHt9LFxuICAgIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIixcbiAgICBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCIsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogITAsXG4gICAgICBjb25maWd1cmFibGU6ICEwLFxuICAgICAgd3JpdGFibGU6ICEwXG4gICAgfSksIG9ialtrZXldO1xuICB9XG4gIHRyeSB7XG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24gZGVmaW5lKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3IsXG4gICAgICBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSksXG4gICAgICBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuICAgIHJldHVybiBnZW5lcmF0b3IuX2ludm9rZSA9IGZ1bmN0aW9uIChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgICB2YXIgc3RhdGUgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7XG4gICAgICAgIGlmIChcImV4ZWN1dGluZ1wiID09PSBzdGF0ZSkgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgICAgaWYgKFwiY29tcGxldGVkXCIgPT09IHN0YXRlKSB7XG4gICAgICAgICAgaWYgKFwidGhyb3dcIiA9PT0gbWV0aG9kKSB0aHJvdyBhcmc7XG4gICAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnRleHQubWV0aG9kID0gbWV0aG9kLCBjb250ZXh0LmFyZyA9IGFyZzs7KSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKFwibmV4dFwiID09PSBjb250ZXh0Lm1ldGhvZCkgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO2Vsc2UgaWYgKFwidGhyb3dcIiA9PT0gY29udGV4dC5tZXRob2QpIHtcbiAgICAgICAgICAgIGlmIChcInN1c3BlbmRlZFN0YXJ0XCIgPT09IHN0YXRlKSB0aHJvdyBzdGF0ZSA9IFwiY29tcGxldGVkXCIsIGNvbnRleHQuYXJnO1xuICAgICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG4gICAgICAgICAgfSBlbHNlIFwicmV0dXJuXCIgPT09IGNvbnRleHQubWV0aG9kICYmIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgICBzdGF0ZSA9IFwiZXhlY3V0aW5nXCI7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChcIm5vcm1hbFwiID09PSByZWNvcmQudHlwZSkge1xuICAgICAgICAgICAgaWYgKHN0YXRlID0gY29udGV4dC5kb25lID8gXCJjb21wbGV0ZWRcIiA6IFwic3VzcGVuZGVkWWllbGRcIiwgcmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBcInRocm93XCIgPT09IHJlY29yZC50eXBlICYmIChzdGF0ZSA9IFwiY29tcGxldGVkXCIsIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiLCBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmcpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0oaW5uZXJGbiwgc2VsZiwgY29udGV4dCksIGdlbmVyYXRvcjtcbiAgfVxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJub3JtYWxcIixcbiAgICAgICAgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwidGhyb3dcIixcbiAgICAgICAgYXJnOiBlcnJcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgZGVmaW5lKEl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLFxuICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJiBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiYgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSAmJiAoSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSk7XG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9IEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcbiAgICAgIGRlZmluZShwcm90b3R5cGUsIG1ldGhvZCwgZnVuY3Rpb24gKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChcInRocm93XCIgIT09IHJlY29yZC50eXBlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnLFxuICAgICAgICAgIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICByZXR1cm4gdmFsdWUgJiYgXCJvYmplY3RcIiA9PSBfdHlwZW9mKHZhbHVlKSAmJiBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpID8gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pIDogUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbiAodW53cmFwcGVkKSB7XG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkLCByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgfVxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG4gICAgdGhpcy5faW52b2tlID0gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPSBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZywgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcpIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmICh1bmRlZmluZWQgPT09IG1ldGhvZCkge1xuICAgICAgaWYgKGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBcInRocm93XCIgPT09IGNvbnRleHQubWV0aG9kKSB7XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSAmJiAoY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiLCBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZCwgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCksIFwidGhyb3dcIiA9PT0gY29udGV4dC5tZXRob2QpKSByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCIsIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcbiAgICBpZiAoXCJ0aHJvd1wiID09PSByZWNvcmQudHlwZSkgcmV0dXJuIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiLCBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmcsIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBDb250aW51ZVNlbnRpbmVsO1xuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcbiAgICByZXR1cm4gaW5mbyA/IGluZm8uZG9uZSA/IChjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZSwgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYywgXCJyZXR1cm5cIiAhPT0gY29udGV4dC5tZXRob2QgJiYgKGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCIsIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkKSwgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGwsIENvbnRpbnVlU2VudGluZWwpIDogaW5mbyA6IChjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIiwgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIiksIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsLCBDb250aW51ZVNlbnRpbmVsKTtcbiAgfVxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHtcbiAgICAgIHRyeUxvYzogbG9jc1swXVxuICAgIH07XG4gICAgMSBpbiBsb2NzICYmIChlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV0pLCAyIGluIGxvY3MgJiYgKGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdLCBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM10pLCB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIiwgZGVsZXRlIHJlY29yZC5hcmcsIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7XG4gICAgICB0cnlMb2M6IFwicm9vdFwiXG4gICAgfV0sIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKSwgdGhpcy5yZXNldCghMCk7XG4gIH1cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGl0ZXJhYmxlLm5leHQpIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLFxuICAgICAgICAgIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgICAgZm9yICg7ICsraSA8IGl0ZXJhYmxlLmxlbmd0aDspIHtcbiAgICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkgcmV0dXJuIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXSwgbmV4dC5kb25lID0gITEsIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV4dC52YWx1ZSA9IHVuZGVmaW5lZCwgbmV4dC5kb25lID0gITAsIG5leHQ7XG4gICAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBuZXh0OiBkb25lUmVzdWx0XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgZG9uZTogITBcbiAgICB9O1xuICB9XG4gIHJldHVybiBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSwgZGVmaW5lKEdwLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKSwgZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uKSwgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvckZ1bmN0aW9uXCIpLCBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiAoZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGdlbkZ1biAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuICEhY3RvciAmJiAoY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHwgXCJHZW5lcmF0b3JGdW5jdGlvblwiID09PSAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpKTtcbiAgfSwgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24gKGdlbkZ1bikge1xuICAgIHJldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSkgOiAoZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKSksIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKSwgZ2VuRnVuO1xuICB9LCBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiB7XG4gICAgICBfX2F3YWl0OiBhcmdcbiAgICB9O1xuICB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpLCBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSksIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3IsIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbiAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QsIFByb21pc2VJbXBsKSB7XG4gICAgdm9pZCAwID09PSBQcm9taXNlSW1wbCAmJiAoUHJvbWlzZUltcGwgPSBQcm9taXNlKTtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLCBQcm9taXNlSW1wbCk7XG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKSA/IGl0ZXIgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgIH0pO1xuICB9LCBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApLCBkZWZpbmUoR3AsIHRvU3RyaW5nVGFnU3ltYm9sLCBcIkdlbmVyYXRvclwiKSwgZGVmaW5lKEdwLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KSwgZGVmaW5lKEdwLCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfSksIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uIChvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5cy5yZXZlcnNlKCksIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICBmb3IgKDsga2V5cy5sZW5ndGg7KSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkgcmV0dXJuIG5leHQudmFsdWUgPSBrZXksIG5leHQuZG9uZSA9ICExLCBuZXh0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5leHQuZG9uZSA9ICEwLCBuZXh0O1xuICAgIH07XG4gIH0sIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzLCBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcbiAgICByZXNldDogZnVuY3Rpb24gcmVzZXQoc2tpcFRlbXBSZXNldCkge1xuICAgICAgaWYgKHRoaXMucHJldiA9IDAsIHRoaXMubmV4dCA9IDAsIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQsIHRoaXMuZG9uZSA9ICExLCB0aGlzLmRlbGVnYXRlID0gbnVsbCwgdGhpcy5tZXRob2QgPSBcIm5leHRcIiwgdGhpcy5hcmcgPSB1bmRlZmluZWQsIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpLCAhc2tpcFRlbXBSZXNldCkgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgIFwidFwiID09PSBuYW1lLmNoYXJBdCgwKSAmJiBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJiAhaXNOYU4oK25hbWUuc2xpY2UoMSkpICYmICh0aGlzW25hbWVdID0gdW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB0aGlzLmRvbmUgPSAhMDtcbiAgICAgIHZhciByb290UmVjb3JkID0gdGhpcy50cnlFbnRyaWVzWzBdLmNvbXBsZXRpb247XG4gICAgICBpZiAoXCJ0aHJvd1wiID09PSByb290UmVjb3JkLnR5cGUpIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbiBkaXNwYXRjaEV4Y2VwdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZXR1cm4gcmVjb3JkLnR5cGUgPSBcInRocm93XCIsIHJlY29yZC5hcmcgPSBleGNlcHRpb24sIGNvbnRleHQubmV4dCA9IGxvYywgY2F1Z2h0ICYmIChjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiLCBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZCksICEhY2F1Z2h0O1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV0sXG4gICAgICAgICAgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgaWYgKFwicm9vdFwiID09PSBlbnRyeS50cnlMb2MpIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIiksXG4gICAgICAgICAgICBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCAhMCk7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsICEwKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFoYXNGaW5hbGx5KSB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYWJydXB0OiBmdW5jdGlvbiBhYnJ1cHQodHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiYgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJiB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmaW5hbGx5RW50cnkgJiYgKFwiYnJlYWtcIiA9PT0gdHlwZSB8fCBcImNvbnRpbnVlXCIgPT09IHR5cGUpICYmIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYyAmJiAoZmluYWxseUVudHJ5ID0gbnVsbCk7XG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJldHVybiByZWNvcmQudHlwZSA9IHR5cGUsIHJlY29yZC5hcmcgPSBhcmcsIGZpbmFsbHlFbnRyeSA/ICh0aGlzLm1ldGhvZCA9IFwibmV4dFwiLCB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYywgQ29udGludWVTZW50aW5lbCkgOiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKFwidGhyb3dcIiA9PT0gcmVjb3JkLnR5cGUpIHRocm93IHJlY29yZC5hcmc7XG4gICAgICByZXR1cm4gXCJicmVha1wiID09PSByZWNvcmQudHlwZSB8fCBcImNvbnRpbnVlXCIgPT09IHJlY29yZC50eXBlID8gdGhpcy5uZXh0ID0gcmVjb3JkLmFyZyA6IFwicmV0dXJuXCIgPT09IHJlY29yZC50eXBlID8gKHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZywgdGhpcy5tZXRob2QgPSBcInJldHVyblwiLCB0aGlzLm5leHQgPSBcImVuZFwiKSA6IFwibm9ybWFsXCIgPT09IHJlY29yZC50eXBlICYmIGFmdGVyTG9jICYmICh0aGlzLm5leHQgPSBhZnRlckxvYyksIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcbiAgICBmaW5pc2g6IGZ1bmN0aW9uIGZpbmlzaChmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHJldHVybiB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKSwgcmVzZXRUcnlFbnRyeShlbnRyeSksIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG4gICAgfSxcbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uIF9jYXRjaCh0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAoXCJ0aHJvd1wiID09PSByZWNvcmQudHlwZSkge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24gZGVsZWdhdGVZaWVsZChpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgcmV0dXJuIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9LCBcIm5leHRcIiA9PT0gdGhpcy5tZXRob2QgJiYgKHRoaXMuYXJnID0gdW5kZWZpbmVkKSwgQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH0sIGV4cG9ydHM7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9yZWdlbmVyYXRvclJ1bnRpbWUsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIChtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgfSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzKSwgX3R5cGVvZihvYmopO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiLy8gVE9ETyhCYWJlbCA4KTogUmVtb3ZlIHRoaXMgZmlsZS5cblxudmFyIHJ1bnRpbWUgPSByZXF1aXJlKFwiLi4vaGVscGVycy9yZWdlbmVyYXRvclJ1bnRpbWVcIikoKTtcbm1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcblxuLy8gQ29waWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2Jsb2IvbWFpbi9wYWNrYWdlcy9ydW50aW1lL3J1bnRpbWUuanMjTDczNj1cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBnbG9iYWxUaGlzLnJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG4gIH0gZWxzZSB7XG4gICAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbiAgfVxufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJjb25zdCBBcnJheUhlbHBlciA9ICgoKSA9PiB7XHJcbiAgICBmdW5jdGlvbiBzaHVmZmxlKGFycmF5KSB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRJbmRleCA9IGFycmF5Lmxlbmd0aCxcclxuICAgICAgICAgICAgcmFuZG9tSW5kZXg7XHJcblxyXG4gICAgICAgIC8vIFdoaWxlIHRoZXJlIHJlbWFpbiBlbGVtZW50cyB0byBzaHVmZmxlLi4uXHJcbiAgICAgICAgd2hpbGUgKGN1cnJlbnRJbmRleCAhPT0gMCkge1xyXG4gICAgICAgICAgICAvLyBQaWNrIGEgcmVtYWluaW5nIGVsZW1lbnQuLi5cclxuICAgICAgICAgICAgcmFuZG9tSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjdXJyZW50SW5kZXgpO1xyXG4gICAgICAgICAgICBjdXJyZW50SW5kZXgtLTtcclxuXHJcbiAgICAgICAgICAgIC8vIEFuZCBzd2FwIGl0IHdpdGggdGhlIGN1cnJlbnQgZWxlbWVudC5cclxuICAgICAgICAgICAgW2FycmF5W2N1cnJlbnRJbmRleF0sIGFycmF5W3JhbmRvbUluZGV4XV0gPSBbYXJyYXlbcmFuZG9tSW5kZXhdLCBhcnJheVtjdXJyZW50SW5kZXhdXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBhcnJheTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHNodWZmbGUsXHJcbiAgICB9O1xyXG59KSgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQXJyYXlIZWxwZXI7XHJcbiIsImNvbnN0IEdhbWVib2FyZEdldHRlciA9ICgoKSA9PiB7XHJcbiAgICBmdW5jdGlvbiBtYXhIb3Jpem9udGFsTGVuZ3RoQ2FuQmVPY2N1cGllZChib2FyZCkge1xyXG4gICAgICAgIGxldCBob3Jpem9udGFsTGVuZ3RoID0gMDtcclxuICAgICAgICBjb25zdCBzaGlwc0JvYXJkID0gYm9hcmQuZ2V0U2hpcHNCb2FyZCgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9hcmQuZ2V0SGVpZ2h0KCk7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJvYXJkLmdldFdpZHRoKCk7IGorKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNoaXBzQm9hcmRbaV1bal0gPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNudCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogKyAxID09PSBib2FyZC5nZXRXaWR0aCgpIHx8IHNoaXBzQm9hcmRbaV1baiArIDFdICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbExlbmd0aCA9IE1hdGgubWF4KGhvcml6b250YWxMZW5ndGgsIGNudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICArK2NudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKytqO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaG9yaXpvbnRhbExlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBtYXhWZXJ0aWNhbExlbmd0aENhbkJlT2NjdXBpZWQoYm9hcmQpIHtcclxuICAgICAgICBsZXQgdmVydGljYWxMZW5ndGggPSAwO1xyXG4gICAgICAgIGNvbnN0IHNoaXBzQm9hcmQgPSBib2FyZC5nZXRTaGlwc0JvYXJkKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBib2FyZC5nZXRXaWR0aCgpOyBqKyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2FyZC5nZXRIZWlnaHQoKTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hpcHNCb2FyZFtpXVtqXSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY250ID0gMTtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSArIDEgPT09IGJvYXJkLmdldEhlaWdodCgpIHx8IHNoaXBzQm9hcmRbaSArIDFdW2pdICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWxMZW5ndGggPSBNYXRoLm1heCh2ZXJ0aWNhbExlbmd0aCwgY250KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsrY250O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2ZXJ0aWNhbExlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1heEhvcml6b250YWxMZW5ndGhDYW5CZU9jY3VwaWVkLFxyXG4gICAgICAgIG1heFZlcnRpY2FsTGVuZ3RoQ2FuQmVPY2N1cGllZCxcclxuICAgIH07XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBHYW1lYm9hcmRHZXR0ZXI7XHJcbiIsImNvbnN0IENoZWNrZXJIZWxwZXIgPSAoKCkgPT4ge1xyXG4gICAgZnVuY3Rpb24gY2hlY2tJZldob2xlTnVtYmVyKG51bSkge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2YgbnVtID09PSBcIm51bWJlclwiICYmIE51bWJlci5pc0ludGVnZXIobnVtKSAmJiBudW0gPj0gMDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjaGVja0lmUG9zaXRpdmVOdW1iZXIobnVtKSB7XHJcbiAgICAgICAgcmV0dXJuIGNoZWNrSWZXaG9sZU51bWJlcihudW0pICYmIG51bSA+IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBjaGVja0lmV2hvbGVOdW1iZXIsXHJcbiAgICAgICAgY2hlY2tJZlBvc2l0aXZlTnVtYmVyLFxyXG4gICAgfTtcclxufSkoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENoZWNrZXJIZWxwZXI7XHJcbiIsImltcG9ydCBHYW1lYm9hcmRHZXR0ZXIgZnJvbSBcIi4vZ2FtZWJvYXJkLWdldHRlclwiO1xyXG5pbXBvcnQgQ2hlY2tlckhlbHBlciBmcm9tIFwiLi4vY2hlY2tlci1oZWxwZXJcIjtcclxuXHJcbmNvbnN0IEdhbWVib2FyZENoZWNrZXIgPSAoKCkgPT4ge1xyXG4gICAgZnVuY3Rpb24gY2FuQWRkU2hpcChib2FyZCwgbGVuZ3RoKSB7XHJcbiAgICAgICAgaWYgKCFDaGVja2VySGVscGVyLmNoZWNrSWZQb3NpdGl2ZU51bWJlcihsZW5ndGgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgQXJndW1lbnQgRXhjZXB0aW9uXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIGxlbmd0aCA+XHJcbiAgICAgICAgICAgIE1hdGgubWF4KFxyXG4gICAgICAgICAgICAgICAgR2FtZWJvYXJkR2V0dGVyLm1heEhvcml6b250YWxMZW5ndGhDYW5CZU9jY3VwaWVkKGJvYXJkKSxcclxuICAgICAgICAgICAgICAgIEdhbWVib2FyZEdldHRlci5tYXhWZXJ0aWNhbExlbmd0aENhbkJlT2NjdXBpZWQoYm9hcmQpLFxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IG5vdFBsYWNlZExlbmd0aCA9IDA7XHJcbiAgICAgICAgYm9hcmQuZ2V0U2hpcHMoKS5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtLnJvdyA9PT0gdW5kZWZpbmVkICYmIGl0ZW0uY29sID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIG5vdFBsYWNlZExlbmd0aCArPSBpdGVtLnNoaXAuZ2V0TGVuZ3RoKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoYm9hcmQuZ2V0QmxvY2tOb3RPY2N1cGllZCgpIC0gbm90UGxhY2VkTGVuZ3RoIC0gbGVuZ3RoIDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGlzT3V0c2lkZUJvYXJkKGJvYXJkLCByb3csIGNvbCkge1xyXG4gICAgICAgIHJldHVybiByb3cgPCAwIHx8IHJvdyA+PSBib2FyZC5nZXRIZWlnaHQoKSB8fCBjb2wgPCAwIHx8IGNvbCA+PSBib2FyZC5nZXRXaWR0aCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNhblBsYWNlU2hpcChib2FyZCwgc2hpcEluZGV4LCByb3csIGNvbCwgaXNWZXJ0aWNhbCkge1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgIUNoZWNrZXJIZWxwZXIuY2hlY2tJZldob2xlTnVtYmVyKHNoaXBJbmRleCkgfHxcclxuICAgICAgICAgICAgIUNoZWNrZXJIZWxwZXIuY2hlY2tJZldob2xlTnVtYmVyKHJvdykgfHxcclxuICAgICAgICAgICAgIUNoZWNrZXJIZWxwZXIuY2hlY2tJZldob2xlTnVtYmVyKGNvbCkgfHxcclxuICAgICAgICAgICAgdHlwZW9mIGlzVmVydGljYWwgIT09IFwiYm9vbGVhblwiXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgQXJndW1lbnQgRXhjZXB0aW9uXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNPdXRzaWRlQm9hcmQoYm9hcmQsIHJvdywgY29sKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIEFyZ3VtZW50IEV4Y2VwdGlvblwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNoaXBJbmRleCA+PSBib2FyZC5nZXRTaGlwcygpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIEFyZ3VtZW50IEV4Y2VwdGlvblwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc2hpcFRvUGxhY2UgPSBib2FyZC5nZXRTaGlwKHNoaXBJbmRleCk7XHJcbiAgICAgICAgaWYgKGlzVmVydGljYWwgJiYgcm93ICsgc2hpcFRvUGxhY2UuZ2V0TGVuZ3RoKCkgLSAxID49IGJvYXJkLmdldEhlaWdodCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc1ZlcnRpY2FsICYmIGNvbCArIHNoaXBUb1BsYWNlLmdldExlbmd0aCgpIC0gMSA+PSBib2FyZC5nZXRXaWR0aCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc2hpcHNCb2FyZCA9IGJvYXJkLmdldFNoaXBzQm9hcmQoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBUb1BsYWNlLmdldExlbmd0aCgpOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGlzVmVydGljYWwgJiYgc2hpcHNCb2FyZFtyb3cgKyBpXVtjb2xdICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghaXNWZXJ0aWNhbCAmJiBzaGlwc0JvYXJkW3Jvd11bY29sICsgaV0gIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaXNIaXQoYm9hcmQsIHJvdywgY29sKSB7XHJcbiAgICAgICAgaWYgKCFDaGVja2VySGVscGVyLmNoZWNrSWZXaG9sZU51bWJlcihyb3cpIHx8ICFDaGVja2VySGVscGVyLmNoZWNrSWZXaG9sZU51bWJlcihjb2wpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgQXJndW1lbnQgRXhjZXB0aW9uXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlzT3V0c2lkZUJvYXJkKGJvYXJkLCByb3csIGNvbCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBBcmd1bWVudCBFeGNlcHRpb25cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBib2FyZC5nZXRIaXRzQm9hcmQoKVtyb3ddW2NvbF0gIT09IDA7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYXJlQWxsU2hpcHNTdW5rKGJvYXJkKSB7XHJcbiAgICAgICAgcmV0dXJuIGJvYXJkLmdldFNoaXBzQWxpdmUoKSA9PT0gMDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjaGVja0lmQWxsU2hpcHNQbGFjZWQoYm9hcmQpIHtcclxuICAgICAgICBjb25zdCBzaGlwc0FycmF5ID0gYm9hcmQuZ2V0U2hpcHMoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBzQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHNoaXBzQXJyYXlbaV0ucm93ID09PSB1bmRlZmluZWQgfHwgc2hpcHNBcnJheVtpXS5jb2wgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNoZWNrSWZOb25PZlNoaXBzUGxhY2VkKGJvYXJkKSB7XHJcbiAgICAgICAgY29uc3Qgc2hpcHNBcnJheSA9IGJvYXJkLmdldFNoaXBzKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwc0FycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChzaGlwc0FycmF5W2ldLnJvdyAhPT0gdW5kZWZpbmVkIHx8IHNoaXBzQXJyYXlbaV0uY29sICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGNhbkFkZFNoaXAsXHJcbiAgICAgICAgaXNPdXRzaWRlQm9hcmQsXHJcbiAgICAgICAgY2FuUGxhY2VTaGlwLFxyXG4gICAgICAgIGlzSGl0LFxyXG4gICAgICAgIGFyZUFsbFNoaXBzU3VuayxcclxuICAgICAgICBjaGVja0lmQWxsU2hpcHNQbGFjZWQsXHJcbiAgICAgICAgY2hlY2tJZk5vbk9mU2hpcHNQbGFjZWQsXHJcbiAgICB9O1xyXG59KSgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgR2FtZWJvYXJkQ2hlY2tlcjtcclxuIiwiaW1wb3J0IFB1YlN1YiBmcm9tIFwicHVic3ViLWpzXCI7XHJcbmltcG9ydCBBcnJheUhlbHBlciBmcm9tIFwiLi4vYXJyYXktaGVwbGVyXCI7XHJcbmltcG9ydCBHYW1lYm9hcmRDaGVja2VyIGZyb20gXCIuL2dhbWVib2FyZC1jaGVja2VyXCI7XHJcblxyXG5jb25zdCBHYW1lYm9hcmRDb250cm9sbGVyID0gKCgpID0+IHtcclxuICAgIGZ1bmN0aW9uIGFkZFNoaXAoYm9hcmQsIGxlbmd0aCkge1xyXG4gICAgICAgIGlmICghR2FtZWJvYXJkQ2hlY2tlci5jYW5BZGRTaGlwKGJvYXJkLCBsZW5ndGgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgQXJndW1lbnQgRXhjZXB0aW9uXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBib2FyZC5wdXNoU2hpcChsZW5ndGgpO1xyXG4gICAgICAgIC8vIHJldHVybiBpbmRleCBvZiB0aGUgYWRkZWQgc2hpcFxyXG4gICAgICAgIHJldHVybiBib2FyZC5nZXRTaGlwc0NvdW50KCkgLSAxO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBsYWNlU2hpcChib2FyZCwgc2hpcEluZGV4LCByb3csIGNvbCwgaXNWZXJ0aWNhbCkge1xyXG4gICAgICAgIGlmICghR2FtZWJvYXJkQ2hlY2tlci5jYW5QbGFjZVNoaXAoYm9hcmQsIHNoaXBJbmRleCwgcm93LCBjb2wsIGlzVmVydGljYWwpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgc2hpcFRvUGxhY2UgPSBib2FyZC5nZXRTaGlwKHNoaXBJbmRleCk7XHJcbiAgICAgICAgYm9hcmQuc2V0U2hpcE9yaWVudGF0aW9uKHNoaXBJbmRleCwgaXNWZXJ0aWNhbCk7XHJcbiAgICAgICAgYm9hcmQuc2V0U2hpcFN0YXJ0UG9pbnQoc2hpcEluZGV4LCByb3csIGNvbCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwVG9QbGFjZS5nZXRMZW5ndGgoKTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBib2FyZC5zZXRTaGlwQm9hcmRDZWxsKHJvdyArIGksIGNvbCwgc2hpcEluZGV4KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJvYXJkLnNldFNoaXBCb2FyZENlbGwocm93LCBjb2wgKyBpLCBzaGlwSW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJvYXJkLmRlY3JlYXNlQmxvY2tOb3RPY2N1cGllZChzaGlwVG9QbGFjZS5nZXRMZW5ndGgoKSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlQWxsU2hpcHMoYm9hcmQpIHtcclxuICAgICAgICBjb25zdCBjb3VudCA9IGJvYXJkLmdldFNoaXBzQ291bnQoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gY291bnQgLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICB1bnBsYWNlU2hpcChib2FyZCwgaSk7XHJcbiAgICAgICAgICAgIGJvYXJkLnJlbW92ZVNoaXAoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVucGxhY2VBbGxTaGlwcyhib2FyZCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9hcmQuZ2V0U2hpcHNDb3VudCgpOyBpKyspIHtcclxuICAgICAgICAgICAgdW5wbGFjZVNoaXAoYm9hcmQsIGkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiB1bnBsYWNlU2hpcChib2FyZCwgc2hpcEluZGV4KSB7XHJcbiAgICAgICAgY29uc3Qgc2hpcHNBcnJheSA9IGJvYXJkLmdldFNoaXBzKCk7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBzaGlwc0FycmF5W3NoaXBJbmRleF0ucm93ID09PSB1bmRlZmluZWQgfHxcclxuICAgICAgICAgICAgc2hpcHNBcnJheVtzaGlwSW5kZXhdLmNvbCA9PT0gdW5kZWZpbmVkIHx8XHJcbiAgICAgICAgICAgIHNoaXBzQXJyYXlbc2hpcEluZGV4XS5pc1ZlcnRpY2FsID09PSB1bmRlZmluZWRcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2hpcCBpcyBub3QgcGxhY2VkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzaGlwID0gYm9hcmQuZ2V0U2hpcChzaGlwSW5kZXgpO1xyXG4gICAgICAgIGlmICghc2hpcC5pc1N1bmsoKSkge1xyXG4gICAgICAgICAgICBib2FyZC5kZWNyZWFzZVNoaXBzQWxpdmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYm9hcmQucmVtb3ZlRnJvbUhpdHNCb2FyZChcclxuICAgICAgICAgICAgc2hpcHNBcnJheVtzaGlwSW5kZXhdLnJvdyxcclxuICAgICAgICAgICAgc2hpcHNBcnJheVtzaGlwSW5kZXhdLmNvbCxcclxuICAgICAgICAgICAgc2hpcC5nZXRMZW5ndGgoKSxcclxuICAgICAgICAgICAgc2hpcHNBcnJheVtzaGlwSW5kZXhdLmlzVmVydGljYWwsXHJcbiAgICAgICAgKTtcclxuICAgICAgICBib2FyZC5yZW1vdmVGcm9tU2hpcHNCb2FyZChcclxuICAgICAgICAgICAgc2hpcHNBcnJheVtzaGlwSW5kZXhdLnJvdyxcclxuICAgICAgICAgICAgc2hpcHNBcnJheVtzaGlwSW5kZXhdLmNvbCxcclxuICAgICAgICAgICAgc2hpcC5nZXRMZW5ndGgoKSxcclxuICAgICAgICAgICAgc2hpcHNBcnJheVtzaGlwSW5kZXhdLmlzVmVydGljYWwsXHJcbiAgICAgICAgKTtcclxuICAgICAgICBib2FyZC5pbmNyZWFzZUJsb2NrTm90T2NjdXBpZWQoc2hpcC5nZXRMZW5ndGgoKSk7XHJcbiAgICAgICAgZGVsZXRlIHNoaXBzQXJyYXlbc2hpcEluZGV4XS5yb3c7XHJcbiAgICAgICAgZGVsZXRlIHNoaXBzQXJyYXlbc2hpcEluZGV4XS5jb2w7XHJcbiAgICAgICAgZGVsZXRlIHNoaXBzQXJyYXlbc2hpcEluZGV4XS5pc1ZlcnRpY2FsO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGF1dG9QbGFjZVNoaXBzKGJvYXJkLCBpbmRleCkge1xyXG4gICAgICAgIGNvbnN0IGRwID0gbmV3IFNldCgpO1xyXG4gICAgICAgIGJvYXJkLnNvcnRTaGlwc0J5TGVuZ3RoRGVzYygpO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGF1dG9QbGFjZVNoaXBzRFAoYm9hcmQsIGluZGV4LCBkcCwgRGF0ZS5ub3coKSwgNSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYXV0b1BsYWNlU2hpcHNEUChib2FyZCwgaW5kZXgsIGRwLCB0aW1lLCB0aW1lbGltaXQpIHtcclxuICAgICAgICBpbmRleCA9IGluZGV4ID8/IDA7XHJcbiAgICAgICAgaWYgKGluZGV4ID09PSBib2FyZC5nZXRTaGlwc0NvdW50KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgoRGF0ZS5ub3coKSAtIHRpbWUpIC8gMTAwMCA+IHRpbWVsaW1pdCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaW1lIGxpbWl0IGV4Y2VlZGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBrZXkgPSBgJHtjb252ZXJ0U2hpcHNCb2FyZFRvQm9vbGVhbihib2FyZC5nZXRTaGlwc0JvYXJkKCkpfSAsJHtpbmRleH1gO1xyXG4gICAgICAgIGlmIChkcC5oYXMoa2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwbGFjZXNBdmFpbGFibGUgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvYXJkLmdldEhlaWdodCgpOyBpKyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBib2FyZC5nZXRXaWR0aCgpOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGxldCBpc1ZlcnRpY2FsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoR2FtZWJvYXJkQ2hlY2tlci5jYW5QbGFjZVNoaXAoYm9hcmQsIGluZGV4LCBpLCBqLCBpc1ZlcnRpY2FsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlc0F2YWlsYWJsZS5wdXNoKHsgcm93OiBpLCBjb2w6IGosIGlzVmVydGljYWwgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpc1ZlcnRpY2FsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChHYW1lYm9hcmRDaGVja2VyLmNhblBsYWNlU2hpcChib2FyZCwgaW5kZXgsIGksIGosIGlzVmVydGljYWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VzQXZhaWxhYmxlLnB1c2goeyByb3c6IGksIGNvbDogaiwgaXNWZXJ0aWNhbCB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBBcnJheUhlbHBlci5zaHVmZmxlKHBsYWNlc0F2YWlsYWJsZSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbGFjZXNBdmFpbGFibGUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgcGxhY2VTaGlwKFxyXG4gICAgICAgICAgICAgICAgYm9hcmQsXHJcbiAgICAgICAgICAgICAgICBpbmRleCxcclxuICAgICAgICAgICAgICAgIHBsYWNlc0F2YWlsYWJsZVtpXS5yb3csXHJcbiAgICAgICAgICAgICAgICBwbGFjZXNBdmFpbGFibGVbaV0uY29sLFxyXG4gICAgICAgICAgICAgICAgcGxhY2VzQXZhaWxhYmxlW2ldLmlzVmVydGljYWwsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGlmIChhdXRvUGxhY2VTaGlwc0RQKGJvYXJkLCBpbmRleCArIDEsIGRwLCB0aW1lLCB0aW1lbGltaXQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB1bnBsYWNlU2hpcChib2FyZCwgaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkcC5hZGQoa2V5KTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY29udmVydFNoaXBzQm9hcmRUb0Jvb2xlYW4oc2hpcHNCb2FyZCkge1xyXG4gICAgICAgIGNvbnN0IGJvb2xlYW5Cb2FyZCA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcHNCb2FyZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBib29sZWFuQm9hcmQucHVzaChzaGlwc0JvYXJkW2ldLm1hcCgoaXRlbSkgPT4gKGl0ZW0gIT09IC0xID8gMSA6IDApKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBib29sZWFuQm9hcmQ7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVjZWl2ZUF0dGFjayhib2FyZCwgcm93LCBjb2wsIGJvYXJkVmlldykge1xyXG4gICAgICAgIGlmIChHYW1lYm9hcmRDaGVja2VyLmlzSGl0KGJvYXJkLCByb3csIGNvbCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBBcmd1bWVudCBFeGNlcHRpb25cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJvYXJkLmhpdEJvYXJkQ2VsbChyb3csIGNvbCk7XHJcbiAgICAgICAgY29uc3Qgc2hpcHNCb2FyZCA9IGJvYXJkLmdldFNoaXBzQm9hcmQoKTtcclxuICAgICAgICBpZiAoc2hpcHNCb2FyZFtyb3ddW2NvbF0gPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaGl0dGVkU2hpcEluZGV4ID0gc2hpcHNCb2FyZFtyb3ddW2NvbF07XHJcbiAgICAgICAgY29uc3QgaGl0UG9pbnRPblNoaXAgPSBib2FyZC5pc1ZlcnRpY2FsU2hpcChoaXR0ZWRTaGlwSW5kZXgpXHJcbiAgICAgICAgICAgID8gcm93IC0gYm9hcmQuZ2V0U2hpcFN0YXJ0UG9pbnQoaGl0dGVkU2hpcEluZGV4KS5yb3dcclxuICAgICAgICAgICAgOiBjb2wgLSBib2FyZC5nZXRTaGlwU3RhcnRQb2ludChoaXR0ZWRTaGlwSW5kZXgpLmNvbDtcclxuICAgICAgICBjb25zdCBoaXR0ZWRTaGlwID0gYm9hcmQuZ2V0U2hpcChoaXR0ZWRTaGlwSW5kZXgpO1xyXG4gICAgICAgIGhpdHRlZFNoaXAuaGl0KGhpdFBvaW50T25TaGlwKTtcclxuICAgICAgICBpZiAoaGl0dGVkU2hpcC5pc1N1bmsoKSkge1xyXG4gICAgICAgICAgICBib2FyZC5kZWNyZWFzZVNoaXBzQWxpdmUoKTtcclxuICAgICAgICAgICAgaWYgKGJvYXJkVmlldykge1xyXG4gICAgICAgICAgICAgICAgUHViU3ViLnB1Ymxpc2goXCJTaGlwU3Vua1wiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyVmlldzogYm9hcmRWaWV3LnBsYXllclZpZXcsXHJcbiAgICAgICAgICAgICAgICAgICAgc2hpcExlbmd0aDogaGl0dGVkU2hpcC5nZXRMZW5ndGgoKSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldE5vdERhbWFnZWRDZWxscyhib2FyZCkge1xyXG4gICAgICAgIGNvbnN0IGNlbGxzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2FyZC5nZXRIZWlnaHQoKTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYm9hcmQuZ2V0V2lkdGgoKTsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIUdhbWVib2FyZENoZWNrZXIuaXNIaXQoYm9hcmQsIGksIGopKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbHMucHVzaCh7IHJvdzogaSwgY29sOiBqIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjZWxscztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXREYW1hZ2VkQ2VsbHMoYm9hcmQpIHtcclxuICAgICAgICBjb25zdCBjZWxscyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm9hcmQuZ2V0SGVpZ2h0KCk7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJvYXJkLmdldFdpZHRoKCk7IGorKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKEdhbWVib2FyZENoZWNrZXIuaXNIaXQoYm9hcmQsIGksIGopKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbHMucHVzaCh7IHJvdzogaSwgY29sOiBqIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjZWxscztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXREYW1hZ2VkQ2VsbHNPZkFsaXZlRGFtYWdlZFNoaXBzKGJvYXJkLCBtaW5TaGlwSFBEYW1hZ2VkLCBtYXhTaGlwSFBEYW1hZ2VkKSB7XHJcbiAgICAgICAgY29uc3QgY2VsbHMgPSBbXTtcclxuICAgICAgICBjb25zdCBkYW1hZ2VkQ2VsbHMgPSBnZXREYW1hZ2VkQ2VsbHMoYm9hcmQpO1xyXG4gICAgICAgIGRhbWFnZWRDZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNoaXBJbmRleCA9IGJvYXJkLmdldFNoaXBJbmRleEZyb21Db29yZGluYXRlKGNlbGwucm93LCBjZWxsLmNvbCk7XHJcbiAgICAgICAgICAgIGlmIChzaGlwSW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzaGlwID0gYm9hcmQuZ2V0U2hpcChzaGlwSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICFzaGlwLmlzU3VuaygpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgc2hpcC5nZXRIUERhbWFnZWQoKSA+PSBtaW5TaGlwSFBEYW1hZ2VkICYmXHJcbiAgICAgICAgICAgICAgICAgICAgc2hpcC5nZXRIUERhbWFnZWQoKSA8PSBtYXhTaGlwSFBEYW1hZ2VkXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxscy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93OiBjZWxsLnJvdyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sOiBjZWxsLmNvbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNTaGlwVmVydGljYWw6IGJvYXJkLmlzVmVydGljYWxTaGlwKHNoaXBJbmRleCksXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gY2VsbHM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkVG9Qb3NzaWJsZVRhcmdldHMoYm9hcmQsIHRhcmdldHMsIGNlbGxzKSB7XHJcbiAgICAgICAgY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAhR2FtZWJvYXJkQ2hlY2tlci5pc091dHNpZGVCb2FyZChib2FyZCwgY2VsbC5yb3csIGNlbGwuY29sKSAmJlxyXG4gICAgICAgICAgICAgICAgIUdhbWVib2FyZENoZWNrZXIuaXNIaXQoYm9hcmQsIGNlbGwucm93LCBjZWxsLmNvbClcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRzLnB1c2goY2VsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRTbWFydFRhcmdldHMoYm9hcmQpIHtcclxuICAgICAgICBjb25zdCB0YXJnZXRzID0gW107XHJcbiAgICAgICAgbGV0IGNlbGxzID0gZ2V0RGFtYWdlZENlbGxzT2ZBbGl2ZURhbWFnZWRTaGlwcyhib2FyZCwgMiwgMTApO1xyXG4gICAgICAgIGlmIChjZWxscy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChjZWxsLmlzU2hpcFZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWRkVG9Qb3NzaWJsZVRhcmdldHMoYm9hcmQsIHRhcmdldHMsIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeyByb3c6IGNlbGwucm93IC0gMSwgY29sOiBjZWxsLmNvbCB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7IHJvdzogY2VsbC5yb3cgKyAxLCBjb2w6IGNlbGwuY29sIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFkZFRvUG9zc2libGVUYXJnZXRzKGJvYXJkLCB0YXJnZXRzLCBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgcm93OiBjZWxsLnJvdywgY29sOiBjZWxsLmNvbCAtIDEgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeyByb3c6IGNlbGwucm93LCBjb2w6IGNlbGwuY29sICsgMSB9LFxyXG4gICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldHM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjZWxscyA9IGdldERhbWFnZWRDZWxsc09mQWxpdmVEYW1hZ2VkU2hpcHMoYm9hcmQsIDEsIDEpO1xyXG4gICAgICAgIGNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcclxuICAgICAgICAgICAgYWRkVG9Qb3NzaWJsZVRhcmdldHMoYm9hcmQsIHRhcmdldHMsIFtcclxuICAgICAgICAgICAgICAgIHsgcm93OiBjZWxsLnJvdyAtIDEsIGNvbDogY2VsbC5jb2wgfSxcclxuICAgICAgICAgICAgICAgIHsgcm93OiBjZWxsLnJvdyArIDEsIGNvbDogY2VsbC5jb2wgfSxcclxuICAgICAgICAgICAgICAgIHsgcm93OiBjZWxsLnJvdywgY29sOiBjZWxsLmNvbCAtIDEgfSxcclxuICAgICAgICAgICAgICAgIHsgcm93OiBjZWxsLnJvdywgY29sOiBjZWxsLmNvbCArIDEgfSxcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldHM7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Tm90RGFtYWdlZFNtYXJ0VGFyZ2V0cyhib2FyZCkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldHMgPSBbXTtcclxuICAgICAgICBjb25zdCBjZWxscyA9IGdldE5vdERhbWFnZWRDZWxscyhib2FyZCk7XHJcbiAgICAgICAgY29uc3QgbWluU2hpcExlbmd0aCA9IGdldE1pbk5vdERhbWFnZWRTaGlwTGVuZ3RoKGJvYXJkKTtcclxuICAgICAgICBjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChnZXRIb3Jpem9udGFsTm90RGFtYWdlZExlbmd0aChib2FyZCwgY2VsbC5yb3csIGNlbGwuY29sKSA+PSBtaW5TaGlwTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRzLnB1c2goY2VsbCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZ2V0VmVydGljYWxOb3REYW1hZ2VkTGVuZ3RoKGJvYXJkLCBjZWxsLnJvdywgY2VsbC5jb2wpID49IG1pblNoaXBMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldHMucHVzaChjZWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0YXJnZXRzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldE1pbk5vdERhbWFnZWRTaGlwTGVuZ3RoKGJvYXJkKSB7XHJcbiAgICAgICAgbGV0IG1pbkxlbmd0aCA9IG51bGw7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib2FyZC5nZXRTaGlwc0NvdW50KCk7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBzaGlwID0gYm9hcmQuZ2V0U2hpcChpKTtcclxuICAgICAgICAgICAgaWYgKHNoaXAuZ2V0SFBEYW1hZ2VkKCkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChtaW5MZW5ndGggPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBtaW5MZW5ndGggPSBzaGlwLmdldExlbmd0aCgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtaW5MZW5ndGggPSBNYXRoLm1pbihtaW5MZW5ndGgsIHNoaXAuZ2V0TGVuZ3RoKCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtaW5MZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0SG9yaXpvbnRhbE5vdERhbWFnZWRMZW5ndGgoYm9hcmQsIHJvdywgY29sKSB7XHJcbiAgICAgICAgbGV0IGxlbmd0aCA9IDE7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IGNvbCArIDE7IGkgPCBib2FyZC5nZXRXaWR0aCgpOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKEdhbWVib2FyZENoZWNrZXIuaXNIaXQoYm9hcmQsIHJvdywgaSkpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICsrbGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gY29sIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgaWYgKEdhbWVib2FyZENoZWNrZXIuaXNIaXQoYm9hcmQsIHJvdywgaSkpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICsrbGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gZ2V0VmVydGljYWxOb3REYW1hZ2VkTGVuZ3RoKGJvYXJkLCByb3csIGNvbCkge1xyXG4gICAgICAgIGxldCBsZW5ndGggPSAxO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSByb3cgKyAxOyBpIDwgYm9hcmQuZ2V0SGVpZ2h0KCk7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoR2FtZWJvYXJkQ2hlY2tlci5pc0hpdChib2FyZCwgaSwgY29sKSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKytsZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGkgPSByb3cgLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICBpZiAoR2FtZWJvYXJkQ2hlY2tlci5pc0hpdChib2FyZCwgaSwgY29sKSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKytsZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBhZGRTaGlwLFxyXG4gICAgICAgIHBsYWNlU2hpcCxcclxuICAgICAgICB1bnBsYWNlU2hpcCxcclxuICAgICAgICByZWNlaXZlQXR0YWNrLFxyXG4gICAgICAgIGF1dG9QbGFjZVNoaXBzLFxyXG4gICAgICAgIHVucGxhY2VBbGxTaGlwcyxcclxuICAgICAgICByZW1vdmVBbGxTaGlwcyxcclxuICAgICAgICBnZXROb3REYW1hZ2VkQ2VsbHMsXHJcbiAgICAgICAgZ2V0RGFtYWdlZENlbGxzT2ZBbGl2ZURhbWFnZWRTaGlwcyxcclxuICAgICAgICBnZXRTbWFydFRhcmdldHMsXHJcbiAgICAgICAgZ2V0TWluTm90RGFtYWdlZFNoaXBMZW5ndGgsXHJcbiAgICAgICAgZ2V0Tm90RGFtYWdlZFNtYXJ0VGFyZ2V0cyxcclxuICAgIH07XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBHYW1lYm9hcmRDb250cm9sbGVyO1xyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgYXJyMltpXSA9IGFycltpXTtcbiAgfVxuICByZXR1cm4gYXJyMjtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufSIsImltcG9ydCBhcnJheVdpdGhvdXRIb2xlcyBmcm9tIFwiLi9hcnJheVdpdGhvdXRIb2xlcy5qc1wiO1xuaW1wb3J0IGl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXkuanNcIjtcbmltcG9ydCB1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSBmcm9tIFwiLi91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IG5vbkl0ZXJhYmxlU3ByZWFkIGZyb20gXCIuL25vbkl0ZXJhYmxlU3ByZWFkLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBhcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgbm9uSXRlcmFibGVTcHJlYWQoKTtcbn0iLCJpbXBvcnQgYXJyYXlMaWtlVG9BcnJheSBmcm9tIFwiLi9hcnJheUxpa2VUb0FycmF5LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnJheUxpa2VUb0FycmF5KGFycik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn0iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NsYXNzRXh0cmFjdEZpZWxkRGVzY3JpcHRvcihyZWNlaXZlciwgcHJpdmF0ZU1hcCwgYWN0aW9uKSB7XG4gIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBcIiArIGFjdGlvbiArIFwiIHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xuICB9XG4gIHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XG59IiwiaW1wb3J0IGNsYXNzQXBwbHlEZXNjcmlwdG9yR2V0IGZyb20gXCIuL2NsYXNzQXBwbHlEZXNjcmlwdG9yR2V0LmpzXCI7XG5pbXBvcnQgY2xhc3NFeHRyYWN0RmllbGREZXNjcmlwdG9yIGZyb20gXCIuL2NsYXNzRXh0cmFjdEZpZWxkRGVzY3JpcHRvci5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gY2xhc3NFeHRyYWN0RmllbGREZXNjcmlwdG9yKHJlY2VpdmVyLCBwcml2YXRlTWFwLCBcImdldFwiKTtcbiAgcmV0dXJuIGNsYXNzQXBwbHlEZXNjcmlwdG9yR2V0KHJlY2VpdmVyLCBkZXNjcmlwdG9yKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY2xhc3NBcHBseURlc2NyaXB0b3JHZXQocmVjZWl2ZXIsIGRlc2NyaXB0b3IpIHtcbiAgaWYgKGRlc2NyaXB0b3IuZ2V0KSB7XG4gICAgcmV0dXJuIGRlc2NyaXB0b3IuZ2V0LmNhbGwocmVjZWl2ZXIpO1xuICB9XG4gIHJldHVybiBkZXNjcmlwdG9yLnZhbHVlO1xufSIsImltcG9ydCBjbGFzc0FwcGx5RGVzY3JpcHRvclNldCBmcm9tIFwiLi9jbGFzc0FwcGx5RGVzY3JpcHRvclNldC5qc1wiO1xuaW1wb3J0IGNsYXNzRXh0cmFjdEZpZWxkRGVzY3JpcHRvciBmcm9tIFwiLi9jbGFzc0V4dHJhY3RGaWVsZERlc2NyaXB0b3IuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBjbGFzc0V4dHJhY3RGaWVsZERlc2NyaXB0b3IocmVjZWl2ZXIsIHByaXZhdGVNYXAsIFwic2V0XCIpO1xuICBjbGFzc0FwcGx5RGVzY3JpcHRvclNldChyZWNlaXZlciwgZGVzY3JpcHRvciwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NsYXNzQXBwbHlEZXNjcmlwdG9yU2V0KHJlY2VpdmVyLCBkZXNjcmlwdG9yLCB2YWx1ZSkge1xuICBpZiAoZGVzY3JpcHRvci5zZXQpIHtcbiAgICBkZXNjcmlwdG9yLnNldC5jYWxsKHJlY2VpdmVyLCB2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFkZXNjcmlwdG9yLndyaXRhYmxlKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCByZWFkIG9ubHkgcHJpdmF0ZSBmaWVsZFwiKTtcbiAgICB9XG4gICAgZGVzY3JpcHRvci52YWx1ZSA9IHZhbHVlO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ291bnRlciB7XHJcbiAgICAjbWluO1xyXG5cclxuICAgICNtYXg7XHJcblxyXG4gICAgI2N1cnJlbnROdW1iZXI7XHJcblxyXG4gICAgI21pbnVzRWxlbWVudDtcclxuXHJcbiAgICAjcGx1c0VsZW1lbnQ7XHJcblxyXG4gICAgI251bWJlckVsZW1lbnQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoY291bnRlckVsZW1lbnQsIG1pbiwgbWF4LCBzdGFydGluZ051bWJlcikge1xyXG4gICAgICAgIHRoaXMuI21pbiA9IG1pbjtcclxuICAgICAgICB0aGlzLiNtYXggPSBtYXg7XHJcbiAgICAgICAgdGhpcy4jbWludXNFbGVtZW50ID0gY291bnRlckVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5taW51c1wiKTtcclxuICAgICAgICB0aGlzLiNwbHVzRWxlbWVudCA9IGNvdW50ZXJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGx1c1wiKTtcclxuICAgICAgICB0aGlzLiNudW1iZXJFbGVtZW50ID0gY291bnRlckVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5udW1iZXJcIik7XHJcbiAgICAgICAgdGhpcy4jY3VycmVudE51bWJlciA9IHN0YXJ0aW5nTnVtYmVyO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ291bnRlcigpO1xyXG5cclxuICAgICAgICB0aGlzLiNtaW51c0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgLS10aGlzLiNjdXJyZW50TnVtYmVyO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUNvdW50ZXIoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLiNwbHVzRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICArK3RoaXMuI2N1cnJlbnROdW1iZXI7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ291bnRlcigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUlmTGltaXRSZWFjaGVkKCkge1xyXG4gICAgICAgIGlmICh0aGlzLiNjdXJyZW50TnVtYmVyID09PSB0aGlzLiNtaW4pIHtcclxuICAgICAgICAgICAgdGhpcy4jbWludXNFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLiNtaW51c0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImRpc2FibGVkXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuI2N1cnJlbnROdW1iZXIgPT09IHRoaXMuI21heCkge1xyXG4gICAgICAgICAgICB0aGlzLiNwbHVzRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy4jcGx1c0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImRpc2FibGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVDb3VudGVyKCkge1xyXG4gICAgICAgIHRoaXMuI251bWJlckVsZW1lbnQudGV4dENvbnRlbnQgPSB0aGlzLiNjdXJyZW50TnVtYmVyO1xyXG4gICAgICAgIHRoaXMudXBkYXRlSWZMaW1pdFJlYWNoZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY3VycmVudE51bWJlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jY3VycmVudE51bWJlcjtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVNYXgodmFsdWUpIHtcclxuICAgICAgICB0aGlzLiNtYXggPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLnVwZGF0ZUlmTGltaXRSZWFjaGVkKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiY29uc3QgcGxheWVyVmlld0hlbHBlciA9ICgoKSA9PiB7XHJcbiAgICBmdW5jdGlvbiBjcmVhdGVTaGlwRWxlbWVudChsZW5ndGgsIGxpbWl0KSB7XHJcbiAgICAgICAgY29uc3Qgc2hpcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblxyXG4gICAgICAgIGlmIChsZW5ndGggPCBsaW1pdCkge1xyXG4gICAgICAgICAgICBzaGlwLmNsYXNzTGlzdC5hZGQoXCJzaGlwXCIpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzaGlwQmxvY2sgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICAgICAgc2hpcEJsb2NrLmNsYXNzTGlzdC5hZGQoXCJzaGlwLWJsb2NrXCIpO1xyXG4gICAgICAgICAgICAgICAgc2hpcC5hcHBlbmQoc2hpcEJsb2NrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNoaXAuY2xhc3NMaXN0LmFkZChcInNoaXAtY29tcHJlc3NlZFwiKTtcclxuICAgICAgICAgICAgY29uc3QgbGVmdFBhcmVudGhlc2lzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgICAgIGxlZnRQYXJlbnRoZXNpcy5jbGFzc0xpc3QuYWRkKFwicGFyZW50aGVzaXNcIik7XHJcbiAgICAgICAgICAgIGxlZnRQYXJlbnRoZXNpcy50ZXh0Q29udGVudCA9IFwiKFwiO1xyXG4gICAgICAgICAgICBzaGlwLmFwcGVuZChsZWZ0UGFyZW50aGVzaXMpO1xyXG5cclxuICAgICAgICAgICAgc2hpcC5hcHBlbmQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYCR7bGVuZ3RofSR7U3RyaW5nLmZyb21DaGFyQ29kZSgxNjApfWApKTtcclxuICAgICAgICAgICAgY29uc3Qgc2hpcEJsb2NrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgc2hpcEJsb2NrLmNsYXNzTGlzdC5hZGQoXCJzaGlwLWJsb2NrXCIpO1xyXG4gICAgICAgICAgICBzaGlwLmFwcGVuZChzaGlwQmxvY2spO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcmlnaHRQYXJlbnRoZXNpcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgICAgICAgICByaWdodFBhcmVudGhlc2lzLmNsYXNzTGlzdC5hZGQoXCJwYXJlbnRoZXNpc1wiKTtcclxuICAgICAgICAgICAgcmlnaHRQYXJlbnRoZXNpcy50ZXh0Q29udGVudCA9IFwiKVwiO1xyXG4gICAgICAgICAgICBzaGlwLmFwcGVuZChyaWdodFBhcmVudGhlc2lzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNoaXA7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlU2hpcENvbnRhaW5lckVsZW1lbnQobGVuZ3RoLCBjb3VudCkge1xyXG4gICAgICAgIGNvbnN0IHNoaXBDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIHNoaXBDb250YWluZXIuY2xhc3NMaXN0LmFkZChcInNoaXAtY29udGFpbmVyXCIpO1xyXG4gICAgICAgIHNoaXBDb250YWluZXIuYXBwZW5kKGNyZWF0ZVNoaXBFbGVtZW50KGxlbmd0aCwgNCkpO1xyXG5cclxuICAgICAgICBjb25zdCBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XHJcbiAgICAgICAgcC5pbm5lclRleHQgPSBcInhcIjtcclxuICAgICAgICBjb25zdCBzaGlwc0NvdW50U3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgICAgIHNoaXBzQ291bnRTcGFuLmNsYXNzTGlzdC5hZGQoXCJjb3VudFwiKTtcclxuICAgICAgICBzaGlwc0NvdW50U3Bhbi5pbm5lclRleHQgPSBjb3VudDtcclxuICAgICAgICBwLmFwcGVuZChzaGlwc0NvdW50U3Bhbik7XHJcbiAgICAgICAgc2hpcENvbnRhaW5lci5hcHBlbmQocCk7XHJcblxyXG4gICAgICAgIHNoaXBDb250YWluZXIuZGF0YXNldC5sZW5ndGggPSBsZW5ndGg7XHJcbiAgICAgICAgcmV0dXJuIHNoaXBDb250YWluZXI7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBjcmVhdGVTaGlwQ29udGFpbmVyRWxlbWVudCxcclxuICAgICAgICBjcmVhdGVTaGlwRWxlbWVudCxcclxuICAgIH07XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwbGF5ZXJWaWV3SGVscGVyO1xyXG4iLCJjb25zdCBGb3JtSGVscGVyID0gKCgpID0+IHtcclxuICAgIGZ1bmN0aW9uIGVuYWJsZUJ1dHRvbihidXR0b24pIHtcclxuICAgICAgICBidXR0b24ucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBkaXNhYmxlQnV0dG9uKGJ1dHRvbikge1xyXG4gICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLCBcIlwiKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGVuYWJsZUJ1dHRvbixcclxuICAgICAgICBkaXNhYmxlQnV0dG9uLFxyXG4gICAgfTtcclxufSkoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZvcm1IZWxwZXI7XHJcbiIsImltcG9ydCBDaG9vc2luZ1NoaXBzVGVtcGxhdGUgZnJvbSBcIi4uLy4uL2h0bWwvdGVtcGxhdGVzL21vZGFscy9zaGlwcy1jaG9vc2luZy10ZW1wbGF0ZS5oYW5kbGViYXJzXCI7XHJcbmltcG9ydCBTaGlwQ29udGFpbmVyVGVtcGxhdGUgZnJvbSBcIi4uLy4uL2h0bWwvdGVtcGxhdGVzL21vZGFscy9zaGlwcy1jb250YWluZXItdGVtcGxhdGUuaGFuZGxlYmFyc1wiO1xyXG5pbXBvcnQgQ291bnRlciBmcm9tIFwiLi4vVmlld0hlbHBlci9jb3VudGVyXCI7XHJcbmltcG9ydCBQbGF5ZXJWaWV3SGVscGVyIGZyb20gXCIuLi9QbGF5ZXIvcGxheWVyLXZpZXctaGVscGVyXCI7XHJcbmltcG9ydCBGb3JtSGVscGVyIGZyb20gXCIuLi9WaWV3SGVscGVyL2Zvcm1cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENob29zaW5nU2hpcHNNb2RhbCB7XHJcbiAgICAvLyBET00gRWxlbWVudHNcclxuICAgICNtb2RhbENvbnRhaW5lckVsZW1lbnQ7XHJcblxyXG4gICAgI21vZGFsRWxlbWVudDtcclxuXHJcbiAgICAjc2hpcHNFbGVtZW50O1xyXG5cclxuICAgICNwYWdlc0NvbnRhaW5lckVsZW1lbnQ7XHJcblxyXG4gICAgI2N1cnJlbnRQYWdlRWxlbWVudDtcclxuXHJcbiAgICAjbGVmdEFycm93RWxlbWVudDtcclxuXHJcbiAgICAjcmlnaHRBcnJvd0VsZW1lbnQ7XHJcblxyXG4gICAgLy8gUHJvcGVydGllc1xyXG4gICAgI2JvYXJkV2lkdGg7XHJcblxyXG4gICAgI2JvYXJkSGVpZ2h0O1xyXG5cclxuICAgICNjb3VudGVycztcclxuXHJcbiAgICAjcGFnZVdpZHRoO1xyXG5cclxuICAgICNjdXJyZW50UGFnZTtcclxuXHJcbiAgICAjcGFnZXNOdW07XHJcblxyXG4gICAgI2J0blN1Ym1pdDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihib2FyZFdpZHRoLCBib2FyZEhlaWdodCkge1xyXG4gICAgICAgIHRoaXMuY2FjaGVET00oKTtcclxuICAgICAgICBGb3JtSGVscGVyLmRpc2FibGVCdXR0b24odGhpcy4jYnRuU3VibWl0KTtcclxuICAgICAgICB0aGlzLiNib2FyZFdpZHRoID0gYm9hcmRXaWR0aDtcclxuICAgICAgICB0aGlzLiNib2FyZEhlaWdodCA9IGJvYXJkSGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuI2NvdW50ZXJzID0ge307XHJcbiAgICAgICAgdGhpcy5jcmVhdGVTaGlwc1BhZ2VzKCk7XHJcbiAgICAgICAgdGhpcy5pbml0UGFnaW5hdGlvbigpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlTWF4U2hpcHNDaG9vc2luZ051bWJlcigpO1xyXG4gICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhY2hlRE9NKCkge1xyXG4gICAgICAgIHRoaXMuI21vZGFsQ29udGFpbmVyRWxlbWVudCA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoXHJcbiAgICAgICAgICAgIENob29zaW5nU2hpcHNUZW1wbGF0ZSgpLFxyXG4gICAgICAgICAgICBcInRleHQvaHRtbFwiLFxyXG4gICAgICAgICkuYm9keS5maXJzdEVsZW1lbnRDaGlsZDtcclxuICAgICAgICB0aGlzLiNtb2RhbEVsZW1lbnQgPSB0aGlzLiNtb2RhbENvbnRhaW5lckVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgdGhpcy4jc2hpcHNFbGVtZW50ID0gdGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2hpcHNcIik7XHJcbiAgICAgICAgdGhpcy4jcGFnZXNDb250YWluZXJFbGVtZW50ID0gdGhpcy4jc2hpcHNFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGFnZXMtY29udGFpbmVyXCIpO1xyXG4gICAgICAgIC8vIFBhZ2luYXRpb24gRWxlbWVudHNcclxuICAgICAgICB0aGlzLiNjdXJyZW50UGFnZUVsZW1lbnQgPSB0aGlzLiNtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jdXJyZW50LXBhZ2VcIik7XHJcbiAgICAgICAgdGhpcy4jbGVmdEFycm93RWxlbWVudCA9IHRoaXMuI21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmxlZnQtYXJyb3dcIik7XHJcbiAgICAgICAgdGhpcy4jcmlnaHRBcnJvd0VsZW1lbnQgPSB0aGlzLiNtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5yaWdodC1hcnJvd1wiKTtcclxuICAgICAgICAvLyBPcHRpb25zIEVsZW1lbnRzXHJcbiAgICAgICAgdGhpcy4jYnRuU3VibWl0ID0gdGhpcy4jbW9kYWxDb250YWluZXJFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYnRuLXN1Ym1pdFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBiaW5kRXZlbnRzKCkge1xyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgLi4udGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubWludXNcIiksXHJcbiAgICAgICAgICAgIC4uLnRoaXMuI21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBsdXNcIiksXHJcbiAgICAgICAgXS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTWF4U2hpcHNDaG9vc2luZ051bWJlcigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5iaW5kUGFnaW5hdGlvbkV2ZW50cygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIFBhZ2luYXRpb24gKi9cclxuICAgIGluaXRQYWdpbmF0aW9uKCkge1xyXG4gICAgICAgIHRoaXMuI2N1cnJlbnRQYWdlID0gMTtcclxuICAgICAgICB0aGlzLiNwYWdlc051bSA9IHRoaXMuI3BhZ2VzQ29udGFpbmVyRWxlbWVudC5jaGlsZHJlbi5sZW5ndGg7XHJcbiAgICAgICAgdGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucGFnZXMtbnVtXCIpLnRleHRDb250ZW50ID0gdGhpcy4jcGFnZXNOdW07XHJcbiAgICAgICAgdGhpcy4jcGFnZVdpZHRoID0gXCIxMDAlXCI7XHJcbiAgICAgICAgdGhpcy51cGRhdGVQYWdpbmF0aW9uU3R5bGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBiaW5kUGFnaW5hdGlvbkV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLiNtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5hcnJvdy1jb250YWluZXJcIikuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xyXG4gICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC5jb250YWlucyh0aGlzLiNsZWZ0QXJyb3dFbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFnaW5hdGVMZWZ0KCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuY29udGFpbnModGhpcy4jcmlnaHRBcnJvd0VsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWdpbmF0ZVJpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHBhZ2luYXRlTGVmdCgpIHtcclxuICAgICAgICBpZiAodGhpcy4jY3VycmVudFBhZ2UgPT09IDEpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBBcmd1bWVudCBFeGNlcHRpb25cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC0tdGhpcy4jY3VycmVudFBhZ2U7XHJcbiAgICAgICAgdGhpcy51cGRhdGVQYWdpbmF0aW9uU3R5bGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwYWdpbmF0ZVJpZ2h0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLiNjdXJyZW50UGFnZSA9PT0gdGhpcy4jcGFnZXNOdW0pIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBBcmd1bWVudCBFeGNlcHRpb25cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICsrdGhpcy4jY3VycmVudFBhZ2U7XHJcbiAgICAgICAgdGhpcy51cGRhdGVQYWdpbmF0aW9uU3R5bGUoKTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVQYWdpbmF0aW9uU3R5bGUoKSB7XHJcbiAgICAgICAgdGhpcy4jcGFnZXNDb250YWluZXJFbGVtZW50LnN0eWxlLnJpZ2h0ID0gYGNhbGMoJHt0aGlzLiNjdXJyZW50UGFnZSAtIDF9ICogJHtcclxuICAgICAgICAgICAgdGhpcy4jcGFnZVdpZHRoXHJcbiAgICAgICAgfSlgO1xyXG4gICAgICAgIGlmICh0aGlzLiNjdXJyZW50UGFnZSA9PT0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLiNsZWZ0QXJyb3dFbGVtZW50LmNsb3Nlc3QoXCIuYXJyb3ctY29udGFpbmVyXCIpLmNsYXNzTGlzdC5hZGQoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLiNsZWZ0QXJyb3dFbGVtZW50LmNsb3Nlc3QoXCIuYXJyb3ctY29udGFpbmVyXCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuI2N1cnJlbnRQYWdlID09PSB0aGlzLiNwYWdlc051bSkge1xyXG4gICAgICAgICAgICB0aGlzLiNyaWdodEFycm93RWxlbWVudC5jbG9zZXN0KFwiLmFycm93LWNvbnRhaW5lclwiKS5jbGFzc0xpc3QuYWRkKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy4jcmlnaHRBcnJvd0VsZW1lbnQuY2xvc2VzdChcIi5hcnJvdy1jb250YWluZXJcIikuY2xhc3NMaXN0LnJlbW92ZShcImRpc2FibGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLiNjdXJyZW50UGFnZUVsZW1lbnQudGV4dENvbnRlbnQgPSB0aGlzLiNjdXJyZW50UGFnZTtcclxuICAgIH1cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gICAgLyogQ3JlYXRlIFNoaXBzIFBhZ2VzICovXHJcbiAgICBjcmVhdGVTaGlwc1BhZ2VzKCkge1xyXG4gICAgICAgIGNvbnN0IHNoaXBzUGVyUGFnZSA9IDQ7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gdGhpcy5nZXRNYXhTaGlwTGVuZ3RoKCk7IGkgKz0gc2hpcHNQZXJQYWdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI3BhZ2VzQ29udGFpbmVyRWxlbWVudC5hcHBlbmQodGhpcy5jcmVhdGVQYWdlKGksIHNoaXBzUGVyUGFnZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVQYWdlKGZpcnN0U2hpcExlbmd0aCwgc2hpcHNOdW0pIHtcclxuICAgICAgICBjb25zdCBwYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBwYWdlLmNsYXNzTGlzdC5hZGQoXCJwYWdlXCIpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcHNOdW07IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBzaGlwTGVuZ3RoID0gZmlyc3RTaGlwTGVuZ3RoICsgaTtcclxuICAgICAgICAgICAgaWYgKHNoaXBMZW5ndGggPiB0aGlzLmdldE1heFNoaXBMZW5ndGgoKSkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcGFnZS5hcHBlbmQodGhpcy5jcmVhdGVTaGlwQ29udGFpbmVyKHNoaXBMZW5ndGgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlU2hpcENvbnRhaW5lcihzaGlwTGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3Qgc2hpcENvbnRhaW5lciA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoXHJcbiAgICAgICAgICAgIFNoaXBDb250YWluZXJUZW1wbGF0ZSh7IHNoaXBMZW5ndGgsIHNoaXBDb3VudDogMCB9KSxcclxuICAgICAgICAgICAgXCJ0ZXh0L2h0bWxcIixcclxuICAgICAgICApLmJvZHkuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgY29uc3Qgc2hpcEVsZW1lbnQgPSBQbGF5ZXJWaWV3SGVscGVyLmNyZWF0ZVNoaXBFbGVtZW50KHNoaXBMZW5ndGgsIDUpO1xyXG4gICAgICAgIHNoaXBDb250YWluZXIucXVlcnlTZWxlY3RvcihcIi5zaGlwXCIpLnJlcGxhY2VXaXRoKHNoaXBFbGVtZW50KTtcclxuICAgICAgICB0aGlzLiNjb3VudGVyc1tzaGlwTGVuZ3RoXSA9IG5ldyBDb3VudGVyKHNoaXBDb250YWluZXIsIDAsIDAsIDApO1xyXG4gICAgICAgIHJldHVybiBzaGlwQ29udGFpbmVyO1xyXG4gICAgfVxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbiAgICAvKiBHZW5lcmFsIEdldHRlcnMgKi9cclxuICAgIGdldCBtb2RhbENvbnRhaW5lckVsZW1lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI21vZGFsQ29udGFpbmVyRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbW9kYWxFbGVtZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNtb2RhbEVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0V2lkdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI2JvYXJkV2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0SGVpZ2h0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNib2FyZEhlaWdodDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRNYXhTaGlwTGVuZ3RoKCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLiNib2FyZFdpZHRoLCB0aGlzLiNib2FyZEhlaWdodCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U2hpcHNMaXN0KCkge1xyXG4gICAgICAgIGNvbnN0IHNoaXBzTGlzdCA9IHt9O1xyXG4gICAgICAgIHRoaXMuI3NoaXBzRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnNoaXAtY29udGFpbmVyXCIpLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgc2hpcExlbmd0aCA9IGVsZW1lbnQuZGF0YXNldC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gcGFyc2VJbnQoZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm51bWJlclwiKS50ZXh0Q29udGVudCwgMTApO1xyXG4gICAgICAgICAgICBpZiAoY291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBzaGlwc0xpc3Rbc2hpcExlbmd0aF0gPSBjb3VudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBzaGlwc0xpc3Q7XHJcbiAgICB9XHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAgIHVwZGF0ZU1heFNoaXBzQ2hvb3NpbmdOdW1iZXIoKSB7XHJcbiAgICAgICAgY29uc3QgYm9hcmRTaXplID0gdGhpcy4jYm9hcmRXaWR0aCAqIHRoaXMuI2JvYXJkSGVpZ2h0O1xyXG4gICAgICAgIGxldCBwaWNrZWRTaGlwQmxvY2tzU3VtID0gMDtcclxuICAgICAgICBBcnJheS5mcm9tKE9iamVjdC5rZXlzKHRoaXMuI2NvdW50ZXJzKSkuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICAgIHBpY2tlZFNoaXBCbG9ja3NTdW0gKz0gdGhpcy4jY291bnRlcnNba2V5XS5jdXJyZW50TnVtYmVyICoga2V5O1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChwaWNrZWRTaGlwQmxvY2tzU3VtID4gMCkge1xyXG4gICAgICAgICAgICBGb3JtSGVscGVyLmVuYWJsZUJ1dHRvbih0aGlzLiNidG5TdWJtaXQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIEZvcm1IZWxwZXIuZGlzYWJsZUJ1dHRvbih0aGlzLiNidG5TdWJtaXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBBcnJheS5mcm9tKE9iamVjdC5rZXlzKHRoaXMuI2NvdW50ZXJzKSkuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuI2NvdW50ZXJzW2tleV0udXBkYXRlTWF4KFxyXG4gICAgICAgICAgICAgICAgdGhpcy4jY291bnRlcnNba2V5XS5jdXJyZW50TnVtYmVyICtcclxuICAgICAgICAgICAgICAgICAgICBNYXRoLmZsb29yKChib2FyZFNpemUgLSBwaWNrZWRTaGlwQmxvY2tzU3VtKSAvIGtleSksXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IFJ1bGVzVGVtcGxhdGUgZnJvbSBcIi4uLy4uL2h0bWwvdGVtcGxhdGVzL21vZGFscy9ydWxlcy10ZW1wbGF0ZS5oYW5kbGViYXJzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSdWxlc01vZGFsIHtcclxuICAgIC8vIERPTSBFbGVtZW50c1xyXG4gICAgI21vZGFsQ29udGFpbmVyRWxlbWVudDtcclxuXHJcbiAgICAjbW9kYWxFbGVtZW50O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuY2FjaGVET00oKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWNoZURPTSgpIHtcclxuICAgICAgICB0aGlzLiNtb2RhbENvbnRhaW5lckVsZW1lbnQgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKFxyXG4gICAgICAgICAgICBSdWxlc1RlbXBsYXRlKCksXHJcbiAgICAgICAgICAgIFwidGV4dC9odG1sXCIsXHJcbiAgICAgICAgKS5ib2R5LmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgIHRoaXMuI21vZGFsRWxlbWVudCA9IHRoaXMuI21vZGFsQ29udGFpbmVyRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZDtcclxuICAgIH1cclxuXHJcbiAgICAvKiBHZW5lcmFsIEdldHRlcnMgKi9cclxuICAgIGdldCBtb2RhbENvbnRhaW5lckVsZW1lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI21vZGFsQ29udGFpbmVyRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbW9kYWxFbGVtZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNtb2RhbEVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgICAvKiAjIyMjIyMjIyMjIyMjIyMjIyMjIyAqL1xyXG59XHJcbiIsImltcG9ydCBHYW1lVHlwZVRlbXBsYXRlIGZyb20gXCIuLi8uLi9odG1sL3RlbXBsYXRlcy9tb2RhbHMvZ2FtZS10eXBlLXRlbXBsYXRlLmhhbmRsZWJhcnNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVUeXBlTW9kYWwge1xyXG4gICAgLy8gRE9NIEVsZW1lbnRzXHJcbiAgICAjbW9kYWxDb250YWluZXJFbGVtZW50O1xyXG5cclxuICAgICNtb2RhbEVsZW1lbnQ7XHJcblxyXG4gICAgI2Zvcm07XHJcblxyXG4gICAgLy8gUHJvcGVydGllc1xyXG4gICAgI2h1bWFuTnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuY2FjaGVET00oKTtcclxuICAgICAgICB0aGlzLnNldEh1bWFuTnVtYmVyKCk7XHJcbiAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FjaGVET00oKSB7XHJcbiAgICAgICAgdGhpcy4jbW9kYWxDb250YWluZXJFbGVtZW50ID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhcclxuICAgICAgICAgICAgR2FtZVR5cGVUZW1wbGF0ZSgpLFxyXG4gICAgICAgICAgICBcInRleHQvaHRtbFwiLFxyXG4gICAgICAgICkuYm9keS5maXJzdEVsZW1lbnRDaGlsZDtcclxuICAgICAgICB0aGlzLiNtb2RhbEVsZW1lbnQgPSB0aGlzLiNtb2RhbENvbnRhaW5lckVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgdGhpcy4jZm9ybSA9IHRoaXMuI21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvcm0tZ2FtZS10eXBlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGJpbmRFdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy4jZm9ybS5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIHRoaXMuc2V0SHVtYW5OdW1iZXIuYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyogR2VuZXJhbCBHZXR0ZXJzICovXHJcbiAgICBnZXQgbW9kYWxDb250YWluZXJFbGVtZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNtb2RhbENvbnRhaW5lckVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG1vZGFsRWxlbWVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jbW9kYWxFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGdldGh1bWFuTnVtYmVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNodW1hbk51bWJlcjtcclxuICAgIH1cclxuICAgIC8qICMjIyMjIyMjIyMjIyMjIyMjIyMjICovXHJcblxyXG4gICAgc2V0SHVtYW5OdW1iZXIoKSB7XHJcbiAgICAgICAgdGhpcy4jaHVtYW5OdW1iZXIgPSBwYXJzZUludCh0aGlzLiNmb3JtW1wiZ2FtZS10eXBlXCJdLnZhbHVlLCAxMCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IENvdW50ZXIgZnJvbSBcIi4uL1ZpZXdIZWxwZXIvY291bnRlclwiO1xyXG5pbXBvcnQgR3JpZFNpemVUZW1wbGF0ZSBmcm9tIFwiLi4vLi4vaHRtbC90ZW1wbGF0ZXMvbW9kYWxzL2dyaWQtc2l6ZS10ZW1wbGF0ZS5oYW5kbGViYXJzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcmlkU2l6ZU1vZGFsIHtcclxuICAgIC8vIERPTSBFbGVtZW50c1xyXG4gICAgI21vZGFsQ29udGFpbmVyRWxlbWVudDtcclxuXHJcbiAgICAjbW9kYWxFbGVtZW50O1xyXG5cclxuICAgICNib2FyZEVsZW1lbnQ7XHJcblxyXG4gICAgI3dpZHRoTnVtYmVyRWxlbWVudDtcclxuXHJcbiAgICAjaGVpZ2h0TnVtYmVyRWxlbWVudDtcclxuXHJcbiAgICAvLyBQcm9wZXJ0aWVzXHJcbiAgICAjYm9hcmRXaWR0aDtcclxuXHJcbiAgICAjYm9hcmRIZWlnaHQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYm9hcmRXaWR0aCwgYm9hcmRIZWlnaHQpIHtcclxuICAgICAgICB0aGlzLmNhY2hlRE9NKCk7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRXaWR0aCA9IGJvYXJkV2lkdGg7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRIZWlnaHQgPSBib2FyZEhlaWdodDtcclxuICAgICAgICBuZXcgQ291bnRlcih0aGlzLiNtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi53aWR0aC1jb3VudGVyXCIpLCAxLCAxMCwgdGhpcy4jYm9hcmRXaWR0aCk7XHJcbiAgICAgICAgbmV3IENvdW50ZXIodGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaGVpZ2h0LWNvdW50ZXJcIiksIDEsIDEwLCB0aGlzLiNib2FyZEhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJCb2FyZCgpO1xyXG4gICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhY2hlRE9NKCkge1xyXG4gICAgICAgIHRoaXMuI21vZGFsQ29udGFpbmVyRWxlbWVudCA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoXHJcbiAgICAgICAgICAgIEdyaWRTaXplVGVtcGxhdGUoKSxcclxuICAgICAgICAgICAgXCJ0ZXh0L2h0bWxcIixcclxuICAgICAgICApLmJvZHkuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgdGhpcy4jbW9kYWxFbGVtZW50ID0gdGhpcy4jbW9kYWxDb250YWluZXJFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgIHRoaXMuI3dpZHRoTnVtYmVyRWxlbWVudCA9IHRoaXMuI21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLndpZHRoLWNvdW50ZXIgLm51bWJlclwiKTtcclxuICAgICAgICB0aGlzLiNoZWlnaHROdW1iZXJFbGVtZW50ID0gdGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaGVpZ2h0LWNvdW50ZXIgLm51bWJlclwiKTtcclxuICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnQgPSB0aGlzLiNtb2RhbENvbnRhaW5lckVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5ib2FyZFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBiaW5kRXZlbnRzKCkge1xyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgLi4udGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubWludXNcIiksXHJcbiAgICAgICAgICAgIC4uLnRoaXMuI21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnBsdXNcIiksXHJcbiAgICAgICAgXS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuI2JvYXJkV2lkdGggPSBwYXJzZUludCh0aGlzLiN3aWR0aE51bWJlckVsZW1lbnQudGV4dENvbnRlbnQsIDEwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuI2JvYXJkSGVpZ2h0ID0gcGFyc2VJbnQodGhpcy4jaGVpZ2h0TnVtYmVyRWxlbWVudC50ZXh0Q29udGVudCwgMTApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJCb2FyZCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJCb2FyZCgpIHtcclxuICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgICAvLyB0aGlzLiNib2FyZEVsZW1lbnQuc3R5bGVbXCJncmlkLXRlbXBsYXRlLWNvbHVtbnNcIl0gPSBgcmVwZWF0KCR7dGhpcy4jYm9hcmRXaWR0aH0sIGF1dG8pYDtcclxuICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoXCItLWJvYXJkLWhvcml6b250YWwtY2VsbHNcIiwgdGhpcy4jYm9hcmRXaWR0aCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLiNib2FyZFdpZHRoICogdGhpcy4jYm9hcmRIZWlnaHQ7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgIGJsb2NrLmNsYXNzTGlzdC5hZGQoXCJib2FyZC1ibG9ja1wiKTtcclxuICAgICAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50LmFwcGVuZChibG9jayk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qIEdlbmVyYWwgR2V0dGVycyAqL1xyXG4gICAgZ2V0IG1vZGFsQ29udGFpbmVyRWxlbWVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jbW9kYWxDb250YWluZXJFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBtb2RhbEVsZW1lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI21vZGFsRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRXaWR0aCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jYm9hcmRXaWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRIZWlnaHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI2JvYXJkSGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgLyogIyMjIyMjIyMjIyMjIyMjIyMjIyMgKi9cclxufVxyXG4iLCJpbXBvcnQgYXJyYXlXaXRoSG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRoSG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXlMaW1pdCBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVSZXN0IGZyb20gXCIuL25vbkl0ZXJhYmxlUmVzdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICB2YXIgX2kgPSBhcnIgPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07XG4gIGlmIChfaSA9PSBudWxsKSByZXR1cm47XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuICB2YXIgX3MsIF9lO1xuICB0cnkge1xuICAgIGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9hcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTaGlwKGxlbmd0aCkge1xyXG4gICAgbGV0IGhwUmVtYWluZWQgPSBsZW5ndGg7XHJcbiAgICBjb25zdCBoaXRwb2ludHMgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBoaXRwb2ludHNbaV0gPSAwO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcHJvdG8gPSB7XHJcbiAgICAgICAgaGl0KGluZGV4KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5kZXggIT09IFwibnVtYmVyXCIgfHwgIU51bWJlci5pc0ludGVnZXIoaW5kZXgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIEFyZ3VtZW50IEV4Y2VwdGlvblwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID49IGxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBBcmd1bWVudCBFeGNlcHRpb25cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGhpdHBvaW50c1tpbmRleF0gPT09IDApIHtcclxuICAgICAgICAgICAgICAgIC0taHBSZW1haW5lZDtcclxuICAgICAgICAgICAgICAgIGhpdHBvaW50c1tpbmRleF0gPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc1N1bmsoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBocFJlbWFpbmVkID09PSAwO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0SFBSZW1haW5lZCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGhwUmVtYWluZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXRIaXRwb2ludHMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbLi4uaGl0cG9pbnRzXTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldEhQRGFtYWdlZCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGxlbmd0aCAtIGhwUmVtYWluZWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXRMZW5ndGgoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBsZW5ndGg7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbiAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShwcm90byk7XHJcbn1cclxuIiwiaW1wb3J0IFNoaXAgZnJvbSBcIi4uL1NoaXAvc2hpcC1jb250cm9sbGVyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBHYW1lYm9hcmQod2lkdGgsIGhlaWdodCkge1xyXG4gICAgY29uc3Qgc2hpcHMgPSBbXTtcclxuICAgIGNvbnN0IGhpdHNCb2FyZCA9IFtdO1xyXG4gICAgY29uc3Qgc2hpcHNCb2FyZCA9IFtdO1xyXG4gICAgbGV0IHNoaXBzQWxpdmUgPSAwO1xyXG4gICAgbGV0IGJsb2Nrc05vdE9jY3VwaWVkID0gd2lkdGggKiBoZWlnaHQ7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZWlnaHQ7IGkrKykge1xyXG4gICAgICAgIGhpdHNCb2FyZC5wdXNoKFtdKTtcclxuICAgICAgICBzaGlwc0JvYXJkLnB1c2goW10pO1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgd2lkdGg7IGorKykge1xyXG4gICAgICAgICAgICBoaXRzQm9hcmRbaV1bal0gPSAwO1xyXG4gICAgICAgICAgICBzaGlwc0JvYXJkW2ldW2pdID0gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHByb3RvID0ge1xyXG4gICAgICAgIGdldFdpZHRoKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gd2lkdGg7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0SGVpZ2h0KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldFNoaXBzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gWy4uLnNoaXBzXTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRTaGlwKHNoaXBJbmRleCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2hpcHNbc2hpcEluZGV4XS5zaGlwO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldFNoaXBGcm9tQ29vcmRpbmF0ZShyb3csIGNvbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTaGlwKHRoaXMuZ2V0U2hpcEluZGV4RnJvbUNvb3JkaW5hdGUocm93LCBjb2wpKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRTaGlwSW5kZXhGcm9tQ29vcmRpbmF0ZShyb3csIGNvbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2hpcHNCb2FyZFtyb3ddW2NvbF07XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcHVzaFNoaXAobGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHNoaXBzLnB1c2goeyBzaGlwOiBuZXcgU2hpcChsZW5ndGgpIH0pO1xyXG4gICAgICAgICAgICArK3NoaXBzQWxpdmU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgcmVtb3ZlU2hpcChzaGlwSW5kZXgpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2hpcCA9IHRoaXMuZ2V0U2hpcChzaGlwSW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAoIXNoaXAuaXNTdW5rKCkpIHtcclxuICAgICAgICAgICAgICAgIC0tc2hpcHNBbGl2ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUZyb21IaXRzQm9hcmQoXHJcbiAgICAgICAgICAgICAgICBzaGlwc1tzaGlwSW5kZXhdLnJvdyxcclxuICAgICAgICAgICAgICAgIHNoaXBzW3NoaXBJbmRleF0uY29sLFxyXG4gICAgICAgICAgICAgICAgc2hpcC5nZXRMZW5ndGgoKSxcclxuICAgICAgICAgICAgICAgIHNoaXBzW3NoaXBJbmRleF0uaXNWZXJ0aWNhbCxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVGcm9tU2hpcHNCb2FyZChcclxuICAgICAgICAgICAgICAgIHNoaXBzW3NoaXBJbmRleF0ucm93LFxyXG4gICAgICAgICAgICAgICAgc2hpcHNbc2hpcEluZGV4XS5jb2wsXHJcbiAgICAgICAgICAgICAgICBzaGlwLmdldExlbmd0aCgpLFxyXG4gICAgICAgICAgICAgICAgc2hpcHNbc2hpcEluZGV4XS5pc1ZlcnRpY2FsLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBpZiAoc2hpcHNbc2hpcEluZGV4XS5yb3cgIT09IHVuZGVmaW5lZCAmJiBzaGlwc1tzaGlwSW5kZXhdLmNvbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluY3JlYXNlQmxvY2tOb3RPY2N1cGllZChzaGlwLmdldExlbmd0aCgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzaGlwcy5zcGxpY2Uoc2hpcEluZGV4LCAxKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICByZW1vdmVTaGlwQnlDb29yZGluYXRlcyhyb3csIGNvbCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hpcHNbaV0ucm93ID09PSByb3cgJiYgc2hpcHNbaV0uY29sID09PSBjb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVNoaXAoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICByZW1vdmVGcm9tSGl0c0JvYXJkKHJvdywgY29sLCBsZW5ndGgsIGlzVmVydGljYWwpIHtcclxuICAgICAgICAgICAgaWYgKGlzVmVydGljYWwpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSByb3c7IGkgPCByb3cgKyBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGhpdHNCb2FyZFtpXVtjb2xdID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBjb2w7IGogPCBjb2wgKyBsZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGhpdHNCb2FyZFtyb3ddW2pdID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlbW92ZUZyb21TaGlwc0JvYXJkKHJvdywgY29sLCBsZW5ndGgsIGlzVmVydGljYWwpIHtcclxuICAgICAgICAgICAgaWYgKGlzVmVydGljYWwpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSByb3c7IGkgPCByb3cgKyBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U2hpcEJvYXJkQ2VsbChpLCBjb2wsIC0xKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSBjb2w7IGogPCBjb2wgKyBsZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U2hpcEJvYXJkQ2VsbChyb3csIGosIC0xKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGlzVmVydGljYWxTaGlwKHNoaXBJbmRleCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc2hpcHNbc2hpcEluZGV4XS5pc1ZlcnRpY2FsO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldFNoaXBPcmllbnRhdGlvbihzaGlwSW5kZXgsIGlzVmVydGljYWwpIHtcclxuICAgICAgICAgICAgc2hpcHNbc2hpcEluZGV4XS5pc1ZlcnRpY2FsID0gaXNWZXJ0aWNhbDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBnZXRTaGlwU3RhcnRQb2ludChzaGlwSW5kZXgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgcm93OiBzaGlwc1tzaGlwSW5kZXhdLnJvdywgY29sOiBzaGlwc1tzaGlwSW5kZXhdLmNvbCB9O1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldFNoaXBTdGFydFBvaW50KHNoaXBJbmRleCwgcm93LCBjb2wpIHtcclxuICAgICAgICAgICAgc2hpcHNbc2hpcEluZGV4XS5yb3cgPSByb3c7XHJcbiAgICAgICAgICAgIHNoaXBzW3NoaXBJbmRleF0uY29sID0gY29sO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldFNoaXBzQ291bnQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzaGlwcy5sZW5ndGg7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0U2hpcHNCb2FyZCgpIHtcclxuICAgICAgICAgICAgY29uc3QgY29waWVkU2hpcHNCb2FyZCA9IFtdO1xyXG4gICAgICAgICAgICBzaGlwc0JvYXJkLmZvckVhY2goKHJvdykgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29waWVkU2hpcHNCb2FyZC5wdXNoKFsuLi5yb3ddKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBjb3BpZWRTaGlwc0JvYXJkO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNldFNoaXBCb2FyZENlbGwocm93LCBjb2wsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHNoaXBzQm9hcmRbcm93XVtjb2xdID0gdmFsdWU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZ2V0SGl0c0JvYXJkKCkge1xyXG4gICAgICAgICAgICBjb25zdCBjb3BpZWRIaXRzQm9hcmQgPSBbXTtcclxuICAgICAgICAgICAgaGl0c0JvYXJkLmZvckVhY2goKHJvdykgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29waWVkSGl0c0JvYXJkLnB1c2goWy4uLnJvd10pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGNvcGllZEhpdHNCb2FyZDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBoaXRCb2FyZENlbGwocm93LCBjb2wpIHtcclxuICAgICAgICAgICAgKytoaXRzQm9hcmRbcm93XVtjb2xdO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEJsb2NrTm90T2NjdXBpZWQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBibG9ja3NOb3RPY2N1cGllZDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBkZWNyZWFzZUJsb2NrTm90T2NjdXBpZWQodmFsdWUpIHtcclxuICAgICAgICAgICAgYmxvY2tzTm90T2NjdXBpZWQgLT0gdmFsdWU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5jcmVhc2VCbG9ja05vdE9jY3VwaWVkKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGJsb2Nrc05vdE9jY3VwaWVkICs9IHZhbHVlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldFNoaXBzQWxpdmUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzaGlwc0FsaXZlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGRlY3JlYXNlU2hpcHNBbGl2ZSgpIHtcclxuICAgICAgICAgICAgLS1zaGlwc0FsaXZlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldFNoaXBzTGlzdCgpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2hpcHNMaXN0ID0ge307XHJcbiAgICAgICAgICAgIHNoaXBzLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gc2hpcHNMaXN0W2l0ZW0uc2hpcC5nZXRMZW5ndGgoKV0gPz8gMDtcclxuICAgICAgICAgICAgICAgIHNoaXBzTGlzdFtpdGVtLnNoaXAuZ2V0TGVuZ3RoKCldID0gY291bnQgKyAxO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHNoaXBzTGlzdDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzb3J0U2hpcHNCeUxlbmd0aERlc2MoKSB7XHJcbiAgICAgICAgICAgIHNoaXBzLnNvcnQoKGEsIGIpID0+IGIuc2hpcC5nZXRMZW5ndGgoKSAtIGEuc2hpcC5nZXRMZW5ndGgoKSk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIE9iamVjdC5jcmVhdGUocHJvdG8pO1xyXG59XHJcbiIsImNvbnN0IEJvYXJkSGVscGVyID0gKCgpID0+IHtcclxuICAgIGZ1bmN0aW9uIGdldEJsb2NrSW5kZXhGcm9tQ29vcmRpbmF0ZXMocm93LCBjb2wsIGJvYXJkV2lkdGgpIHtcclxuICAgICAgICByZXR1cm4gcm93ICogYm9hcmRXaWR0aCArIGNvbDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRDb29yZGluYXRlc0Zyb21CbG9ja0luZGV4KGJsb2NrSW5kZXgsIGJvYXJkV2lkdGgpIHtcclxuICAgICAgICBjb25zdCByb3cgPSBNYXRoLmZsb29yKGJsb2NrSW5kZXggLyBib2FyZFdpZHRoKTtcclxuICAgICAgICBjb25zdCBjb2wgPSBibG9ja0luZGV4ICUgYm9hcmRXaWR0aDtcclxuICAgICAgICByZXR1cm4gW3JvdywgY29sXTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRCbG9ja1RvcE9mZnNldChib2FyZEVsZW1lbnQsIGJsb2NrSW5kZXgpIHtcclxuICAgICAgICBjb25zdCBibG9jayA9IEFycmF5LmZyb20oYm9hcmRFbGVtZW50LmNoaWxkcmVuKVtibG9ja0luZGV4XTtcclxuICAgICAgICByZXR1cm4gYmxvY2sub2Zmc2V0VG9wO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdldEJsb2NrSW5kZXhGcm9tQmxvY2tFbGVtZW50KGJvYXJkRWxlbWVudCwgYmxvY2tFbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oYm9hcmRFbGVtZW50LmNoaWxkcmVuKS5pbmRleE9mKGJsb2NrRWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0QmxvY2tMZWZ0T2Zmc2V0KGJvYXJkRWxlbWVudCwgYmxvY2tJbmRleCkge1xyXG4gICAgICAgIGNvbnN0IGJsb2NrID0gQXJyYXkuZnJvbShib2FyZEVsZW1lbnQuY2hpbGRyZW4pW2Jsb2NrSW5kZXhdO1xyXG4gICAgICAgIHJldHVybiBibG9jay5vZmZzZXRMZWZ0O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZVNoaXBFbGVtZW50KGxlbmd0aCwgaXNWZXJ0aWNhbCkge1xyXG4gICAgICAgIGNvbnN0IHNoaXBFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBzaGlwRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwic2hpcFwiKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNoaXBCbG9jayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgIHNoaXBCbG9jay5jbGFzc0xpc3QuYWRkKFwic2hpcC1ibG9ja1wiKTtcclxuICAgICAgICAgICAgc2hpcEVsZW1lbnQuYXBwZW5kKHNoaXBCbG9jayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNoaXBFbGVtZW50LmNsYXNzTGlzdC5hZGQoYCR7aXNWZXJ0aWNhbCA/IFwidmVydGljYWxcIiA6IFwiaG9yaXpvbnRhbFwifWApO1xyXG4gICAgICAgIHJldHVybiBzaGlwRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjcmVhdGVTaGlwT25Cb2FyZChcclxuICAgICAgICBib2FyZEVsZW1lbnQsXHJcbiAgICAgICAgYm9hcmRXaWR0aCxcclxuICAgICAgICByb3csXHJcbiAgICAgICAgY29sLFxyXG4gICAgICAgIGxlbmd0aCxcclxuICAgICAgICBpc1ZlcnRpY2FsLFxyXG4gICAgICAgIGlkLFxyXG4gICAgICAgIHNoaXBFbGVtZW50LFxyXG4gICAgKSB7XHJcbiAgICAgICAgaWYgKHNoaXBFbGVtZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgc2hpcEVsZW1lbnQgPSBCb2FyZEhlbHBlci5jcmVhdGVTaGlwRWxlbWVudChsZW5ndGgsIGlzVmVydGljYWwpO1xyXG4gICAgICAgICAgICBzaGlwRWxlbWVudC5kYXRhc2V0LmlkID0gaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGJsb2NrSW5kZXggPSBCb2FyZEhlbHBlci5nZXRCbG9ja0luZGV4RnJvbUNvb3JkaW5hdGVzKHJvdywgY29sLCBib2FyZFdpZHRoKTtcclxuICAgICAgICBzaGlwRWxlbWVudC5zdHlsZS50b3AgPSBgJHtCb2FyZEhlbHBlci5nZXRCbG9ja1RvcE9mZnNldChib2FyZEVsZW1lbnQsIGJsb2NrSW5kZXgpfXB4YDtcclxuICAgICAgICBzaGlwRWxlbWVudC5zdHlsZS5sZWZ0ID0gYCR7Qm9hcmRIZWxwZXIuZ2V0QmxvY2tMZWZ0T2Zmc2V0KGJvYXJkRWxlbWVudCwgYmxvY2tJbmRleCl9cHhgO1xyXG4gICAgICAgIHNoaXBFbGVtZW50LnN0eWxlW1wiZmxleC1kaXJlY3Rpb25cIl0gPSBgJHtpc1ZlcnRpY2FsID8gXCJjb2x1bW5cIiA6IFwicm93XCJ9YDtcclxuICAgICAgICBib2FyZEVsZW1lbnQuYXBwZW5kKHNoaXBFbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGdldEJsb2NrSW5kZXhGcm9tQ29vcmRpbmF0ZXMsXHJcbiAgICAgICAgZ2V0Q29vcmRpbmF0ZXNGcm9tQmxvY2tJbmRleCxcclxuICAgICAgICBnZXRCbG9ja0luZGV4RnJvbUJsb2NrRWxlbWVudCxcclxuICAgICAgICBnZXRCbG9ja1RvcE9mZnNldCxcclxuICAgICAgICBnZXRCbG9ja0xlZnRPZmZzZXQsXHJcbiAgICAgICAgY3JlYXRlU2hpcEVsZW1lbnQsXHJcbiAgICAgICAgY3JlYXRlU2hpcE9uQm9hcmQsXHJcbiAgICB9O1xyXG59KSgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQm9hcmRIZWxwZXI7XHJcbiIsImltcG9ydCBHYW1lYm9hcmRDb250cm9sbGVyIGZyb20gXCIuLi9HYW1lYm9hcmQvZ2FtZWJvYXJkLWNvbnRyb2xsZXJcIjtcclxuaW1wb3J0IEdhbWVib2FyZCBmcm9tIFwiLi4vR2FtZWJvYXJkL2dhbWVib2FyZC1tb2RlbFwiO1xyXG5pbXBvcnQgcGxheWVyVmlld0hlbHBlciBmcm9tIFwiLi4vUGxheWVyL3BsYXllci12aWV3LWhlbHBlclwiO1xyXG5pbXBvcnQgUGxhY2luZ1NoaXBzVGVtcGxhdGUgZnJvbSBcIi4uLy4uL2h0bWwvdGVtcGxhdGVzL21vZGFscy9zaGlwcy1wbGFjaW5nLXRlbXBsYXRlLmhhbmRsZWJhcnNcIjtcclxuaW1wb3J0IFNoaXBDb250YWluZXJUZW1wbGF0ZSBmcm9tIFwiLi4vLi4vaHRtbC90ZW1wbGF0ZXMvbW9kYWxzL3NoaXBzLWNvbnRhaW5lci1wbGFjaW5nLW1vZGFsLXRlbXBsYXRlLmhhbmRsZWJhcnNcIjtcclxuaW1wb3J0IEZvcm1IZWxwZXIgZnJvbSBcIi4uL1ZpZXdIZWxwZXIvZm9ybVwiO1xyXG5pbXBvcnQgQm9hcmRIZWxwZXIgZnJvbSBcIi4uL1ZpZXdIZWxwZXIvYm9hcmRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoaXBzUGxhY2luZ01vZGFsIHtcclxuICAgIC8vIERPTSBFbGVtZW50c1xyXG4gICAgI21vZGFsQ29udGFpbmVyRWxlbWVudDtcclxuXHJcbiAgICAjbW9kYWxFbGVtZW50O1xyXG5cclxuICAgICNwYXVzZUNvbnRhaW5lckVsZW1lbnQ7XHJcblxyXG4gICAgI2J0bkF1dG9QbGFjZTtcclxuXHJcbiAgICAjYXV0b1BsYWNlRXJyb3JFbGVtZW50O1xyXG5cclxuICAgICNidG5TdWJtaXQ7XHJcblxyXG4gICAgLy8gUHJvcGVydGllc1xyXG4gICAgI3NoaXBJZDtcclxuXHJcbiAgICAjYm9hcmRXaWR0aDtcclxuXHJcbiAgICAjYm9hcmRIZWlnaHQ7XHJcblxyXG4gICAgI3NoaXBzTGlzdDtcclxuXHJcbiAgICAjYWxsU2hpcHNMaXN0O1xyXG5cclxuICAgICNjdXJyZW50UGxheWVyTnVtO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHBsYXllcnNOdW0sXHJcbiAgICAgICAgY3VycmVudFBsYXllck51bSxcclxuICAgICAgICBzaGlwc0xpc3QsXHJcbiAgICAgICAgYm9hcmRXaWR0aCxcclxuICAgICAgICBib2FyZEhlaWdodCxcclxuICAgICAgICBpc0ZpcnN0Um91bmQsXHJcbiAgICAgICAgcGxheWVyTmFtZSxcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMuI2JvYXJkV2lkdGggPSBib2FyZFdpZHRoO1xyXG4gICAgICAgIHRoaXMuI2JvYXJkSGVpZ2h0ID0gYm9hcmRIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy4jY3VycmVudFBsYXllck51bSA9IGN1cnJlbnRQbGF5ZXJOdW07XHJcbiAgICAgICAgbGV0IHBsYXllckxhYmVsID0gaXNGaXJzdFJvdW5kID8gXCJQbGF5ZXJcIiA6IHBsYXllck5hbWU7XHJcbiAgICAgICAgaWYgKGlzRmlyc3RSb3VuZCAmJiBjdXJyZW50UGxheWVyTnVtID09PSAxICYmIHBsYXllcnNOdW0gPiAxKSB7XHJcbiAgICAgICAgICAgIHBsYXllckxhYmVsID0gXCJGaXJzdCBQbGF5ZXJcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGlzRmlyc3RSb3VuZCAmJiBjdXJyZW50UGxheWVyTnVtID09PSAyKSB7XHJcbiAgICAgICAgICAgIHBsYXllckxhYmVsID0gXCJTZWNvbmQgUGxheWVyXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuI3NoaXBzUGxhY2VkID0gMDtcclxuICAgICAgICB0aGlzLiNzaGlwSWQgPSAxO1xyXG4gICAgICAgIHRoaXMuI2FsbFNoaXBzTGlzdCA9IHNoaXBzTGlzdDtcclxuICAgICAgICB0aGlzLiNzaGlwc0xpc3QgPSB7fTtcclxuXHJcbiAgICAgICAgdGhpcy5jYWNoZURPTShwbGF5ZXJMYWJlbCk7XHJcbiAgICAgICAgdGhpcy5pbml0UGxheWVyQXJlYShpc0ZpcnN0Um91bmQsIHBsYXllck5hbWUpO1xyXG4gICAgICAgIHRoaXMuaW5pdFNoaXBzQXJlYShzaGlwc0xpc3QpO1xyXG4gICAgICAgIHRoaXMuaW5pdFBhZ2luYXRpb24oKTtcclxuICAgICAgICB0aGlzLmluaXRCb2FyZEFyZWEoKTtcclxuICAgICAgICAvLyBPcHRpb25zIEVsZW1lbnRzXHJcbiAgICAgICAgRm9ybUhlbHBlci5kaXNhYmxlQnV0dG9uKHRoaXMuI2J0blN1Ym1pdCk7XHJcblxyXG4gICAgICAgIC8vIEV2ZW50c1xyXG4gICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xyXG4gICAgfVxyXG5cclxuICAgIGNhY2hlRE9NKHBsYXllckxhYmVsKSB7XHJcbiAgICAgICAgdGhpcy4jbW9kYWxDb250YWluZXJFbGVtZW50ID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhcclxuICAgICAgICAgICAgUGxhY2luZ1NoaXBzVGVtcGxhdGUoe1xyXG4gICAgICAgICAgICAgICAgcGxheWVyTGFiZWwsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBcInRleHQvaHRtbFwiLFxyXG4gICAgICAgICkuYm9keS5maXJzdEVsZW1lbnRDaGlsZDtcclxuICAgICAgICB0aGlzLiNtb2RhbEVsZW1lbnQgPSB0aGlzLiNtb2RhbENvbnRhaW5lckVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICAgICAgdGhpcy4jcGF1c2VDb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wYXVzZS1jb250YWluZXJcIik7XHJcbiAgICAgICAgdGhpcy4jYnRuQXV0b1BsYWNlID0gdGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYnRuLWF1dG8tcGxhY2VcIik7XHJcbiAgICAgICAgdGhpcy4jYXV0b1BsYWNlRXJyb3JFbGVtZW50ID0gdGhpcy4jYnRuQXV0b1BsYWNlLm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICB0aGlzLiNidG5TdWJtaXQgPSB0aGlzLiNtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5idG4tc3VibWl0XCIpO1xyXG4gICAgICAgIHRoaXMuY2FjaGVQbGF5ZXJBcmVhRE9NKCk7XHJcbiAgICAgICAgdGhpcy5jYWNoZVNoaXBzQXJlYURPTSgpO1xyXG4gICAgICAgIHRoaXMuY2FjaGVQYWdpbmF0aW9uRE9NKCk7XHJcbiAgICAgICAgdGhpcy5jYWNoZUJvYXJkQXJlYURPTSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGJpbmRFdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy5iaW5kUGxheWVyQXJlYUV2ZW50cygpO1xyXG4gICAgICAgIHRoaXMuYmluZFNoaXBzQXJlYUV2ZW50cygpO1xyXG4gICAgICAgIHRoaXMuYmluZFBhZ2luYXRpb25FdmVudHMoKTtcclxuICAgICAgICB0aGlzLmJpbmRCb2FyZEFyZWFFdmVudHMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiBQbGF5ZXIgQXJlYSAqL1xyXG4gICAgI3BsYXllck5hbWVTZWN0aW9uRWxlbWVudDtcclxuXHJcbiAgICAjcGxheWVyTmFtZUVsZW1lbnQ7XHJcblxyXG4gICAgaW5pdFBsYXllckFyZWEoaXNGaXJzdFJvdW5kLCBwbGF5ZXJOYW1lKSB7XHJcbiAgICAgICAgaWYgKCFpc0ZpcnN0Um91bmQpIHtcclxuICAgICAgICAgICAgY29uc3QgaHIgPSB0aGlzLiNwbGF5ZXJOYW1lU2VjdGlvbkVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICB0aGlzLiNwbGF5ZXJOYW1lRWxlbWVudC52YWx1ZSA9IHBsYXllck5hbWU7XHJcbiAgICAgICAgICAgIHRoaXMuI3BsYXllck5hbWVTZWN0aW9uRWxlbWVudC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgaHIucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNhY2hlUGxheWVyQXJlYURPTSgpIHtcclxuICAgICAgICB0aGlzLiNwbGF5ZXJOYW1lU2VjdGlvbkVsZW1lbnQgPSB0aGlzLiNtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5zZWN0aW9uLXBsYXllci1uYW1lXCIpO1xyXG4gICAgICAgIHRoaXMuI3BsYXllck5hbWVFbGVtZW50ID0gdGhpcy4jcGxheWVyTmFtZVNlY3Rpb25FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFtuYW1lXVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBiaW5kUGxheWVyQXJlYUV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLiNwbGF5ZXJOYW1lRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5cHJlc3NcIiwgdGhpcy5vbktleVByZXNzUGxheWVyTmFtZS5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICBvbktleVByZXNzUGxheWVyTmFtZShlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tJZk1heFBsYXllck5hbWVSZWFjaGVkKCkpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjaGVja0lmTWF4UGxheWVyTmFtZVJlYWNoZWQoKSB7XHJcbiAgICAgICAgY29uc3QgbWF4TGVuZ3RoID0gMTU7XHJcbiAgICAgICAgY29uc3QgY3VycmVudExlbmd0aCA9IHRoaXMuI3BsYXllck5hbWVFbGVtZW50LnZhbHVlLmxlbmd0aDtcclxuICAgICAgICByZXR1cm4gY3VycmVudExlbmd0aCA9PT0gbWF4TGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBsYXllck5hbWUoKSB7XHJcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuI3BsYXllck5hbWVFbGVtZW50LnZhbHVlO1xyXG4gICAgICAgIHJldHVybiBuYW1lID09PSBcIlwiID8gYFBsYXllciR7dGhpcy4jY3VycmVudFBsYXllck51bX1gIDogbmFtZTtcclxuICAgIH1cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gICAgLyogU2hpcHMgQXJlYSAqL1xyXG4gICAgLy8gRE9NIEVsZW1lbnRzXHJcbiAgICAjc2hpcHNDb250YWluZXJzRWxlbWVudHM7XHJcblxyXG4gICAgI3NoaXBzTnVtYmVyc0VsZW1lbnRzO1xyXG5cclxuICAgICNhY3RpdmVTaGlwRWxlbWVudDtcclxuXHJcbiAgICAvLyBQcm9wZXJ0aWVzXHJcbiAgICAjYWN0aXZlU2hpcExlbmd0aDtcclxuXHJcbiAgICAjdG90YWxTaGlwcztcclxuXHJcbiAgICAvKiB0aGUgc2hpcCB0aGF0cyBpcyBub3QgY29uZmlybWVkIHRvIGJlIHBsYWNlZCB5ZXRcclxuICAgICAgICAoanVzdCB0byBzaG93IGhvdyB0aGUgc2hpcCB3aWxsIGJlIHBsYWNlZCBvbiBib2FyZClcclxuICAgICovXHJcbiAgICAjdGVtcFNoaXA7XHJcblxyXG4gICAgaW5pdFNoaXBzQXJlYShzaGlwc0xpc3QpIHtcclxuICAgICAgICB0aGlzLiNzaGlwc0NvbnRhaW5lcnNFbGVtZW50cyA9IHt9O1xyXG4gICAgICAgIHRoaXMuI3NoaXBzTnVtYmVyc0VsZW1lbnRzID0ge307XHJcbiAgICAgICAgdGhpcy5jcmVhdGVTaGlwc1BhZ2VzKHNoaXBzTGlzdCk7XHJcbiAgICAgICAgdGhpcy4jdG90YWxTaGlwcyA9IDA7XHJcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy4jc2hpcHNOdW1iZXJzRWxlbWVudHMpLmZvckVhY2goKHNoaXBMZW5ndGgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy4jdG90YWxTaGlwcyArPSBwYXJzZUludCh0aGlzLiNzaGlwc051bWJlcnNFbGVtZW50c1tzaGlwTGVuZ3RoXS50ZXh0Q29udGVudCwgMTApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2V0QWN0aXZlU2hpcCh0aGlzLiNtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5zaGlwLWNvbXByZXNzZWRcIikpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlVGVtcFNoaXAodGhpcy4jYWN0aXZlU2hpcExlbmd0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgYmluZFNoaXBzQXJlYUV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLiNtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wYWdlIC5zaGlwLWJsb2NrXCIpLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVTaGlwKGVsZW1lbnQuY2xvc2VzdChcIi5zaGlwLWNvbXByZXNzZWRcIikpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuI2FjdGl2ZU9yaWVudGF0aW9uSXNWZXJ0aWNhbCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UGxhY2VPcHRpb25BY3RpdmUoXCJoXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjYWNoZVNoaXBzQXJlYURPTSgpIHtcclxuICAgICAgICB0aGlzLiNwYWdlc0NvbnRhaW5lckVsZW1lbnQgPSB0aGlzLiNtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5wYWdlcy1jb250YWluZXJcIik7XHJcbiAgICB9XHJcblxyXG4gICAgaW5jcmVhc2VTaGlwQ291bnQoc2hpcExlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRDb3VudCA9IHBhcnNlSW50KHRoaXMuI3NoaXBzTnVtYmVyc0VsZW1lbnRzW3NoaXBMZW5ndGhdLnRleHRDb250ZW50LCAxMCk7XHJcbiAgICAgICAgdGhpcy4jc2hpcHNOdW1iZXJzRWxlbWVudHNbc2hpcExlbmd0aF0udGV4dENvbnRlbnQgPSBjdXJyZW50Q291bnQgKyAxO1xyXG4gICAgfVxyXG5cclxuICAgIGRlY3JlYXNlU2hpcENvdW50KHNoaXBMZW5ndGgpIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50Q291bnQgPSBwYXJzZUludCh0aGlzLiNzaGlwc051bWJlcnNFbGVtZW50c1tzaGlwTGVuZ3RoXS50ZXh0Q29udGVudCwgMTApO1xyXG4gICAgICAgIGlmIChjdXJyZW50Q291bnQgPT09IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuI3NoaXBzTnVtYmVyc0VsZW1lbnRzW3NoaXBMZW5ndGhdLnRleHRDb250ZW50ID0gY3VycmVudENvdW50IC0gMTtcclxuICAgIH1cclxuXHJcbiAgICByZXNldEFsbFNoaXBzQ291bnQoKSB7XHJcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy4jc2hpcHNOdW1iZXJzRWxlbWVudHMpLmZvckVhY2goKHNoaXBMZW5ndGgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy4jc2hpcHNOdW1iZXJzRWxlbWVudHNbc2hpcExlbmd0aF0udGV4dENvbnRlbnQgPSAwO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEFjdGl2ZVNoaXAoc2hpcCkge1xyXG4gICAgICAgIGlmIChzaGlwID09PSB0aGlzLiNhY3RpdmVTaGlwRWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLiNhY3RpdmVTaGlwRWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aGlzLiNhY3RpdmVTaGlwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLiNhY3RpdmVTaGlwRWxlbWVudCA9IHNoaXAuY2xvc2VzdChcIi5zaGlwLWNvbXByZXNzZWRcIik7XHJcbiAgICAgICAgdGhpcy4jYWN0aXZlU2hpcEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgICAgICBjb25zdCBhY3RpdmVTaGlwQ29udGFpbmVyID0gdGhpcy4jYWN0aXZlU2hpcEVsZW1lbnQuY2xvc2VzdChcIi5zaGlwLWNvbnRhaW5lclwiKTtcclxuICAgICAgICBjb25zdCBzaGlwTGVuZ3RoID0gcGFyc2VJbnQoYWN0aXZlU2hpcENvbnRhaW5lci5kYXRhc2V0Lmxlbmd0aCwgMTApO1xyXG4gICAgICAgIHRoaXMuI2FjdGl2ZVNoaXBMZW5ndGggPSBzaGlwTGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IHNoaXBDb3VudCA9IHBhcnNlSW50KHRoaXMuI3NoaXBzTnVtYmVyc0VsZW1lbnRzW3NoaXBMZW5ndGhdLnRleHRDb250ZW50LCAxMCk7XHJcbiAgICAgICAgaWYgKHNoaXBDb3VudCAhPT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVRlbXBTaGlwKHRoaXMuI2FjdGl2ZVNoaXBMZW5ndGgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVTaGlwc1BhZ2VzKHNoaXBzTGlzdCkge1xyXG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzaGlwc0xpc3QpLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcclxuICAgICAgICBjb25zdCBzaGlwc1BlclBhZ2UgPSA0O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkgKz0gc2hpcHNQZXJQYWdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI3BhZ2VzQ29udGFpbmVyRWxlbWVudC5hcHBlbmQodGhpcy5jcmVhdGVQYWdlKGksIHNoaXBzUGVyUGFnZSwga2V5cywgc2hpcHNMaXN0KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZVBhZ2UoZmlyc3RTaGlwSW5kZXgsIHNoaXBzTnVtLCBrZXlzLCBzaGlwc0xpc3QpIHtcclxuICAgICAgICBjb25zdCBwYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBwYWdlLmNsYXNzTGlzdC5hZGQoXCJwYWdlXCIpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcHNOdW0gJiYgZmlyc3RTaGlwSW5kZXggKyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBzaGlwTGVuZ3RoID0ga2V5c1tmaXJzdFNoaXBJbmRleCArIGldO1xyXG4gICAgICAgICAgICBjb25zdCBzaGlwQ291bnQgPSBzaGlwc0xpc3Rbc2hpcExlbmd0aF07XHJcbiAgICAgICAgICAgIGNvbnN0IHNoaXBDb250YWluZXIgPSB0aGlzLmNyZWF0ZVNoaXBDb250YWluZXIoc2hpcExlbmd0aCwgc2hpcENvdW50KTtcclxuICAgICAgICAgICAgcGFnZS5hcHBlbmQoc2hpcENvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMuI3NoaXBzQ29udGFpbmVyc0VsZW1lbnRzW3NoaXBMZW5ndGhdID0gc2hpcENvbnRhaW5lcjtcclxuICAgICAgICAgICAgdGhpcy4jc2hpcHNOdW1iZXJzRWxlbWVudHNbc2hpcExlbmd0aF0gPSBzaGlwQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIubnVtYmVyXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGFnZTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVTaGlwQ29udGFpbmVyKHNoaXBMZW5ndGgsIHNoaXBDb3VudCkge1xyXG4gICAgICAgIGNvbnN0IHNoaXBDb250YWluZXIgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKFxyXG4gICAgICAgICAgICBTaGlwQ29udGFpbmVyVGVtcGxhdGUoeyBzaGlwTGVuZ3RoLCBzaGlwQ291bnQgfSksXHJcbiAgICAgICAgICAgIFwidGV4dC9odG1sXCIsXHJcbiAgICAgICAgKS5ib2R5LmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgIGNvbnN0IHNoaXBFbGVtZW50ID0gcGxheWVyVmlld0hlbHBlci5jcmVhdGVTaGlwRWxlbWVudChzaGlwTGVuZ3RoLCAxKTtcclxuICAgICAgICBzaGlwQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIuc2hpcFwiKS5yZXBsYWNlV2l0aChzaGlwRWxlbWVudCk7XHJcbiAgICAgICAgcmV0dXJuIHNoaXBDb250YWluZXI7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlVGVtcFNoaXAobGVuZ3RoKSB7XHJcbiAgICAgICAgdGhpcy4jdGVtcFNoaXAgPSBCb2FyZEhlbHBlci5jcmVhdGVTaGlwRWxlbWVudChsZW5ndGgpO1xyXG4gICAgICAgIHRoaXMuI3RlbXBTaGlwLmNsYXNzTGlzdC5hZGQoXCJ0ZW1wLXNoaXBcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbiAgICAvKiAgUGxhY2UgU2hpcHMgKi9cclxuICAgICNzaGlwc1BsYWNlZDtcclxuXHJcbiAgICBiaW5kUGxhY2VTaGlwc0V2ZW50cygpIHtcclxuICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICAgIGlmIChibG9jay5jbGFzc0xpc3QuY29udGFpbnMoXCJib2FyZC1ibG9ja1wiKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkNsaWNrUGxhY2VTaGlwT25Cb2FyZChlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmJvYXJkLWJsb2NrXCIpLmZvckVhY2goKGJsb2NrKSA9PiB7XHJcbiAgICAgICAgICAgIGJsb2NrLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWVudGVyXCIsIHRoaXMuT25Nb3VzZUVudGVyQm9hcmRCbG9jay5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgYmxvY2suYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5vbk1vdXNlTGVhdmVCb2FyZEJsb2NrLmJpbmQodGhpcykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuI2J0bkF1dG9QbGFjZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLiNwYXVzZUNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiLCBcImZyb250XCIpO1xyXG4gICAgICAgICAgICB0aGlzLiNwYXVzZUNvbnRhaW5lckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICAgICAgICAgIFwidHJhbnNpdGlvbmVuZFwiLFxyXG4gICAgICAgICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzUGxhY2VkID0gdGhpcy5hdXRvUGxhY2VTaGlwcy5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNQbGFjZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jYXV0b1BsYWNlRXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkLW5vbmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jYXV0b1BsYWNlRXJyb3JFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJkLW5vbmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3BhdXNlQ29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIsIFwiZnJvbnRcIik7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgeyBvbmNlOiB0cnVlIH0sXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcGxhY2VTaGlwT25Cb2FyZChyb3csIGNvbCwgbGVuZ3RoLCBpc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNhblBsYWNlU2hpcChsZW5ndGgsIHJvdywgY29sLCBpc1ZlcnRpY2FsKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY3VycmVudElkID0gdGhpcy4jc2hpcElkKys7XHJcbiAgICAgICAgdGhpcy4jc2hpcHNMaXN0W2N1cnJlbnRJZF0gPSB7XHJcbiAgICAgICAgICAgIHJvdyxcclxuICAgICAgICAgICAgY29sLFxyXG4gICAgICAgICAgICBsZW5ndGgsXHJcbiAgICAgICAgICAgIGlzVmVydGljYWwsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBCb2FyZEhlbHBlci5jcmVhdGVTaGlwT25Cb2FyZChcclxuICAgICAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50LFxyXG4gICAgICAgICAgICB0aGlzLiNib2FyZFdpZHRoLFxyXG4gICAgICAgICAgICByb3csXHJcbiAgICAgICAgICAgIGNvbCxcclxuICAgICAgICAgICAgbGVuZ3RoLFxyXG4gICAgICAgICAgICBpc1ZlcnRpY2FsLFxyXG4gICAgICAgICAgICBjdXJyZW50SWQsXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmRlY3JlYXNlU2hpcENvdW50KGxlbmd0aCk7XHJcbiAgICAgICAgdGhpcy5zZXRFbXB0eUNlbGxzKHJvdywgY29sLCBsZW5ndGgsIGlzVmVydGljYWwsIGZhbHNlKTtcclxuICAgICAgICArK3RoaXMuI3NoaXBzUGxhY2VkO1xyXG4gICAgICAgIGlmICh0aGlzLiNzaGlwc1BsYWNlZCA9PT0gdGhpcy4jdG90YWxTaGlwcykge1xyXG4gICAgICAgICAgICBGb3JtSGVscGVyLmVuYWJsZUJ1dHRvbih0aGlzLiNidG5TdWJtaXQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkNsaWNrUGxhY2VTaGlwT25Cb2FyZChlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuI2FjdGl2ZU9yaWVudGF0aW9uSXNWZXJ0aWNhbCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGJsb2NrID0gZS50YXJnZXQ7XHJcbiAgICAgICAgY29uc3QgYmxvY2tJbmRleCA9IEJvYXJkSGVscGVyLmdldEJsb2NrSW5kZXhGcm9tQmxvY2tFbGVtZW50KHRoaXMuI2JvYXJkRWxlbWVudCwgYmxvY2spO1xyXG4gICAgICAgIGNvbnN0IGlzVmVydGljYWwgPSB0aGlzLiNhY3RpdmVPcmllbnRhdGlvbklzVmVydGljYWw7XHJcbiAgICAgICAgY29uc3QgW3JvdywgY29sXSA9IEJvYXJkSGVscGVyLmdldENvb3JkaW5hdGVzRnJvbUJsb2NrSW5kZXgoYmxvY2tJbmRleCwgdGhpcy4jYm9hcmRXaWR0aCk7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNhblBsYWNlU2hpcCh0aGlzLiNhY3RpdmVTaGlwTGVuZ3RoLCByb3csIGNvbCwgaXNWZXJ0aWNhbCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBsYWNlU2hpcE9uQm9hcmQocm93LCBjb2wsIHRoaXMuI2FjdGl2ZVNoaXBMZW5ndGgsIGlzVmVydGljYWwpO1xyXG4gICAgfVxyXG5cclxuICAgIE9uTW91c2VFbnRlckJvYXJkQmxvY2soZSkge1xyXG4gICAgICAgIGlmICh0aGlzLiNhY3RpdmVPcmllbnRhdGlvbklzVmVydGljYWwgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBibG9jayA9IGUudGFyZ2V0O1xyXG4gICAgICAgIGNvbnN0IGJsb2NrSW5kZXggPSBCb2FyZEhlbHBlci5nZXRCbG9ja0luZGV4RnJvbUJsb2NrRWxlbWVudCh0aGlzLiNib2FyZEVsZW1lbnQsIGJsb2NrKTtcclxuICAgICAgICBjb25zdCBpc1ZlcnRpY2FsID0gdGhpcy4jYWN0aXZlT3JpZW50YXRpb25Jc1ZlcnRpY2FsO1xyXG4gICAgICAgIGNvbnN0IFtyb3csIGNvbF0gPSBCb2FyZEhlbHBlci5nZXRDb29yZGluYXRlc0Zyb21CbG9ja0luZGV4KGJsb2NrSW5kZXgsIHRoaXMuI2JvYXJkV2lkdGgpO1xyXG4gICAgICAgIGlmICghdGhpcy5jYW5QbGFjZVNoaXAodGhpcy4jYWN0aXZlU2hpcExlbmd0aCwgcm93LCBjb2wsIGlzVmVydGljYWwpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgQm9hcmRIZWxwZXIuY3JlYXRlU2hpcE9uQm9hcmQoXHJcbiAgICAgICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudCxcclxuICAgICAgICAgICAgdGhpcy4jYm9hcmRXaWR0aCxcclxuICAgICAgICAgICAgcm93LFxyXG4gICAgICAgICAgICBjb2wsXHJcbiAgICAgICAgICAgIHRoaXMuI2FjdGl2ZVNoaXBMZW5ndGgsXHJcbiAgICAgICAgICAgIGlzVmVydGljYWwsXHJcbiAgICAgICAgICAgIHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgdGhpcy4jdGVtcFNoaXAsXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBvbk1vdXNlTGVhdmVCb2FyZEJsb2NrKCkge1xyXG4gICAgICAgIGlmICh0aGlzLiNhY3RpdmVPcmllbnRhdGlvbklzVmVydGljYWwgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy4jdGVtcFNoaXAgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy4jdGVtcFNoaXAucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNhblBsYWNlU2hpcChsZW5ndGgsIHJvdywgY29sLCBpc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgaWYgKHBhcnNlSW50KHRoaXMuI3NoaXBzTnVtYmVyc0VsZW1lbnRzW2xlbmd0aF0udGV4dENvbnRlbnQsIDEwKSA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc1ZlcnRpY2FsICYmIHJvdyArIGxlbmd0aCAtIDEgPj0gdGhpcy4jYm9hcmRIZWlnaHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWlzVmVydGljYWwgJiYgY29sICsgbGVuZ3RoIC0gMSA+PSB0aGlzLiNib2FyZFdpZHRoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoaXNWZXJ0aWNhbCAmJiB0aGlzLiNlbXB0eUNlbGxzW3JvdyArIGldW2NvbF0gIT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWlzVmVydGljYWwgJiYgdGhpcy4jZW1wdHlDZWxsc1tyb3ddW2NvbCArIGldICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgYXV0b1BsYWNlU2hpcHMoKSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVBbGxTaGlwc0Zyb21Cb2FyZCgpO1xyXG4gICAgICAgIGNvbnN0IHRlbXBCb2FyZCA9IEdhbWVib2FyZCh0aGlzLiNib2FyZFdpZHRoLCB0aGlzLiNib2FyZEhlaWdodCk7XHJcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy4jYWxsU2hpcHNMaXN0KS5mb3JFYWNoKChzaGlwTGVuZ3RoKSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy4jYWxsU2hpcHNMaXN0W3NoaXBMZW5ndGhdOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIEdhbWVib2FyZENvbnRyb2xsZXIuYWRkU2hpcCh0ZW1wQm9hcmQsIHBhcnNlSW50KHNoaXBMZW5ndGgsIDEwKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCBpc1BsYWNlZCA9IEdhbWVib2FyZENvbnRyb2xsZXIuYXV0b1BsYWNlU2hpcHModGVtcEJvYXJkKTtcclxuICAgICAgICBpZiAoaXNQbGFjZWQpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2hpcHNBcnJheSA9IHRlbXBCb2FyZC5nZXRTaGlwcygpO1xyXG4gICAgICAgICAgICBzaGlwc0FycmF5LmZvckVhY2goKGVsZW1lbnQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYWNlU2hpcE9uQm9hcmQoXHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5yb3csXHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jb2wsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcEJvYXJkLmdldFNoaXAoaW5kZXgpLmdldExlbmd0aCgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuaXNWZXJ0aWNhbCxcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXNQbGFjZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RW1wdHlDZWxscyhyb3csIGNvbCwgbGVuZ3RoLCBpc1ZlcnRpY2FsLCB2YWx1ZSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGlzVmVydGljYWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuI2VtcHR5Q2VsbHNbcm93ICsgaV1bY29sXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4jZW1wdHlDZWxsc1tyb3ddW2NvbCArIGldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAgIC8qICBSZW1vdmUgU2hpcHMgKi9cclxuICAgIGJpbmRSZW1vdmVTaGlwc0V2ZW50cygpIHtcclxuICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJsb2NrID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICAgIGlmIChibG9jay5jbGFzc0xpc3QuY29udGFpbnMoXCJzaGlwLWJsb2NrXCIpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ2xpY2tSZW1vdmVTaGlwRnJvbUJvYXJkKGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlU2hpcEZyb21Cb2FyZEJ5SWQoaWQpIHtcclxuICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihgLnNoaXBbZGF0YS1pZD0nJHtpZH0nXWApLnJlbW92ZSgpO1xyXG4gICAgICAgIHRoaXMuaW5jcmVhc2VTaGlwQ291bnQodGhpcy4jc2hpcHNMaXN0W2lkXS5sZW5ndGgpO1xyXG4gICAgICAgIHRoaXMuc2V0RW1wdHlDZWxscyhcclxuICAgICAgICAgICAgdGhpcy4jc2hpcHNMaXN0W2lkXS5yb3csXHJcbiAgICAgICAgICAgIHRoaXMuI3NoaXBzTGlzdFtpZF0uY29sLFxyXG4gICAgICAgICAgICB0aGlzLiNzaGlwc0xpc3RbaWRdLmxlbmd0aCxcclxuICAgICAgICAgICAgdGhpcy4jc2hpcHNMaXN0W2lkXS5pc1ZlcnRpY2FsLFxyXG4gICAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuI3NoaXBzTGlzdFtpZF07XHJcbiAgICAgICAgLS10aGlzLiNzaGlwc1BsYWNlZDtcclxuICAgICAgICBGb3JtSGVscGVyLmRpc2FibGVCdXR0b24odGhpcy4jYnRuU3VibWl0KTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVBbGxTaGlwc0Zyb21Cb2FyZCgpIHtcclxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLiNzaGlwc0xpc3QpLmZvckVhY2goKGlkKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlU2hpcEZyb21Cb2FyZEJ5SWQoaWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2xpY2tSZW1vdmVTaGlwRnJvbUJvYXJkKGUpIHtcclxuICAgICAgICBpZiAodGhpcy4jYWN0aXZlT3JpZW50YXRpb25Jc1ZlcnRpY2FsICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYmxvY2sgPSBlLnRhcmdldDtcclxuICAgICAgICBjb25zdCBzaGlwID0gYmxvY2suY2xvc2VzdChcIi5zaGlwXCIpO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlU2hpcEZyb21Cb2FyZEJ5SWQoc2hpcC5kYXRhc2V0LmlkKTtcclxuICAgIH1cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gICAgLyogQm9hcmQgQXJlYSAqL1xyXG4gICAgLy8gRE9NIEVsZW1lbnRzXHJcbiAgICAjYm9hcmRFbGVtZW50O1xyXG5cclxuICAgICNlbXB0eUNlbGxzO1xyXG5cclxuICAgICNwbGFjZU9wdGlvbnNFbGVtZW50O1xyXG5cclxuICAgICNidG5WZXJ0aWNhbDtcclxuXHJcbiAgICAjYnRuSG9yaXpvbnRhbDtcclxuXHJcbiAgICAjYnRuUmVtb3ZlO1xyXG5cclxuICAgIC8vIFByb3BlcnRpZXNcclxuICAgICNhY3RpdmVPcmllbnRhdGlvbklzVmVydGljYWw7XHJcblxyXG4gICAgaW5pdEJvYXJkQXJlYSgpIHtcclxuICAgICAgICB0aGlzLiNhY3RpdmVPcmllbnRhdGlvbklzVmVydGljYWwgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnJlbmRlckJvYXJkKCk7XHJcbiAgICAgICAgdGhpcy4jZW1wdHlDZWxscyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy4jYm9hcmRIZWlnaHQ7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLiNlbXB0eUNlbGxzLnB1c2goW10pO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuI2JvYXJkV2lkdGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4jZW1wdHlDZWxsc1tpXS5wdXNoKHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNhY2hlQm9hcmRBcmVhRE9NKCkge1xyXG4gICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudCA9IHRoaXMuI21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmJvYXJkXCIpO1xyXG4gICAgICAgIHRoaXMuI3BsYWNlT3B0aW9uc0VsZW1lbnQgPSB0aGlzLiNtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5wbGFjZS1vcHRpb25zXCIpO1xyXG4gICAgICAgIHRoaXMuI2J0bkhvcml6b250YWwgPSB0aGlzLiNwbGFjZU9wdGlvbnNFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYnRuLWhcIik7XHJcbiAgICAgICAgdGhpcy4jYnRuVmVydGljYWwgPSB0aGlzLiNwbGFjZU9wdGlvbnNFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYnRuLXZcIik7XHJcbiAgICAgICAgdGhpcy4jYnRuUmVtb3ZlID0gdGhpcy4jcGxhY2VPcHRpb25zRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ0bi1yZW1vdmVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgYmluZEJvYXJkQXJlYUV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLiNidG5Ib3Jpem9udGFsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uQ2xpY2tTZXRQbGFjZU9wdGlvbkFjdGl2ZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB0aGlzLiNidG5WZXJ0aWNhbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5vbkNsaWNrU2V0UGxhY2VPcHRpb25BY3RpdmUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy4jYnRuUmVtb3ZlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLm9uQ2xpY2tTZXRQbGFjZU9wdGlvbkFjdGl2ZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICB0aGlzLmJpbmRQbGFjZVNoaXBzRXZlbnRzKCk7XHJcbiAgICAgICAgdGhpcy5iaW5kUmVtb3ZlU2hpcHNFdmVudHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNsaWNrU2V0UGxhY2VPcHRpb25BY3RpdmUoZSkge1xyXG4gICAgICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSBlLnRhcmdldC5jbG9zZXN0KFwiYnV0dG9uXCIpO1xyXG4gICAgICAgIGlmIChidXR0b25FbGVtZW50ID09PSB0aGlzLiNidG5Ib3Jpem9udGFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0UGxhY2VPcHRpb25BY3RpdmUoXCJoXCIpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uRWxlbWVudCA9PT0gdGhpcy4jYnRuVmVydGljYWwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRQbGFjZU9wdGlvbkFjdGl2ZShcInZcIik7XHJcbiAgICAgICAgfSBlbHNlIGlmIChidXR0b25FbGVtZW50ID09PSB0aGlzLiNidG5SZW1vdmUpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRQbGFjZU9wdGlvbkFjdGl2ZShcInhcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldFBsYWNlT3B0aW9uQWN0aXZlKG9wdGlvbikge1xyXG4gICAgICAgIHRoaXMuI2J0bkhvcml6b250YWwuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgICAgICB0aGlzLiNidG5WZXJ0aWNhbC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgICAgIHRoaXMuI2J0blJlbW92ZS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG5cclxuICAgICAgICBsZXQgYWN0aXZlQnV0dG9uO1xyXG4gICAgICAgIGlmIChvcHRpb24gPT09IFwiaFwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI2FjdGl2ZU9yaWVudGF0aW9uSXNWZXJ0aWNhbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBhY3RpdmVCdXR0b24gPSB0aGlzLiNidG5Ib3Jpem9udGFsO1xyXG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9uID09PSBcInZcIikge1xyXG4gICAgICAgICAgICB0aGlzLiNhY3RpdmVPcmllbnRhdGlvbklzVmVydGljYWwgPSB0cnVlO1xyXG4gICAgICAgICAgICBhY3RpdmVCdXR0b24gPSB0aGlzLiNidG5WZXJ0aWNhbDtcclxuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbiA9PT0gXCJ4XCIpIHtcclxuICAgICAgICAgICAgdGhpcy4jYWN0aXZlT3JpZW50YXRpb25Jc1ZlcnRpY2FsID0gbnVsbDtcclxuICAgICAgICAgICAgYWN0aXZlQnV0dG9uID0gdGhpcy4jYnRuUmVtb3ZlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhY3RpdmVCdXR0b24uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJCb2FyZCgpIHtcclxuICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoXCItLWJvYXJkLWhvcml6b250YWwtY2VsbHNcIiwgdGhpcy4jYm9hcmRXaWR0aCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLiNib2FyZFdpZHRoICogdGhpcy4jYm9hcmRIZWlnaHQ7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgIGJsb2NrLmNsYXNzTGlzdC5hZGQoXCJib2FyZC1ibG9ja1wiKTtcclxuICAgICAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50LmFwcGVuZChibG9jayk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gICAgLyogUGFnaW5hdGlvbiAqL1xyXG4gICAgLy8gRE9NIEVsZW1lbnRzXHJcbiAgICAjcGFnZXNDb250YWluZXJFbGVtZW50O1xyXG5cclxuICAgICNjdXJyZW50UGFnZUVsZW1lbnQ7XHJcblxyXG4gICAgI2xlZnRBcnJvd0VsZW1lbnQ7XHJcblxyXG4gICAgI3JpZ2h0QXJyb3dFbGVtZW50O1xyXG5cclxuICAgIC8vIFByb3BlcnRpZXNcclxuICAgICNjdXJyZW50UGFnZTtcclxuXHJcbiAgICAjcGFnZXNOdW07XHJcblxyXG4gICAgI3BhZ2VXaWR0aDtcclxuXHJcbiAgICBpbml0UGFnaW5hdGlvbigpIHtcclxuICAgICAgICB0aGlzLiNjdXJyZW50UGFnZSA9IDE7XHJcbiAgICAgICAgdGhpcy4jcGFnZXNOdW0gPSB0aGlzLiNwYWdlc0NvbnRhaW5lckVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMuI21vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnBhZ2VzLW51bVwiKS50ZXh0Q29udGVudCA9IHRoaXMuI3BhZ2VzTnVtO1xyXG4gICAgICAgIHRoaXMuI3BhZ2VXaWR0aCA9IFwiMTAwJVwiO1xyXG4gICAgICAgIHRoaXMudXBkYXRlUGFnaW5hdGlvblN0eWxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FjaGVQYWdpbmF0aW9uRE9NKCkge1xyXG4gICAgICAgIHRoaXMuI2N1cnJlbnRQYWdlRWxlbWVudCA9IHRoaXMubW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY3VycmVudC1wYWdlXCIpO1xyXG4gICAgICAgIHRoaXMuI2xlZnRBcnJvd0VsZW1lbnQgPSB0aGlzLiNtb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5sZWZ0LWFycm93XCIpO1xyXG4gICAgICAgIHRoaXMuI3JpZ2h0QXJyb3dFbGVtZW50ID0gdGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucmlnaHQtYXJyb3dcIik7XHJcbiAgICB9XHJcblxyXG4gICAgYmluZFBhZ2luYXRpb25FdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy4jbW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYXJyb3ctY29udGFpbmVyXCIpLmZvckVhY2goKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY29udGFpbnModGhpcy4jbGVmdEFycm93RWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2luYXRlTGVmdCgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LmNvbnRhaW5zKHRoaXMuI3JpZ2h0QXJyb3dFbGVtZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFnaW5hdGVSaWdodCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwYWdpbmF0ZUxlZnQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuI2N1cnJlbnRQYWdlID09PSAxKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgQXJndW1lbnQgRXhjZXB0aW9uXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAtLXRoaXMuI2N1cnJlbnRQYWdlO1xyXG4gICAgICAgIHRoaXMudXBkYXRlUGFnaW5hdGlvblN0eWxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcGFnaW5hdGVSaWdodCgpIHtcclxuICAgICAgICBpZiAodGhpcy4jY3VycmVudFBhZ2UgPT09IHRoaXMuI3BhZ2VzTnVtKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgQXJndW1lbnQgRXhjZXB0aW9uXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICArK3RoaXMuI2N1cnJlbnRQYWdlO1xyXG4gICAgICAgIHRoaXMudXBkYXRlUGFnaW5hdGlvblN0eWxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlUGFnaW5hdGlvblN0eWxlKCkge1xyXG4gICAgICAgIHRoaXMuI3BhZ2VzQ29udGFpbmVyRWxlbWVudC5zdHlsZS5yaWdodCA9IGBjYWxjKCR7dGhpcy4jY3VycmVudFBhZ2UgLSAxfSAqICR7XHJcbiAgICAgICAgICAgIHRoaXMuI3BhZ2VXaWR0aFxyXG4gICAgICAgIH0pYDtcclxuICAgICAgICBpZiAodGhpcy4jY3VycmVudFBhZ2UgPT09IDEpIHtcclxuICAgICAgICAgICAgdGhpcy4jbGVmdEFycm93RWxlbWVudC5jbG9zZXN0KFwiLmFycm93LWNvbnRhaW5lclwiKS5jbGFzc0xpc3QuYWRkKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy4jbGVmdEFycm93RWxlbWVudC5jbG9zZXN0KFwiLmFycm93LWNvbnRhaW5lclwiKS5jbGFzc0xpc3QucmVtb3ZlKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLiNjdXJyZW50UGFnZSA9PT0gdGhpcy4jcGFnZXNOdW0pIHtcclxuICAgICAgICAgICAgdGhpcy4jcmlnaHRBcnJvd0VsZW1lbnQuY2xvc2VzdChcIi5hcnJvdy1jb250YWluZXJcIikuY2xhc3NMaXN0LmFkZChcImRpc2FibGVkXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuI3JpZ2h0QXJyb3dFbGVtZW50LmNsb3Nlc3QoXCIuYXJyb3ctY29udGFpbmVyXCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy4jY3VycmVudFBhZ2VFbGVtZW50LnRleHRDb250ZW50ID0gdGhpcy4jY3VycmVudFBhZ2U7XHJcbiAgICB9XHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAgIC8qIEdlbmVyYWwgR2V0dGVycyAqL1xyXG4gICAgZ2V0IG1vZGFsQ29udGFpbmVyRWxlbWVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jbW9kYWxDb250YWluZXJFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBtb2RhbEVsZW1lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI21vZGFsRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRTaGlwc0xpc3QoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI3NoaXBzTGlzdDtcclxuICAgIH1cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09ICovXHJcbn1cclxuIiwiaW1wb3J0IFB1YlN1YiBmcm9tIFwicHVic3ViLWpzXCI7XHJcbmltcG9ydCBCb2FyZEhlbHBlciBmcm9tIFwiLi4vVmlld0hlbHBlci9ib2FyZFwiO1xyXG5pbXBvcnQgYm9hcmRUZW1wbGF0ZSBmcm9tIFwiLi4vLi4vaHRtbC90ZW1wbGF0ZXMvZ2FtZWJvYXJkLXRlbXBsYXRlLmhhbmRsZWJhcnNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVib2FyZFZpZXcge1xyXG4gICAgI3dpZHRoO1xyXG5cclxuICAgICNoZWlnaHQ7XHJcblxyXG4gICAgI2JvYXJkRWxlbWVudDtcclxuXHJcbiAgICAjcGxheWVyVmlldztcclxuXHJcbiAgICAjYXVkaW9TcGxhc2g7XHJcblxyXG4gICAgI2F1ZGlvQ3Jhc2g7XHJcblxyXG4gICAgI3NoaXBzTGlzdDtcclxuXHJcbiAgICAjc2hpcHNCbG9ja3NCb2FyZDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0LCBwbGF5ZXJWaWV3LCBzaGlwc0xpc3QpIHtcclxuICAgICAgICB0aGlzLiN3aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuI2hlaWdodCA9IGhlaWdodDtcclxuICAgICAgICB0aGlzLiNwbGF5ZXJWaWV3ID0gcGxheWVyVmlldztcclxuICAgICAgICB0aGlzLiNzaGlwc0xpc3QgPSBzaGlwc0xpc3Q7XHJcbiAgICAgICAgdGhpcy4jYXVkaW9TcGxhc2ggPSBuZXcgQXVkaW8oXCIuL2Fzc2V0cy9zb3VuZHMvc3BsYXNoLndhdlwiKTtcclxuICAgICAgICB0aGlzLiNhdWRpb0NyYXNoID0gbmV3IEF1ZGlvKFwiLi9hc3NldHMvc291bmRzL2V4cGxvZGUtY3V0LndhdlwiKTtcclxuICAgICAgICB0aGlzLiNzaGlwc0Jsb2Nrc0JvYXJkID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLiNoZWlnaHQ7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLiNzaGlwc0Jsb2Nrc0JvYXJkLnB1c2goW10pO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuI3dpZHRoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuI3NoaXBzQmxvY2tzQm9hcmRbaV0ucHVzaChudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEJvYXJkRWxlbWVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jYm9hcmRFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwbGF5ZXJWaWV3KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNwbGF5ZXJWaWV3O1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICBjb25zdCBibG9ja3MgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuI2hlaWdodDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy4jd2lkdGg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgYmxvY2tzLnB1c2gobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImJvYXJkXCIpO1xyXG4gICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tYm9hcmQtaG9yaXpvbnRhbC1jZWxsc1wiLCB0aGlzLiN3aWR0aCk7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50LmlubmVySFRNTCA9IGJvYXJkVGVtcGxhdGUoeyBibG9ja3MgfSk7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkU2hpcHNUb0JvYXJkKCk7XHJcbiAgICAgICAgfSwgMjAwKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRTaGlwc1RvQm9hcmQoKSB7XHJcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy4jc2hpcHNMaXN0KS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy4jc2hpcHNMaXN0W2tleV0ubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCByb3cgPSB0aGlzLiNzaGlwc0xpc3Rba2V5XS5yb3c7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbCA9IHRoaXMuI3NoaXBzTGlzdFtrZXldLmNvbDtcclxuICAgICAgICAgICAgY29uc3QgaXNWZXJ0aWNhbCA9IHRoaXMuI3NoaXBzTGlzdFtrZXldLmlzVmVydGljYWw7XHJcbiAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBCb2FyZEhlbHBlci5jcmVhdGVTaGlwRWxlbWVudChsZW5ndGgsIGlzVmVydGljYWwpO1xyXG4gICAgICAgICAgICBBcnJheS5mcm9tKHNoaXAuY2hpbGRyZW4pLmZvckVhY2goKGJsb2NrKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBibG9jay5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgc2hpcC5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnNldFNoaXBzQmxvY2tzQm9hcmQocm93LCBjb2wsIGxlbmd0aCwgaXNWZXJ0aWNhbCwgc2hpcCk7XHJcbiAgICAgICAgICAgIEJvYXJkSGVscGVyLmNyZWF0ZVNoaXBPbkJvYXJkKFxyXG4gICAgICAgICAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgdGhpcy4jd2lkdGgsXHJcbiAgICAgICAgICAgICAgICByb3csXHJcbiAgICAgICAgICAgICAgICBjb2wsXHJcbiAgICAgICAgICAgICAgICBsZW5ndGgsXHJcbiAgICAgICAgICAgICAgICBpc1ZlcnRpY2FsLFxyXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgc2hpcCxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRTaGlwc0Jsb2Nrc0JvYXJkKHJvdywgY29sLCBsZW5ndGgsIGlzVmVydGljYWwsIHNoaXApIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpc1ZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiNzaGlwc0Jsb2Nrc0JvYXJkW3JvdyArIGldW2NvbF0gPSBzaGlwLmNoaWxkcmVuW2ldO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4jc2hpcHNCbG9ja3NCb2FyZFtyb3ddW2NvbCArIGldID0gc2hpcC5jaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBFdmVudHMgQmluZGluZ1xyXG4gICAgYmluZEV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMucmVjZWl2ZUF0dGFjay5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICByZWNlaXZlQXR0YWNrKGUpIHtcclxuICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiYm9hcmQtYmxvY2tcIikpIHtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBBcnJheS5mcm9tKHRoaXMuI2JvYXJkRWxlbWVudC5jaGlsZHJlbikuaW5kZXhPZihlLnRhcmdldCk7XHJcbiAgICAgICAgICAgIFB1YlN1Yi5wdWJsaXNoKFwiQXR0YWNrUmVjZWl2ZWRcIiwge1xyXG4gICAgICAgICAgICAgICAgcm93OiBNYXRoLmZsb29yKGluZGV4IC8gdGhpcy4jd2lkdGgpLFxyXG4gICAgICAgICAgICAgICAgY29sOiBpbmRleCAlIHRoaXMuI3dpZHRoLFxyXG4gICAgICAgICAgICAgICAgYm9hcmRWaWV3OiB0aGlzLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXR0YWNrRmFpbGVkKHJvdywgY29sKSB7XHJcbiAgICAgICAgdGhpcy5wbGF5U291bmQodGhpcy4jYXVkaW9TcGxhc2gpO1xyXG4gICAgICAgIGNvbnN0IGJsb2NrSW5kZXggPSBCb2FyZEhlbHBlci5nZXRCbG9ja0luZGV4RnJvbUNvb3JkaW5hdGVzKHJvdywgY29sLCB0aGlzLiN3aWR0aCk7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50LmNoaWxkcmVuW2Jsb2NrSW5kZXhdLmNsYXNzTGlzdC5hZGQoXCJkaXNhYmxlZFwiLCBcImluY29ycmVjdFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBhdHRhY2tTdWNjZWRlZChyb3csIGNvbCwgaXNTdW5rKSB7XHJcbiAgICAgICAgdGhpcy5wbGF5U291bmQodGhpcy4jYXVkaW9DcmFzaCk7XHJcbiAgICAgICAgY29uc3QgYmxvY2tJbmRleCA9IEJvYXJkSGVscGVyLmdldEJsb2NrSW5kZXhGcm9tQ29vcmRpbmF0ZXMocm93LCBjb2wsIHRoaXMuI3dpZHRoKTtcclxuICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnQuY2hpbGRyZW5bYmxvY2tJbmRleF0uY2xhc3NMaXN0LmFkZChcImRpc2FibGVkXCIpO1xyXG4gICAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy4jc2hpcHNCbG9ja3NCb2FyZFtyb3ddW2NvbF07XHJcbiAgICAgICAgYmxvY2suY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcclxuICAgICAgICBpZiAoaXNTdW5rKSB7XHJcbiAgICAgICAgICAgIGJsb2NrLmNsb3Nlc3QoXCIuc2hpcFwiKS5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xyXG4gICAgICAgICAgICBibG9jay5jbG9zZXN0KFwiLnNoaXBcIikuY2xhc3NMaXN0LmFkZChcImRlc3Ryb3llZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcGxheVNvdW5kKGF1ZGlvKSB7XHJcbiAgICAgICAgYXVkaW8ucGF1c2UoKTtcclxuICAgICAgICBhdWRpby5jdXJyZW50VGltZSA9IDA7XHJcbiAgICAgICAgYXVkaW8ucGxheSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc2FibGVCb2FyZCgpIHtcclxuICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImRpc2FibGVkXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGVuYWJsZUJvYXJkKCkge1xyXG4gICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZGlzYWJsZWRcIik7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IEdhbWVib2FyZFZpZXcgZnJvbSBcIi4uL0dhbWVib2FyZC9nYW1lYm9hcmQtdmlld1wiO1xyXG5pbXBvcnQgdGVtcGxhdGUgZnJvbSBcIi4uLy4uL2h0bWwvdGVtcGxhdGVzL3BsYXllci10ZW1wbGF0ZS5oYW5kbGViYXJzXCI7XHJcbmltcG9ydCBQbGF5ZXJWaWV3SGVscGVyIGZyb20gXCIuL3BsYXllci12aWV3LWhlbHBlclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheWVyVmlldyB7XHJcbiAgICAvLyBET00gRWxlbWVudHNcclxuICAgICNwbGF5ZXJBcmVhRWxlbWVudDtcclxuXHJcbiAgICAvLyBQcm9wZXJ0aWVzXHJcbiAgICAjZ2FtZVZpZXc7XHJcblxyXG4gICAgI2JvYXJkVmlldztcclxuXHJcbiAgICAjcGxheWVyTmFtZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lVmlldywgc2hpcHNMaXN0LCBib2FyZFdpZHRoLCBib2FyZEhlaWdodCwgcGxheWVyTmFtZSkge1xyXG4gICAgICAgIHRoaXMuI2dhbWVWaWV3ID0gZ2FtZVZpZXc7XHJcbiAgICAgICAgdGhpcy4jcGxheWVyTmFtZSA9IHBsYXllck5hbWU7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoc2hpcHNMaXN0KTtcclxuICAgICAgICB0aGlzLmNhY2hlRE9NKCk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVCb2FyZChib2FyZFdpZHRoLCBib2FyZEhlaWdodCwgc2hpcHNMaXN0KTtcclxuICAgICAgICB0aGlzLmluaXRTaGlwc1JlbWFpbmVkKHNoaXBzTGlzdCk7XHJcbiAgICAgICAgdGhpcy5pbml0U2NvcmUoKTtcclxuICAgICAgICB0aGlzLmJpbmRFdmVudHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWNoZURPTSgpIHtcclxuICAgICAgICB0aGlzLmNhY2hlVHVybkRPTSgpO1xyXG4gICAgICAgIHRoaXMuY2FjaGVTaGlwc1JlbWFpbmVkRE9NKCk7XHJcbiAgICAgICAgdGhpcy5jYWNoZVNjb3JlRE9NKCk7XHJcbiAgICAgICAgdGhpcy5jYWNoZURhcmtlbmluZ0RPTSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICB0aGlzLiNwbGF5ZXJBcmVhRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy4jcGxheWVyQXJlYUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInBsYXllci1hcmVhXCIpO1xyXG4gICAgICAgIHRoaXMuI3BsYXllckFyZWFFbGVtZW50LmlubmVySFRNTCA9IHRlbXBsYXRlKHt9KTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVCb2FyZChib2FyZFdpZHRoLCBib2FyZEhlaWdodCwgc2hpcHNMaXN0KSB7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRWaWV3ID0gbmV3IEdhbWVib2FyZFZpZXcoYm9hcmRXaWR0aCwgYm9hcmRIZWlnaHQsIHRoaXMsIHNoaXBzTGlzdCk7XHJcbiAgICAgICAgdGhpcy4jcGxheWVyQXJlYUVsZW1lbnRcclxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIuYm9hcmRcIilcclxuICAgICAgICAgICAgLnJlcGxhY2VXaXRoKHRoaXMuI2JvYXJkVmlldy5nZXRCb2FyZEVsZW1lbnQoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgYmluZEV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLmJpbmRTaGlwc1JlbWFpbmVkRXZlbnRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyogU2hpcHMgUmVtYWluZWQgKi9cclxuICAgICNzaGlwc1JlbWFpbmVkRWxlbWVudDtcclxuXHJcbiAgICAjc2hpcHNFbGVtZW50O1xyXG5cclxuICAgIGluaXRTaGlwc1JlbWFpbmVkKHNoaXBzTGlzdCkge1xyXG4gICAgICAgIHRoaXMuYWRkU2hpcHNUb3NoaXBzUmVtYWluZWRFbGVtZW50KHNoaXBzTGlzdCk7XHJcbiAgICAgICAgdGhpcy5pbml0U2hpcHNSZW1haW5lZFBhZ2luYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWNoZVNoaXBzUmVtYWluZWRET00oKSB7XHJcbiAgICAgICAgdGhpcy4jc2hpcHNSZW1haW5lZEVsZW1lbnQgPSB0aGlzLiNwbGF5ZXJBcmVhRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgICBcIi5zaGlwcy1yZW1haW5lZC1jb250YWluZXItcmVzcG9uc2l2ZVwiLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy4jc2hpcHNFbGVtZW50ID0gdGhpcy4jc2hpcHNSZW1haW5lZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5zaGlwc1wiKTtcclxuICAgICAgICB0aGlzLmNhY2hlU2hpcHNSZW1haW5lZFBhZ2luYXRpb25ET00oKTtcclxuICAgIH1cclxuXHJcbiAgICBiaW5kU2hpcHNSZW1haW5lZEV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLiNpbmZvRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCB0aGlzLm1vdXNlRW50ZXJJbmZvLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMuI2luZm9FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHRoaXMubW91c2VMZWF2ZUluZm8uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5iaW5kU2hpcHNSZW1haW5lZFBhZ2luYXRpb25FdmVudHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRTaGlwc1Rvc2hpcHNSZW1haW5lZEVsZW1lbnQoc2hpcHNMaXN0KSB7XHJcbiAgICAgICAgY29uc3Qgc2hpcHNMaXN0Q291bnQgPSB7fTtcclxuICAgICAgICBPYmplY3Qua2V5cyhzaGlwc0xpc3QpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBzaGlwc0xpc3Rba2V5XS5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmICghc2hpcHNMaXN0Q291bnRbbGVuZ3RoXSkge1xyXG4gICAgICAgICAgICAgICAgc2hpcHNMaXN0Q291bnRbbGVuZ3RoXSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKytzaGlwc0xpc3RDb3VudFtsZW5ndGhdO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHNvcnRlZFNoaXBMaXN0S2V5cyA9IE9iamVjdC5rZXlzKHNoaXBzTGlzdENvdW50KS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XHJcbiAgICAgICAgc29ydGVkU2hpcExpc3RLZXlzLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLiNzaGlwc0VsZW1lbnQuYXBwZW5kKFxyXG4gICAgICAgICAgICAgICAgUGxheWVyVmlld0hlbHBlci5jcmVhdGVTaGlwQ29udGFpbmVyRWxlbWVudChrZXksIHNoaXBzTGlzdENvdW50W2tleV0pLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNpbmtTaGlwKGxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLiNzaGlwc1JlbWFpbmVkRWxlbWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1sZW5ndGg9XCIke2xlbmd0aH1cIl1gKTtcclxuICAgICAgICBjb25zdCBjb3VudEVsZW1lbnQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY291bnRcIik7XHJcbiAgICAgICAgY29uc3QgbGVmdCA9IHBhcnNlSW50KGNvdW50RWxlbWVudC50ZXh0Q29udGVudCwgMTApIC0gMTtcclxuICAgICAgICBpZiAobGVmdCA9PT0gMCkge1xyXG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvdW50RWxlbWVudC50ZXh0Q29udGVudCA9IGxlZnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG1vdXNlRW50ZXJJbmZvKCkge1xyXG4gICAgICAgIHRoaXMuI3NoaXBzUmVtYWluZWRFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJoZWxwXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIG1vdXNlTGVhdmVJbmZvKCkge1xyXG4gICAgICAgIHRoaXMuI3NoaXBzUmVtYWluZWRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJoZWxwXCIpO1xyXG4gICAgfVxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbiAgICAvKiBTaGlwcyBSZW1haW5lZCBQYWdpbmF0aW9uICovXHJcbiAgICAjc3RvcFNjcm9sbGluZztcclxuXHJcbiAgICAjaW5mb0VsZW1lbnQ7XHJcblxyXG4gICAgI2xlZnRBcnJvd0NvbnRhaW5lckVsZW1lbnQ7XHJcblxyXG4gICAgI2xlZnRBcnJvd0VsZW1lbnQ7XHJcblxyXG4gICAgI3JpZ2h0QXJyb3dDb250YWluZXJFbGVtZW50O1xyXG5cclxuICAgICNyaWdodEFycm93RWxlbWVudDtcclxuXHJcbiAgICBpbml0U2hpcHNSZW1haW5lZFBhZ2luYXRpb24oKSB7XHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy50b2dnbGVBcnJvd3NTdGF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUFycm93c1N0YXRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FjaGVTaGlwc1JlbWFpbmVkUGFnaW5hdGlvbkRPTSgpIHtcclxuICAgICAgICB0aGlzLiNpbmZvRWxlbWVudCA9IHRoaXMuI3NoaXBzUmVtYWluZWRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuaW5mb1wiKTtcclxuICAgICAgICB0aGlzLiNsZWZ0QXJyb3dFbGVtZW50ID0gdGhpcy4jc2hpcHNSZW1haW5lZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5sZWZ0LWFycm93XCIpO1xyXG4gICAgICAgIHRoaXMuI2xlZnRBcnJvd0NvbnRhaW5lckVsZW1lbnQgPSB0aGlzLiNsZWZ0QXJyb3dFbGVtZW50LnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy4jcmlnaHRBcnJvd0VsZW1lbnQgPSB0aGlzLiNzaGlwc1JlbWFpbmVkRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnJpZ2h0LWFycm93XCIpO1xyXG4gICAgICAgIHRoaXMuI3JpZ2h0QXJyb3dDb250YWluZXJFbGVtZW50ID0gdGhpcy4jcmlnaHRBcnJvd0VsZW1lbnQucGFyZW50RWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICBiaW5kU2hpcHNSZW1haW5lZFBhZ2luYXRpb25FdmVudHMoKSB7XHJcbiAgICAgICAgY29uc3Qgc2Nyb2xsU3RlcCA9IDE4MDtcclxuXHJcbiAgICAgICAgdGhpcy4jbGVmdEFycm93Q29udGFpbmVyRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNjcm9sbCgtc2Nyb2xsU3RlcCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuI3JpZ2h0QXJyb3dDb250YWluZXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVyZG93blwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsKHNjcm9sbFN0ZXApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLiNsZWZ0QXJyb3dDb250YWluZXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnN0b3BTY3JvbGxpbmcoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy4jcmlnaHRBcnJvd0NvbnRhaW5lckVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcFNjcm9sbGluZygpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNjcm9sbCh2YWx1ZSkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldERpc3RhbmNlID0gdGhpcy5nZXRSZXNwb25zaXZlU2Nyb2xsKCkgKyB2YWx1ZTtcclxuICAgICAgICBjb25zdCBzY3JvbGxEaXJlY3Rpb24gPSB2YWx1ZSA+IDAgPyBcInJpZ2h0XCIgOiBcImxlZnRcIjtcclxuICAgICAgICB0aGlzLiNzdG9wU2Nyb2xsaW5nID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tJZlNjcmVlblNtYWxsKCkpIHtcclxuICAgICAgICAgICAgdGhpcy4jc2hpcHNFbGVtZW50LnNjcm9sbFRvcCArPSB2YWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLiNzaGlwc0VsZW1lbnQuc2Nyb2xsTGVmdCArPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmtlZXBTY3JvbGxpbmcocmVzb2x2ZSwgcmVqZWN0LCB0YXJnZXREaXN0YW5jZSwgc2Nyb2xsRGlyZWN0aW9uKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbCh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7fSlcclxuICAgICAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVBcnJvd3NTdGF0ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBrZWVwU2Nyb2xsaW5nKHJlc29sdmUsIHJlamVjdCwgdGFyZ2V0RGlzdGFuY2UsIHNjcm9sbERpcmVjdGlvbikge1xyXG4gICAgICAgIGlmICh0aGlzLmdldFJlc3BvbnNpdmVTY3JvbGwoKSA9PT0gdGFyZ2V0RGlzdGFuY2UpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdGhpcy4jc3RvcFNjcm9sbGluZyB8fFxyXG4gICAgICAgICAgICAoc2Nyb2xsRGlyZWN0aW9uID09PSBcImxlZnRcIiAmJiB0aGlzLmNoZWNrSWZMZWZ0TW9zdFJlYWNoZWQoKSkgfHxcclxuICAgICAgICAgICAgKHNjcm9sbERpcmVjdGlvbiA9PT0gXCJyaWdodFwiICYmIHRoaXMuY2hlY2tJZlJpZ2h0TW9zdFJlYWNoZWQoKSlcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcmVqZWN0KCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5rZWVwU2Nyb2xsaW5nKHJlc29sdmUsIHJlamVjdCwgdGFyZ2V0RGlzdGFuY2UsIHNjcm9sbERpcmVjdGlvbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2hlY2tJZkxlZnRNb3N0UmVhY2hlZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRSZXNwb25zaXZlU2Nyb2xsKCkgPT09IDA7XHJcbiAgICB9XHJcblxyXG4gICAgY2hlY2tJZlJpZ2h0TW9zdFJlYWNoZWQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2hlY2tJZlNjcmVlblNtYWxsKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIHRoaXMuI3NoaXBzRWxlbWVudC5zY3JvbGxIZWlnaHQgLSB0aGlzLiNzaGlwc0VsZW1lbnQuY2xpZW50SGVpZ2h0ID09PVxyXG4gICAgICAgICAgICAgICAgdGhpcy4jc2hpcHNFbGVtZW50LnNjcm9sbFRvcFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICB0aGlzLiNzaGlwc0VsZW1lbnQuc2Nyb2xsV2lkdGggLSB0aGlzLiNzaGlwc0VsZW1lbnQuY2xpZW50V2lkdGggPT09XHJcbiAgICAgICAgICAgIHRoaXMuI3NoaXBzRWxlbWVudC5zY3JvbGxMZWZ0XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVBcnJvd3NTdGF0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5jaGVja0lmTGVmdE1vc3RSZWFjaGVkKCkpIHtcclxuICAgICAgICAgICAgdGhpcy4jbGVmdEFycm93Q29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy4jbGVmdEFycm93Q29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrSWZSaWdodE1vc3RSZWFjaGVkKCkpIHtcclxuICAgICAgICAgICAgdGhpcy4jcmlnaHRBcnJvd0NvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImRpc2FibGVkXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuI3JpZ2h0QXJyb3dDb250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RvcFNjcm9sbGluZygpIHtcclxuICAgICAgICB0aGlzLiNzdG9wU2Nyb2xsaW5nID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRSZXNwb25zaXZlU2Nyb2xsKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrSWZTY3JlZW5TbWFsbCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiNzaGlwc0VsZW1lbnQuc2Nyb2xsVG9wO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy4jc2hpcHNFbGVtZW50LnNjcm9sbExlZnQ7XHJcbiAgICB9XHJcblxyXG4gICAgY2hlY2tJZlNjcmVlblNtYWxsKCkge1xyXG4gICAgICAgIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKHRoaXMuI2xlZnRBcnJvd0NvbnRhaW5lckVsZW1lbnQpLnRyYW5zZm9ybSAhPT0gXCJub25lXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbiAgICAvKiBUdXJuICovXHJcbiAgICAjdHVybkxhYmVsRWxlbWVudDtcclxuXHJcbiAgICBjYWNoZVR1cm5ET00oKSB7XHJcbiAgICAgICAgdGhpcy4jdHVybkxhYmVsRWxlbWVudCA9IHRoaXMuI3BsYXllckFyZWFFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudHVybi1jb250YWluZXJcIik7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VHVybigpIHtcclxuICAgICAgICB0aGlzLnNob3dUdXJuTGFiZWwoKTtcclxuICAgICAgICB0aGlzLmRhcmtlbigpO1xyXG4gICAgfVxyXG5cclxuICAgIHVuc2V0VHVybigpIHtcclxuICAgICAgICB0aGlzLmhpZGVUdXJuTGFiZWwoKTtcclxuICAgICAgICB0aGlzLnJlbW92ZURhcmtlbmluZygpO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3dUdXJuTGFiZWwoKSB7XHJcbiAgICAgICAgdGhpcy4jdHVybkxhYmVsRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGhpZGVUdXJuTGFiZWwoKSB7XHJcbiAgICAgICAgdGhpcy4jdHVybkxhYmVsRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xyXG4gICAgfVxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbiAgICAvKiBTY29yZSAqL1xyXG4gICAgI3Njb3JlRWxlbWVudDtcclxuXHJcbiAgICAjcGxheWVyTmFtZUVsZW1lbnQ7XHJcblxyXG4gICAgI3dpbnNFbGVtZW50O1xyXG5cclxuICAgICNsb3NzZXNFbGVtZW50O1xyXG5cclxuICAgIGluaXRTY29yZSgpIHtcclxuICAgICAgICB0aGlzLnNldFBsYXllck5hbWUodGhpcy4jcGxheWVyTmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FjaGVTY29yZURPTSgpIHtcclxuICAgICAgICB0aGlzLiNzY29yZUVsZW1lbnQgPSB0aGlzLiNwbGF5ZXJBcmVhRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnNjb3JlLWNvbnRhaW5lclwiKTtcclxuICAgICAgICB0aGlzLiNwbGF5ZXJOYW1lRWxlbWVudCA9IHRoaXMuI3Njb3JlRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm5hbWVcIik7XHJcbiAgICAgICAgdGhpcy4jd2luc0VsZW1lbnQgPSB0aGlzLiNzY29yZUVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi53aW5zXCIpO1xyXG4gICAgICAgIHRoaXMuI2xvc3Nlc0VsZW1lbnQgPSB0aGlzLiNzY29yZUVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5sb3NzZXNcIik7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0UGxheWVyTmFtZSh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuI3BsYXllck5hbWVFbGVtZW50LnRleHRDb250ZW50ID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0V2lucyh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuI3dpbnNFbGVtZW50LnRleHRDb250ZW50ID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgaW5jcmVhc2VXaW5zKCkge1xyXG4gICAgICAgIHRoaXMuI3dpbnNFbGVtZW50LnRleHRDb250ZW50ID0gcGFyc2VJbnQodGhpcy4jd2luc0VsZW1lbnQudGV4dENvbnRlbnQsIDEwKSArIDE7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0TG9zc2VzKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy4jbG9zc2VzRWxlbWVudC50ZXh0Q29udGVudCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGluY3JlYXNlTG9zc2VzKCkge1xyXG4gICAgICAgIHRoaXMuI2xvc3Nlc0VsZW1lbnQudGV4dENvbnRlbnQgPSBwYXJzZUludCh0aGlzLiNsb3NzZXNFbGVtZW50LnRleHRDb250ZW50LCAxMCkgKyAxO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3dTY29yZSgpIHtcclxuICAgICAgICB0aGlzLiNzY29yZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBoaWRlU2NvcmUoKSB7XHJcbiAgICAgICAgdGhpcy4jc2NvcmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICB9XHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAgIC8qIEdlbmVyYWwgR2V0dGVycyAqL1xyXG4gICAgZ2V0IGdhbWVWaWV3KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNnYW1lVmlldztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgYm9hcmRWaWV3KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNib2FyZFZpZXc7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UGxheWVyQXJlYUVsZW1lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI3BsYXllckFyZWFFbGVtZW50O1xyXG4gICAgfVxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbiAgICAvKiBEYXJrZW5pbmcgKi9cclxuICAgICNkYXJrZW5pbmdFbGVtZW50O1xyXG5cclxuICAgIGNhY2hlRGFya2VuaW5nRE9NKCkge1xyXG4gICAgICAgIHRoaXMuI2RhcmtlbmluZ0VsZW1lbnQgPSB0aGlzLiNwbGF5ZXJBcmVhRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmRhcmtlbmluZ1wiKTtcclxuICAgIH1cclxuXHJcbiAgICBkYXJrZW4oKSB7XHJcbiAgICAgICAgdGhpcy4jZGFya2VuaW5nRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZURhcmtlbmluZygpIHtcclxuICAgICAgICB0aGlzLiNkYXJrZW5pbmdFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbiAgICBzaG93V2luTGFiZWwoKSB7XHJcbiAgICAgICAgdGhpcy4jdHVybkxhYmVsRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZC5pbm5lclRleHQgPSBcIllvdSBXb25cIjtcclxuICAgICAgICB0aGlzLnNob3dUdXJuTGFiZWwoKTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93TG9zZUxhYmVsKCkge1xyXG4gICAgICAgIHRoaXMuI3R1cm5MYWJlbEVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQuaW5uZXJUZXh0ID0gXCJZb3UgTG9zdFwiO1xyXG4gICAgICAgIHRoaXMuc2hvd1R1cm5MYWJlbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc2FibGVCb2FyZCgpIHtcclxuICAgICAgICB0aGlzLiNib2FyZFZpZXcuZGlzYWJsZUJvYXJkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZW5hYmxlQm9hcmQoKSB7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRWaWV3LmVuYWJsZUJvYXJkKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiY29uc3QgQ29udGFpbmVySGVscGVyID0gKCgpID0+IHtcclxuICAgIGZ1bmN0aW9uIHJlbW92ZVdvb2RlbkNvbnRhaW5lcihjb250YWluZXJFbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUucHJvcGVydHlOYW1lID09PSBcImJvdHRvbVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRpc3BsYXlXb29kZW5Db250YWluZXIocGFyZW50RWxlbWVudCwgY29udGFpbmVyRWxlbWVudCkge1xyXG4gICAgICAgIHBhcmVudEVsZW1lbnQuYXBwZW5kKGNvbnRhaW5lckVsZW1lbnQpO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBjb250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgfSwgMjUpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhdXNlQ29udGFpbmVyKCkge1xyXG4gICAgICAgIGNvbnN0IHBhdXNlQ29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgcGF1c2VDb250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJwYXVzZS1jb250YWluZXJcIik7XHJcbiAgICAgICAgcmV0dXJuIHBhdXNlQ29udGFpbmVyRWxlbWVudDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlbW92ZVdvb2RlbkNvbnRhaW5lcixcclxuICAgICAgICBkaXNwbGF5V29vZGVuQ29udGFpbmVyLFxyXG4gICAgICAgIGNyZWF0ZVBhdXNlQ29udGFpbmVyLFxyXG4gICAgfTtcclxufSkoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRhaW5lckhlbHBlcjtcclxuIiwiaW1wb3J0IENob29zaW5nU2hpcHNNb2RhbCBmcm9tIFwiLi4vTW9kYWxzL3NoaXBzLWNob29zaW5nLW1vZGFsXCI7XHJcbmltcG9ydCBSdWxlc01vZGFsIGZyb20gXCIuLi9Nb2RhbHMvcnVsZXMtbW9kYWxcIjtcclxuaW1wb3J0IEdhbWVUeXBlTW9kYWwgZnJvbSBcIi4uL01vZGFscy9nYW1lLXR5cGUtbW9kYWxcIjtcclxuaW1wb3J0IEdyaWRTaXplTW9kYWwgZnJvbSBcIi4uL01vZGFscy9ncmlkLXNpemUtbW9kYWxcIjtcclxuaW1wb3J0IFNoaXBzUGxhY2luZ01vZGFsIGZyb20gXCIuLi9Nb2RhbHMvc2hpcHMtcGxhY2luZy1tb2RhbFwiO1xyXG5pbXBvcnQgR2FtZUFyZW5hIGZyb20gXCIuLi8uLi9odG1sL3RlbXBsYXRlcy9nYW1lLWFyZW5hLmhhbmRsZWJhcnNcIjtcclxuaW1wb3J0IFBsYXllclZpZXcgZnJvbSBcIi4uL1BsYXllci9wbGF5ZXItdmlld1wiO1xyXG5pbXBvcnQgR2FtZUNvbnRyb2xsZXIgZnJvbSBcIi4vZ2FtZS1jb250cm9sbGVyXCI7XHJcbmltcG9ydCBDb250YWluZXJIZWxwZXIgZnJvbSBcIi4uL1ZpZXdIZWxwZXIvY29udGFpbmVyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lVmlldyB7XHJcbiAgICAvLyBET00gRWxlbWVudHNcclxuICAgICNnYW1lO1xyXG5cclxuICAgICNyb290RWxlbWVudDtcclxuXHJcbiAgICAjZ2FtZUFyZW5hRWxlbWVudDtcclxuXHJcbiAgICAjcm91bmRzRWxlbWVudDtcclxuXHJcbiAgICAjcm91bmRzVGV4dEVsZW1lbnQ7XHJcblxyXG4gICAgI3JvdW5kc051bWJlckVsZW1lbnQ7XHJcblxyXG4gICAgI3BhdXNlQ29udGFpbmVyRWxlbWVudDtcclxuXHJcbiAgICAvLyBQcm9wZXJ0aWVzXHJcbiAgICAjaWQ7XHJcblxyXG4gICAgI3BsYXllcnNWaWV3cztcclxuXHJcbiAgICAjaHVtYW5OdW1iZXI7XHJcblxyXG4gICAgI2JvYXJkV2lkdGg7XHJcblxyXG4gICAgI2JvYXJkSGVpZ2h0O1xyXG5cclxuICAgICNzaGlwc0xpc3Q7XHJcblxyXG4gICAgI3BsYXllcnM7XHJcblxyXG4gICAgI2N1cnJlbnRNb2RhbEluZGV4O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIHBhcmVudCwgaWQpIHtcclxuICAgICAgICB0aGlzLiNnYW1lID0gZ2FtZTtcclxuICAgICAgICB0aGlzLiNpZCA9IGlkO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlUm9vdEVsZW1lbnQodGhpcy4jaWQpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlUGF1c2VDb250YWluZXIoKTtcclxuICAgICAgICBwYXJlbnQuYXBwZW5kKHRoaXMuI3Jvb3RFbGVtZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVSb290RWxlbWVudCgpIHtcclxuICAgICAgICB0aGlzLiNyb290RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy4jcm9vdEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImdhbWUtY29udGFpbmVyXCIpO1xyXG4gICAgICAgIHRoaXMuI3Jvb3RFbGVtZW50LmRhdGFzZXQuZ2FtZUlkID0gdGhpcy4jaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlUGF1c2VDb250YWluZXIoKSB7XHJcbiAgICAgICAgdGhpcy4jcGF1c2VDb250YWluZXJFbGVtZW50ID0gQ29udGFpbmVySGVscGVyLmNyZWF0ZVBhdXNlQ29udGFpbmVyKCk7XHJcbiAgICAgICAgdGhpcy4jcm9vdEVsZW1lbnQuYXBwZW5kKHRoaXMuI3BhdXNlQ29udGFpbmVyRWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGdhbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI2dhbWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyogR2FtZSBBcmVuYSAqL1xyXG4gICAgY3JlYXRlR2FtZUFyZW5hKCkge1xyXG4gICAgICAgIHRoaXMuY2FjaGVHYW1lQXJlbmFET00oKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVBsYXllcnNWaWV3cygpO1xyXG4gICAgICAgIHRoaXMuI2ZpcnN0UGxheWVyQXJlbmFFbGVtZW50LmFwcGVuZCh0aGlzLmdldFBsYXllclZpZXcoMCkuZ2V0UGxheWVyQXJlYUVsZW1lbnQoKSk7XHJcbiAgICAgICAgdGhpcy4jc2Vjb25kUGxheWVyQXJlbmFFbGVtZW50LmFwcGVuZCh0aGlzLmdldFBsYXllclZpZXcoMSkuZ2V0UGxheWVyQXJlYUVsZW1lbnQoKSk7XHJcbiAgICAgICAgdGhpcy4jcm9vdEVsZW1lbnQuYXBwZW5kKHRoaXMuI2dhbWVBcmVuYUVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlU3RhcnRHYW1lTGFiZWwoKTtcclxuICAgIH1cclxuXHJcbiAgICBjYWNoZUdhbWVBcmVuYURPTSgpIHtcclxuICAgICAgICB0aGlzLiNnYW1lQXJlbmFFbGVtZW50ID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhcclxuICAgICAgICAgICAgR2FtZUFyZW5hKCksXHJcbiAgICAgICAgICAgIFwidGV4dC9odG1sXCIsXHJcbiAgICAgICAgKS5ib2R5LmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgICAgIHRoaXMuI3JvdW5kc0VsZW1lbnQgPSB0aGlzLiNnYW1lQXJlbmFFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucm91bmRzLWNvbnRhaW5lclwiKTtcclxuICAgICAgICB0aGlzLiNyb3VuZHNUZXh0RWxlbWVudCA9IHRoaXMuI3JvdW5kc0VsZW1lbnQucXVlcnlTZWxlY3RvcihcInBcIik7XHJcbiAgICAgICAgdGhpcy4jcm91bmRzTnVtYmVyRWxlbWVudCA9IHRoaXMuI3JvdW5kc1RleHRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucm91bmQtbnVtXCIpO1xyXG4gICAgICAgIHRoaXMuY2FjaGVQbGF5ZXJzQXJlYXNET00oKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PSAqL1xyXG4gICAgZW5kR2FtZSh3aW5uZXJJbmRleCkge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuI3BsYXllcnNWaWV3cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4jcGxheWVyc1ZpZXdzW2ldLmhpZGVUdXJuTGFiZWwoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuI3BsYXllcnNWaWV3c1tpXS5kaXNhYmxlQm9hcmQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuI3BsYXllcnNWaWV3c1tpXS5yZW1vdmVEYXJrZW5pbmcoKTtcclxuICAgICAgICAgICAgICAgIGlmIChpID09PSB3aW5uZXJJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3BsYXllcnNWaWV3c1tpXS5zaG93V2luTGFiZWwoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiNwbGF5ZXJzVmlld3NbaV0uaW5jcmVhc2VXaW5zKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3BsYXllcnNWaWV3c1tpXS5zaG93TG9zZUxhYmVsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jcGxheWVyc1ZpZXdzW2ldLmluY3JlYXNlTG9zc2VzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVOZXh0R2FtZUxhYmVsKCk7XHJcbiAgICAgICAgICAgIHRoaXMuI3BhdXNlQ29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwic2VtaS1hY3RpdmVcIik7XHJcbiAgICAgICAgfSwgMzAwKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiBOZXh0IEdhbWUgQnV0dG9uICovXHJcbiAgICAjbmV4dEdhbWVDb250YWluZXJFbGVtZW50O1xyXG5cclxuICAgIGNyZWF0ZU5leHRHYW1lTGFiZWwoKSB7XHJcbiAgICAgICAgdGhpcy4jbmV4dEdhbWVDb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICB0aGlzLiNuZXh0R2FtZUNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcIm5leHQtZ2FtZS1jb250YWluZXJcIik7XHJcbiAgICAgICAgY29uc3QgYnRuTmV4dEdhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgICAgIGJ0bk5leHRHYW1lLnRleHRDb250ZW50ID0gXCJOZXh0IEdhbWVcIjtcclxuICAgICAgICB0aGlzLiNuZXh0R2FtZUNvbnRhaW5lckVsZW1lbnQuYXBwZW5kKGJ0bk5leHRHYW1lKTtcclxuICAgICAgICB0aGlzLiNyb290RWxlbWVudC5hcHBlbmQodGhpcy4jbmV4dEdhbWVDb250YWluZXJFbGVtZW50KTtcclxuICAgICAgICB0aGlzLmJpbmROZXh0R2FtZUJ1dHRvbkV2ZW50cyhidG5OZXh0R2FtZSk7XHJcbiAgICAgICAgQ29udGFpbmVySGVscGVyLmRpc3BsYXlXb29kZW5Db250YWluZXIodGhpcy4jcm9vdEVsZW1lbnQsIHRoaXMuI25leHRHYW1lQ29udGFpbmVyRWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgYmluZE5leHRHYW1lQnV0dG9uRXZlbnRzKGJ1dHRvbikge1xyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5OZXh0R2FtZUJ1dHRvbkNsaWNrLmJpbmQodGhpcykpO1xyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCB0aGlzLmRpc3BsYXlTY29yZXMuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsIHRoaXMuaGlkZVNjb3Jlcy5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBOZXh0R2FtZUJ1dHRvbkNsaWNrKCkge1xyXG4gICAgICAgIGF3YWl0IENvbnRhaW5lckhlbHBlci5yZW1vdmVXb29kZW5Db250YWluZXIodGhpcy4jbmV4dEdhbWVDb250YWluZXJFbGVtZW50KTtcclxuICAgICAgICBHYW1lQ29udHJvbGxlci5nZW5lcmF0ZU5leHRSb3VuZCh0aGlzLiNnYW1lLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAgIC8qIFN0YXJ0IEdhbWUgQnV0dG9uICovXHJcbiAgICAjc3RhcnRHYW1lQ29udGFpbmVyRWxlbWVudDtcclxuXHJcbiAgICBjcmVhdGVTdGFydEdhbWVMYWJlbCgpIHtcclxuICAgICAgICB0aGlzLiNzdGFydEdhbWVDb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICB0aGlzLiNzdGFydEdhbWVDb250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJzdGFydC1nYW1lLWNvbnRhaW5lclwiKTtcclxuICAgICAgICBjb25zdCBidG5TdGFydEdhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xyXG4gICAgICAgIGJ0blN0YXJ0R2FtZS50ZXh0Q29udGVudCA9IFwiU3RhcnQgR2FtZVwiO1xyXG4gICAgICAgIHRoaXMuI3N0YXJ0R2FtZUNvbnRhaW5lckVsZW1lbnQuYXBwZW5kKGJ0blN0YXJ0R2FtZSk7XHJcbiAgICAgICAgdGhpcy4jcm9vdEVsZW1lbnQuYXBwZW5kKHRoaXMuI3N0YXJ0R2FtZUNvbnRhaW5lckVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuYmluZFN0YXJ0R2FtZUJ1dHRvbkV2ZW50cyhidG5TdGFydEdhbWUpO1xyXG4gICAgICAgIENvbnRhaW5lckhlbHBlci5kaXNwbGF5V29vZGVuQ29udGFpbmVyKHRoaXMuI3Jvb3RFbGVtZW50LCB0aGlzLiNzdGFydEdhbWVDb250YWluZXJFbGVtZW50KTtcclxuICAgICAgICB0aGlzLmRpc3BsYXlTY29yZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBiaW5kU3RhcnRHYW1lQnV0dG9uRXZlbnRzKGJ1dHRvbikge1xyXG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5zdGFydEdhbWVCdXR0b25DbGljay5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBzdGFydEdhbWVCdXR0b25DbGljaygpIHtcclxuICAgICAgICB0aGlzLmhpZGVTY29yZXMoKTtcclxuICAgICAgICBhd2FpdCBDb250YWluZXJIZWxwZXIucmVtb3ZlV29vZGVuQ29udGFpbmVyKHRoaXMuI3N0YXJ0R2FtZUNvbnRhaW5lckVsZW1lbnQpO1xyXG4gICAgICAgIEdhbWVDb250cm9sbGVyLnN0YXJ0R2FtZSh0aGlzLiNnYW1lLCB0aGlzKTtcclxuICAgICAgICB0aGlzLnNjcm9sbFRvRW5lbXlBcmVhKHRoaXMuI2dhbWUuY3VycmVudEVuZW15SW5kZXgpO1xyXG4gICAgfVxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbiAgICAvKiBQbGF5ZXJzIEFyZWFzICovXHJcbiAgICAjZmlyc3RQbGF5ZXJBcmVuYUVsZW1lbnQ7XHJcblxyXG4gICAgI3NlY29uZFBsYXllckFyZW5hRWxlbWVudDtcclxuXHJcbiAgICBjYWNoZVBsYXllcnNBcmVhc0RPTSgpIHtcclxuICAgICAgICB0aGlzLiNmaXJzdFBsYXllckFyZW5hRWxlbWVudCA9IHRoaXMuI2dhbWVBcmVuYUVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5maXJzdC1wbGF5ZXItYXJlbmFcIik7XHJcbiAgICAgICAgdGhpcy4jc2Vjb25kUGxheWVyQXJlbmFFbGVtZW50ID1cclxuICAgICAgICAgICAgdGhpcy4jZ2FtZUFyZW5hRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnNlY29uZC1wbGF5ZXItYXJlbmFcIik7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlUGxheWVyc1ZpZXdzKCkge1xyXG4gICAgICAgIHRoaXMuI3BsYXllcnNWaWV3cyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy4jcGxheWVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBwbGF5ZXJWaWV3ID0gbmV3IFBsYXllclZpZXcoXHJcbiAgICAgICAgICAgICAgICB0aGlzLFxyXG4gICAgICAgICAgICAgICAgdGhpcy4jcGxheWVyc1tpXS5zaGlwcyxcclxuICAgICAgICAgICAgICAgIHRoaXMuI2JvYXJkV2lkdGgsXHJcbiAgICAgICAgICAgICAgICB0aGlzLiNib2FyZEhlaWdodCxcclxuICAgICAgICAgICAgICAgIHRoaXMuI3BsYXllcnNbaV0ubmFtZSxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy4jcGxheWVyc1ZpZXdzLnB1c2gocGxheWVyVmlldyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFkZFBsYXllclZpZXcocGxheWVyVmlldykge1xyXG4gICAgICAgIHRoaXMuI3BsYXllcnNWaWV3cy5wdXNoKHBsYXllclZpZXcpO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc3BsYXlTY29yZXMoKSB7XHJcbiAgICAgICAgdGhpcy4jcGF1c2VDb250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgdGhpcy4jcGF1c2VDb250YWluZXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgICAgIFwidHJhbnNpdGlvbmVuZFwiLFxyXG4gICAgICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuI3BsYXllcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiNwbGF5ZXJzVmlld3NbaV0uc2hvd1Njb3JlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHsgb25jZTogdHJ1ZSB9LFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgaGlkZVNjb3JlcygpIHtcclxuICAgICAgICB0aGlzLiNwYXVzZUNvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuI3BsYXllcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy4jcGxheWVyc1ZpZXdzW2ldLmhpZGVTY29yZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTY29yZXMoc2NvcmVzKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLiNwbGF5ZXJzVmlld3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy4jcGxheWVyc1ZpZXdzW2ldLnNldFdpbnMoc2NvcmVzW2ldLndpbnMpO1xyXG4gICAgICAgICAgICB0aGlzLiNwbGF5ZXJzVmlld3NbaV0uc2V0TG9zc2VzKHNjb3Jlc1tpXS5sb3NzZXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgcGxheWVyc1ZpZXdzKCkge1xyXG4gICAgICAgIHJldHVybiBbLi4udGhpcy4jcGxheWVyc1ZpZXdzXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQbGF5ZXJWaWV3KHBsYXllckluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI3BsYXllcnNWaWV3c1twbGF5ZXJJbmRleF07XHJcbiAgICB9XHJcblxyXG4gICAgc2Nyb2xsVG9FbmVteUFyZWEoZW5lbXlJbmRleCkge1xyXG4gICAgICAgIGlmIChlbmVteUluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI2ZpcnN0UGxheWVyQXJlbmFFbGVtZW50LnNjcm9sbEludG9WaWV3KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy4jc2Vjb25kUGxheWVyQXJlbmFFbGVtZW50LnNjcm9sbEludG9WaWV3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gICAgY2hhbmdlVHVybihuZXdUdXJuLCBlbmVteUluZGV4KSB7XHJcbiAgICAgICAgdGhpcy4jcm91bmRzTnVtYmVyRWxlbWVudC5pbm5lclRleHQgPSBuZXdUdXJuO1xyXG4gICAgICAgIGNvbnN0IHJvdGF0aW9uID0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLiNyb3VuZHNFbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKFwiLS1hbmdsZVwiKTtcclxuICAgICAgICBpZiAocm90YXRpb24udHJpbSgpID09PSBcIjBkZWdcIikge1xyXG4gICAgICAgICAgICB0aGlzLiNyb3VuZHNFbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KFwiLS1hbmdsZVwiLCBcIjE4MGRlZ1wiKTtcclxuICAgICAgICAgICAgLy8gVGV4dCByb3RhdGVzIHdpdGggcGFyZW50IHNvIHdlIGFkZCAxODAgZGVnIGFmdGVyIDE4MCBkZWcgZnJvbSBwYXJlbnQncyByb2F0YXRpb25cclxuICAgICAgICAgICAgdGhpcy4jcm91bmRzVGV4dEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoXCItLWFuZ2xlXCIsIFwiMTgwZGVnXCIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuI3JvdW5kc0VsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoXCItLWFuZ2xlXCIsIFwiMGRlZ1wiKTtcclxuICAgICAgICAgICAgdGhpcy4jcm91bmRzVGV4dEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoXCItLWFuZ2xlXCIsIFwiMGRlZ1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zY3JvbGxUb0VuZW15QXJlYShlbmVteUluZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBuZXdHYW1lKGZyZXNoU3RhcnQgPSB0cnVlLCBwbGF5ZXJzTmFtZXMgPSBbXSkge1xyXG4gICAgICAgIHRoaXMuI3BsYXllcnMgPSBbXTtcclxuICAgICAgICB0aGlzLiNwbGF5ZXJzVmlld3MgPSBbXTtcclxuICAgICAgICB0aGlzLiNjdXJyZW50TW9kYWxJbmRleCA9IDA7XHJcbiAgICAgICAgaWYgKGZyZXNoU3RhcnQpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5jcmVhdGVSdWxlc01vZGFsKCk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY3JlYXRlR2FtZVR5cGVNb2RhbCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuI2dhbWVBcmVuYUVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuI3BhdXNlQ29udGFpbmVyRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwic2VtaS1hY3RpdmVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1vZGFsc09yZGVyID0gW3RoaXMuY3JlYXRlR3JpZFNpemVNb2RhbCwgdGhpcy5jcmVhdGVTaGlwc0Nob29zaW5nTW9kYWxdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHRoaXMuI2h1bWFuTnVtYmVyOyBpKyspIHtcclxuICAgICAgICAgICAgbW9kYWxzT3JkZXIucHVzaCh0aGlzLmNyZWF0ZVNoaXBzUGxhY2luZ01vZGFsLmJpbmQodGhpcywgaSwgZnJlc2hTdGFydCwgcGxheWVyc05hbWVzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdoaWxlICh0aGlzLiNjdXJyZW50TW9kYWxJbmRleCA8IG1vZGFsc09yZGVyLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBhd2FpdCBtb2RhbHNPcmRlclt0aGlzLiNjdXJyZW50TW9kYWxJbmRleCsrXS5jYWxsKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy4jaHVtYW5OdW1iZXIgPT09IDEpIHtcclxuICAgICAgICAgICAgdGhpcy4jcGxheWVycy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgR2FtZUNvbnRyb2xsZXIuZ2VuZXJhdGVDb21wdXRlclBsYXllcihcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiNib2FyZFdpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI2JvYXJkSGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3NoaXBzTGlzdCxcclxuICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY3JlYXRlR2FtZUFyZW5hKCk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaHVtYW5OdW1iZXI6IHRoaXMuI2h1bWFuTnVtYmVyLFxyXG4gICAgICAgICAgICBib2FyZFdpZHRoOiB0aGlzLiNib2FyZFdpZHRoLFxyXG4gICAgICAgICAgICBib2FyZEhlaWdodDogdGhpcy4jYm9hcmRIZWlnaHQsXHJcbiAgICAgICAgICAgIHBsYXllcnM6IHRoaXMuI3BsYXllcnMsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKiBSdWxlcyBNb2RhbCAqL1xyXG4gICAgYXN5bmMgY3JlYXRlUnVsZXNNb2RhbCgpIHtcclxuICAgICAgICBjb25zdCBtb2RhbEluc3RhbmNlID0gbmV3IFJ1bGVzTW9kYWwoKTtcclxuICAgICAgICB0aGlzLmRpc3BsYXlNb2RhbChtb2RhbEluc3RhbmNlKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnJ1bGVzTW9kYWxTdWJtaXQobW9kYWxJbnN0YW5jZSk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5yZW1vdmVNb2RhbChtb2RhbEluc3RhbmNlKTtcclxuICAgIH1cclxuXHJcbiAgICBydWxlc01vZGFsU3VibWl0KG1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYnRuU3VibWl0ID0gbW9kYWxJbnN0YW5jZS5tb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5idG4tc3RhcnRcIik7XHJcbiAgICAgICAgICAgIGJ0blN1Ym1pdC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gICAgLyogR2FtZSBUeXBlIE1vZGFsICovXHJcbiAgICBhc3luYyBjcmVhdGVHYW1lVHlwZU1vZGFsKCkge1xyXG4gICAgICAgIGNvbnN0IG1vZGFsSW5zdGFuY2UgPSBuZXcgR2FtZVR5cGVNb2RhbCgpO1xyXG4gICAgICAgIHRoaXMuZGlzcGxheU1vZGFsKG1vZGFsSW5zdGFuY2UpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuZ2FtZVR5cGVNb2RhbFN1Ym1pdChtb2RhbEluc3RhbmNlKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnJlbW92ZU1vZGFsKG1vZGFsSW5zdGFuY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGdhbWVUeXBlTW9kYWxTdWJtaXQobW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBidG5TdWJtaXQgPSBtb2RhbEluc3RhbmNlLm1vZGFsRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ0bi1wbGF5XCIpO1xyXG4gICAgICAgICAgICBidG5TdWJtaXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuI2h1bWFuTnVtYmVyID0gbW9kYWxJbnN0YW5jZS5nZXRodW1hbk51bWJlcigpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gICAgLyogR3JpZCBTaXplIE1vZGFsICovXHJcbiAgICBhc3luYyBjcmVhdGVHcmlkU2l6ZU1vZGFsKCkge1xyXG4gICAgICAgIGNvbnN0IG1vZGFsSW5zdGFuY2UgPSBuZXcgR3JpZFNpemVNb2RhbCh0aGlzLiNib2FyZFdpZHRoID8/IDEwLCB0aGlzLiNib2FyZEhlaWdodCA/PyAxMCk7XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5TW9kYWwobW9kYWxJbnN0YW5jZSk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5ncmlkU2l6ZU1vZGFsU3VibWl0KG1vZGFsSW5zdGFuY2UpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMucmVtb3ZlTW9kYWwobW9kYWxJbnN0YW5jZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ3JpZFNpemVNb2RhbFN1Ym1pdChtb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ0blN1Ym1pdCA9IG1vZGFsSW5zdGFuY2UubW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYnRuLW5leHRcIik7XHJcbiAgICAgICAgICAgIGJ0blN1Ym1pdC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4jYm9hcmRXaWR0aCA9IG1vZGFsSW5zdGFuY2UuZ2V0V2lkdGgoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuI2JvYXJkSGVpZ2h0ID0gbW9kYWxJbnN0YW5jZS5nZXRIZWlnaHQoKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAgIC8qIFNoaXBzIENob29zaW5nIE1vZGFsICovXHJcbiAgICBhc3luYyBjcmVhdGVTaGlwc0Nob29zaW5nTW9kYWwoKSB7XHJcbiAgICAgICAgY29uc3QgbW9kYWxJbnN0YW5jZSA9IG5ldyBDaG9vc2luZ1NoaXBzTW9kYWwodGhpcy4jYm9hcmRXaWR0aCwgdGhpcy4jYm9hcmRIZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuZGlzcGxheU1vZGFsKG1vZGFsSW5zdGFuY2UpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc2hpcHNDaG9vc2luZ01vZGFsU3VibWl0KG1vZGFsSW5zdGFuY2UpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMucmVtb3ZlTW9kYWwobW9kYWxJbnN0YW5jZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2hpcHNDaG9vc2luZ01vZGFsU3VibWl0KG1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYnRuQmFjayA9IG1vZGFsSW5zdGFuY2UubW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYnRuLWJhY2tcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ0blN1Ym1pdCA9IG1vZGFsSW5zdGFuY2UubW9kYWxFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYnRuLXN1Ym1pdFwiKTtcclxuICAgICAgICAgICAgYnRuU3VibWl0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiNzaGlwc0xpc3QgPSBtb2RhbEluc3RhbmNlLmdldFNoaXBzTGlzdCgpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYnRuQmFjay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4jY3VycmVudE1vZGFsSW5kZXggLT0gMjtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKiA9PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuICAgIC8qIFNoaXBzIFBsYWNpbmcgTW9kYWwgKi9cclxuICAgIGFzeW5jIGNyZWF0ZVNoaXBzUGxhY2luZ01vZGFsKHBsYXllck51bWJlciwgaXNGaXJzdFJvdW5kLCBwbGF5ZXJzTmFtZXMpIHtcclxuICAgICAgICBjb25zdCBtb2RhbEluc3RhbmNlID0gbmV3IFNoaXBzUGxhY2luZ01vZGFsKFxyXG4gICAgICAgICAgICB0aGlzLiNodW1hbk51bWJlcixcclxuICAgICAgICAgICAgcGxheWVyTnVtYmVyLFxyXG4gICAgICAgICAgICB0aGlzLiNzaGlwc0xpc3QsXHJcbiAgICAgICAgICAgIHRoaXMuI2JvYXJkV2lkdGgsXHJcbiAgICAgICAgICAgIHRoaXMuI2JvYXJkSGVpZ2h0LFxyXG4gICAgICAgICAgICBpc0ZpcnN0Um91bmQsXHJcbiAgICAgICAgICAgIHBsYXllcnNOYW1lc1twbGF5ZXJOdW1iZXIgLSAxXSxcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuZGlzcGxheU1vZGFsKG1vZGFsSW5zdGFuY2UpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc2hpcHNQbGFjaW5nTW9kYWxTdWJtaXQobW9kYWxJbnN0YW5jZSwgcGxheWVyTnVtYmVyKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnJlbW92ZU1vZGFsKG1vZGFsSW5zdGFuY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHNoaXBzUGxhY2luZ01vZGFsU3VibWl0KG1vZGFsSW5zdGFuY2UsIHBsYXllck51bWJlcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBidG5CYWNrID0gbW9kYWxJbnN0YW5jZS5tb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5idG4tYmFja1wiKTtcclxuICAgICAgICAgICAgY29uc3QgYnRuU3VibWl0ID0gbW9kYWxJbnN0YW5jZS5tb2RhbEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5idG4tc3VibWl0XCIpO1xyXG4gICAgICAgICAgICBidG5TdWJtaXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuI3BsYXllcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogbW9kYWxJbnN0YW5jZS5nZXRQbGF5ZXJOYW1lKCksXHJcbiAgICAgICAgICAgICAgICAgICAgc2hpcHM6IG1vZGFsSW5zdGFuY2UuZ2V0U2hpcHNMaXN0KCksXHJcbiAgICAgICAgICAgICAgICAgICAgaXNCb3Q6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBidG5CYWNrLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiNjdXJyZW50TW9kYWxJbmRleCAtPSAyO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBsYXllck51bWJlciA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiNwbGF5ZXJzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qID09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4gICAgLyogRm9yIGFsbCBtb2RhbHMgKi9cclxuICAgIGRpc3BsYXlNb2RhbChtb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgaWYgKCFtb2RhbEluc3RhbmNlLm1vZGFsQ29udGFpbmVyRWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNb2RhbCBpbnN0YW5jZSBkb2VzIG5vdCBoYXZlIG1vZGFsIGNvbnRhaW5lciBlbGVtZW50IHByb3BlcnR5XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIW1vZGFsSW5zdGFuY2UubW9kYWxFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1vZGFsIGluc3RhbmNlIGRvZXMgbm90IGhhdmUgbW9kYWwgZWxlbWVudCBwcm9wZXJ0eVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy4jcm9vdEVsZW1lbnQuYXBwZW5kKG1vZGFsSW5zdGFuY2UubW9kYWxDb250YWluZXJFbGVtZW50KTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5tb2RhbENvbnRhaW5lckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5tb2RhbEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgICAgICB9LCAwKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVNb2RhbChtb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgaWYgKCFtb2RhbEluc3RhbmNlLm1vZGFsQ29udGFpbmVyRWxlbWVudCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNb2RhbCBpbnN0YW5jZSBkb2VzIG5vdCBoYXZlIG1vZGFsIGNvbnRhaW5lciBlbGVtZW50IHByb3BlcnR5XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIW1vZGFsSW5zdGFuY2UubW9kYWxFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1vZGFsIGluc3RhbmNlIGRvZXMgbm90IGhhdmUgbW9kYWwgZWxlbWVudCBwcm9wZXJ0eVwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UubW9kYWxDb250YWluZXJFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UubW9kYWxFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UubW9kYWxFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5wcm9wZXJ0eU5hbWUgPT09IFwiYm90dG9tXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLm1vZGFsQ29udGFpbmVyRWxlbWVudC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyogPT09PT09PT09PT09PT09PT09PT0gKi9cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBHYW1lIHtcclxuICAgICNydW5uaW5nO1xyXG5cclxuICAgICNwbGF5ZXJzO1xyXG5cclxuICAgICNjdXJyZW50Um91bmQ7XHJcblxyXG4gICAgI2N1cnJlbnRUdXJuO1xyXG5cclxuICAgICNjdXJyZW50UGxheWVySW5kZXg7XHJcblxyXG4gICAgI2N1cnJlbnRFbmVteUluZGV4O1xyXG5cclxuICAgICN3aW5uZXJzO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuI3BsYXllcnMgPSBbXTtcclxuICAgICAgICB0aGlzLiNjdXJyZW50Um91bmQgPSAwO1xyXG4gICAgICAgIHRoaXMuI2N1cnJlbnRUdXJuID0gMDtcclxuICAgICAgICB0aGlzLiNjdXJyZW50UGxheWVySW5kZXggPSAtMTtcclxuICAgICAgICB0aGlzLiN3aW5uZXJzID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHJ1bm5pbmcodmFsdWUpIHtcclxuICAgICAgICB0aGlzLiNydW5uaW5nID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHJ1bm5pbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI3J1bm5pbmc7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkUGxheWVyKHBsYXllcikge1xyXG4gICAgICAgIHRoaXMuI3BsYXllcnMucHVzaChwbGF5ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBsYXllcihwbGF5ZXJJbmRleCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNwbGF5ZXJzW3BsYXllckluZGV4XTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQbGF5ZXJzKCkge1xyXG4gICAgICAgIHJldHVybiBbLi4udGhpcy4jcGxheWVyc107XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UGxheWVyc0NvdW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNwbGF5ZXJzLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBpbmNyZWFzZUN1cnJlbnRSb3VuZCgpIHtcclxuICAgICAgICArK3RoaXMuI2N1cnJlbnRSb3VuZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY3VycmVudFJvdW5kKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNjdXJyZW50Um91bmQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IGN1cnJlbnRQbGF5ZXJJbmRleCh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuI2N1cnJlbnRQbGF5ZXJJbmRleCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjdXJyZW50UGxheWVySW5kZXgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI2N1cnJlbnRQbGF5ZXJJbmRleDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgY3VycmVudEVuZW15SW5kZXgodmFsdWUpIHtcclxuICAgICAgICB0aGlzLiNjdXJyZW50RW5lbXlJbmRleCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjdXJyZW50RW5lbXlJbmRleCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jY3VycmVudEVuZW15SW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q3VycmVudFBsYXllcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jcGxheWVyc1t0aGlzLiNjdXJyZW50UGxheWVySW5kZXhdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEN1cnJlbnRFbmVteSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jcGxheWVyc1t0aGlzLiNjdXJyZW50RW5lbXlJbmRleF07XHJcbiAgICB9XHJcblxyXG4gICAgYWRkV2lubmVyKHBsYXllckluZGV4KSB7XHJcbiAgICAgICAgdGhpcy4jd2lubmVycy5wdXNoKHBsYXllckluZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgd2lubmVycygpIHtcclxuICAgICAgICByZXR1cm4gWy4uLnRoaXMuI3dpbm5lcnNdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldExhc3RXaW5uZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI3dpbm5lcnNbdGhpcy4jd2lubmVycy5sZW5ndGggLSAxXTtcclxuICAgIH1cclxuXHJcbiAgICBpbmNyZWFzZUN1cnJlbnRUdXJuKCkge1xyXG4gICAgICAgICsrdGhpcy4jY3VycmVudFR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgcmVzZXRDdXJyZW50VHVybigpIHtcclxuICAgICAgICB0aGlzLiNjdXJyZW50VHVybiA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGN1cnJlbnRUdXJuKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNjdXJyZW50VHVybjtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgR2FtZWJvYXJkIGZyb20gXCIuLi9HYW1lYm9hcmQvZ2FtZWJvYXJkLW1vZGVsXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGF5ZXIge1xyXG4gICAgI25hbWU7XHJcblxyXG4gICAgI2JvYXJkO1xyXG5cclxuICAgICN3aW5Sb3VuZHM7XHJcblxyXG4gICAgI3BsYXllZFJvdW5kcztcclxuXHJcbiAgICAjaXNCb3Q7XHJcblxyXG4gICAgY29uc3RydWN0b3IobmFtZSwgaXNCb3QpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuI2lzQm90ID0gaXNCb3Q7XHJcbiAgICAgICAgdGhpcy4jd2luUm91bmRzID0gMDtcclxuICAgICAgICB0aGlzLiNwbGF5ZWRSb3VuZHMgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBuYW1lKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy4jbmFtZSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBuYW1lKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpc0JvdCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jaXNCb3Q7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlQm9hcmQod2lkdGgsIGhlaWdodCkge1xyXG4gICAgICAgIHRoaXMuI2JvYXJkID0gR2FtZWJvYXJkKHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBib2FyZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jYm9hcmQ7XHJcbiAgICB9XHJcblxyXG4gICAgaW5jcmVhc2VQbGF5ZXJSb3VuZHMoKSB7XHJcbiAgICAgICAgKyt0aGlzLiNwbGF5ZWRSb3VuZHM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHBsYXllZFJvdW5kcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4jcGxheWVkUm91bmRzO1xyXG4gICAgfVxyXG5cclxuICAgIGluY3JlYXNlV2luUm91bmRzKCkge1xyXG4gICAgICAgICsrdGhpcy4jd2luUm91bmRzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB3aW5Sb3VuZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuI3dpblJvdW5kcztcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgUHViU3ViIGZyb20gXCJwdWJzdWItanNcIjtcclxuaW1wb3J0IEdhbWVib2FyZENvbnRyb2xsZXIgZnJvbSBcIi4uL0dhbWVib2FyZC9nYW1lYm9hcmQtY29udHJvbGxlclwiO1xyXG5pbXBvcnQgR2FtZWJvYXJkQ2hlY2tlciBmcm9tIFwiLi4vR2FtZWJvYXJkL2dhbWVib2FyZC1jaGVja2VyXCI7XHJcbmltcG9ydCBHYW1lVmlldyBmcm9tIFwiLi9nYW1lLXZpZXdcIjtcclxuaW1wb3J0IEdhbWUgZnJvbSBcIi4vZ2FtZS1tb2RlbFwiO1xyXG5pbXBvcnQgUGxheWVyIGZyb20gXCIuLi9QbGF5ZXIvcGxheWVyLW1vZGVsXCI7XHJcbmltcG9ydCBHYW1lYm9hcmQgZnJvbSBcIi4uL0dhbWVib2FyZC9nYW1lYm9hcmQtbW9kZWxcIjtcclxuXHJcbmNvbnN0IEdhbWVDb250cm9sbGVyID0gKCgpID0+IHtcclxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tUGxheWVySW5kZXgoZ2FtZSkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBnYW1lLmdldFBsYXllcnNDb3VudCgpKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUdhbWUoZ2FtZXNDb250YWluZXIsIGlkKSB7XHJcbiAgICAgICAgY29uc3QgZ2FtZSA9IG5ldyBHYW1lKCk7XHJcbiAgICAgICAgY29uc3QgZ2FtZVZpZXcgPSBHYW1lQ29udHJvbGxlci5jcmVhdGVHYW1lVmlldyhnYW1lLCBnYW1lc0NvbnRhaW5lciwgaWQpO1xyXG4gICAgICAgIGdhbWVWaWV3Lm5ld0dhbWUoKS50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5wbGF5ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwbGF5ZXJEYXRhID0gZGF0YS5wbGF5ZXJzW2ldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGxheWVyID0gbmV3IFBsYXllcihwbGF5ZXJEYXRhLm5hbWUsIGRhdGEucGxheWVyc1tpXS5pc0JvdCk7XHJcbiAgICAgICAgICAgICAgICBwbGF5ZXIuY3JlYXRlQm9hcmQoZGF0YS5ib2FyZFdpZHRoLCBkYXRhLmJvYXJkSGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHBsYXllckRhdGEuc2hpcHMpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNoaXAgPSBwbGF5ZXJEYXRhLnNoaXBzW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWRkZWRTaGlwSW5kZXggPSBHYW1lYm9hcmRDb250cm9sbGVyLmFkZFNoaXAocGxheWVyLmJvYXJkLCBzaGlwLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgR2FtZWJvYXJkQ29udHJvbGxlci5wbGFjZVNoaXAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5ib2FyZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWRkZWRTaGlwSW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoaXAucm93LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGlwLmNvbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hpcC5pc1ZlcnRpY2FsLFxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGdhbWUuYWRkUGxheWVyKHBsYXllcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUNvbXB1dGVyUGxheWVyKGJvYXJkV2lkdGgsIGJvYXJkSGVpZ2h0LCBzaGlwc0xpc3QpIHtcclxuICAgICAgICBjb25zdCBjb21wdXRlclBsYXllciA9IHt9O1xyXG4gICAgICAgIGNvbXB1dGVyUGxheWVyLm5hbWUgPSBcIkNvbXB1dGVyXCI7XHJcbiAgICAgICAgY29tcHV0ZXJQbGF5ZXIuaXNCb3QgPSB0cnVlO1xyXG4gICAgICAgIGNvbnN0IHRlbXBCb2FyZCA9IEdhbWVib2FyZChib2FyZFdpZHRoLCBib2FyZEhlaWdodCk7XHJcbiAgICAgICAgT2JqZWN0LmtleXMoc2hpcHNMaXN0KS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgc2hpcExlbmd0aCA9IHBhcnNlSW50KGtleSwgMTApO1xyXG4gICAgICAgICAgICBjb25zdCBjb3VudCA9IHNoaXBzTGlzdFtzaGlwTGVuZ3RoXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBHYW1lYm9hcmRDb250cm9sbGVyLmFkZFNoaXAodGVtcEJvYXJkLCBzaGlwTGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIEdhbWVib2FyZENvbnRyb2xsZXIuYXV0b1BsYWNlU2hpcHModGVtcEJvYXJkKTtcclxuICAgICAgICBjb21wdXRlclBsYXllci5zaGlwcyA9IHt9O1xyXG4gICAgICAgIGNvbnN0IGJvYXJkU2hpcHMgPSB0ZW1wQm9hcmQuZ2V0U2hpcHMoKTtcclxuICAgICAgICBPYmplY3Qua2V5cyhib2FyZFNoaXBzKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICAgICAgY29tcHV0ZXJQbGF5ZXIuc2hpcHNba2V5XSA9IHt9O1xyXG4gICAgICAgICAgICBjb21wdXRlclBsYXllci5zaGlwc1trZXldLmxlbmd0aCA9IHRlbXBCb2FyZC5nZXRTaGlwKGtleSkuZ2V0TGVuZ3RoKCk7XHJcbiAgICAgICAgICAgIGNvbXB1dGVyUGxheWVyLnNoaXBzW2tleV0ucm93ID0gYm9hcmRTaGlwc1trZXldLnJvdztcclxuICAgICAgICAgICAgY29tcHV0ZXJQbGF5ZXIuc2hpcHNba2V5XS5jb2wgPSBib2FyZFNoaXBzW2tleV0uY29sO1xyXG4gICAgICAgICAgICBjb21wdXRlclBsYXllci5zaGlwc1trZXldLmlzVmVydGljYWwgPSBib2FyZFNoaXBzW2tleV0uaXNWZXJ0aWNhbDtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gY29tcHV0ZXJQbGF5ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVOZXh0Um91bmQoZ2FtZSwgZ2FtZVZpZXcpIHtcclxuICAgICAgICBjb25zdCBzY29yZXMgPSBbXTtcclxuICAgICAgICBjb25zdCBwbGF5ZXJzTmFtZXMgPSBbXTtcclxuICAgICAgICBnYW1lLmdldFBsYXllcnMoKS5mb3JFYWNoKChwbGF5ZXIpID0+IHtcclxuICAgICAgICAgICAgcGxheWVyc05hbWVzLnB1c2gocGxheWVyLm5hbWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGdhbWVWaWV3Lm5ld0dhbWUoZmFsc2UsIHBsYXllcnNOYW1lcykudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEucGxheWVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGxheWVyRGF0YSA9IGRhdGEucGxheWVyc1tpXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBsYXllciA9IGdhbWUuZ2V0UGxheWVyKGkpO1xyXG4gICAgICAgICAgICAgICAgcGxheWVyLmNyZWF0ZUJvYXJkKGRhdGEuYm9hcmRXaWR0aCwgZGF0YS5ib2FyZEhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhwbGF5ZXJEYXRhLnNoaXBzKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzaGlwID0gcGxheWVyRGF0YS5zaGlwc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFkZGVkU2hpcEluZGV4ID0gR2FtZWJvYXJkQ29udHJvbGxlci5hZGRTaGlwKHBsYXllci5ib2FyZCwgc2hpcC5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIEdhbWVib2FyZENvbnRyb2xsZXIucGxhY2VTaGlwKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuYm9hcmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZGVkU2hpcEluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGlwLnJvdyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hpcC5jb2wsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoaXAuaXNWZXJ0aWNhbCxcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBzY29yZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luczogcGxheWVyLndpblJvdW5kcyxcclxuICAgICAgICAgICAgICAgICAgICBsb3NzZXM6IHBsYXllci5wbGF5ZWRSb3VuZHMgLSBwbGF5ZXIud2luUm91bmRzLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ2FtZVZpZXcudXBkYXRlU2NvcmVzKHNjb3Jlcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc3RhcnRHYW1lKGdhbWUsIGdhbWVWaWV3KSB7XHJcbiAgICAgICAgaWYgKGdhbWUucnVubmluZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChnYW1lLmdldFBsYXllcnNDb3VudCgpIDwgMikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUb28gZmV3IHBsYXllcnNcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdhbWUucnVubmluZyA9IHRydWU7XHJcbiAgICAgICAgZ2FtZS5pbmNyZWFzZUN1cnJlbnRSb3VuZCgpO1xyXG4gICAgICAgIHNldFN0YXJ0aW5nUGxheWVyKGdhbWUpO1xyXG4gICAgICAgIGdhbWUuY3VycmVudEVuZW15SW5kZXggPSAoZ2FtZS5jdXJyZW50UGxheWVySW5kZXggKyAxKSAlIGdhbWUuZ2V0UGxheWVyc0NvdW50KCk7XHJcbiAgICAgICAgZ2FtZS5pbmNyZWFzZUN1cnJlbnRUdXJuKCk7XHJcbiAgICAgICAgaWYgKGdhbWVWaWV3KSB7XHJcbiAgICAgICAgICAgIFB1YlN1Yi5wdWJsaXNoKFwiU3dpdGNoUGxheWVyVHVyblwiLCB7XHJcbiAgICAgICAgICAgICAgICBnYW1lLFxyXG4gICAgICAgICAgICAgICAgZ2FtZVZpZXcsXHJcbiAgICAgICAgICAgICAgICBmaXJzdFR1cm46IHRydWUsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZXRTdGFydGluZ1BsYXllcihnYW1lKSB7XHJcbiAgICAgICAgbGV0IHN0YXJ0aW5nUGxheWVySW5kZXg7XHJcbiAgICAgICAgaWYgKGdhbWUuY3VycmVudFJvdW5kID09PSAxKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0aW5nUGxheWVySW5kZXggPSBnZW5lcmF0ZVJhbmRvbVBsYXllckluZGV4KGdhbWUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN0YXJ0aW5nUGxheWVySW5kZXggPSBnYW1lLmdldExhc3RXaW5uZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ2FtZS5jdXJyZW50UGxheWVySW5kZXggPSBzdGFydGluZ1BsYXllckluZGV4O1xyXG4gICAgICAgIHJldHVybiBzdGFydGluZ1BsYXllckluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGVuZEdhbWUoZ2FtZSkge1xyXG4gICAgICAgIGlmIChnYW1lLnJ1bm5pbmcgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ2FtZS5ydW5uaW5nID0gZmFsc2U7XHJcbiAgICAgICAgZ2FtZS5nZXRDdXJyZW50UGxheWVyKCkuaW5jcmVhc2VXaW5Sb3VuZHMoKTtcclxuICAgICAgICBnYW1lLmdldFBsYXllcnMoKS5mb3JFYWNoKChwbGF5ZXIpID0+IHtcclxuICAgICAgICAgICAgcGxheWVyLmluY3JlYXNlUGxheWVyUm91bmRzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZ2FtZS5hZGRXaW5uZXIoZ2FtZS5jdXJyZW50UGxheWVySW5kZXgpO1xyXG4gICAgICAgIGdhbWUucmVzZXRDdXJyZW50VHVybigpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGN1cnJlbnRQbGF5ZXJUdXJuRW5kKGdhbWUsIGdhbWVWaWV3KSB7XHJcbiAgICAgICAgZ2FtZS5jdXJyZW50UGxheWVySW5kZXggPSAoZ2FtZS5jdXJyZW50UGxheWVySW5kZXggKyAxKSAlIGdhbWUuZ2V0UGxheWVyc0NvdW50KCk7XHJcbiAgICAgICAgZ2FtZS5jdXJyZW50RW5lbXlJbmRleCA9IChnYW1lLmN1cnJlbnRFbmVteUluZGV4ICsgMSkgJSBnYW1lLmdldFBsYXllcnNDb3VudCgpO1xyXG5cclxuICAgICAgICBnYW1lLmluY3JlYXNlQ3VycmVudFR1cm4oKTtcclxuICAgICAgICBpZiAoZ2FtZVZpZXcpIHtcclxuICAgICAgICAgICAgUHViU3ViLnB1Ymxpc2goXCJTd2l0Y2hQbGF5ZXJUdXJuXCIsIHtcclxuICAgICAgICAgICAgICAgIGdhbWUsXHJcbiAgICAgICAgICAgICAgICBnYW1lVmlldyxcclxuICAgICAgICAgICAgICAgIGZpcnN0VHVybjogZmFsc2UsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBQdWJTdWIucHVibGlzaChcIlR1cm5JbmNyZWFzZWRcIiwge1xyXG4gICAgICAgICAgICAgICAgbmV3VHVybjogZ2FtZS5jdXJyZW50VHVybixcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRFbmVteUluZGV4OiBnYW1lLmN1cnJlbnRFbmVteUluZGV4LFxyXG4gICAgICAgICAgICAgICAgZ2FtZVZpZXcsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzdGFydE1vdmUoZ2FtZSwgZ2FtZVZpZXcpIHtcclxuICAgICAgICBpZiAoZ2FtZS5nZXRDdXJyZW50UGxheWVyKCkuaXNCb3QpIHtcclxuICAgICAgICAgICAgZ2FtZVZpZXcucGxheWVyc1ZpZXdzLmZvckVhY2goKHZpZXcpID0+IHtcclxuICAgICAgICAgICAgICAgIHZpZXcuZGlzYWJsZUJvYXJkKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjb21wdXRlckF0dGFjayhcclxuICAgICAgICAgICAgICAgIGdhbWUuZ2V0Q3VycmVudEVuZW15KCkuYm9hcmQsXHJcbiAgICAgICAgICAgICAgICBnYW1lVmlldy5nZXRQbGF5ZXJWaWV3KGdhbWUuY3VycmVudEVuZW15SW5kZXgpLmJvYXJkVmlldyxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY29tcHV0ZXJBdHRhY2soYm9hcmQsIGJvYXJkVmlldykge1xyXG4gICAgICAgIGxldCBjZWxscyA9IEdhbWVib2FyZENvbnRyb2xsZXIuZ2V0U21hcnRUYXJnZXRzKGJvYXJkKTtcclxuICAgICAgICBjb25zdCB0YXJnZXRlZENlbGwgPSB7fTtcclxuICAgICAgICBpZiAoY2VsbHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGNlbGxzID0gR2FtZWJvYXJkQ29udHJvbGxlci5nZXROb3REYW1hZ2VkU21hcnRUYXJnZXRzKGJvYXJkKTtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjZWxscy5sZW5ndGgpO1xyXG4gICAgICAgICAgICB0YXJnZXRlZENlbGwucm93ID0gY2VsbHNbaW5kZXhdLnJvdztcclxuICAgICAgICAgICAgdGFyZ2V0ZWRDZWxsLmNvbCA9IGNlbGxzW2luZGV4XS5jb2w7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGFyZ2V0ZWRDZWxsLnJvdyA9IGNlbGxzWzBdLnJvdztcclxuICAgICAgICAgICAgdGFyZ2V0ZWRDZWxsLmNvbCA9IGNlbGxzWzBdLmNvbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIFB1YlN1Yi5wdWJsaXNoKFwiQXR0YWNrUmVjZWl2ZWRcIiwge1xyXG4gICAgICAgICAgICAgICAgcm93OiB0YXJnZXRlZENlbGwucm93LFxyXG4gICAgICAgICAgICAgICAgY29sOiB0YXJnZXRlZENlbGwuY29sLFxyXG4gICAgICAgICAgICAgICAgYm9hcmRWaWV3LFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LCAxMDAwKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhdHRhY2soZ2FtZSwgcm93LCBjb2wsIGJvYXJkVmlldykge1xyXG4gICAgICAgIGlmICghZ2FtZS5ydW5uaW5nKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYXR0YWNrU3VjY2VkZWQgPSBHYW1lYm9hcmRDb250cm9sbGVyLnJlY2VpdmVBdHRhY2soXHJcbiAgICAgICAgICAgIGdhbWUuZ2V0Q3VycmVudEVuZW15KCkuYm9hcmQsXHJcbiAgICAgICAgICAgIHJvdyxcclxuICAgICAgICAgICAgY29sLFxyXG4gICAgICAgICAgICBib2FyZFZpZXcsXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoIWF0dGFja1N1Y2NlZGVkKSB7XHJcbiAgICAgICAgICAgIGlmIChib2FyZFZpZXcpIHtcclxuICAgICAgICAgICAgICAgIFB1YlN1Yi5wdWJsaXNoKFwiQXR0YWNrRmFpbGVkXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICBib2FyZFZpZXcsXHJcbiAgICAgICAgICAgICAgICAgICAgcm93LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1cnJlbnRQbGF5ZXJUdXJuRW5kKFxyXG4gICAgICAgICAgICAgICAgZ2FtZSxcclxuICAgICAgICAgICAgICAgIGJvYXJkVmlldyAhPT0gdW5kZWZpbmVkID8gYm9hcmRWaWV3LnBsYXllclZpZXcuZ2FtZVZpZXcgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGJvYXJkVmlldykge1xyXG4gICAgICAgICAgICAgICAgUHViU3ViLnB1Ymxpc2goXCJBdHRhY2tTdWNjZWRlZFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9hcmRWaWV3LFxyXG4gICAgICAgICAgICAgICAgICAgIHJvdyxcclxuICAgICAgICAgICAgICAgICAgICBjb2wsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNTdW5rOiBnYW1lLmdldEN1cnJlbnRFbmVteSgpLmJvYXJkLmdldFNoaXBGcm9tQ29vcmRpbmF0ZShyb3csIGNvbCkuaXNTdW5rKCksXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoR2FtZWJvYXJkQ2hlY2tlci5hcmVBbGxTaGlwc1N1bmsoZ2FtZS5nZXRDdXJyZW50RW5lbXkoKS5ib2FyZCkpIHtcclxuICAgICAgICAgICAgICAgIGVuZEdhbWUoZ2FtZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYm9hcmRWaWV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgUHViU3ViLnB1Ymxpc2goXCJHYW1lRW5kZWRcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lVmlldzogYm9hcmRWaWV3LnBsYXllclZpZXcuZ2FtZVZpZXcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbm5lckluZGV4OiBnYW1lLmN1cnJlbnRQbGF5ZXJJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChib2FyZFZpZXcpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0TW92ZShnYW1lLCBib2FyZFZpZXcucGxheWVyVmlldy5nYW1lVmlldyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlR2FtZVZpZXcoZ2FtZSwgZ2FtZXNDb250YWluZXIsIGlkKSB7XHJcbiAgICAgICAgY29uc3QgZ2FtZVZpZXcgPSBuZXcgR2FtZVZpZXcoZ2FtZSwgZ2FtZXNDb250YWluZXIsIGlkKTtcclxuICAgICAgICByZXR1cm4gZ2FtZVZpZXc7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBnZW5lcmF0ZUdhbWUsXHJcbiAgICAgICAgc3RhcnRHYW1lLFxyXG4gICAgICAgIGF0dGFjayxcclxuICAgICAgICBlbmRHYW1lLFxyXG4gICAgICAgIGNyZWF0ZUdhbWVWaWV3LFxyXG4gICAgICAgIGdlbmVyYXRlTmV4dFJvdW5kLFxyXG4gICAgICAgIGdlbmVyYXRlQ29tcHV0ZXJQbGF5ZXIsXHJcbiAgICAgICAgc3RhcnRNb3ZlLFxyXG4gICAgICAgIGNvbXB1dGVyQXR0YWNrLFxyXG4gICAgfTtcclxufSkoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEdhbWVDb250cm9sbGVyO1xyXG4iLCJpbXBvcnQgUHViU3ViIGZyb20gXCJwdWJzdWItanNcIjtcclxuaW1wb3J0IEdhbWVDb25yb2xsZXIgZnJvbSBcIi4vZ2FtZS1jb250cm9sbGVyXCI7XHJcblxyXG5jb25zdCBHYW1lRXZlbnRIYW5kbGVyID0gKCgpID0+IHtcclxuICAgIC8vIEJpbmQgRXZlbnRzXHJcbiAgICBQdWJTdWIuc3Vic2NyaWJlKFwiQXR0YWNrUmVjZWl2ZWRcIiwgYXR0YWNrUmVjZWl2ZWQpO1xyXG4gICAgUHViU3ViLnN1YnNjcmliZShcIkF0dGFja0ZhaWxlZFwiLCBhdHRhY2tGYWlsZWQpO1xyXG4gICAgUHViU3ViLnN1YnNjcmliZShcIkF0dGFja1N1Y2NlZGVkXCIsIGF0dGFja1N1Y2NlZGVkKTtcclxuICAgIFB1YlN1Yi5zdWJzY3JpYmUoXCJTd2l0Y2hQbGF5ZXJUdXJuXCIsIHN3aXRjaFBsYXllclR1cm4pO1xyXG4gICAgUHViU3ViLnN1YnNjcmliZShcIkdhbWVFbmRlZFwiLCBnYW1lRW5kZWQpO1xyXG4gICAgUHViU3ViLnN1YnNjcmliZShcIlR1cm5JbmNyZWFzZWRcIiwgdHVybkluY3JlYXNlZCk7XHJcbiAgICBQdWJTdWIuc3Vic2NyaWJlKFwiU2hpcFN1bmtcIiwgc2hpcFN1bmspO1xyXG5cclxuICAgIC8vIEV2ZW50cyBIYW5kbGVyc1xyXG4gICAgZnVuY3Rpb24gYXR0YWNrUmVjZWl2ZWQobXNnLCBkYXRhKSB7XHJcbiAgICAgICAgR2FtZUNvbnJvbGxlci5hdHRhY2soXHJcbiAgICAgICAgICAgIGRhdGEuYm9hcmRWaWV3LnBsYXllclZpZXcuZ2FtZVZpZXcuZ2FtZSxcclxuICAgICAgICAgICAgZGF0YS5yb3csXHJcbiAgICAgICAgICAgIGRhdGEuY29sLFxyXG4gICAgICAgICAgICBkYXRhLmJvYXJkVmlldyxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGF0dGFja0ZhaWxlZChtc2csIGRhdGEpIHtcclxuICAgICAgICBkYXRhLmJvYXJkVmlldy5hdHRhY2tGYWlsZWQoZGF0YS5yb3csIGRhdGEuY29sKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhdHRhY2tTdWNjZWRlZChtc2csIGRhdGEpIHtcclxuICAgICAgICBkYXRhLmJvYXJkVmlldy5hdHRhY2tTdWNjZWRlZChkYXRhLnJvdywgZGF0YS5jb2wsIGRhdGEuaXNTdW5rKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzd2l0Y2hQbGF5ZXJUdXJuKG1zZywgZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHBsYXllclZpZXcgPSBkYXRhLmdhbWVWaWV3LmdldFBsYXllclZpZXcoZGF0YS5nYW1lLmN1cnJlbnRQbGF5ZXJJbmRleCk7XHJcbiAgICAgICAgcGxheWVyVmlldy5zZXRUdXJuKCk7XHJcbiAgICAgICAgcGxheWVyVmlldy5kaXNhYmxlQm9hcmQoKTtcclxuICAgICAgICBpZiAoIWRhdGEuZmlyc3RUdXJuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzUGxheWVyVmlldyA9IGRhdGEuZ2FtZVZpZXcuZ2V0UGxheWVyVmlldyhkYXRhLmdhbWUuY3VycmVudEVuZW15SW5kZXgpO1xyXG4gICAgICAgICAgICBwcmV2aW91c1BsYXllclZpZXcudW5zZXRUdXJuKCk7XHJcbiAgICAgICAgICAgIHByZXZpb3VzUGxheWVyVmlldy5lbmFibGVCb2FyZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBHYW1lQ29ucm9sbGVyLnN0YXJ0TW92ZShkYXRhLmdhbWUsIGRhdGEuZ2FtZVZpZXcpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGdhbWVFbmRlZChtc2csIGRhdGEpIHtcclxuICAgICAgICBkYXRhLmdhbWVWaWV3LmVuZEdhbWUoZGF0YS53aW5uZXJJbmRleCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdHVybkluY3JlYXNlZChtc2csIGRhdGEpIHtcclxuICAgICAgICBkYXRhLmdhbWVWaWV3LmNoYW5nZVR1cm4oZGF0YS5uZXdUdXJuLCBkYXRhLmN1cnJlbnRFbmVteUluZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzaGlwU3Vuayhtc2csIGRhdGEpIHtcclxuICAgICAgICBkYXRhLnBsYXllclZpZXcuc2lua1NoaXAoZGF0YS5zaGlwTGVuZ3RoKTtcclxuICAgIH1cclxufSkoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEdhbWVFdmVudEhhbmRsZXI7XHJcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGVzLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBHYW1lQ29udHJvbGxlciBmcm9tIFwiLi9HYW1lL2dhbWUtY29udHJvbGxlclwiO1xyXG5pbXBvcnQgR2FtZUV2ZW50SGFuZGxlciBmcm9tIFwiLi9HYW1lL2dhbWUtZXZlbnQtaGFuZGxlclwiO1xyXG5pbXBvcnQgXCIuLi9zYXNzL3N0eWxlcy5zY3NzXCI7XHJcblxyXG5jb25zdCBnYW1lc0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2FtZXNcIik7XHJcbkdhbWVDb250cm9sbGVyLmdlbmVyYXRlR2FtZShnYW1lc0NvbnRhaW5lciwgMSk7XHJcbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyIsIlVSTCIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfM19fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzVfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF83X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzhfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xMF9fXyIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwiaSIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF83X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwidXJsIiwib3B0aW9ucyIsIlN0cmluZyIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidGVzdCIsInNsaWNlIiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJyZXBsYWNlIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsIkhhbmRsZWJhcnMiLCJ0ZW1wbGF0ZSIsImNvbnRhaW5lciIsImRlcHRoMCIsImhlbHBlcnMiLCJwYXJ0aWFscyIsInN0YWNrMSIsImxvb2t1cFByb3BlcnR5IiwicGFyZW50IiwicHJvcGVydHlOYW1lIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibnVsbENvbnRleHQiLCJwcm9ncmFtIiwibm9vcCIsImhlbHBlciIsImFsaWFzMSIsImFsaWFzMiIsImhvb2tzIiwiaGVscGVyTWlzc2luZyIsImFsaWFzMyIsImFsaWFzNCIsImVzY2FwZUV4cHJlc3Npb24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwib2JqIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJuZXdPYmoiLCJrZXkiLCJiYXNlIiwiX2hhbmRsZWJhcnNTYWZlU3RyaW5nMiIsIl9oYW5kbGViYXJzRXhjZXB0aW9uMiIsIlV0aWxzIiwicnVudGltZSIsIl9oYW5kbGViYXJzTm9Db25mbGljdDIiLCJjcmVhdGUiLCJoYiIsIkhhbmRsZWJhcnNFbnZpcm9ubWVudCIsImV4dGVuZCIsIlNhZmVTdHJpbmciLCJFeGNlcHRpb24iLCJWTSIsInNwZWMiLCJpbnN0IiwiX3V0aWxzIiwiX2V4Y2VwdGlvbjIiLCJfaGVscGVycyIsIl9kZWNvcmF0b3JzIiwiX2xvZ2dlcjIiLCJfaW50ZXJuYWxQcm90b0FjY2VzcyIsIlZFUlNJT04iLCJDT01QSUxFUl9SRVZJU0lPTiIsIkxBU1RfQ09NUEFUSUJMRV9DT01QSUxFUl9SRVZJU0lPTiIsIlJFVklTSU9OX0NIQU5HRVMiLCJvYmplY3RUeXBlIiwiZGVjb3JhdG9ycyIsInJlZ2lzdGVyRGVmYXVsdEhlbHBlcnMiLCJyZWdpc3RlckRlZmF1bHREZWNvcmF0b3JzIiwiY29uc3RydWN0b3IiLCJsb2dnZXIiLCJsb2ciLCJyZWdpc3RlckhlbHBlciIsIm5hbWUiLCJmbiIsInVucmVnaXN0ZXJIZWxwZXIiLCJyZWdpc3RlclBhcnRpYWwiLCJwYXJ0aWFsIiwidW5yZWdpc3RlclBhcnRpYWwiLCJyZWdpc3RlckRlY29yYXRvciIsInVucmVnaXN0ZXJEZWNvcmF0b3IiLCJyZXNldExvZ2dlZFByb3BlcnR5QWNjZXNzZXMiLCJyZXNldExvZ2dlZFByb3BlcnRpZXMiLCJjcmVhdGVGcmFtZSIsImluc3RhbmNlIiwiX2RlY29yYXRvcnNJbmxpbmUyIiwicHJvcHMiLCJyZXQiLCJjb250ZXh0Iiwib3JpZ2luYWwiLCJhcmdzIiwiZXJyb3JQcm9wcyIsIm1lc3NhZ2UiLCJub2RlIiwibG9jIiwibGluZSIsImVuZExpbmVOdW1iZXIiLCJjb2x1bW4iLCJlbmRDb2x1bW4iLCJzdGFydCIsImVuZCIsInRtcCIsIkVycm9yIiwiaWR4IiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJsaW5lTnVtYmVyIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJub3AiLCJfaGVscGVyc0Jsb2NrSGVscGVyTWlzc2luZzIiLCJfaGVscGVyc0VhY2gyIiwiX2hlbHBlcnNIZWxwZXJNaXNzaW5nMiIsIl9oZWxwZXJzSWYyIiwiX2hlbHBlcnNMb2cyIiwiX2hlbHBlcnNMb29rdXAyIiwiX2hlbHBlcnNXaXRoMiIsIm1vdmVIZWxwZXJUb0hvb2tzIiwiaGVscGVyTmFtZSIsImtlZXBIZWxwZXIiLCJpbnZlcnNlIiwiaXNBcnJheSIsImlkcyIsImVhY2giLCJjb250ZXh0UGF0aCIsImFwcGVuZENvbnRleHRQYXRoIiwicHJpb3JLZXkiLCJleGVjSXRlcmF0aW9uIiwiZmllbGQiLCJpbmRleCIsImxhc3QiLCJmaXJzdCIsImJsb2NrUGFyYW1zIiwiaXNGdW5jdGlvbiIsImoiLCJnIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuZXdDb250ZXh0IiwiaXQiLCJuZXh0IiwiZG9uZSIsImtleXMiLCJmb3JFYWNoIiwiYXJndW1lbnRzIiwiY29uZGl0aW9uYWwiLCJpbmNsdWRlWmVybyIsImlzRW1wdHkiLCJsZXZlbCIsImFwcGx5IiwiY3JlYXRlTmV3TG9va3VwT2JqZWN0IiwiX2xlbiIsIkFycmF5IiwiX2tleSIsImNyZWF0ZVByb3RvQWNjZXNzQ29udHJvbCIsInJ1bnRpbWVPcHRpb25zIiwiZGVmYXVsdE1ldGhvZFdoaXRlTGlzdCIsImRlZmF1bHRQcm9wZXJ0eVdoaXRlTGlzdCIsInByb3BlcnRpZXMiLCJ3aGl0ZWxpc3QiLCJfY3JlYXRlTmV3TG9va3VwT2JqZWN0IiwiYWxsb3dlZFByb3RvUHJvcGVydGllcyIsImRlZmF1bHRWYWx1ZSIsImFsbG93UHJvdG9Qcm9wZXJ0aWVzQnlEZWZhdWx0IiwibWV0aG9kcyIsImFsbG93ZWRQcm90b01ldGhvZHMiLCJhbGxvd1Byb3RvTWV0aG9kc0J5RGVmYXVsdCIsInJlc3VsdElzQWxsb3dlZCIsInJlc3VsdCIsInByb3RvQWNjZXNzQ29udHJvbCIsInByb3RvQWNjZXNzQ29udHJvbEZvclR5cGUiLCJsb2dnZWRQcm9wZXJ0aWVzIiwibG9nVW5leHBlY2VkUHJvcGVydHlBY2Nlc3NPbmNlIiwiY2hlY2tXaGl0ZUxpc3QiLCJ3cmFwSGVscGVyIiwidHJhbnNmb3JtT3B0aW9uc0ZuIiwibWV0aG9kTWFwIiwibG9va3VwTGV2ZWwiLCJsZXZlbE1hcCIsImluZGV4T2YiLCJ0b0xvd2VyQ2FzZSIsInBhcnNlSW50IiwiY29uc29sZSIsIm1ldGhvZCIsInJvb3QiLCJ3aW5kb3ciLCIkSGFuZGxlYmFycyIsIm5vQ29uZmxpY3QiLCJjaGVja1JldmlzaW9uIiwiY29tcGlsZXJJbmZvIiwiY29tcGlsZXJSZXZpc2lvbiIsImN1cnJlbnRSZXZpc2lvbiIsIl9iYXNlIiwicnVudGltZVZlcnNpb25zIiwiY29tcGlsZXJWZXJzaW9ucyIsInRlbXBsYXRlU3BlYyIsImVudiIsIm1haW4iLCJkZWNvcmF0b3IiLCJtYWluX2QiLCJjb21waWxlciIsInRlbXBsYXRlV2FzUHJlY29tcGlsZWRXaXRoQ29tcGlsZXJWNyIsInN0cmljdCIsImxvb2t1cCIsImRlcHRocyIsImxlbiIsImxhbWJkYSIsImN1cnJlbnQiLCJpbnZva2VQYXJ0aWFsIiwicmVzb2x2ZVBhcnRpYWwiLCJleHRlbmRlZE9wdGlvbnMiLCJjb21waWxlIiwiY29tcGlsZXJPcHRpb25zIiwiaW5kZW50IiwibGluZXMiLCJzcGxpdCIsImwiLCJwcm9ncmFtcyIsImRlY2xhcmVkQmxvY2tQYXJhbXMiLCJwcm9ncmFtV3JhcHBlciIsIndyYXBQcm9ncmFtIiwiZGVwdGgiLCJfcGFyZW50IiwibWVyZ2VJZk5lZWRlZCIsInBhcmFtIiwiY29tbW9uIiwic2VhbCIsIl9zZXR1cCIsInVzZURhdGEiLCJpbml0RGF0YSIsInVzZUJsb2NrUGFyYW1zIiwidXNlRGVwdGhzIiwiZXhlY3V0ZURlY29yYXRvcnMiLCJpc1RvcCIsIm1lcmdlZEhlbHBlcnMiLCJfaW50ZXJuYWxXcmFwSGVscGVyIiwicGFzc0xvb2t1cFByb3BlcnR5T3B0aW9uIiwid3JhcEhlbHBlcnNUb1Bhc3NMb29rdXBQcm9wZXJ0eSIsInVzZVBhcnRpYWwiLCJ1c2VEZWNvcmF0b3JzIiwia2VlcEhlbHBlckluSGVscGVycyIsImFsbG93Q2FsbHNUb0hlbHBlck1pc3NpbmciLCJfY2hpbGQiLCJjdXJyZW50UGFydGlhbEJsb2NrIiwicGFydGlhbEJsb2NrIiwiRnVuY3Rpb24iLCJwcm9nIiwiY3VycmVudERlcHRocyIsInN0cmluZyIsInRvSFRNTCIsImFycmF5IiwicG9zc2libGUiLCJiYWRDaGFycyIsImVzY2FwZUNoYXIiLCJvYmplY3QiLCJmcmFtZSIsInBhcmFtcyIsInBhdGgiLCJlc2NhcGUiLCJjaHIiLCJmYWN0b3J5IiwiUHViU3ViIiwid2FybiIsIm1lc3NhZ2VzIiwibGFzdFVpZCIsImNhbGxTdWJzY3JpYmVyV2l0aERlbGF5ZWRFeGNlcHRpb25zIiwic3Vic2NyaWJlciIsImV4Iiwic2V0VGltZW91dCIsInRocm93RXhjZXB0aW9uIiwiY2FsbFN1YnNjcmliZXJXaXRoSW1tZWRpYXRlRXhjZXB0aW9ucyIsImRlbGl2ZXJNZXNzYWdlIiwib3JpZ2luYWxNZXNzYWdlIiwibWF0Y2hlZE1lc3NhZ2UiLCJpbW1lZGlhdGVFeGNlcHRpb25zIiwicyIsInN1YnNjcmliZXJzIiwiY2FsbFN1YnNjcmliZXIiLCJoYXNEaXJlY3RTdWJzY3JpYmVyc0ZvciIsInRvcGljIiwiQm9vbGVhbiIsImhhc0tleXMiLCJwdWJsaXNoIiwic3luYyIsImRlbGl2ZXIiLCJwb3NpdGlvbiIsImxhc3RJbmRleE9mIiwic3Vic3RyIiwiY3JlYXRlRGVsaXZlcnlGdW5jdGlvbiIsImZvdW5kIiwibWVzc2FnZUhhc1N1YnNjcmliZXJzIiwicHVibGlzaFN5bmMiLCJzdWJzY3JpYmUiLCJmdW5jIiwidG9rZW4iLCJzdWJzY3JpYmVBbGwiLCJzdWJzY3JpYmVPbmNlIiwidW5zdWJzY3JpYmUiLCJjbGVhckFsbFN1YnNjcmlwdGlvbnMiLCJjbGVhclN1YnNjcmlwdGlvbnMiLCJtIiwiY291bnRTdWJzY3JpcHRpb25zIiwiY291bnQiLCJnZXRTdWJzY3JpcHRpb25zIiwidCIsImlzVG9waWMiLCJkZXNjZW5kYW50VG9waWNFeGlzdHMiLCJpc1Rva2VuIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJpbmRleEJ5SWRlbnRpZmllciIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJpbnNlcnQiLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl90eXBlb2YiLCJfcmVnZW5lcmF0b3JSdW50aW1lIiwiT3AiLCJoYXNPd24iLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImVyciIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInNlbGYiLCJ0cnlMb2NzTGlzdCIsInByb3RvR2VuZXJhdG9yIiwiR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiQ29udGV4dCIsIl9pbnZva2UiLCJzdGF0ZSIsImFyZyIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJ0eXBlIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwidmFsdWVzIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiX19hd2FpdCIsInRoZW4iLCJ1bndyYXBwZWQiLCJlcnJvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiVHlwZUVycm9yIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc05hTiIsImRvbmVSZXN1bHQiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJpdGVyIiwicmV2ZXJzZSIsInBvcCIsInNraXBUZW1wUmVzZXQiLCJwcmV2IiwiY2hhckF0Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJnbG9iYWxUaGlzIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJkIiwiYSIsImRlZmluaXRpb24iLCJvIiwiZ2V0IiwicHJvcCIsIm5tZCIsInBhdGhzIiwiY2hpbGRyZW4iLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicCIsImIiLCJiYXNlVVJJIiwiaHJlZiIsIm5jIiwicmFuZG9tSW5kZXgiLCJjdXJyZW50SW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJHYW1lYm9hcmRHZXR0ZXIiLCJtYXhIb3Jpem9udGFsTGVuZ3RoQ2FuQmVPY2N1cGllZCIsImJvYXJkIiwiaG9yaXpvbnRhbExlbmd0aCIsInNoaXBzQm9hcmQiLCJnZXRTaGlwc0JvYXJkIiwiZ2V0SGVpZ2h0IiwiZ2V0V2lkdGgiLCJjbnQiLCJtYXgiLCJtYXhWZXJ0aWNhbExlbmd0aENhbkJlT2NjdXBpZWQiLCJ2ZXJ0aWNhbExlbmd0aCIsImNoZWNrSWZXaG9sZU51bWJlciIsIm51bSIsIk51bWJlciIsImlzSW50ZWdlciIsImNoZWNrSWZQb3NpdGl2ZU51bWJlciIsIkdhbWVib2FyZENoZWNrZXIiLCJpc091dHNpZGVCb2FyZCIsInJvdyIsImNvbCIsImNhbkFkZFNoaXAiLCJDaGVja2VySGVscGVyIiwibm90UGxhY2VkTGVuZ3RoIiwiZ2V0U2hpcHMiLCJzaGlwIiwiZ2V0TGVuZ3RoIiwiZ2V0QmxvY2tOb3RPY2N1cGllZCIsImNhblBsYWNlU2hpcCIsInNoaXBJbmRleCIsImlzVmVydGljYWwiLCJzaGlwVG9QbGFjZSIsImdldFNoaXAiLCJpc0hpdCIsImdldEhpdHNCb2FyZCIsImFyZUFsbFNoaXBzU3VuayIsImdldFNoaXBzQWxpdmUiLCJjaGVja0lmQWxsU2hpcHNQbGFjZWQiLCJzaGlwc0FycmF5IiwiY2hlY2tJZk5vbk9mU2hpcHNQbGFjZWQiLCJHYW1lYm9hcmRDb250cm9sbGVyIiwicGxhY2VTaGlwIiwic2V0U2hpcE9yaWVudGF0aW9uIiwic2V0U2hpcFN0YXJ0UG9pbnQiLCJzZXRTaGlwQm9hcmRDZWxsIiwiZGVjcmVhc2VCbG9ja05vdE9jY3VwaWVkIiwidW5wbGFjZVNoaXAiLCJpc1N1bmsiLCJkZWNyZWFzZVNoaXBzQWxpdmUiLCJyZW1vdmVGcm9tSGl0c0JvYXJkIiwicmVtb3ZlRnJvbVNoaXBzQm9hcmQiLCJpbmNyZWFzZUJsb2NrTm90T2NjdXBpZWQiLCJhdXRvUGxhY2VTaGlwc0RQIiwiZHAiLCJ0aW1lIiwidGltZWxpbWl0IiwiZ2V0U2hpcHNDb3VudCIsIkRhdGUiLCJub3ciLCJib29sZWFuQm9hcmQiLCJjb252ZXJ0U2hpcHNCb2FyZFRvQm9vbGVhbiIsImhhcyIsInBsYWNlc0F2YWlsYWJsZSIsIkFycmF5SGVscGVyIiwiYWRkIiwiZ2V0Tm90RGFtYWdlZENlbGxzIiwiY2VsbHMiLCJnZXREYW1hZ2VkQ2VsbHNPZkFsaXZlRGFtYWdlZFNoaXBzIiwibWluU2hpcEhQRGFtYWdlZCIsIm1heFNoaXBIUERhbWFnZWQiLCJkYW1hZ2VkQ2VsbHMiLCJnZXREYW1hZ2VkQ2VsbHMiLCJjZWxsIiwiZ2V0U2hpcEluZGV4RnJvbUNvb3JkaW5hdGUiLCJnZXRIUERhbWFnZWQiLCJpc1NoaXBWZXJ0aWNhbCIsImlzVmVydGljYWxTaGlwIiwiYWRkVG9Qb3NzaWJsZVRhcmdldHMiLCJ0YXJnZXRzIiwiZ2V0TWluTm90RGFtYWdlZFNoaXBMZW5ndGgiLCJtaW5MZW5ndGgiLCJtaW4iLCJhZGRTaGlwIiwicHVzaFNoaXAiLCJyZWNlaXZlQXR0YWNrIiwiYm9hcmRWaWV3IiwiaGl0Qm9hcmRDZWxsIiwiaGl0dGVkU2hpcEluZGV4IiwiaGl0UG9pbnRPblNoaXAiLCJnZXRTaGlwU3RhcnRQb2ludCIsImhpdHRlZFNoaXAiLCJoaXQiLCJwbGF5ZXJWaWV3Iiwic2hpcExlbmd0aCIsImF1dG9QbGFjZVNoaXBzIiwiU2V0Iiwic29ydFNoaXBzQnlMZW5ndGhEZXNjIiwidW5wbGFjZUFsbFNoaXBzIiwicmVtb3ZlQWxsU2hpcHMiLCJyZW1vdmVTaGlwIiwiZ2V0U21hcnRUYXJnZXRzIiwiZ2V0Tm90RGFtYWdlZFNtYXJ0VGFyZ2V0cyIsIm1pblNoaXBMZW5ndGgiLCJnZXRIb3Jpem9udGFsTm90RGFtYWdlZExlbmd0aCIsImdldFZlcnRpY2FsTm90RGFtYWdlZExlbmd0aCIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwiYXJyMiIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIm1pbkxlbiIsImZyb20iLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJfbmV4dCIsIl90aHJvdyIsIl9hc3luY1RvR2VuZXJhdG9yIiwiX2NsYXNzQ2FsbENoZWNrIiwiQ29uc3RydWN0b3IiLCJfZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfY2xhc3NFeHRyYWN0RmllbGREZXNjcmlwdG9yIiwicmVjZWl2ZXIiLCJwcml2YXRlTWFwIiwiYWN0aW9uIiwiX2NsYXNzUHJpdmF0ZUZpZWxkR2V0IiwiX2NsYXNzUHJpdmF0ZUZpZWxkU2V0Iiwic2V0IiwiQ291bnRlciIsImNvdW50ZXJFbGVtZW50Iiwic3RhcnRpbmdOdW1iZXIiLCJ1cGRhdGVDb3VudGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsYXNzTGlzdCIsInRleHRDb250ZW50IiwidXBkYXRlSWZMaW1pdFJlYWNoZWQiLCJjcmVhdGVTaGlwRWxlbWVudCIsImxpbWl0Iiwic2hpcEJsb2NrIiwiYXBwZW5kIiwibGVmdFBhcmVudGhlc2lzIiwiZnJvbUNoYXJDb2RlIiwicmlnaHRQYXJlbnRoZXNpcyIsImNyZWF0ZVNoaXBDb250YWluZXJFbGVtZW50Iiwic2hpcENvbnRhaW5lciIsImlubmVyVGV4dCIsInNoaXBzQ291bnRTcGFuIiwiZGF0YXNldCIsImJ1dHRvbiIsInJlbW92ZUF0dHJpYnV0ZSIsIkNob29zaW5nU2hpcHNNb2RhbCIsImJvYXJkV2lkdGgiLCJib2FyZEhlaWdodCIsImNhY2hlRE9NIiwiRm9ybUhlbHBlciIsImNyZWF0ZVNoaXBzUGFnZXMiLCJpbml0UGFnaW5hdGlvbiIsInVwZGF0ZU1heFNoaXBzQ2hvb3NpbmdOdW1iZXIiLCJiaW5kRXZlbnRzIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiQ2hvb3NpbmdTaGlwc1RlbXBsYXRlIiwiYm9keSIsImZpcnN0RWxlbWVudENoaWxkIiwicXVlcnlTZWxlY3RvckFsbCIsImJpbmRQYWdpbmF0aW9uRXZlbnRzIiwidXBkYXRlUGFnaW5hdGlvblN0eWxlIiwiY29udGFpbnMiLCJwYWdpbmF0ZUxlZnQiLCJwYWdpbmF0ZVJpZ2h0IiwicmlnaHQiLCJjbG9zZXN0IiwiZ2V0TWF4U2hpcExlbmd0aCIsImNyZWF0ZVBhZ2UiLCJmaXJzdFNoaXBMZW5ndGgiLCJzaGlwc051bSIsInBhZ2UiLCJjcmVhdGVTaGlwQ29udGFpbmVyIiwiU2hpcENvbnRhaW5lclRlbXBsYXRlIiwic2hpcENvdW50Iiwic2hpcEVsZW1lbnQiLCJQbGF5ZXJWaWV3SGVscGVyIiwicmVwbGFjZVdpdGgiLCJzaGlwc0xpc3QiLCJib2FyZFNpemUiLCJwaWNrZWRTaGlwQmxvY2tzU3VtIiwiY3VycmVudE51bWJlciIsInVwZGF0ZU1heCIsIlJ1bGVzTW9kYWwiLCJSdWxlc1RlbXBsYXRlIiwiR2FtZVR5cGVNb2RhbCIsInNldEh1bWFuTnVtYmVyIiwiR2FtZVR5cGVUZW1wbGF0ZSIsImJpbmQiLCJHcmlkU2l6ZU1vZGFsIiwicmVuZGVyQm9hcmQiLCJHcmlkU2l6ZVRlbXBsYXRlIiwiaW5uZXJIVE1MIiwic2V0UHJvcGVydHkiLCJibG9jayIsIl9zbGljZWRUb0FycmF5IiwiX3MiLCJfZSIsIl9hcnIiLCJfbiIsIl9kIiwiU2hpcCIsImhwUmVtYWluZWQiLCJoaXRwb2ludHMiLCJwcm90byIsImdldEhQUmVtYWluZWQiLCJnZXRIaXRwb2ludHMiLCJHYW1lYm9hcmQiLCJ3aWR0aCIsImhlaWdodCIsInNoaXBzIiwiaGl0c0JvYXJkIiwic2hpcHNBbGl2ZSIsImJsb2Nrc05vdE9jY3VwaWVkIiwiZ2V0U2hpcEZyb21Db29yZGluYXRlIiwicmVtb3ZlU2hpcEJ5Q29vcmRpbmF0ZXMiLCJjb3BpZWRTaGlwc0JvYXJkIiwiY29waWVkSGl0c0JvYXJkIiwiZ2V0U2hpcHNMaXN0Iiwic29ydCIsIkJvYXJkSGVscGVyIiwiZ2V0QmxvY2tJbmRleEZyb21Db29yZGluYXRlcyIsImdldENvb3JkaW5hdGVzRnJvbUJsb2NrSW5kZXgiLCJibG9ja0luZGV4IiwiZ2V0QmxvY2tJbmRleEZyb21CbG9ja0VsZW1lbnQiLCJib2FyZEVsZW1lbnQiLCJibG9ja0VsZW1lbnQiLCJnZXRCbG9ja1RvcE9mZnNldCIsIm9mZnNldFRvcCIsImdldEJsb2NrTGVmdE9mZnNldCIsIm9mZnNldExlZnQiLCJjcmVhdGVTaGlwT25Cb2FyZCIsInRvcCIsImxlZnQiLCJTaGlwc1BsYWNpbmdNb2RhbCIsInBsYXllcnNOdW0iLCJjdXJyZW50UGxheWVyTnVtIiwiaXNGaXJzdFJvdW5kIiwicGxheWVyTmFtZSIsInBsYXllckxhYmVsIiwiaW5pdFBsYXllckFyZWEiLCJpbml0U2hpcHNBcmVhIiwiaW5pdEJvYXJkQXJlYSIsIlBsYWNpbmdTaGlwc1RlbXBsYXRlIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiY2FjaGVQbGF5ZXJBcmVhRE9NIiwiY2FjaGVTaGlwc0FyZWFET00iLCJjYWNoZVBhZ2luYXRpb25ET00iLCJjYWNoZUJvYXJkQXJlYURPTSIsImJpbmRQbGF5ZXJBcmVhRXZlbnRzIiwiYmluZFNoaXBzQXJlYUV2ZW50cyIsImJpbmRCb2FyZEFyZWFFdmVudHMiLCJociIsIm9uS2V5UHJlc3NQbGF5ZXJOYW1lIiwiY2hlY2tJZk1heFBsYXllck5hbWVSZWFjaGVkIiwicHJldmVudERlZmF1bHQiLCJzZXRBY3RpdmVTaGlwIiwiY3JlYXRlVGVtcFNoaXAiLCJzZXRQbGFjZU9wdGlvbkFjdGl2ZSIsImN1cnJlbnRDb3VudCIsImFjdGl2ZVNoaXBDb250YWluZXIiLCJmaXJzdFNoaXBJbmRleCIsInBsYXllclZpZXdIZWxwZXIiLCJvbkNsaWNrUGxhY2VTaGlwT25Cb2FyZCIsIk9uTW91c2VFbnRlckJvYXJkQmxvY2siLCJvbk1vdXNlTGVhdmVCb2FyZEJsb2NrIiwib25jZSIsImN1cnJlbnRJZCIsImRlY3JlYXNlU2hpcENvdW50Iiwic2V0RW1wdHlDZWxscyIsInBsYWNlU2hpcE9uQm9hcmQiLCJyZW1vdmVBbGxTaGlwc0Zyb21Cb2FyZCIsInRlbXBCb2FyZCIsImlzUGxhY2VkIiwib25DbGlja1JlbW92ZVNoaXBGcm9tQm9hcmQiLCJpbmNyZWFzZVNoaXBDb3VudCIsInJlbW92ZVNoaXBGcm9tQm9hcmRCeUlkIiwib25DbGlja1NldFBsYWNlT3B0aW9uQWN0aXZlIiwiYmluZFBsYWNlU2hpcHNFdmVudHMiLCJiaW5kUmVtb3ZlU2hpcHNFdmVudHMiLCJidXR0b25FbGVtZW50Iiwib3B0aW9uIiwiYWN0aXZlQnV0dG9uIiwibW9kYWxFbGVtZW50IiwiR2FtZWJvYXJkVmlldyIsIkF1ZGlvIiwicmVuZGVyIiwiYmxvY2tzIiwiYm9hcmRUZW1wbGF0ZSIsImFkZFNoaXBzVG9Cb2FyZCIsInNldFNoaXBzQmxvY2tzQm9hcmQiLCJwbGF5U291bmQiLCJhdWRpbyIsInBhdXNlIiwiY3VycmVudFRpbWUiLCJwbGF5IiwiUGxheWVyVmlldyIsImdhbWVWaWV3IiwiY3JlYXRlQm9hcmQiLCJpbml0U2hpcHNSZW1haW5lZCIsImluaXRTY29yZSIsImNhY2hlVHVybkRPTSIsImNhY2hlU2hpcHNSZW1haW5lZERPTSIsImNhY2hlU2NvcmVET00iLCJjYWNoZURhcmtlbmluZ0RPTSIsImdldEJvYXJkRWxlbWVudCIsImJpbmRTaGlwc1JlbWFpbmVkRXZlbnRzIiwiYWRkU2hpcHNUb3NoaXBzUmVtYWluZWRFbGVtZW50IiwiaW5pdFNoaXBzUmVtYWluZWRQYWdpbmF0aW9uIiwiY2FjaGVTaGlwc1JlbWFpbmVkUGFnaW5hdGlvbkRPTSIsIm1vdXNlRW50ZXJJbmZvIiwibW91c2VMZWF2ZUluZm8iLCJiaW5kU2hpcHNSZW1haW5lZFBhZ2luYXRpb25FdmVudHMiLCJzaGlwc0xpc3RDb3VudCIsImNvdW50RWxlbWVudCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRvZ2dsZUFycm93c1N0YXRlIiwicGFyZW50RWxlbWVudCIsInNjcm9sbCIsInN0b3BTY3JvbGxpbmciLCJ0YXJnZXREaXN0YW5jZSIsImdldFJlc3BvbnNpdmVTY3JvbGwiLCJzY3JvbGxEaXJlY3Rpb24iLCJjaGVja0lmU2NyZWVuU21hbGwiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0Iiwia2VlcFNjcm9sbGluZyIsImNoZWNrSWZMZWZ0TW9zdFJlYWNoZWQiLCJjaGVja0lmUmlnaHRNb3N0UmVhY2hlZCIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsInNjcm9sbFdpZHRoIiwiY2xpZW50V2lkdGgiLCJnZXRDb21wdXRlZFN0eWxlIiwidHJhbnNmb3JtIiwic2hvd1R1cm5MYWJlbCIsImRhcmtlbiIsImhpZGVUdXJuTGFiZWwiLCJyZW1vdmVEYXJrZW5pbmciLCJzZXRQbGF5ZXJOYW1lIiwiZGlzYWJsZUJvYXJkIiwiZW5hYmxlQm9hcmQiLCJjb250YWluZXJFbGVtZW50IiwicGF1c2VDb250YWluZXJFbGVtZW50IiwiR2FtZVZpZXciLCJnYW1lIiwiY3JlYXRlUm9vdEVsZW1lbnQiLCJjcmVhdGVQYXVzZUNvbnRhaW5lciIsImdhbWVJZCIsIkNvbnRhaW5lckhlbHBlciIsImNhY2hlR2FtZUFyZW5hRE9NIiwiY3JlYXRlUGxheWVyc1ZpZXdzIiwiZ2V0UGxheWVyVmlldyIsImdldFBsYXllckFyZWFFbGVtZW50IiwiY3JlYXRlU3RhcnRHYW1lTGFiZWwiLCJHYW1lQXJlbmEiLCJjYWNoZVBsYXllcnNBcmVhc0RPTSIsIndpbm5lckluZGV4Iiwic2hvd1dpbkxhYmVsIiwiaW5jcmVhc2VXaW5zIiwic2hvd0xvc2VMYWJlbCIsImluY3JlYXNlTG9zc2VzIiwiY3JlYXRlTmV4dEdhbWVMYWJlbCIsImJ0bk5leHRHYW1lIiwiYmluZE5leHRHYW1lQnV0dG9uRXZlbnRzIiwiTmV4dEdhbWVCdXR0b25DbGljayIsImRpc3BsYXlTY29yZXMiLCJoaWRlU2NvcmVzIiwiR2FtZUNvbnRyb2xsZXIiLCJidG5TdGFydEdhbWUiLCJiaW5kU3RhcnRHYW1lQnV0dG9uRXZlbnRzIiwic3RhcnRHYW1lQnV0dG9uQ2xpY2siLCJzY3JvbGxUb0VuZW15QXJlYSIsImN1cnJlbnRFbmVteUluZGV4Iiwic2hvd1Njb3JlIiwiaGlkZVNjb3JlIiwic2NvcmVzIiwic2V0V2lucyIsIndpbnMiLCJzZXRMb3NzZXMiLCJsb3NzZXMiLCJwbGF5ZXJJbmRleCIsImVuZW15SW5kZXgiLCJzY3JvbGxJbnRvVmlldyIsIm5ld1R1cm4iLCJnZXRQcm9wZXJ0eVZhbHVlIiwidHJpbSIsImZyZXNoU3RhcnQiLCJwbGF5ZXJzTmFtZXMiLCJjcmVhdGVSdWxlc01vZGFsIiwiY3JlYXRlR2FtZVR5cGVNb2RhbCIsIm1vZGFsc09yZGVyIiwiY3JlYXRlR3JpZFNpemVNb2RhbCIsImNyZWF0ZVNoaXBzQ2hvb3NpbmdNb2RhbCIsImNyZWF0ZVNoaXBzUGxhY2luZ01vZGFsIiwiY3JlYXRlR2FtZUFyZW5hIiwiaHVtYW5OdW1iZXIiLCJwbGF5ZXJzIiwibW9kYWxJbnN0YW5jZSIsImRpc3BsYXlNb2RhbCIsInJ1bGVzTW9kYWxTdWJtaXQiLCJyZW1vdmVNb2RhbCIsImdhbWVUeXBlTW9kYWxTdWJtaXQiLCJnZXRodW1hbk51bWJlciIsImdyaWRTaXplTW9kYWxTdWJtaXQiLCJzaGlwc0Nob29zaW5nTW9kYWxTdWJtaXQiLCJidG5CYWNrIiwicGxheWVyTnVtYmVyIiwic2hpcHNQbGFjaW5nTW9kYWxTdWJtaXQiLCJnZXRQbGF5ZXJOYW1lIiwiaXNCb3QiLCJtb2RhbENvbnRhaW5lckVsZW1lbnQiLCJHYW1lIiwicnVubmluZyIsInBsYXllciIsIlBsYXllciIsImVuZEdhbWUiLCJnZXRDdXJyZW50UGxheWVyIiwiaW5jcmVhc2VXaW5Sb3VuZHMiLCJnZXRQbGF5ZXJzIiwiaW5jcmVhc2VQbGF5ZXJSb3VuZHMiLCJhZGRXaW5uZXIiLCJjdXJyZW50UGxheWVySW5kZXgiLCJyZXNldEN1cnJlbnRUdXJuIiwic3RhcnRNb3ZlIiwicGxheWVyc1ZpZXdzIiwidmlldyIsImNvbXB1dGVyQXR0YWNrIiwiZ2V0Q3VycmVudEVuZW15IiwidGFyZ2V0ZWRDZWxsIiwiZ2VuZXJhdGVHYW1lIiwiZ2FtZXNDb250YWluZXIiLCJjcmVhdGVHYW1lVmlldyIsIm5ld0dhbWUiLCJwbGF5ZXJEYXRhIiwiYWRkZWRTaGlwSW5kZXgiLCJhZGRQbGF5ZXIiLCJzdGFydEdhbWUiLCJnZXRQbGF5ZXJzQ291bnQiLCJpbmNyZWFzZUN1cnJlbnRSb3VuZCIsInN0YXJ0aW5nUGxheWVySW5kZXgiLCJjdXJyZW50Um91bmQiLCJnZW5lcmF0ZVJhbmRvbVBsYXllckluZGV4IiwiZ2V0TGFzdFdpbm5lciIsInNldFN0YXJ0aW5nUGxheWVyIiwiaW5jcmVhc2VDdXJyZW50VHVybiIsImZpcnN0VHVybiIsImF0dGFjayIsImN1cnJlbnRUdXJuIiwiY3VycmVudFBsYXllclR1cm5FbmQiLCJnZW5lcmF0ZU5leHRSb3VuZCIsImdldFBsYXllciIsIndpblJvdW5kcyIsInBsYXllZFJvdW5kcyIsInVwZGF0ZVNjb3JlcyIsImdlbmVyYXRlQ29tcHV0ZXJQbGF5ZXIiLCJjb21wdXRlclBsYXllciIsImJvYXJkU2hpcHMiLCJtc2ciLCJHYW1lQ29ucm9sbGVyIiwiYXR0YWNrRmFpbGVkIiwiYXR0YWNrU3VjY2VkZWQiLCJzZXRUdXJuIiwicHJldmlvdXNQbGF5ZXJWaWV3IiwidW5zZXRUdXJuIiwiY2hhbmdlVHVybiIsInNpbmtTaGlwIiwiZ2V0RWxlbWVudEJ5SWQiXSwic291cmNlUm9vdCI6IiJ9