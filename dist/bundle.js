(()=>{var e={757:(e,t,n)=>{e.exports=n(666)},82:(e,t,n)=>{var r=n(202);e.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(e,t,n,r,i){return'<div class="game-arena">\r\n    <div class="first-player-arena"></div>\r\n    <div class="middle-bisector">\r\n        <div class="rounds-container">\r\n            <p>Round <span class="round-num">1</span></p>\r\n        </div>\r\n    </div>\r\n    <div class="second-player-arena"></div>\r\n</div>'},useData:!0})},134:(e,t,n)=>{var r=n(202);e.exports=(r.default||r).template({1:function(e,t,n,r,i){return'    <div class="board-block"></div>\r\n'},compiler:[8,">= 4.3.0"],main:function(e,t,n,r,i){var a,o=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return null!=(a=o(n,"each").call(null!=t?t:e.nullContext||{},null!=t?o(t,"blocks"):t,{name:"each",hash:{},fn:e.program(1,i,0),inverse:e.noop,data:i,loc:{start:{line:1,column:0},end:{line:3,column:9}}}))?a:""},useData:!0})},661:(e,t,n)=>{var r=n(202);e.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(e,t,n,r,i){return'<div class="modal-container">\r\n    <div class="game-type-modal">\r\n        <div class="modal-header">\r\n            <h2>Game Type</h2>\r\n        </div>\r\n        <div class="modal-body">\r\n            <section class="section-type-options">\r\n                <form id="form-game-type">\r\n                    <label for="single-player">\r\n                        <input\r\n                            type="radio"\r\n                            id="single-player"\r\n                            name="game-type"\r\n                            value="1"\r\n                            checked\r\n                        />\r\n                        <span>Single Player</span>\r\n                    </label>\r\n\r\n                    <label for="multiplayer">\r\n                        <input\r\n                            type="radio"\r\n                            id="multiplayer"\r\n                            name="game-type"\r\n                            value="2"\r\n                        />\r\n                        <span>Multiplayer</span>\r\n                    </label>\r\n                </form>\r\n            </section>\r\n        </div>\r\n        <hr class="icy-hr" />\r\n        <div class="modal-options">\r\n            <button class="btn-play">Play</button>\r\n        </div>\r\n    </div>\r\n</div>'},useData:!0})},508:(e,t,n)=>{var r=n(202);e.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(e,t,n,r,i){return'<div class="modal-container">\r\n    <div class="grid-size-modal">\r\n        <div class="modal-header">\r\n            <h2>Options</h2>\r\n        </div>\r\n        <div class="modal-body">\r\n            <section class="section-grid-size">\r\n                <header>\r\n                    <h3>Grid Size</h3>\r\n                </header>\r\n                <span class="width-label">Width</span>\r\n                <div class="width-counter">\r\n                    <span class="minus">\r\n                        <svg\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-dash-lg"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                fill-rule="evenodd"\r\n                                d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8Z"\r\n                            ></path>\r\n                        </svg>\r\n                    </span>\r\n                    <span class="number"></span>\r\n                    <span class="plus"><svg\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-plus-lg"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                fill-rule="evenodd"\r\n                                d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z"\r\n                            ></path>\r\n                        </svg></span>\r\n                </div>\r\n                <span class="height-label">Height</span>\r\n                <div class="height-counter">\r\n                    <span class="minus"><svg\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-dash-lg"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                fill-rule="evenodd"\r\n                                d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8Z"\r\n                            ></path>\r\n                        </svg></span>\r\n                    <span class="number">1</span>\r\n                    <span class="plus"><svg\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-plus-lg"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                fill-rule="evenodd"\r\n                                d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z"\r\n                            ></path>\r\n                        </svg></span>\r\n                </div>\r\n                <div class="board"></div>\r\n            </section>\r\n        </div>\r\n        <hr class="icy-hr" />\r\n        <div class="modal-options">\r\n            <button class="btn-next">Next</button>\r\n        </div>\r\n        <div class="modal-spacer"></div>\r\n    </div>\r\n</div>'},useData:!0})},129:(e,t,n)=>{var r=n(202);e.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(e,t,n,r,i){return'<div class="modal-container">\r\n    <div class="rules-modal">\r\n        <div class="modal-header">\r\n            <h2>Rules</h2>\r\n        </div>\r\n        <div class="modal-body">\r\n            <section class="section-overview">\r\n                <header>\r\n                    <h3>Overview</h3>\r\n                </header>\r\n                <p>\r\n                    Battleship is a war-themed board game for two players in which the opponents try\r\n                    to guess the location of their opponent\'s warships and sink them.\r\n                </p>\r\n            </section>\r\n            <section class="section-gameplay">\r\n                <header>\r\n                    <h3>Gameplay</h3>\r\n                </header>\r\n                <ol>\r\n                    <li>Both players agree on the size of their boards.</li>\r\n                    <li>Both players agree on the number of the ships and their length which will be\r\n                        placed on the boards.</li>\r\n                    <li>\r\n                        Each player hides their ships in their board. Note: Make sure that the other\r\n                        player can not see the screen while your are placing the ships.\r\n                    </li>\r\n                    <li>\r\n                        When the game starts players take turns attacking their enemy board, this is\r\n                        done by choosing a cell on the board.\r\n                        <ul>\r\n                            <li>\r\n                                If there is a part of the ship under the attacked cell then the\r\n                                attack succeded and the player continue to attack another cell.\r\n                            </li>\r\n                            <li>\r\n                                Otherwise the attack failed and the other player starts his turn.\r\n                            </li>\r\n                        </ul>\r\n                    </li>\r\n                    <li>\r\n                        The winner is the first to reveal all the hidden ships in their enemy\'s\r\n                        board.\r\n                    </li>\r\n                </ol>\r\n            </section>\r\n        </div>\r\n        <hr class="icy-hr" />\r\n        <div class="modal-options">\r\n            <button class="btn-start">Start</button>\r\n        </div>\r\n        <div class="modal-spacer"></div>\r\n    </div>\r\n</div>'},useData:!0})},569:(e,t,n)=>{var r=n(202);e.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(e,t,n,r,i){return'<div class="modal-container">\r\n    <div class="ships-choosing-modal">\r\n        <div class="modal-header">\r\n            <h2>Options</h2>\r\n        </div>\r\n        <div class="modal-body">\r\n            <section class="section-choose-ships">\r\n                <header>\r\n                    <h3>Choose Ships</h3>\r\n                </header>\r\n                <div class="ships">\r\n                    <div class="pages-container"></div>\r\n                </div>\r\n                <div class="pagination">\r\n                    <div class="arrow-container arrow-container-button">\r\n                        <svg\r\n                            class="left-arrow"\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-caret-left-fill"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z"\r\n                            ></path>\r\n                        </svg>\r\n                    </div>\r\n                    <p><span class="current-page">1</span>\r\n                        /\r\n                        <span class="pages-num"></span></p>\r\n                    <div class="arrow-container arrow-container-button">\r\n                        <svg\r\n                            class="right-arrow"\r\n                            xmlns="http://www.w3.org/2000/svg"\r\n                            width="16"\r\n                            height="16"\r\n                            fill="currentColor"\r\n                            class="bi bi-caret-right-fill"\r\n                            viewBox="0 0 16 16"\r\n                        >\r\n                            <path\r\n                                d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"\r\n                            ></path>\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n        <hr class="icy-hr" />\r\n        <div class="modal-options">\r\n            <button class="btn-back">Back</button>\r\n            <button class="btn-submit">Next</button>\r\n        </div>\r\n        <div class="modal-spacer"></div>\r\n    </div>\r\n</div>'},useData:!0})},257:(e,t,n)=>{var r=n(202);e.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(e,t,n,r,i){var a,o=null!=t?t:e.nullContext||{},s=e.hooks.helperMissing,l="function",c=e.escapeExpression,u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'<div class="ship-container" data-length="'+c(typeof(a=null!=(a=u(n,"shipLength")||(null!=t?u(t,"shipLength"):t))?a:s)===l?a.call(o,{name:"shipLength",hash:{},data:i,loc:{start:{line:1,column:41},end:{line:1,column:55}}}):a)+'">\r\n    <div class="ship active">\r\n        <div class="ship-block"></div>\r\n    </div>\r\n    <div class="count">\r\n        x\r\n        <span class="number">'+c(typeof(a=null!=(a=u(n,"shipCount")||(null!=t?u(t,"shipCount"):t))?a:s)===l?a.call(o,{name:"shipCount",hash:{},data:i,loc:{start:{line:7,column:29},end:{line:7,column:42}}}):a)+"</span>\r\n    </div>\r\n</div>"},useData:!0})},460:(e,t,n)=>{var r=n(202);e.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(e,t,n,r,i){var a,o=null!=t?t:e.nullContext||{},s=e.hooks.helperMissing,l="function",c=e.escapeExpression,u=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'<div class="ship-container" data-length="'+c(typeof(a=null!=(a=u(n,"shipLength")||(null!=t?u(t,"shipLength"):t))?a:s)===l?a.call(o,{name:"shipLength",hash:{},data:i,loc:{start:{line:1,column:41},end:{line:1,column:55}}}):a)+'">\r\n    <div class="counter">\r\n        <span class="minus">\r\n            <svg\r\n                xmlns="http://www.w3.org/2000/svg"\r\n                width="16"\r\n                height="16"\r\n                fill="currentColor"\r\n                class="bi bi-dash-lg"\r\n                viewBox="0 0 16 16"\r\n            >\r\n                <path\r\n                    fill-rule="evenodd"\r\n                    d="M2 8a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11A.5.5 0 0 1 2 8Z"\r\n                ></path>\r\n            </svg>\r\n        </span>\r\n        <div class="ship">\r\n            \r\n        </div>\r\n        <span class="plus"><svg\r\n                xmlns="http://www.w3.org/2000/svg"\r\n                width="16"\r\n                height="16"\r\n                fill="currentColor"\r\n                class="bi bi-plus-lg"\r\n                viewBox="0 0 16 16"\r\n            >\r\n                <path\r\n                    fill-rule="evenodd"\r\n                    d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z"\r\n                ></path>\r\n            </svg></span>\r\n    </div>\r\n    <div class="count">\r\n        x\r\n        <span class="number">'+c(typeof(a=null!=(a=u(n,"shipCount")||(null!=t?u(t,"shipCount"):t))?a:s)===l?a.call(o,{name:"shipCount",hash:{},data:i,loc:{start:{line:37,column:29},end:{line:37,column:42}}}):a)+"</span>\r\n    </div>\r\n</div>"},useData:!0})},72:(e,t,n)=>{var r=n(202);e.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(e,t,n,r,i){var a,o=e.lookupProperty||function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]};return'<div class="modal-container">\r\n        <div class="ships-placing-modal">\r\n            <div class="modal-header">\r\n                <h2>'+e.escapeExpression("function"==typeof(a=null!=(a=o(n,"playerLabel")||(null!=t?o(t,"playerLabel"):t))?a:e.hooks.helperMissing)?a.call(null!=t?t:e.nullContext||{},{name:"playerLabel",hash:{},data:i,loc:{start:{line:4,column:20},end:{line:4,column:35}}}):a)+'</h2>\r\n            </div>\r\n            <div class="modal-body">\r\n                <section class="section-player-name">\r\n                    <header>\r\n                        <h3>Player Name</h3>\r\n                    </header>\r\n                    <form class="form-player-name">\r\n                        <div class="floating-label-input">\r\n                            <input\r\n                                type="text"\r\n                                name="name"\r\n                                id="name"\r\n                                placeholder=" "\r\n                                autocomplete="off"\r\n                            />\r\n                            <label for="name">\r\n                            </label>\r\n                        </div>\r\n                    </form>\r\n                </section>\r\n                <hr class="icy-hr" />\r\n                <section class="place-ships">\r\n                    <header>\r\n                        <h3>Place Ships</h3>\r\n                    </header>\r\n                    <div class="ships">\r\n                        <div class="pages-container">\r\n\r\n                        </div>\r\n                        <div class="pagination">\r\n                            <div class="arrow-container arrow-container-button">\r\n                                <svg\r\n                                    class="left-arrow"\r\n                                    xmlns="http://www.w3.org/2000/svg"\r\n                                    width="16"\r\n                                    height="16"\r\n                                    fill="currentColor"\r\n                                    class="bi bi-caret-left-fill"\r\n                                    viewBox="0 0 16 16"\r\n                                >\r\n                                    <path\r\n                                        d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z"\r\n                                    ></path>\r\n                                </svg>\r\n                            </div>\r\n                            <p><span class="current-page">1</span>\r\n                                /\r\n                                <span class="pages-num"></span></p>\r\n                            <div class="arrow-container arrow-container-button">\r\n                                <svg\r\n                                    class="right-arrow"\r\n                                    xmlns="http://www.w3.org/2000/svg"\r\n                                    width="16"\r\n                                    height="16"\r\n                                    fill="currentColor"\r\n                                    class="bi bi-caret-right-fill"\r\n                                    viewBox="0 0 16 16"\r\n                                >\r\n                                    <path\r\n                                        d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"\r\n                                    ></path>\r\n                                </svg>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class="board-container">\r\n                        <div class="board"></div>\r\n                        <div class="place-options">\r\n                            <button class="btn-h active">H</button>\r\n                            <button class="btn-v">V</button>\r\n                            <button class="btn-remove">\r\n                                <svg\r\n                                    xmlns="http://www.w3.org/2000/svg"\r\n                                    width="20"\r\n                                    height="20"\r\n                                    fill="white"\r\n                                    class="bi bi-trash-fill"\r\n                                    viewBox="0 0 16 16"\r\n                                >\r\n                                    <path\r\n                                        d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z"\r\n                                    ></path>\r\n                                </svg>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div class="auto-place-container">\r\n                        <button class="btn-auto-place">Random Placing</button>\r\n                        <p class="text-error d-none">*Couldn\'t place ships</p>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n            <hr class="icy-hr" />\r\n            <div class="modal-options">\r\n                <button class="btn-back">Back</button>\r\n                <button class="btn-submit">Next</button>\r\n            </div>\r\n            <div class="modal-spacer"></div>\r\n    </div>\r\n</div>'},useData:!0})},344:(e,t,n)=>{var r=n(202);e.exports=(r.default||r).template({compiler:[8,">= 4.3.0"],main:function(e,t,n,r,i){return'<div class="turn-row">\r\n    <div class="turn-container">\r\n        <p>Your Turn</p>\r\n    </div>\r\n</div>\r\n\r\n<div class="board">\r\n\r\n</div>\r\n\r\n<div class="ships-remained-container-responsive">\r\n    <div class="ships">\r\n\r\n    </div>\r\n    <div class="pagination">\r\n        <div class="arrow-container">\r\n            <svg\r\n                class="left-arrow"\r\n                xmlns="http://www.w3.org/2000/svg"\r\n                width="16"\r\n                height="16"\r\n                fill="currentColor"\r\n                class="bi bi-caret-left-fill"\r\n                viewBox="0 0 16 16"\r\n            >\r\n                <path\r\n                    d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z"\r\n                ></path>\r\n            </svg>\r\n        </div>\r\n        <div class="arrow-container">\r\n            <svg\r\n                class="right-arrow"\r\n                xmlns="http://www.w3.org/2000/svg"\r\n                width="16"\r\n                height="16"\r\n                fill="currentColor"\r\n                class="bi bi-caret-right-fill"\r\n                viewBox="0 0 16 16"\r\n            >\r\n                <path\r\n                    d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z"\r\n                ></path>\r\n            </svg>\r\n        </div>\r\n    </div>\r\n    <div class="info">\r\n        <img src="./assets/img/info-circle-fill.svg" alt="" />\r\n    </div>\r\n</div>\r\n\r\n<div class="score-container">\r\n    <p class="name"></p>\r\n    <p>Wins: <span class="wins">0</span></p>\r\n    <p>Losses: <span class="losses">0</span></p>\r\n</div>\r\n\r\n<div class="darkening"></div>'},useData:!0})},834:(e,t,n)=>{"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function i(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}t.__esModule=!0;var a=i(n(67)),o=r(n(558)),s=r(n(728)),l=i(n(392)),c=i(n(628)),u=r(n(982));function h(){var e=new a.HandlebarsEnvironment;return l.extend(e,a),e.SafeString=o.default,e.Exception=s.default,e.Utils=l,e.escapeExpression=l.escapeExpression,e.VM=c,e.template=function(t){return c.template(t,e)},e}var d=h();d.create=h,u.default(d),d.default=d,t.default=d,e.exports=t.default},67:(e,t,n)=>{"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.HandlebarsEnvironment=h;var i=n(392),a=r(n(728)),o=n(638),s=n(881),l=r(n(37)),c=n(293);t.VERSION="4.7.7",t.COMPILER_REVISION=8,t.LAST_COMPATIBLE_COMPILER_REVISION=7,t.REVISION_CHANGES={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0 <4.3.0",8:">= 4.3.0"};var u="[object Object]";function h(e,t,n){this.helpers=e||{},this.partials=t||{},this.decorators=n||{},o.registerDefaultHelpers(this),s.registerDefaultDecorators(this)}h.prototype={constructor:h,logger:l.default,log:l.default.log,registerHelper:function(e,t){if(i.toString.call(e)===u){if(t)throw new a.default("Arg not supported with multiple helpers");i.extend(this.helpers,e)}else this.helpers[e]=t},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,t){if(i.toString.call(e)===u)i.extend(this.partials,e);else{if(void 0===t)throw new a.default('Attempting to register a partial called "'+e+'" as undefined');this.partials[e]=t}},unregisterPartial:function(e){delete this.partials[e]},registerDecorator:function(e,t){if(i.toString.call(e)===u){if(t)throw new a.default("Arg not supported with multiple decorators");i.extend(this.decorators,e)}else this.decorators[e]=t},unregisterDecorator:function(e){delete this.decorators[e]},resetLoggedPropertyAccesses:function(){c.resetLoggedProperties()}};var d=l.default.log;t.log=d,t.createFrame=i.createFrame,t.logger=l.default},881:(e,t,n)=>{"use strict";t.__esModule=!0,t.registerDefaultDecorators=function(e){i.default(e)};var r,i=(r=n(670))&&r.__esModule?r:{default:r}},670:(e,t,n)=>{"use strict";t.__esModule=!0;var r=n(392);t.default=function(e){e.registerDecorator("inline",(function(e,t,n,i){var a=e;return t.partials||(t.partials={},a=function(i,a){var o=n.partials;n.partials=r.extend({},o,t.partials);var s=e(i,a);return n.partials=o,s}),t.partials[i.args[0]]=i.fn,a}))},e.exports=t.default},728:(e,t)=>{"use strict";t.__esModule=!0;var n=["description","fileName","lineNumber","endLineNumber","message","name","number","stack"];function r(e,t){var i=t&&t.loc,a=void 0,o=void 0,s=void 0,l=void 0;i&&(a=i.start.line,o=i.end.line,s=i.start.column,l=i.end.column,e+=" - "+a+":"+s);for(var c=Error.prototype.constructor.call(this,e),u=0;u<n.length;u++)this[n[u]]=c[n[u]];Error.captureStackTrace&&Error.captureStackTrace(this,r);try{i&&(this.lineNumber=a,this.endLineNumber=o,Object.defineProperty?(Object.defineProperty(this,"column",{value:s,enumerable:!0}),Object.defineProperty(this,"endColumn",{value:l,enumerable:!0})):(this.column=s,this.endColumn=l))}catch(e){}}r.prototype=new Error,t.default=r,e.exports=t.default},638:(e,t,n)=>{"use strict";function r(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.registerDefaultHelpers=function(e){i.default(e),a.default(e),o.default(e),s.default(e),l.default(e),c.default(e),u.default(e)},t.moveHelperToHooks=function(e,t,n){e.helpers[t]&&(e.hooks[t]=e.helpers[t],n||delete e.helpers[t])};var i=r(n(342)),a=r(n(822)),o=r(n(905)),s=r(n(405)),l=r(n(702)),c=r(n(593)),u=r(n(978))},342:(e,t,n)=>{"use strict";t.__esModule=!0;var r=n(392);t.default=function(e){e.registerHelper("blockHelperMissing",(function(t,n){var i=n.inverse,a=n.fn;if(!0===t)return a(this);if(!1===t||null==t)return i(this);if(r.isArray(t))return t.length>0?(n.ids&&(n.ids=[n.name]),e.helpers.each(t,n)):i(this);if(n.data&&n.ids){var o=r.createFrame(n.data);o.contextPath=r.appendContextPath(n.data.contextPath,n.name),n={data:o}}return a(t,n)}))},e.exports=t.default},822:(e,t,n)=>{"use strict";t.__esModule=!0;var r,i=n(392),a=(r=n(728))&&r.__esModule?r:{default:r};t.default=function(e){e.registerHelper("each",(function(e,t){if(!t)throw new a.default("Must pass iterator to #each");var r,o=t.fn,s=t.inverse,l=0,c="",u=void 0,h=void 0;function d(t,n,r){u&&(u.key=t,u.index=n,u.first=0===n,u.last=!!r,h&&(u.contextPath=h+t)),c+=o(e[t],{data:u,blockParams:i.blockParams([e[t],t],[h+t,null])})}if(t.data&&t.ids&&(h=i.appendContextPath(t.data.contextPath,t.ids[0])+"."),i.isFunction(e)&&(e=e.call(this)),t.data&&(u=i.createFrame(t.data)),e&&"object"==typeof e)if(i.isArray(e))for(var p=e.length;l<p;l++)l in e&&d(l,l,l===e.length-1);else if(n.g.Symbol&&e[n.g.Symbol.iterator]){for(var v=[],f=e[n.g.Symbol.iterator](),m=f.next();!m.done;m=f.next())v.push(m.value);for(p=(e=v).length;l<p;l++)d(l,l,l===e.length-1)}else r=void 0,Object.keys(e).forEach((function(e){void 0!==r&&d(r,l-1),r=e,l++})),void 0!==r&&d(r,l-1,!0);return 0===l&&(c=s(this)),c}))},e.exports=t.default},905:(e,t,n)=>{"use strict";t.__esModule=!0;var r,i=(r=n(728))&&r.__esModule?r:{default:r};t.default=function(e){e.registerHelper("helperMissing",(function(){if(1!==arguments.length)throw new i.default('Missing helper: "'+arguments[arguments.length-1].name+'"')}))},e.exports=t.default},405:(e,t,n)=>{"use strict";t.__esModule=!0;var r,i=n(392),a=(r=n(728))&&r.__esModule?r:{default:r};t.default=function(e){e.registerHelper("if",(function(e,t){if(2!=arguments.length)throw new a.default("#if requires exactly one argument");return i.isFunction(e)&&(e=e.call(this)),!t.hash.includeZero&&!e||i.isEmpty(e)?t.inverse(this):t.fn(this)})),e.registerHelper("unless",(function(t,n){if(2!=arguments.length)throw new a.default("#unless requires exactly one argument");return e.helpers.if.call(this,t,{fn:n.inverse,inverse:n.fn,hash:n.hash})}))},e.exports=t.default},702:(e,t)=>{"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("log",(function(){for(var t=[void 0],n=arguments[arguments.length-1],r=0;r<arguments.length-1;r++)t.push(arguments[r]);var i=1;null!=n.hash.level?i=n.hash.level:n.data&&null!=n.data.level&&(i=n.data.level),t[0]=i,e.log.apply(e,t)}))},e.exports=t.default},593:(e,t)=>{"use strict";t.__esModule=!0,t.default=function(e){e.registerHelper("lookup",(function(e,t,n){return e?n.lookupProperty(e,t):e}))},e.exports=t.default},978:(e,t,n)=>{"use strict";t.__esModule=!0;var r,i=n(392),a=(r=n(728))&&r.__esModule?r:{default:r};t.default=function(e){e.registerHelper("with",(function(e,t){if(2!=arguments.length)throw new a.default("#with requires exactly one argument");i.isFunction(e)&&(e=e.call(this));var n=t.fn;if(i.isEmpty(e))return t.inverse(this);var r=t.data;return t.data&&t.ids&&((r=i.createFrame(t.data)).contextPath=i.appendContextPath(t.data.contextPath,t.ids[0])),n(e,{data:r,blockParams:i.blockParams([e],[r&&r.contextPath])})}))},e.exports=t.default},572:(e,t,n)=>{"use strict";t.__esModule=!0,t.createNewLookupObject=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return r.extend.apply(void 0,[Object.create(null)].concat(t))};var r=n(392)},293:(e,t,n)=>{"use strict";t.__esModule=!0,t.createProtoAccessControl=function(e){var t=Object.create(null);t.constructor=!1,t.__defineGetter__=!1,t.__defineSetter__=!1,t.__lookupGetter__=!1;var n=Object.create(null);return n.__proto__=!1,{properties:{whitelist:r.createNewLookupObject(n,e.allowedProtoProperties),defaultValue:e.allowProtoPropertiesByDefault},methods:{whitelist:r.createNewLookupObject(t,e.allowedProtoMethods),defaultValue:e.allowProtoMethodsByDefault}}},t.resultIsAllowed=function(e,t,n){return function(e,t){return void 0!==e.whitelist[t]?!0===e.whitelist[t]:void 0!==e.defaultValue?e.defaultValue:(function(e){!0!==a[e]&&(a[e]=!0,i.log("error",'Handlebars: Access has been denied to resolve the property "'+e+'" because it is not an "own property" of its parent.\nYou can add a runtime option to disable the check or this warning:\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details'))}(t),!1)}("function"==typeof e?t.methods:t.properties,n)},t.resetLoggedProperties=function(){Object.keys(a).forEach((function(e){delete a[e]}))};var r=n(572),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(37)),a=Object.create(null)},5:(e,t)=>{"use strict";t.__esModule=!0,t.wrapHelper=function(e,t){return"function"!=typeof e?e:function(){return arguments[arguments.length-1]=t(arguments[arguments.length-1]),e.apply(this,arguments)}}},37:(e,t,n)=>{"use strict";t.__esModule=!0;var r=n(392),i={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(e){if("string"==typeof e){var t=r.indexOf(i.methodMap,e.toLowerCase());e=t>=0?t:parseInt(e,10)}return e},log:function(e){if(e=i.lookupLevel(e),"undefined"!=typeof console&&i.lookupLevel(i.level)<=e){var t=i.methodMap[e];console[t]||(t="log");for(var n=arguments.length,r=Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];console[t].apply(console,r)}}};t.default=i,e.exports=t.default},982:(e,t,n)=>{"use strict";t.__esModule=!0,t.default=function(e){var t=void 0!==n.g?n.g:window,r=t.Handlebars;e.noConflict=function(){return t.Handlebars===e&&(t.Handlebars=r),e}},e.exports=t.default},628:(e,t,n)=>{"use strict";t.__esModule=!0,t.checkRevision=function(e){var t=e&&e[0]||1,n=o.COMPILER_REVISION;if(!(t>=o.LAST_COMPATIBLE_COMPILER_REVISION&&t<=o.COMPILER_REVISION)){if(t<o.LAST_COMPATIBLE_COMPILER_REVISION){var r=o.REVISION_CHANGES[n],i=o.REVISION_CHANGES[t];throw new a.default("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+r+") or downgrade your runtime to an older version ("+i+").")}throw new a.default("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")}},t.template=function(e,t){if(!t)throw new a.default("No environment passed to template");if(!e||!e.main)throw new a.default("Unknown template object: "+typeof e);e.main.decorator=e.main_d,t.VM.checkRevision(e.compiler);var n=e.compiler&&7===e.compiler[0],r={strict:function(e,t,n){if(!e||!(t in e))throw new a.default('"'+t+'" not defined in '+e,{loc:n});return r.lookupProperty(e,t)},lookupProperty:function(e,t){var n=e[t];return null==n||Object.prototype.hasOwnProperty.call(e,t)||c.resultIsAllowed(n,r.protoAccessControl,t)?n:void 0},lookup:function(e,t){for(var n=e.length,i=0;i<n;i++)if(null!=(e[i]&&r.lookupProperty(e[i],t)))return e[i][t]},lambda:function(e,t){return"function"==typeof e?e.call(t):e},escapeExpression:i.escapeExpression,invokePartial:function(n,r,o){o.hash&&(r=i.extend({},r,o.hash),o.ids&&(o.ids[0]=!0)),n=t.VM.resolvePartial.call(this,n,r,o);var s=i.extend({},o,{hooks:this.hooks,protoAccessControl:this.protoAccessControl}),l=t.VM.invokePartial.call(this,n,r,s);if(null==l&&t.compile&&(o.partials[o.name]=t.compile(n,e.compilerOptions,t),l=o.partials[o.name](r,s)),null!=l){if(o.indent){for(var c=l.split("\n"),u=0,h=c.length;u<h&&(c[u]||u+1!==h);u++)c[u]=o.indent+c[u];l=c.join("\n")}return l}throw new a.default("The partial "+o.name+" could not be compiled when running in runtime-only mode")},fn:function(t){var n=e[t];return n.decorator=e[t+"_d"],n},programs:[],program:function(e,t,n,r,i){var a=this.programs[e],o=this.fn(e);return t||i||r||n?a=u(this,e,o,t,n,r,i):a||(a=this.programs[e]=u(this,e,o)),a},data:function(e,t){for(;e&&t--;)e=e._parent;return e},mergeIfNeeded:function(e,t){var n=e||t;return e&&t&&e!==t&&(n=i.extend({},t,e)),n},nullContext:Object.seal({}),noop:t.VM.noop,compilerInfo:e.compiler};function o(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],i=n.data;o._setup(n),!n.partial&&e.useData&&(i=d(t,i));var a=void 0,s=e.useBlockParams?[]:void 0;function l(t){return""+e.main(r,t,r.helpers,r.partials,i,s,a)}return e.useDepths&&(a=n.depths?t!=n.depths[0]?[t].concat(n.depths):n.depths:[t]),(l=p(e.main,l,r,n.depths||[],i,s))(t,n)}return o.isTop=!0,o._setup=function(a){if(a.partial)r.protoAccessControl=a.protoAccessControl,r.helpers=a.helpers,r.partials=a.partials,r.decorators=a.decorators,r.hooks=a.hooks;else{var o=i.extend({},t.helpers,a.helpers);!function(e,t){Object.keys(e).forEach((function(n){var r=e[n];e[n]=function(e,t){var n=t.lookupProperty;return l.wrapHelper(e,(function(e){return i.extend({lookupProperty:n},e)}))}(r,t)}))}(o,r),r.helpers=o,e.usePartial&&(r.partials=r.mergeIfNeeded(a.partials,t.partials)),(e.usePartial||e.useDecorators)&&(r.decorators=i.extend({},t.decorators,a.decorators)),r.hooks={},r.protoAccessControl=c.createProtoAccessControl(a);var u=a.allowCallsToHelperMissing||n;s.moveHelperToHooks(r,"helperMissing",u),s.moveHelperToHooks(r,"blockHelperMissing",u)}},o._child=function(t,n,i,o){if(e.useBlockParams&&!i)throw new a.default("must pass block params");if(e.useDepths&&!o)throw new a.default("must pass parent depths");return u(r,t,e[t],n,0,i,o)},o},t.wrapProgram=u,t.resolvePartial=function(e,t,n){return e?e.call||n.name||(n.name=e,e=n.partials[e]):e="@partial-block"===n.name?n.data["partial-block"]:n.partials[n.name],e},t.invokePartial=function(e,t,n){var r=n.data&&n.data["partial-block"];n.partial=!0,n.ids&&(n.data.contextPath=n.ids[0]||n.data.contextPath);var s=void 0;if(n.fn&&n.fn!==h&&function(){n.data=o.createFrame(n.data);var e=n.fn;s=n.data["partial-block"]=function(t){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return n.data=o.createFrame(n.data),n.data["partial-block"]=r,e(t,n)},e.partials&&(n.partials=i.extend({},n.partials,e.partials))}(),void 0===e&&s&&(e=s),void 0===e)throw new a.default("The partial "+n.name+" could not be found");if(e instanceof Function)return e(t,n)},t.noop=h;var r,i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(392)),a=(r=n(728))&&r.__esModule?r:{default:r},o=n(67),s=n(638),l=n(5),c=n(293);function u(e,t,n,r,i,a,o){function s(t){var i=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],s=o;return!o||t==o[0]||t===e.nullContext&&null===o[0]||(s=[t].concat(o)),n(e,t,e.helpers,e.partials,i.data||r,a&&[i.blockParams].concat(a),s)}return(s=p(n,s,e,o,r,a)).program=t,s.depth=o?o.length:0,s.blockParams=i||0,s}function h(){return""}function d(e,t){return t&&"root"in t||((t=t?o.createFrame(t):{}).root=e),t}function p(e,t,n,r,a,o){if(e.decorator){var s={};t=e.decorator(t,s,n,r&&r[0],a,o,r),i.extend(t,s)}return t}},558:(e,t)=>{"use strict";function n(e){this.string=e}t.__esModule=!0,n.prototype.toString=n.prototype.toHTML=function(){return""+this.string},t.default=n,e.exports=t.default},392:(e,t)=>{"use strict";t.__esModule=!0,t.extend=o,t.indexOf=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},t.escapeExpression=function(e){if("string"!=typeof e){if(e&&e.toHTML)return e.toHTML();if(null==e)return"";if(!e)return e+"";e=""+e}return i.test(e)?e.replace(r,a):e},t.isEmpty=function(e){return!e&&0!==e||!(!c(e)||0!==e.length)},t.createFrame=function(e){var t=o({},e);return t._parent=e,t},t.blockParams=function(e,t){return e.path=t,e},t.appendContextPath=function(e,t){return(e?e+".":"")+t};var n={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},r=/[&<>"'`=]/g,i=/[&<>"'`=]/;function a(e){return n[e]}function o(e){for(var t=1;t<arguments.length;t++)for(var n in arguments[t])Object.prototype.hasOwnProperty.call(arguments[t],n)&&(e[n]=arguments[t][n]);return e}var s=Object.prototype.toString;t.toString=s;var l=function(e){return"function"==typeof e};l(/x/)&&(t.isFunction=l=function(e){return"function"==typeof e&&"[object Function]"===s.call(e)}),t.isFunction=l;var c=Array.isArray||function(e){return!(!e||"object"!=typeof e)&&"[object Array]"===s.call(e)};t.isArray=c},202:(e,t,n)=>{e.exports=n(834).default},798:function(e,t,n){e=n.nmd(e),function(n,r){"use strict";var i={};n.PubSub?(i=n.PubSub,console.warn("PubSub already loaded, using existing version")):(n.PubSub=i,function(e){var t={},n=-1;function r(e,t,n){try{e(t,n)}catch(e){setTimeout(function(e){return function(){throw e}}(e),0)}}function i(e,t,n){e(t,n)}function a(e,n,a,o){var s,l=t[n],c=o?i:r;if(Object.prototype.hasOwnProperty.call(t,n))for(s in l)Object.prototype.hasOwnProperty.call(l,s)&&c(l[s],e,a)}function o(e){var n=String(e);return Boolean(Object.prototype.hasOwnProperty.call(t,n)&&function(e){var t;for(t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!0;return!1}(t[n]))}function s(e,t,n,r){var i=function(e,t,n){return function(){var r=String(e),i=r.lastIndexOf(".");for(a(e,e,t,n);-1!==i;)i=(r=r.substr(0,i)).lastIndexOf("."),a(e,r,t,n);a(e,"*",t,n)}}(e="symbol"==typeof e?e.toString():e,t,r);return!!function(e){for(var t=String(e),n=o(t)||o("*"),r=t.lastIndexOf(".");!n&&-1!==r;)r=(t=t.substr(0,r)).lastIndexOf("."),n=o(t);return n}(e)&&(!0===n?i():setTimeout(i,0),!0)}e.publish=function(t,n){return s(t,n,!1,e.immediateExceptions)},e.publishSync=function(t,n){return s(t,n,!0,e.immediateExceptions)},e.subscribe=function(e,r){if("function"!=typeof r)return!1;e="symbol"==typeof e?e.toString():e,Object.prototype.hasOwnProperty.call(t,e)||(t[e]={});var i="uid_"+String(++n);return t[e][i]=r,i},e.subscribeAll=function(t){return e.subscribe("*",t)},e.subscribeOnce=function(t,n){var r=e.subscribe(t,(function(){e.unsubscribe(r),n.apply(this,arguments)}));return e},e.clearAllSubscriptions=function(){t={}},e.clearSubscriptions=function(e){var n;for(n in t)Object.prototype.hasOwnProperty.call(t,n)&&0===n.indexOf(e)&&delete t[n]},e.countSubscriptions=function(e){var n,r,i=0;for(n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&0===n.indexOf(e)){for(r in t[n])i++;break}return i},e.getSubscriptions=function(e){var n,r=[];for(n in t)Object.prototype.hasOwnProperty.call(t,n)&&0===n.indexOf(e)&&r.push(n);return r},e.unsubscribe=function(n){var r,i,a,o="string"==typeof n&&(Object.prototype.hasOwnProperty.call(t,n)||function(e){var n;for(n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&0===n.indexOf(e))return!0;return!1}(n)),s=!o&&"string"==typeof n,l="function"==typeof n,c=!1;if(!o){for(r in t)if(Object.prototype.hasOwnProperty.call(t,r)){if(i=t[r],s&&i[n]){delete i[n],c=n;break}if(l)for(a in i)Object.prototype.hasOwnProperty.call(i,a)&&i[a]===n&&(delete i[a],c=!0)}return c}e.clearSubscriptions(n)}}(i)),void 0!==e&&e.exports&&(t=e.exports=i),t.PubSub=i,e.exports=t=i}("object"==typeof window&&window||this)},666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",o=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function l(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var i=t&&t.prototype instanceof m?t:m,a=Object.create(i.prototype),o=new C(r||[]);return a._invoke=function(e,t,n){var r=h;return function(i,a){if(r===p)throw new Error("Generator is already running");if(r===v){if("throw"===i)throw a;return W()}for(n.method=i,n.arg=a;;){var o=n.delegate;if(o){var s=M(o,n);if(s){if(s===f)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===h)throw r=v,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var l=u(e,t,n);if("normal"===l.type){if(r=n.done?v:d,l.arg===f)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r=v,n.method="throw",n.arg=l.arg)}}}(e,n,o),a}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var h="suspendedStart",d="suspendedYield",p="executing",v="completed",f={};function m(){}function g(){}function w(){}var y={};l(y,a,(function(){return this}));var b=Object.getPrototypeOf,k=b&&b(b(O([])));k&&k!==n&&r.call(k,a)&&(y=k);var S=w.prototype=m.prototype=Object.create(y);function E(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function n(i,a,o,s){var l=u(e[i],e,a);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==typeof h&&r.call(h,"__await")?t.resolve(h.__await).then((function(e){n("next",e,o,s)}),(function(e){n("throw",e,o,s)})):t.resolve(h).then((function(e){c.value=e,o(c)}),(function(e){return n("throw",e,o,s)}))}s(l.arg)}var i;this._invoke=function(e,r){function a(){return new t((function(t,i){n(e,r,t,i)}))}return i=i?i.then(a,a):a()}}function M(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,M(e,n),"throw"===n.method))return f;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var i=u(r,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,f;var a=i.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,f):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function C(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function O(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,o=function n(){for(;++i<e.length;)if(r.call(e,i))return n.value=e[i],n.done=!1,n;return n.value=t,n.done=!0,n};return o.next=o}}return{next:W}}function W(){return{value:t,done:!0}}return g.prototype=w,l(S,"constructor",w),l(w,"constructor",g),g.displayName=l(w,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,w):(e.__proto__=w,l(e,s,"GeneratorFunction")),e.prototype=Object.create(S),e},e.awrap=function(e){return{__await:e}},E(x.prototype),l(x.prototype,o,(function(){return this})),e.AsyncIterator=x,e.async=function(t,n,r,i,a){void 0===a&&(a=Promise);var o=new x(c(t,n,r,i),a);return e.isGeneratorFunction(n)?o:o.next().then((function(e){return e.done?e.value:o.next()}))},E(S),l(S,s,"Generator"),l(S,a,(function(){return this})),l(S,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=O,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(L),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function i(r,i){return s.type="throw",s.arg=e,n.next=r,i&&(n.method="next",n.arg=t),!!i}for(var a=this.tryEntries.length-1;a>=0;--a){var o=this.tryEntries[a],s=o.completion;if("root"===o.tryLoc)return i("end");if(o.tryLoc<=this.prev){var l=r.call(o,"catchLoc"),c=r.call(o,"finallyLoc");if(l&&c){if(this.prev<o.catchLoc)return i(o.catchLoc,!0);if(this.prev<o.finallyLoc)return i(o.finallyLoc)}else if(l){if(this.prev<o.catchLoc)return i(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return i(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var a=i;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var o=a?a.completion:{};return o.type=e,o.arg=t,a?(this.method="next",this.next=a.finallyLoc,f):this.complete(o)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var i=r.arg;L(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:O(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),f}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e=n(798),t=n.n(e);const r=function(e){for(var t,n=e.length;0!==n;){t=Math.floor(Math.random()*n),n--;var r=[e[t],e[n]];e[n]=r[0],e[t]=r[1]}return e};var i={maxHorizontalLengthCanBeOccupied:function(e){for(var t=0,n=e.getShipsBoard(),r=0;r<e.getHeight();r++)for(var i=0;i<e.getWidth();i++)if(-1===n[r][i])for(var a=1;;){if(i+1===e.getWidth()||-1!==n[r][i+1]){t=Math.max(t,a);break}++a,++i}return t},maxVerticalLengthCanBeOccupied:function(e){for(var t=0,n=e.getShipsBoard(),r=0;r<e.getWidth();r++)for(var i=0;i<e.getHeight();i++)if(-1===n[i][r])for(var a=1;;){if(i+1===e.getHeight()||-1!==n[i+1][r]){t=Math.max(t,a);break}++a,++i}return t}};const a=i,o=function(){function e(e){return"number"==typeof e&&Number.isInteger(e)&&e>=0}return{checkIfWholeNumber:e,checkIfPositiveNumber:function(t){return e(t)&&t>0}}}();var s=function(){function e(e,t,n){return t<0||t>=e.getHeight()||n<0||n>=e.getWidth()}return{canAddShip:function(e,t){if(!o.checkIfPositiveNumber(t))throw new Error("Illegal Argument Exception");if(t>Math.max(a.maxHorizontalLengthCanBeOccupied(e),a.maxVerticalLengthCanBeOccupied(e)))return!1;var n=0;return e.getShips().forEach((function(e){void 0===e.row&&void 0===e.col&&(n+=e.ship.getLength())})),!(e.getBlockNotOccupied()-n-t<0)},isOutsideBoard:e,canPlaceShip:function(t,n,r,i,a){if(!o.checkIfWholeNumber(n)||!o.checkIfWholeNumber(r)||!o.checkIfWholeNumber(i)||"boolean"!=typeof a)throw new Error("Illegal Argument Exception");if(e(t,r,i))throw new Error("Illegal Argument Exception");if(n>=t.getShips().length)throw new Error("Illegal Argument Exception");var s=t.getShip(n);if(a&&r+s.getLength()-1>=t.getHeight())return!1;if(!a&&i+s.getLength()-1>=t.getWidth())return!1;for(var l=t.getShipsBoard(),c=0;c<s.getLength();c++){if(a&&-1!==l[r+c][i])return!1;if(!a&&-1!==l[r][i+c])return!1}return!0},isHit:function(t,n,r){if(!o.checkIfWholeNumber(n)||!o.checkIfWholeNumber(r))throw new Error("Illegal Argument Exception");if(e(t,n,r))throw new Error("Illegal Argument Exception");return 0!==t.getHitsBoard()[n][r]},areAllShipsSunk:function(e){return 0===e.getShipsAlive()},checkIfAllShipsPlaced:function(e){for(var t=e.getShips(),n=0;n<t.length;n++)if(void 0===t[n].row||void 0===t[n].col)return!1;return!0},checkIfNonOfShipsPlaced:function(e){for(var t=e.getShips(),n=0;n<t.length;n++)if(void 0!==t[n].row||void 0!==t[n].col)return!1;return!0}}}();const l=s;var c=function(){function e(e,t,n,r,i){if(!l.canPlaceShip(e,t,n,r,i))return!1;var a=e.getShip(t);e.setShipOrientation(t,i),e.setShipStartPoint(t,n,r);for(var o=0;o<a.getLength();o++)i?e.setShipBoardCell(n+o,r,t):e.setShipBoardCell(n,r+o,t);return e.decreaseBlockNotOccupied(a.getLength()),!0}function n(e,t){var n=e.getShips();if(void 0===n[t].row||void 0===n[t].col||void 0===n[t].isVertical)throw new Error("Ship is not placed");var r=e.getShip(t);r.isSunk()||e.decreaseShipsAlive(),e.removeFromHitsBoard(n[t].row,n[t].col,r.getLength(),n[t].isVertical),e.removeFromShipsBoard(n[t].row,n[t].col,r.getLength(),n[t].isVertical),e.increaseBlockNotOccupied(r.getLength()),delete n[t].row,delete n[t].col,delete n[t].isVertical}function i(t,a,o,s,c){var u;if((a=null!==(u=a)&&void 0!==u?u:0)===t.getShipsCount())return!0;if((Date.now()-s)/1e3>c)throw new Error("Time limit exceeded");var h="".concat(function(e){for(var t=[],n=0;n<e.length;n++)t.push(e[n].map((function(e){return-1!==e?1:0})));return t}(t.getShipsBoard())," ,").concat(a);if(o.has(h))return!1;for(var d=[],p=0;p<t.getHeight();p++)for(var v=0;v<t.getWidth();v++){var f=!1;l.canPlaceShip(t,a,p,v,f)&&d.push({row:p,col:v,isVertical:f}),f=!0,l.canPlaceShip(t,a,p,v,f)&&d.push({row:p,col:v,isVertical:f})}r(d);for(var m=0;m<d.length;m++){if(e(t,a,d[m].row,d[m].col,d[m].isVertical),i(t,a+1,o,s,c))return!0;n(t,a)}return o.add(h),!1}function a(e){for(var t=[],n=0;n<e.getHeight();n++)for(var r=0;r<e.getWidth();r++)l.isHit(e,n,r)||t.push({row:n,col:r});return t}function o(e,t,n){var r=[],i=function(e){for(var t=[],n=0;n<e.getHeight();n++)for(var r=0;r<e.getWidth();r++)l.isHit(e,n,r)&&t.push({row:n,col:r});return t}(e);return i.forEach((function(i){var a=e.getShipIndexFromCoordinate(i.row,i.col);if(-1!==a){var o=e.getShip(a);!o.isSunk()&&o.getHPDamaged()>=t&&o.getHPDamaged()<=n&&r.push({row:i.row,col:i.col,isShipVertical:e.isVerticalShip(a)})}})),r}function s(e,t,n){n.forEach((function(n){l.isOutsideBoard(e,n.row,n.col)||l.isHit(e,n.row,n.col)||t.push(n)}))}function c(e){for(var t=null,n=0;n<e.getShipsCount();n++){var r=e.getShip(n);0===r.getHPDamaged()&&(t=null===t?r.getLength():Math.min(t,r.getLength()))}return t}return{addShip:function(e,t){if(!l.canAddShip(e,t))throw new Error("Illegal Argument Exception");return e.pushShip(t),e.getShipsCount()-1},placeShip:e,unplaceShip:n,receiveAttack:function(e,n,r,i){if(l.isHit(e,n,r))throw new Error("Illegal Argument Exception");e.hitBoardCell(n,r);var a=e.getShipsBoard();if(-1===a[n][r])return!1;var o=a[n][r],s=e.isVerticalShip(o)?n-e.getShipStartPoint(o).row:r-e.getShipStartPoint(o).col,c=e.getShip(o);return c.hit(s),c.isSunk()&&(e.decreaseShipsAlive(),i&&t().publish("ShipSunk",{playerView:i.playerView,shipLength:c.getLength()})),!0},autoPlaceShips:function(e,t){var n=new Set;e.sortShipsByLengthDesc();try{return i(e,t,n,Date.now(),5),!0}catch(e){return!1}},unplaceAllShips:function(e){for(var t=0;t<e.getShipsCount();t++)n(e,t)},removeAllShips:function(e){for(var t=e.getShipsCount()-1;t>=0;t--)n(e,t),e.removeShip(t)},getNotDamagedCells:a,getDamagedCellsOfAliveDamagedShips:o,getSmartTargets:function(e){var t=[],n=o(e,2,10);return n.length>0?(n.forEach((function(n){n.isShipVertical?s(e,t,[{row:n.row-1,col:n.col},{row:n.row+1,col:n.col}]):s(e,t,[{row:n.row,col:n.col-1},{row:n.row,col:n.col+1}])})),t):((n=o(e,1,1)).forEach((function(n){s(e,t,[{row:n.row-1,col:n.col},{row:n.row+1,col:n.col},{row:n.row,col:n.col-1},{row:n.row,col:n.col+1}])})),t)},getMinNotDamagedShipLength:c,getNotDamagedSmartTargets:function(e){var t=[],n=a(e),r=c(e);return n.forEach((function(n){(function(e,t,n){for(var r=1,i=n+1;i<e.getWidth()&&!l.isHit(e,t,i);i++)++r;for(var a=n-1;a>=0&&!l.isHit(e,t,a);a--)++r;return r}(e,n.row,n.col)>=r||function(e,t,n){for(var r=1,i=t+1;i<e.getHeight()&&!l.isHit(e,i,n);i++)++r;for(var a=t-1;a>=0&&!l.isHit(e,a,n);a--)++r;return r}(e,n.row,n.col)>=r)&&t.push(n)})),t}}}();const u=c;function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function d(e,t){if(e){if("string"==typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?h(e,t):void 0}}function p(e){return function(e){if(Array.isArray(e))return h(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||d(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(e,t,n,r,i,a,o){try{var s=e[a](o),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(r,i)}function f(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var a=e.apply(t,n);function o(e){v(a,r,i,o,s,"next",e)}function s(e){v(a,r,i,o,s,"throw",e)}o(void 0)}))}}function m(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(e,t,n){return t&&g(e.prototype,t),n&&g(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function y(e,t,n){if(!t.has(e))throw new TypeError("attempted to "+n+" private field on non-instance");return t.get(e)}function b(e,t){return function(e,t){return t.get?t.get.call(e):t.value}(e,y(e,t,"get"))}function k(e,t,n){return function(e,t,n){if(t.set)t.set.call(e,n);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=n}}(e,y(e,t,"set"),n),n}var S=n(757),E=n.n(S),x=n(569),M=n.n(x),P=n(460),L=n.n(P);function C(e,t,n){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.set(e,n)}var O=new WeakMap,W=new WeakMap,A=new WeakMap,B=new WeakMap,I=new WeakMap,T=new WeakMap,_=function(){function e(t,n,r,i){var a=this;m(this,e),C(this,O,{writable:!0,value:void 0}),C(this,W,{writable:!0,value:void 0}),C(this,A,{writable:!0,value:void 0}),C(this,B,{writable:!0,value:void 0}),C(this,I,{writable:!0,value:void 0}),C(this,T,{writable:!0,value:void 0}),k(this,O,n),k(this,W,r),k(this,B,t.querySelector(".minus")),k(this,I,t.querySelector(".plus")),k(this,T,t.querySelector(".number")),k(this,A,i),this.updateCounter(),b(this,B).addEventListener("click",(function(){k(a,A,+b(a,A)-1),a.updateCounter()})),b(this,I).addEventListener("click",(function(){k(a,A,+b(a,A)+1),a.updateCounter()}))}return w(e,[{key:"updateIfLimitReached",value:function(){b(this,A)===b(this,O)?b(this,B).classList.add("disabled"):b(this,B).classList.remove("disabled"),b(this,A)===b(this,W)?b(this,I).classList.add("disabled"):b(this,I).classList.remove("disabled")}},{key:"updateCounter",value:function(){b(this,T).textContent=b(this,A),this.updateIfLimitReached()}},{key:"currentNumber",get:function(){return b(this,A)}},{key:"updateMax",value:function(e){k(this,W,e),this.updateIfLimitReached()}}]),e}();const V=function(){function e(e,t){var n=document.createElement("div");if(e<t){n.classList.add("ship");for(var r=0;r<e;r++){var i=document.createElement("div");i.classList.add("ship-block"),n.append(i)}}else{n.classList.add("ship-compressed");var a=document.createElement("span");a.classList.add("parenthesis"),a.textContent="(",n.append(a),n.append(document.createTextNode("".concat(e).concat(String.fromCharCode(160))));var o=document.createElement("div");o.classList.add("ship-block"),n.append(o);var s=document.createElement("span");s.classList.add("parenthesis"),s.textContent=")",n.append(s)}return n}return{createShipContainerElement:function(t,n){var r=document.createElement("div");r.classList.add("ship-container"),r.append(e(t,4));var i=document.createElement("p");i.innerText="x";var a=document.createElement("span");return a.classList.add("count"),a.innerText=n,i.append(a),r.append(i),r.dataset.length=t,r},createShipElement:e}}(),j=function(e){e.removeAttribute("disabled")},N=function(e){e.setAttribute("disabled","")};function H(e,t,n){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.set(e,n)}var D=new WeakMap,R=new WeakMap,q=new WeakMap,F=new WeakMap,G=new WeakMap,z=new WeakMap,Z=new WeakMap,Y=new WeakMap,U=new WeakMap,K=new WeakMap,$=new WeakMap,J=new WeakMap,Q=new WeakMap,X=new WeakMap,ee=function(){function e(t,n){m(this,e),H(this,D,{writable:!0,value:void 0}),H(this,R,{writable:!0,value:void 0}),H(this,q,{writable:!0,value:void 0}),H(this,F,{writable:!0,value:void 0}),H(this,G,{writable:!0,value:void 0}),H(this,z,{writable:!0,value:void 0}),H(this,Z,{writable:!0,value:void 0}),H(this,Y,{writable:!0,value:void 0}),H(this,U,{writable:!0,value:void 0}),H(this,K,{writable:!0,value:void 0}),H(this,$,{writable:!0,value:void 0}),H(this,J,{writable:!0,value:void 0}),H(this,Q,{writable:!0,value:void 0}),H(this,X,{writable:!0,value:void 0}),this.cacheDOM(),N(b(this,X)),k(this,Y,t),k(this,U,n),k(this,K,{}),this.createShipsPages(),this.initPagination(),this.updateMaxShipsChoosingNumber(),this.bindEvents()}return w(e,[{key:"cacheDOM",value:function(){k(this,D,(new DOMParser).parseFromString(M()(),"text/html").body.firstElementChild),k(this,R,b(this,D).firstElementChild),k(this,q,b(this,R).querySelector(".ships")),k(this,F,b(this,q).querySelector(".pages-container")),k(this,G,b(this,R).querySelector(".current-page")),k(this,z,b(this,R).querySelector(".left-arrow")),k(this,Z,b(this,R).querySelector(".right-arrow")),k(this,X,b(this,D).querySelector(".btn-submit"))}},{key:"bindEvents",value:function(){var e=this;[].concat(p(b(this,R).querySelectorAll(".minus")),p(b(this,R).querySelectorAll(".plus"))).forEach((function(t){t.addEventListener("click",(function(){e.updateMaxShipsChoosingNumber()}))})),this.bindPaginationEvents()}},{key:"initPagination",value:function(){k(this,J,1),k(this,Q,b(this,F).children.length),b(this,R).querySelector(".pages-num").textContent=b(this,Q),k(this,$,"100%"),this.updatePaginationStyle()}},{key:"bindPaginationEvents",value:function(){var e=this;b(this,R).querySelectorAll(".arrow-container").forEach((function(t){t.addEventListener("click",(function(){t.contains(b(e,z))?e.paginateLeft():t.contains(b(e,Z))&&e.paginateRight()}))}))}},{key:"paginateLeft",value:function(){if(1===b(this,J))throw new Error("Illegal Argument Exception");k(this,J,+b(this,J)-1),this.updatePaginationStyle()}},{key:"paginateRight",value:function(){if(b(this,J)===b(this,Q))throw new Error("Illegal Argument Exception");k(this,J,+b(this,J)+1),this.updatePaginationStyle()}},{key:"updatePaginationStyle",value:function(){b(this,F).style.right="calc(".concat(b(this,J)-1," * ").concat(b(this,$),")"),1===b(this,J)?b(this,z).closest(".arrow-container").classList.add("disabled"):b(this,z).closest(".arrow-container").classList.remove("disabled"),b(this,J)===b(this,Q)?b(this,Z).closest(".arrow-container").classList.add("disabled"):b(this,Z).closest(".arrow-container").classList.remove("disabled"),b(this,G).textContent=b(this,J)}},{key:"createShipsPages",value:function(){for(var e=1;e<=this.getMaxShipLength();e+=4)b(this,F).append(this.createPage(e,4))}},{key:"createPage",value:function(e,t){var n=document.createElement("div");n.classList.add("page");for(var r=0;r<t;r++){var i=e+r;if(i>this.getMaxShipLength())break;n.append(this.createShipContainer(i))}return n}},{key:"createShipContainer",value:function(e){var t=(new DOMParser).parseFromString(L()({shipLength:e,shipCount:0}),"text/html").body.firstElementChild,n=V.createShipElement(e,5);return t.querySelector(".ship").replaceWith(n),b(this,K)[e]=new _(t,0,0,0),t}},{key:"modalContainerElement",get:function(){return b(this,D)}},{key:"modalElement",get:function(){return b(this,R)}},{key:"getWidth",value:function(){return b(this,Y)}},{key:"getHeight",value:function(){return b(this,U)}},{key:"getMaxShipLength",value:function(){return Math.max(b(this,Y),b(this,U))}},{key:"getShipsList",value:function(){var e={};return b(this,q).querySelectorAll(".ship-container").forEach((function(t){var n=t.dataset.length,r=parseInt(t.querySelector(".number").textContent,10);r>0&&(e[n]=r)})),e}},{key:"updateMaxShipsChoosingNumber",value:function(){var e=this,t=b(this,Y)*b(this,U),n=0;Array.from(Object.keys(b(this,K))).forEach((function(t){n+=b(e,K)[t].currentNumber*t})),n>0?j(b(this,X)):N(b(this,X)),Array.from(Object.keys(b(this,K))).forEach((function(r){b(e,K)[r].updateMax(b(e,K)[r].currentNumber+Math.floor((t-n)/r))}))}}]),e}(),te=n(129),ne=n.n(te);function re(e,t,n){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.set(e,n)}var ie=new WeakMap,ae=new WeakMap,oe=function(){function e(){m(this,e),re(this,ie,{writable:!0,value:void 0}),re(this,ae,{writable:!0,value:void 0}),this.cacheDOM()}return w(e,[{key:"cacheDOM",value:function(){k(this,ie,(new DOMParser).parseFromString(ne()(),"text/html").body.firstElementChild),k(this,ae,b(this,ie).firstElementChild)}},{key:"modalContainerElement",get:function(){return b(this,ie)}},{key:"modalElement",get:function(){return b(this,ae)}}]),e}(),se=n(661),le=n.n(se);function ce(e,t,n){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.set(e,n)}var ue=new WeakMap,he=new WeakMap,de=new WeakMap,pe=new WeakMap,ve=function(){function e(){m(this,e),ce(this,ue,{writable:!0,value:void 0}),ce(this,he,{writable:!0,value:void 0}),ce(this,de,{writable:!0,value:void 0}),ce(this,pe,{writable:!0,value:void 0}),this.cacheDOM(),this.setHumanNumber(),this.bindEvents()}return w(e,[{key:"cacheDOM",value:function(){k(this,ue,(new DOMParser).parseFromString(le()(),"text/html").body.firstElementChild),k(this,he,b(this,ue).firstElementChild),k(this,de,b(this,he).querySelector("#form-game-type"))}},{key:"bindEvents",value:function(){b(this,de).addEventListener("change",this.setHumanNumber.bind(this))}},{key:"modalContainerElement",get:function(){return b(this,ue)}},{key:"modalElement",get:function(){return b(this,he)}},{key:"gethumanNumber",value:function(){return b(this,pe)}},{key:"setHumanNumber",value:function(){k(this,pe,parseInt(b(this,de)["game-type"].value,10))}}]),e}(),fe=n(508),me=n.n(fe);function ge(e,t,n){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.set(e,n)}var we=new WeakMap,ye=new WeakMap,be=new WeakMap,ke=new WeakMap,Se=new WeakMap,Ee=new WeakMap,xe=new WeakMap,Me=function(){function e(t,n){m(this,e),ge(this,we,{writable:!0,value:void 0}),ge(this,ye,{writable:!0,value:void 0}),ge(this,be,{writable:!0,value:void 0}),ge(this,ke,{writable:!0,value:void 0}),ge(this,Se,{writable:!0,value:void 0}),ge(this,Ee,{writable:!0,value:void 0}),ge(this,xe,{writable:!0,value:void 0}),this.cacheDOM(),k(this,Ee,t),k(this,xe,n),new _(b(this,ye).querySelector(".width-counter"),1,10,b(this,Ee)),new _(b(this,ye).querySelector(".height-counter"),1,10,b(this,xe)),this.renderBoard(),this.bindEvents()}return w(e,[{key:"cacheDOM",value:function(){k(this,we,(new DOMParser).parseFromString(me()(),"text/html").body.firstElementChild),k(this,ye,b(this,we).firstElementChild),k(this,ke,b(this,ye).querySelector(".width-counter .number")),k(this,Se,b(this,ye).querySelector(".height-counter .number")),k(this,be,b(this,we).querySelector(".board"))}},{key:"bindEvents",value:function(){var e=this;[].concat(p(b(this,ye).querySelectorAll(".minus")),p(b(this,ye).querySelectorAll(".plus"))).forEach((function(t){t.addEventListener("click",(function(){k(e,Ee,parseInt(b(e,ke).textContent,10)),k(e,xe,parseInt(b(e,Se).textContent,10)),e.renderBoard()}))}))}},{key:"renderBoard",value:function(){b(this,be).innerHTML="",b(this,be).style.setProperty("--board-horizontal-cells",b(this,Ee));for(var e=0;e<b(this,Ee)*b(this,xe);e++){var t=document.createElement("div");t.classList.add("board-block"),b(this,be).append(t)}}},{key:"modalContainerElement",get:function(){return b(this,we)}},{key:"modalElement",get:function(){return b(this,ye)}},{key:"getWidth",value:function(){return b(this,Ee)}},{key:"getHeight",value:function(){return b(this,xe)}}]),e}();function Pe(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,a=[],o=!0,s=!1;try{for(n=n.call(e);!(o=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);o=!0);}catch(e){s=!0,i=e}finally{try{o||null==n.return||n.return()}finally{if(s)throw i}}return a}}(e,t)||d(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Le(e){for(var t=e,n=[],r=0;r<e;r++)n[r]=0;var i={hit:function(r){if("number"!=typeof r||!Number.isInteger(r))throw new Error("Illegal Argument Exception");if(r<0||r>=e)throw new Error("Illegal Argument Exception");0===n[r]&&(--t,n[r]=1)},isSunk:function(){return 0===t},getHPRemained:function(){return t},getHitpoints:function(){return[].concat(n)},getHPDamaged:function(){return e-t},getLength:function(){return e}};return Object.create(i)}function Ce(e,t){for(var n=[],r=[],i=[],a=0,o=e*t,s=0;s<t;s++){r.push([]),i.push([]);for(var l=0;l<e;l++)r[s][l]=0,i[s][l]=-1}var c={getWidth:function(){return e},getHeight:function(){return t},getShips:function(){return[].concat(n)},getShip:function(e){return n[e].ship},getShipFromCoordinate:function(e,t){return this.getShip(this.getShipIndexFromCoordinate(e,t))},getShipIndexFromCoordinate:function(e,t){return i[e][t]},pushShip:function(e){n.push({ship:new Le(e)}),++a},removeShip:function(e){var t=this.getShip(e);t.isSunk()||--a,this.removeFromHitsBoard(n[e].row,n[e].col,t.getLength(),n[e].isVertical),this.removeFromShipsBoard(n[e].row,n[e].col,t.getLength(),n[e].isVertical),void 0!==n[e].row&&void 0!==n[e].col&&this.increaseBlockNotOccupied(t.getLength()),n.splice(e,1)},removeShipByCoordinates:function(e,t){for(var r=0;r<n.length;r++)if(n[r].row===e&&n[r].col===t){this.removeShip(r);break}},removeFromHitsBoard:function(e,t,n,i){if(i)for(var a=e;a<e+n;a++)r[a][t]=0;else for(var o=t;o<t+n;o++)r[e][o]=0},removeFromShipsBoard:function(e,t,n,r){if(r)for(var i=e;i<e+n;i++)this.setShipBoardCell(i,t,-1);else for(var a=t;a<t+n;a++)this.setShipBoardCell(e,a,-1)},isVerticalShip:function(e){return n[e].isVertical},setShipOrientation:function(e,t){n[e].isVertical=t},getShipStartPoint:function(e){return{row:n[e].row,col:n[e].col}},setShipStartPoint:function(e,t,r){n[e].row=t,n[e].col=r},getShipsCount:function(){return n.length},getShipsBoard:function(){var e=[];return i.forEach((function(t){e.push(p(t))})),e},setShipBoardCell:function(e,t,n){i[e][t]=n},getHitsBoard:function(){var e=[];return r.forEach((function(t){e.push(p(t))})),e},hitBoardCell:function(e,t){++r[e][t]},getBlockNotOccupied:function(){return o},decreaseBlockNotOccupied:function(e){o-=e},increaseBlockNotOccupied:function(e){o+=e},getShipsAlive:function(){return a},decreaseShipsAlive:function(){--a},getShipsList:function(){var e={};return n.forEach((function(t){var n,r=null!==(n=e[t.ship.getLength()])&&void 0!==n?n:0;e[t.ship.getLength()]=r+1})),e},sortShipsByLengthDesc:function(){n.sort((function(e,t){return t.ship.getLength()-e.ship.getLength()}))}};return Object.create(c)}var Oe=n(72),We=n.n(Oe),Ae=n(257),Be=n.n(Ae),Ie={getBlockIndexFromCoordinates:function(e,t,n){return e*n+t},getCoordinatesFromBlockIndex:function(e,t){return[Math.floor(e/t),e%t]},getBlockIndexFromBlockElement:function(e,t){return Array.from(e.children).indexOf(t)},getBlockTopOffset:function(e,t){return Array.from(e.children)[t].offsetTop},getBlockLeftOffset:function(e,t){return Array.from(e.children)[t].offsetLeft},createShipElement:function(e,t){var n=document.createElement("div");n.classList.add("ship");for(var r=0;r<e;r++){var i=document.createElement("div");i.classList.add("ship-block"),n.append(i)}return n.classList.add("".concat(t?"vertical":"horizontal")),n},createShipOnBoard:function(e,t,n,r,i,a,o,s){void 0===s&&((s=Ie.createShipElement(i,a)).dataset.id=o);var l=Ie.getBlockIndexFromCoordinates(n,r,t);s.style.top="".concat(Ie.getBlockTopOffset(e,l),"px"),s.style.left="".concat(Ie.getBlockLeftOffset(e,l),"px"),s.style["flex-direction"]="".concat(a?"column":"row"),e.append(s)}};const Te=Ie;function _e(e,t,n){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.set(e,n)}var Ve=new WeakMap,je=new WeakMap,Ne=new WeakMap,He=new WeakMap,De=new WeakMap,Re=new WeakMap,qe=new WeakMap,Fe=new WeakMap,Ge=new WeakMap,ze=new WeakMap,Ze=new WeakMap,Ye=new WeakMap,Ue=new WeakMap,Ke=new WeakMap,$e=new WeakMap,Je=new WeakMap,Qe=new WeakMap,Xe=new WeakMap,et=new WeakMap,tt=new WeakMap,nt=new WeakMap,rt=new WeakMap,it=new WeakMap,at=new WeakMap,ot=new WeakMap,st=new WeakMap,lt=new WeakMap,ct=new WeakMap,ut=new WeakMap,ht=new WeakMap,dt=new WeakMap,pt=new WeakMap,vt=new WeakMap,ft=new WeakMap,mt=new WeakMap,gt=function(){function e(t,n,r,i,a,o,s){m(this,e),_e(this,Ve,{writable:!0,value:void 0}),_e(this,je,{writable:!0,value:void 0}),_e(this,Ne,{writable:!0,value:void 0}),_e(this,He,{writable:!0,value:void 0}),_e(this,De,{writable:!0,value:void 0}),_e(this,Re,{writable:!0,value:void 0}),_e(this,qe,{writable:!0,value:void 0}),_e(this,Fe,{writable:!0,value:void 0}),_e(this,Ge,{writable:!0,value:void 0}),_e(this,ze,{writable:!0,value:void 0}),_e(this,Ze,{writable:!0,value:void 0}),_e(this,Ye,{writable:!0,value:void 0}),_e(this,Ue,{writable:!0,value:void 0}),_e(this,Ke,{writable:!0,value:void 0}),_e(this,$e,{writable:!0,value:void 0}),_e(this,Je,{writable:!0,value:void 0}),_e(this,Qe,{writable:!0,value:void 0}),_e(this,Xe,{writable:!0,value:void 0}),_e(this,et,{writable:!0,value:void 0}),_e(this,tt,{writable:!0,value:void 0}),_e(this,nt,{writable:!0,value:void 0}),_e(this,rt,{writable:!0,value:void 0}),_e(this,it,{writable:!0,value:void 0}),_e(this,at,{writable:!0,value:void 0}),_e(this,ot,{writable:!0,value:void 0}),_e(this,st,{writable:!0,value:void 0}),_e(this,lt,{writable:!0,value:void 0}),_e(this,ct,{writable:!0,value:void 0}),_e(this,ut,{writable:!0,value:void 0}),_e(this,ht,{writable:!0,value:void 0}),_e(this,dt,{writable:!0,value:void 0}),_e(this,pt,{writable:!0,value:void 0}),_e(this,vt,{writable:!0,value:void 0}),_e(this,ft,{writable:!0,value:void 0}),_e(this,mt,{writable:!0,value:void 0}),k(this,Fe,i),k(this,Ge,a),k(this,Ye,n);var l=o?"Player":s;o&&1===n&&t>1&&(l="First Player"),o&&2===n&&(l="Second Player"),k(this,nt,0),k(this,qe,1),k(this,Ze,r),k(this,ze,{}),this.cacheDOM(l),this.initPlayerArea(o,s),this.initShipsArea(r),this.initPagination(),this.initBoardArea(),N(b(this,Re)),this.bindEvents()}return w(e,[{key:"cacheDOM",value:function(e){k(this,Ve,(new DOMParser).parseFromString(We()({playerLabel:e}),"text/html").body.firstElementChild),k(this,je,b(this,Ve).firstElementChild),k(this,Ne,document.querySelector(".pause-container")),k(this,He,b(this,je).querySelector(".btn-auto-place")),k(this,De,b(this,He).nextElementSibling),k(this,Re,b(this,je).querySelector(".btn-submit")),this.cachePlayerAreaDOM(),this.cacheShipsAreaDOM(),this.cachePaginationDOM(),this.cacheBoardAreaDOM()}},{key:"bindEvents",value:function(){this.bindPlayerAreaEvents(),this.bindShipsAreaEvents(),this.bindPaginationEvents(),this.bindBoardAreaEvents()}},{key:"initPlayerArea",value:function(e,t){if(!e){var n=b(this,Ue).nextElementSibling;b(this,Ke).value=t,b(this,Ue).remove(),n.remove()}}},{key:"cachePlayerAreaDOM",value:function(){k(this,Ue,b(this,je).querySelector(".section-player-name")),k(this,Ke,b(this,Ue).querySelector("input[name]"))}},{key:"bindPlayerAreaEvents",value:function(){b(this,Ke).addEventListener("keypress",this.onKeyPressPlayerName.bind(this))}},{key:"onKeyPressPlayerName",value:function(e){this.checkIfMaxPlayerNameReached()&&e.preventDefault()}},{key:"checkIfMaxPlayerNameReached",value:function(){return 15===b(this,Ke).value.length}},{key:"getPlayerName",value:function(){var e=b(this,Ke).value;return""===e?"Player".concat(b(this,Ye)):e}},{key:"initShipsArea",value:function(e){var t=this;k(this,$e,{}),k(this,Je,{}),this.createShipsPages(e),k(this,et,0),Object.keys(b(this,Je)).forEach((function(e){k(t,et,b(t,et)+parseInt(b(t,Je)[e].textContent,10))})),this.setActiveShip(b(this,je).querySelector(".ship-compressed")),this.createTempShip(b(this,Xe))}},{key:"bindShipsAreaEvents",value:function(){var e=this;b(this,je).querySelectorAll(".page .ship-block").forEach((function(t){t.addEventListener("click",(function(){e.setActiveShip(t.closest(".ship-compressed")),null===b(e,ct)&&e.setPlaceOptionActive("h")}))}))}},{key:"cacheShipsAreaDOM",value:function(){k(this,ut,b(this,je).querySelector(".pages-container"))}},{key:"increaseShipCount",value:function(e){var t=parseInt(b(this,Je)[e].textContent,10);b(this,Je)[e].textContent=t+1}},{key:"decreaseShipCount",value:function(e){var t=parseInt(b(this,Je)[e].textContent,10);if(0===t)throw new Error;b(this,Je)[e].textContent=t-1}},{key:"resetAllShipsCount",value:function(){var e=this;Object.keys(b(this,Je)).forEach((function(t){b(e,Je)[t].textContent=0}))}},{key:"setActiveShip",value:function(e){if(e!==b(this,Qe)){b(this,Qe)&&b(this,Qe).classList.remove("active"),k(this,Qe,e.closest(".ship-compressed")),b(this,Qe).classList.add("active");var t=b(this,Qe).closest(".ship-container"),n=parseInt(t.dataset.length,10);k(this,Xe,n),0!==parseInt(b(this,Je)[n].textContent,10)&&this.createTempShip(b(this,Xe))}}},{key:"createShipsPages",value:function(e){for(var t=Object.keys(e).sort((function(e,t){return e-t})),n=0;n<t.length;n+=4)b(this,ut).append(this.createPage(n,4,t,e))}},{key:"createPage",value:function(e,t,n,r){var i=document.createElement("div");i.classList.add("page");for(var a=0;a<t&&e+a<n.length;a++){var o=n[e+a],s=r[o],l=this.createShipContainer(o,s);i.append(l),b(this,$e)[o]=l,b(this,Je)[o]=l.querySelector(".number")}return i}},{key:"createShipContainer",value:function(e,t){var n=(new DOMParser).parseFromString(Be()({shipLength:e,shipCount:t}),"text/html").body.firstElementChild,r=V.createShipElement(e,1);return n.querySelector(".ship").replaceWith(r),n}},{key:"createTempShip",value:function(e){k(this,tt,Te.createShipElement(e)),b(this,tt).classList.add("temp-ship")}},{key:"bindPlaceShipsEvents",value:function(){var e=this;b(this,rt).addEventListener("click",(function(t){t.target.classList.contains("board-block")&&e.onClickPlaceShipOnBoard(t)})),b(this,rt).querySelectorAll(".board-block").forEach((function(t){t.addEventListener("mouseenter",e.OnMouseEnterBoardBlock.bind(e)),t.addEventListener("mouseleave",e.onMouseLeaveBoardBlock.bind(e))})),b(this,He).addEventListener("click",(function(){b(e,Ne).classList.add("active","front"),b(e,Ne).addEventListener("transitionend",(function(){e.autoPlaceShips.call(e)?b(e,De).classList.add("d-none"):b(e,De).classList.remove("d-none"),b(e,Ne).classList.remove("active","front")}),{once:!0})}))}},{key:"placeShipOnBoard",value:function(e,t,n,r){var i;if(!this.canPlaceShip(n,e,t,r))throw new Error;var a=(k(this,qe,1+(i=+b(this,qe))),i);b(this,ze)[a]={row:e,col:t,length:n,isVertical:r},Te.createShipOnBoard(b(this,rt),b(this,Fe),e,t,n,r,a),this.decreaseShipCount(n),this.setEmptyCells(e,t,n,r,!1),k(this,nt,+b(this,nt)+1),b(this,nt)===b(this,et)&&j(b(this,Re))}},{key:"onClickPlaceShipOnBoard",value:function(e){if(null!==b(this,ct)){var t=e.target,n=Te.getBlockIndexFromBlockElement(b(this,rt),t),r=b(this,ct),i=Pe(Te.getCoordinatesFromBlockIndex(n,b(this,Fe)),2),a=i[0],o=i[1];this.canPlaceShip(b(this,Xe),a,o,r)&&this.placeShipOnBoard(a,o,b(this,Xe),r)}}},{key:"OnMouseEnterBoardBlock",value:function(e){if(null!==b(this,ct)){var t=e.target,n=Te.getBlockIndexFromBlockElement(b(this,rt),t),r=b(this,ct),i=Pe(Te.getCoordinatesFromBlockIndex(n,b(this,Fe)),2),a=i[0],o=i[1];this.canPlaceShip(b(this,Xe),a,o,r)&&Te.createShipOnBoard(b(this,rt),b(this,Fe),a,o,b(this,Xe),r,void 0,b(this,tt))}}},{key:"onMouseLeaveBoardBlock",value:function(){null!==b(this,ct)&&null!==b(this,tt)&&b(this,tt).remove()}},{key:"canPlaceShip",value:function(e,t,n,r){if(0===parseInt(b(this,Je)[e].textContent,10))return!1;if(r&&t+e-1>=b(this,Ge))return!1;if(!r&&n+e-1>=b(this,Fe))return!1;for(var i=0;i<e;i++){if(r&&!0!==b(this,it)[t+i][n])return!1;if(!r&&!0!==b(this,it)[t][n+i])return!1}return!0}},{key:"autoPlaceShips",value:function(){var e=this;this.removeAllShipsFromBoard();var t=Ce(b(this,Fe),b(this,Ge));Object.keys(b(this,Ze)).forEach((function(n){for(var r=0;r<b(e,Ze)[n];r++)u.addShip(t,parseInt(n,10))}));var n=u.autoPlaceShips(t);return n&&t.getShips().forEach((function(n,r){e.placeShipOnBoard(n.row,n.col,t.getShip(r).getLength(),n.isVertical)})),n}},{key:"setEmptyCells",value:function(e,t,n,r,i){for(var a=0;a<n;a++)r?b(this,it)[e+a][t]=i:b(this,it)[e][t+a]=i}},{key:"bindRemoveShipsEvents",value:function(){var e=this;b(this,rt).addEventListener("click",(function(t){t.target.classList.contains("ship-block")&&e.onClickRemoveShipFromBoard(t)}))}},{key:"removeShipFromBoardById",value:function(e){b(this,rt).querySelector(".ship[data-id='".concat(e,"']")).remove(),this.increaseShipCount(b(this,ze)[e].length),this.setEmptyCells(b(this,ze)[e].row,b(this,ze)[e].col,b(this,ze)[e].length,b(this,ze)[e].isVertical,!0),delete b(this,ze)[e],k(this,nt,+b(this,nt)-1),N(b(this,Re))}},{key:"removeAllShipsFromBoard",value:function(){var e=this;Object.keys(b(this,ze)).forEach((function(t){e.removeShipFromBoardById(t)}))}},{key:"onClickRemoveShipFromBoard",value:function(e){if(null===b(this,ct)){var t=e.target.closest(".ship");this.removeShipFromBoardById(t.dataset.id)}}},{key:"initBoardArea",value:function(){k(this,ct,!1),this.renderBoard(),k(this,it,[]);for(var e=0;e<b(this,Ge);e++){b(this,it).push([]);for(var t=0;t<b(this,Fe);t++)b(this,it)[e].push(!0)}}},{key:"cacheBoardAreaDOM",value:function(){k(this,rt,b(this,je).querySelector(".board")),k(this,at,b(this,je).querySelector(".place-options")),k(this,st,b(this,at).querySelector(".btn-h")),k(this,ot,b(this,at).querySelector(".btn-v")),k(this,lt,b(this,at).querySelector(".btn-remove"))}},{key:"bindBoardAreaEvents",value:function(){b(this,st).addEventListener("click",this.onClickSetPlaceOptionActive.bind(this)),b(this,ot).addEventListener("click",this.onClickSetPlaceOptionActive.bind(this)),b(this,lt).addEventListener("click",this.onClickSetPlaceOptionActive.bind(this)),this.bindPlaceShipsEvents(),this.bindRemoveShipsEvents()}},{key:"onClickSetPlaceOptionActive",value:function(e){var t=e.target.closest("button");t===b(this,st)?this.setPlaceOptionActive("h"):t===b(this,ot)?this.setPlaceOptionActive("v"):t===b(this,lt)&&this.setPlaceOptionActive("x")}},{key:"setPlaceOptionActive",value:function(e){var t;b(this,st).classList.remove("active"),b(this,ot).classList.remove("active"),b(this,lt).classList.remove("active"),"h"===e?(k(this,ct,!1),t=b(this,st)):"v"===e?(k(this,ct,!0),t=b(this,ot)):"x"===e&&(k(this,ct,null),t=b(this,lt)),t.classList.add("active")}},{key:"renderBoard",value:function(){b(this,rt).style.setProperty("--board-horizontal-cells",b(this,Fe));for(var e=0;e<b(this,Fe)*b(this,Ge);e++){var t=document.createElement("div");t.classList.add("board-block"),b(this,rt).append(t)}}},{key:"initPagination",value:function(){k(this,vt,1),k(this,ft,b(this,ut).children.length),b(this,je).querySelector(".pages-num").textContent=b(this,ft),k(this,mt,"100%"),this.updatePaginationStyle()}},{key:"cachePaginationDOM",value:function(){k(this,ht,this.modalElement.querySelector(".current-page")),k(this,dt,b(this,je).querySelector(".left-arrow")),k(this,pt,b(this,je).querySelector(".right-arrow"))}},{key:"bindPaginationEvents",value:function(){var e=this;b(this,je).querySelectorAll(".arrow-container").forEach((function(t){t.addEventListener("click",(function(){t.contains(b(e,dt))?e.paginateLeft():t.contains(b(e,pt))&&e.paginateRight()}))}))}},{key:"paginateLeft",value:function(){if(1===b(this,vt))throw new Error("Illegal Argument Exception");k(this,vt,+b(this,vt)-1),this.updatePaginationStyle()}},{key:"paginateRight",value:function(){if(b(this,vt)===b(this,ft))throw new Error("Illegal Argument Exception");k(this,vt,+b(this,vt)+1),this.updatePaginationStyle()}},{key:"updatePaginationStyle",value:function(){b(this,ut).style.right="calc(".concat(b(this,vt)-1," * ").concat(b(this,mt),")"),1===b(this,vt)?b(this,dt).closest(".arrow-container").classList.add("disabled"):b(this,dt).closest(".arrow-container").classList.remove("disabled"),b(this,vt)===b(this,ft)?b(this,pt).closest(".arrow-container").classList.add("disabled"):b(this,pt).closest(".arrow-container").classList.remove("disabled"),b(this,ht).textContent=b(this,vt)}},{key:"modalContainerElement",get:function(){return b(this,Ve)}},{key:"modalElement",get:function(){return b(this,je)}},{key:"getShipsList",value:function(){return b(this,ze)}}]),e}(),wt=n(82),yt=n.n(wt),bt=n(134),kt=n.n(bt);function St(e,t,n){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.set(e,n)}var Et=new WeakMap,xt=new WeakMap,Mt=new WeakMap,Pt=new WeakMap,Lt=new WeakMap,Ct=new WeakMap,Ot=new WeakMap,Wt=new WeakMap,At=function(){function e(t,n,r,i){m(this,e),St(this,Et,{writable:!0,value:void 0}),St(this,xt,{writable:!0,value:void 0}),St(this,Mt,{writable:!0,value:void 0}),St(this,Pt,{writable:!0,value:void 0}),St(this,Lt,{writable:!0,value:void 0}),St(this,Ct,{writable:!0,value:void 0}),St(this,Ot,{writable:!0,value:void 0}),St(this,Wt,{writable:!0,value:void 0}),k(this,Et,t),k(this,xt,n),k(this,Pt,r),k(this,Ot,i),k(this,Lt,new Audio("./assets/sounds/splash.wav")),k(this,Ct,new Audio("./assets/sounds/explode-cut.wav")),k(this,Wt,[]);for(var a=0;a<b(this,xt);a++){b(this,Wt).push([]);for(var o=0;o<b(this,Et);o++)b(this,Wt)[a].push(null)}this.render(),this.bindEvents()}return w(e,[{key:"getBoardElement",value:function(){return b(this,Mt)}},{key:"playerView",get:function(){return b(this,Pt)}},{key:"render",value:function(){for(var e=this,t=[],n=0;n<b(this,xt);n++)for(var r=0;r<b(this,Et);r++)t.push(null);k(this,Mt,document.createElement("div")),b(this,Mt).classList.add("board"),b(this,Mt).style.setProperty("--board-horizontal-cells",b(this,Et)),b(this,Mt).innerHTML=kt()({blocks:t}),setTimeout((function(){e.addShipsToBoard()}),200)}},{key:"addShipsToBoard",value:function(){var e=this;Object.keys(b(this,Ot)).forEach((function(t){var n=b(e,Ot)[t].length,r=b(e,Ot)[t].row,i=b(e,Ot)[t].col,a=b(e,Ot)[t].isVertical,o=Te.createShipElement(n,a);Array.from(o.children).forEach((function(e){e.classList.add("hidden")})),o.classList.add("hidden"),e.setShipsBlocksBoard(r,i,n,a,o),Te.createShipOnBoard(b(e,Mt),b(e,Et),r,i,n,a,void 0,o)}))}},{key:"setShipsBlocksBoard",value:function(e,t,n,r,i){for(var a=0;a<n;a++)r?b(this,Wt)[e+a][t]=i.children[a]:b(this,Wt)[e][t+a]=i.children[a]}},{key:"bindEvents",value:function(){b(this,Mt).addEventListener("click",this.receiveAttack.bind(this))}},{key:"receiveAttack",value:function(e){if(e.target.classList.contains("board-block")){var n=Array.from(b(this,Mt).children).indexOf(e.target);t().publish("AttackReceived",{row:Math.floor(n/b(this,Et)),col:n%b(this,Et),boardView:this})}}},{key:"attackFailed",value:function(e,t){this.playSound(b(this,Lt));var n=Te.getBlockIndexFromCoordinates(e,t,b(this,Et));b(this,Mt).children[n].classList.add("disabled","incorrect")}},{key:"attackSucceded",value:function(e,t,n){this.playSound(b(this,Ct));var r=Te.getBlockIndexFromCoordinates(e,t,b(this,Et));b(this,Mt).children[r].classList.add("disabled");var i=b(this,Wt)[e][t];i.classList.remove("hidden"),n&&(i.closest(".ship").classList.remove("hidden"),i.closest(".ship").classList.add("destroyed"))}},{key:"playSound",value:function(e){e.pause(),e.currentTime=0,e.play()}},{key:"disableBoard",value:function(){b(this,Mt).classList.add("disabled")}},{key:"enableBoard",value:function(){b(this,Mt).classList.remove("disabled")}}]),e}(),Bt=n(344),It=n.n(Bt);function Tt(e,t,n){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.set(e,n)}var _t=new WeakMap,Vt=new WeakMap,jt=new WeakMap,Nt=new WeakMap,Ht=new WeakMap,Dt=new WeakMap,Rt=new WeakMap,qt=new WeakMap,Ft=new WeakMap,Gt=new WeakMap,zt=new WeakMap,Zt=new WeakMap,Yt=new WeakMap,Ut=new WeakMap,Kt=new WeakMap,$t=new WeakMap,Jt=new WeakMap,Qt=new WeakMap,Xt=function(){function e(t,n,r,i,a){m(this,e),Tt(this,_t,{writable:!0,value:void 0}),Tt(this,Vt,{writable:!0,value:void 0}),Tt(this,jt,{writable:!0,value:void 0}),Tt(this,Nt,{writable:!0,value:void 0}),Tt(this,Ht,{writable:!0,value:void 0}),Tt(this,Dt,{writable:!0,value:void 0}),Tt(this,Rt,{writable:!0,value:void 0}),Tt(this,qt,{writable:!0,value:void 0}),Tt(this,Ft,{writable:!0,value:void 0}),Tt(this,Gt,{writable:!0,value:void 0}),Tt(this,zt,{writable:!0,value:void 0}),Tt(this,Zt,{writable:!0,value:void 0}),Tt(this,Yt,{writable:!0,value:void 0}),Tt(this,Ut,{writable:!0,value:void 0}),Tt(this,Kt,{writable:!0,value:void 0}),Tt(this,$t,{writable:!0,value:void 0}),Tt(this,Jt,{writable:!0,value:void 0}),Tt(this,Qt,{writable:!0,value:void 0}),k(this,Vt,t),k(this,Nt,a),this.render(n),this.cacheDOM(),this.createBoard(r,i,n),this.initShipsRemained(n),this.initScore(),this.bindEvents()}return w(e,[{key:"cacheDOM",value:function(){this.cacheTurnDOM(),this.cacheShipsRemainedDOM(),this.cacheScoreDOM(),this.cacheDarkeningDOM()}},{key:"render",value:function(){k(this,_t,document.createElement("div")),b(this,_t).classList.add("player-area"),b(this,_t).innerHTML=It()({})}},{key:"createBoard",value:function(e,t,n){k(this,jt,new At(e,t,this,n)),b(this,_t).querySelector(".board").replaceWith(b(this,jt).getBoardElement())}},{key:"bindEvents",value:function(){this.bindShipsRemainedEvents()}},{key:"initShipsRemained",value:function(e){this.addShipsToshipsRemainedElement(e),this.initShipsRemainedPagination()}},{key:"cacheShipsRemainedDOM",value:function(){k(this,Ht,b(this,_t).querySelector(".ships-remained-container-responsive")),k(this,Dt,b(this,Ht).querySelector(".ships")),this.cacheShipsRemainedPaginationDOM()}},{key:"bindShipsRemainedEvents",value:function(){b(this,qt).addEventListener("mouseenter",this.mouseEnterInfo.bind(this)),b(this,qt).addEventListener("mouseleave",this.mouseLeaveInfo.bind(this)),this.bindShipsRemainedPaginationEvents()}},{key:"addShipsToshipsRemainedElement",value:function(e){var t=this,n={};Object.keys(e).forEach((function(t){var r=e[t].length;n[r]||(n[r]=0),++n[r]})),Object.keys(n).sort((function(e,t){return e-t})).forEach((function(e){b(t,Dt).append(V.createShipContainerElement(e,n[e]))}))}},{key:"sinkShip",value:function(e){var t=b(this,Ht).querySelector('[data-length="'.concat(e,'"]')),n=t.querySelector(".count"),r=parseInt(n.textContent,10)-1;0===r?t.remove():n.textContent=r}},{key:"mouseEnterInfo",value:function(){b(this,Ht).classList.add("help")}},{key:"mouseLeaveInfo",value:function(){b(this,Ht).classList.remove("help")}},{key:"initShipsRemainedPagination",value:function(){var e=this;requestAnimationFrame((function(){e.toggleArrowsState(),e.toggleArrowsState()}))}},{key:"cacheShipsRemainedPaginationDOM",value:function(){k(this,qt,b(this,Ht).querySelector(".info")),k(this,Gt,b(this,Ht).querySelector(".left-arrow")),k(this,Ft,b(this,Gt).parentElement),k(this,Zt,b(this,Ht).querySelector(".right-arrow")),k(this,zt,b(this,Zt).parentElement)}},{key:"bindShipsRemainedPaginationEvents",value:function(){var e=this;b(this,Ft).addEventListener("pointerdown",(function(){e.scroll(-180)})),b(this,zt).addEventListener("pointerdown",(function(){e.scroll(180)})),b(this,Ft).addEventListener("pointerup",(function(){e.stopScrolling()})),b(this,zt).addEventListener("pointerup",(function(){e.stopScrolling()}))}},{key:"scroll",value:function(e){var t=this,n=this.getResponsiveScroll()+e,r=e>0?"right":"left";k(this,Rt,!1),this.checkIfScreenSmall()?b(this,Dt).scrollTop+=e:b(this,Dt).scrollLeft+=e,new Promise((function(e,i){t.keepScrolling(e,i,n,r)})).then((function(){t.scroll(e)})).catch((function(){})).finally((function(){t.toggleArrowsState()}))}},{key:"keepScrolling",value:function(e,t,n,r){var i=this;this.getResponsiveScroll()!==n?b(this,Rt)||"left"===r&&this.checkIfLeftMostReached()||"right"===r&&this.checkIfRightMostReached()?t():requestAnimationFrame((function(){i.keepScrolling(e,t,n,r)})):e()}},{key:"checkIfLeftMostReached",value:function(){return 0===this.getResponsiveScroll()}},{key:"checkIfRightMostReached",value:function(){return this.checkIfScreenSmall()?b(this,Dt).scrollHeight-b(this,Dt).clientHeight===b(this,Dt).scrollTop:b(this,Dt).scrollWidth-b(this,Dt).clientWidth===b(this,Dt).scrollLeft}},{key:"toggleArrowsState",value:function(){this.checkIfLeftMostReached()?b(this,Ft).classList.add("disabled"):b(this,Ft).classList.remove("disabled"),this.checkIfRightMostReached()?b(this,zt).classList.add("disabled"):b(this,zt).classList.remove("disabled")}},{key:"stopScrolling",value:function(){k(this,Rt,!0)}},{key:"getResponsiveScroll",value:function(){return this.checkIfScreenSmall()?b(this,Dt).scrollTop:b(this,Dt).scrollLeft}},{key:"checkIfScreenSmall",value:function(){return"none"!==getComputedStyle(b(this,Ft)).transform}},{key:"cacheTurnDOM",value:function(){k(this,Yt,b(this,_t).querySelector(".turn-container"))}},{key:"setTurn",value:function(){this.showTurnLabel(),this.darken()}},{key:"unsetTurn",value:function(){this.hideTurnLabel(),this.removeDarkening()}},{key:"showTurnLabel",value:function(){b(this,Yt).classList.add("active")}},{key:"hideTurnLabel",value:function(){b(this,Yt).classList.remove("active")}},{key:"initScore",value:function(){this.setPlayerName(b(this,Nt))}},{key:"cacheScoreDOM",value:function(){k(this,Ut,b(this,_t).querySelector(".score-container")),k(this,Kt,b(this,Ut).querySelector(".name")),k(this,$t,b(this,Ut).querySelector(".wins")),k(this,Jt,b(this,Ut).querySelector(".losses"))}},{key:"setPlayerName",value:function(e){b(this,Kt).textContent=e}},{key:"setWins",value:function(e){b(this,$t).textContent=e}},{key:"increaseWins",value:function(){b(this,$t).textContent=parseInt(b(this,$t).textContent,10)+1}},{key:"setLosses",value:function(e){b(this,Jt).textContent=e}},{key:"increaseLosses",value:function(){b(this,Jt).textContent=parseInt(b(this,Jt).textContent,10)+1}},{key:"showScore",value:function(){b(this,Ut).classList.add("active")}},{key:"hideScore",value:function(){b(this,Ut).classList.remove("active")}},{key:"gameView",get:function(){return b(this,Vt)}},{key:"boardView",get:function(){return b(this,jt)}},{key:"getPlayerAreaElement",value:function(){return b(this,_t)}},{key:"cacheDarkeningDOM",value:function(){k(this,Qt,b(this,_t).querySelector(".darkening"))}},{key:"darken",value:function(){b(this,Qt).classList.add("active")}},{key:"removeDarkening",value:function(){b(this,Qt).classList.remove("active")}},{key:"showWinLabel",value:function(){b(this,Yt).firstElementChild.innerText="You Won",this.showTurnLabel()}},{key:"showLoseLabel",value:function(){b(this,Yt).firstElementChild.innerText="You Lost",this.showTurnLabel()}},{key:"disableBoard",value:function(){b(this,jt).disableBoard()}},{key:"enableBoard",value:function(){b(this,jt).enableBoard()}}]),e}();const en=function(e){return new Promise((function(t){e.classList.remove("active"),e.addEventListener("transitionend",(function(n){"bottom"===n.propertyName&&(e.remove(),t())}))}))},tn=function(e,t){e.append(t),setTimeout((function(){t.classList.add("active")}),25)},nn=function(){var e=document.createElement("div");return e.classList.add("pause-container"),e};function rn(e,t,n){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.set(e,n)}var an=new WeakMap,on=new WeakMap,sn=new WeakMap,ln=new WeakMap,cn=new WeakMap,un=new WeakMap,hn=new WeakMap,dn=new WeakMap,pn=new WeakMap,vn=new WeakMap,fn=new WeakMap,mn=new WeakMap,gn=new WeakMap,wn=new WeakMap,yn=new WeakMap,bn=new WeakMap,kn=new WeakMap,Sn=new WeakMap,En=new WeakMap,xn=function(){function e(t,n,r){m(this,e),rn(this,an,{writable:!0,value:void 0}),rn(this,on,{writable:!0,value:void 0}),rn(this,sn,{writable:!0,value:void 0}),rn(this,ln,{writable:!0,value:void 0}),rn(this,cn,{writable:!0,value:void 0}),rn(this,un,{writable:!0,value:void 0}),rn(this,hn,{writable:!0,value:void 0}),rn(this,dn,{writable:!0,value:void 0}),rn(this,pn,{writable:!0,value:void 0}),rn(this,vn,{writable:!0,value:void 0}),rn(this,fn,{writable:!0,value:void 0}),rn(this,mn,{writable:!0,value:void 0}),rn(this,gn,{writable:!0,value:void 0}),rn(this,wn,{writable:!0,value:void 0}),rn(this,yn,{writable:!0,value:void 0}),rn(this,bn,{writable:!0,value:void 0}),rn(this,kn,{writable:!0,value:void 0}),rn(this,Sn,{writable:!0,value:void 0}),rn(this,En,{writable:!0,value:void 0}),k(this,an,t),k(this,dn,r),this.createRootElement(b(this,dn)),this.createPauseContainer(),n.append(b(this,on))}var t,n,r,i,a,o,s,l;return w(e,[{key:"createRootElement",value:function(){k(this,on,document.createElement("div")),b(this,on).classList.add("game-container"),b(this,on).dataset.gameId=b(this,dn)}},{key:"createPauseContainer",value:function(){k(this,hn,nn()),b(this,on).append(b(this,hn))}},{key:"game",get:function(){return b(this,an)}},{key:"createGameArena",value:function(){this.cacheGameArenaDOM(),this.createPlayersViews(),b(this,Sn).append(this.getPlayerView(0).getPlayerAreaElement()),b(this,En).append(this.getPlayerView(1).getPlayerAreaElement()),b(this,on).append(b(this,sn)),this.createStartGameLabel()}},{key:"cacheGameArenaDOM",value:function(){k(this,sn,(new DOMParser).parseFromString(yt()(),"text/html").body.firstElementChild),k(this,ln,b(this,sn).querySelector(".rounds-container")),k(this,cn,b(this,ln).querySelector("p")),k(this,un,b(this,cn).querySelector(".round-num")),this.cachePlayersAreasDOM()}},{key:"endGame",value:function(e){var t=this;setTimeout((function(){for(var n=0;n<b(t,pn).length;n++)b(t,pn)[n].hideTurnLabel(),b(t,pn)[n].disableBoard(),b(t,pn)[n].removeDarkening(),n===e?(b(t,pn)[n].showWinLabel(),b(t,pn)[n].increaseWins()):(b(t,pn)[n].showLoseLabel(),b(t,pn)[n].increaseLosses());t.createNextGameLabel(),b(t,hn).classList.add("semi-active")}),300)}},{key:"createNextGameLabel",value:function(){k(this,bn,document.createElement("div")),b(this,bn).classList.add("next-game-container");var e=document.createElement("button");e.textContent="Next Game",b(this,bn).append(e),b(this,on).append(b(this,bn)),this.bindNextGameButtonEvents(e),tn(b(this,on),b(this,bn))}},{key:"bindNextGameButtonEvents",value:function(e){e.addEventListener("click",this.NextGameButtonClick.bind(this)),e.addEventListener("mouseenter",this.displayScores.bind(this)),e.addEventListener("mouseleave",this.hideScores.bind(this))}},{key:"NextGameButtonClick",value:(l=f(E().mark((function e(){return E().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,en(b(this,bn));case 2:qn.generateNextRound(b(this,an),this);case 3:case"end":return e.stop()}}),e,this)}))),function(){return l.apply(this,arguments)})},{key:"createStartGameLabel",value:function(){k(this,kn,document.createElement("div")),b(this,kn).classList.add("start-game-container");var e=document.createElement("button");e.textContent="Start Game",b(this,kn).append(e),b(this,on).append(b(this,kn)),this.bindStartGameButtonEvents(e),tn(b(this,on),b(this,kn)),this.displayScores()}},{key:"bindStartGameButtonEvents",value:function(e){e.addEventListener("click",this.startGameButtonClick.bind(this))}},{key:"startGameButtonClick",value:(s=f(E().mark((function e(){return E().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return this.hideScores(),e.next=3,en(b(this,kn));case 3:qn.startGame(b(this,an),this),this.scrollToEnemyArea(b(this,an).currentEnemyIndex);case 5:case"end":return e.stop()}}),e,this)}))),function(){return s.apply(this,arguments)})},{key:"cachePlayersAreasDOM",value:function(){k(this,Sn,b(this,sn).querySelector(".first-player-arena")),k(this,En,b(this,sn).querySelector(".second-player-arena"))}},{key:"createPlayersViews",value:function(){k(this,pn,[]);for(var e=0;e<b(this,wn).length;e++){var t=new Xt(this,b(this,wn)[e].ships,b(this,fn),b(this,mn),b(this,wn)[e].name);b(this,pn).push(t)}}},{key:"addPlayerView",value:function(e){b(this,pn).push(e)}},{key:"displayScores",value:function(){var e=this;b(this,hn).classList.add("active"),b(this,hn).addEventListener("transitionend",(function(){for(var t=0;t<b(e,wn).length;t++)b(e,pn)[t].showScore()}),{once:!0})}},{key:"hideScores",value:function(){b(this,hn).classList.remove("active");for(var e=0;e<b(this,wn).length;e++)b(this,pn)[e].hideScore()}},{key:"updateScores",value:function(e){for(var t=0;t<b(this,pn).length;t++)b(this,pn)[t].setWins(e[t].wins),b(this,pn)[t].setLosses(e[t].losses)}},{key:"playersViews",get:function(){return p(b(this,pn))}},{key:"getPlayerView",value:function(e){return b(this,pn)[e]}},{key:"scrollToEnemyArea",value:function(e){0===e?b(this,Sn).scrollIntoView():b(this,En).scrollIntoView()}},{key:"changeTurn",value:function(e,t){b(this,un).innerText=e,"0deg"===getComputedStyle(b(this,ln)).getPropertyValue("--angle").trim()?(b(this,ln).style.setProperty("--angle","180deg"),b(this,cn).style.setProperty("--angle","180deg")):(b(this,ln).style.setProperty("--angle","0deg"),b(this,cn).style.setProperty("--angle","0deg")),this.scrollToEnemyArea(t)}},{key:"newGame",value:(o=f(E().mark((function e(){var t,n,r,i,a,o=arguments;return E().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t=!(o.length>0&&void 0!==o[0])||o[0],n=o.length>1&&void 0!==o[1]?o[1]:[],k(this,wn,[]),k(this,pn,[]),k(this,yn,0),!t){e.next=12;break}return e.next=8,this.createRulesModal();case 8:return e.next=10,this.createGameTypeModal();case 10:e.next=14;break;case 12:b(this,sn).remove(),b(this,hn).classList.remove("semi-active");case 14:for(r=[this.createGridSizeModal,this.createShipsChoosingModal],i=1;i<=b(this,vn);i++)r.push(this.createShipsPlacingModal.bind(this,i,t,n));case 16:if(!(b(this,yn)<r.length)){e.next=21;break}return e.next=19,r[(k(this,yn,1+(a=+b(this,yn))),a)].call(this);case 19:e.next=16;break;case 21:return 1===b(this,vn)&&b(this,wn).push(qn.generateComputerPlayer(b(this,fn),b(this,mn),b(this,gn))),this.createGameArena(),e.abrupt("return",{humanNumber:b(this,vn),boardWidth:b(this,fn),boardHeight:b(this,mn),players:b(this,wn)});case 24:case"end":return e.stop()}}),e,this)}))),function(){return o.apply(this,arguments)})},{key:"createRulesModal",value:(a=f(E().mark((function e(){var t;return E().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=new oe,this.displayModal(t),e.next=4,this.rulesModalSubmit(t);case 4:return e.next=6,this.removeModal(t);case 6:case"end":return e.stop()}}),e,this)}))),function(){return a.apply(this,arguments)})},{key:"rulesModalSubmit",value:function(e){return new Promise((function(t){e.modalElement.querySelector(".btn-start").addEventListener("click",(function(){t()}))}))}},{key:"createGameTypeModal",value:(i=f(E().mark((function e(){var t;return E().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=new ve,this.displayModal(t),e.next=4,this.gameTypeModalSubmit(t);case 4:return e.next=6,this.removeModal(t);case 6:case"end":return e.stop()}}),e,this)}))),function(){return i.apply(this,arguments)})},{key:"gameTypeModalSubmit",value:function(e){var t=this;return new Promise((function(n){e.modalElement.querySelector(".btn-play").addEventListener("click",(function(){k(t,vn,e.gethumanNumber()),n()}))}))}},{key:"createGridSizeModal",value:(r=f(E().mark((function e(){var t,n,r;return E().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=new Me(null!==(t=b(this,fn))&&void 0!==t?t:10,null!==(n=b(this,mn))&&void 0!==n?n:10),this.displayModal(r),e.next=4,this.gridSizeModalSubmit(r);case 4:return e.next=6,this.removeModal(r);case 6:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"gridSizeModalSubmit",value:function(e){var t=this;return new Promise((function(n){e.modalElement.querySelector(".btn-next").addEventListener("click",(function(){k(t,fn,e.getWidth()),k(t,mn,e.getHeight()),n()}))}))}},{key:"createShipsChoosingModal",value:(n=f(E().mark((function e(){var t;return E().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=new ee(b(this,fn),b(this,mn)),this.displayModal(t),e.next=4,this.shipsChoosingModalSubmit(t);case 4:return e.next=6,this.removeModal(t);case 6:case"end":return e.stop()}}),e,this)}))),function(){return n.apply(this,arguments)})},{key:"shipsChoosingModalSubmit",value:function(e){var t=this;return new Promise((function(n){var r=e.modalElement.querySelector(".btn-back");e.modalElement.querySelector(".btn-submit").addEventListener("click",(function(){k(t,gn,e.getShipsList()),n()})),r.addEventListener("click",(function(){k(t,yn,b(t,yn)-2),n()}))}))}},{key:"createShipsPlacingModal",value:(t=f(E().mark((function e(t,n,r){var i;return E().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return i=new gt(b(this,vn),t,b(this,gn),b(this,fn),b(this,mn),n,r[t-1]),this.displayModal(i),e.next=4,this.shipsPlacingModalSubmit(i,t);case 4:return e.next=6,this.removeModal(i);case 6:case"end":return e.stop()}}),e,this)}))),function(e,n,r){return t.apply(this,arguments)})},{key:"shipsPlacingModalSubmit",value:function(e,t){var n=this;return new Promise((function(r){var i=e.modalElement.querySelector(".btn-back");e.modalElement.querySelector(".btn-submit").addEventListener("click",(function(){b(n,wn).push({name:e.getPlayerName(),ships:e.getShipsList(),isBot:!1}),r()})),i.addEventListener("click",(function(){k(n,yn,b(n,yn)-2),t>1&&b(n,wn).pop(),r()}))}))}},{key:"displayModal",value:function(e){if(!e.modalContainerElement)throw new Error("Modal instance does not have modal container element property");if(!e.modalElement)throw new Error("Modal instance does not have modal element property");b(this,on).append(e.modalContainerElement),setTimeout((function(){e.modalContainerElement.classList.add("active"),e.modalElement.classList.add("active")}),0)}},{key:"removeModal",value:function(e){if(!e.modalContainerElement)throw new Error("Modal instance does not have modal container element property");if(!e.modalElement)throw new Error("Modal instance does not have modal element property");return new Promise((function(t){e.modalContainerElement.classList.remove("active"),e.modalElement.classList.remove("active"),e.modalElement.addEventListener("transitionend",(function(n){"bottom"===n.propertyName&&(e.modalContainerElement.remove(),t())}))}))}}]),e}();function Mn(e,t,n){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.set(e,n)}var Pn=new WeakMap,Ln=new WeakMap,Cn=new WeakMap,On=new WeakMap,Wn=new WeakMap,An=new WeakMap,Bn=new WeakMap,In=function(){function e(){m(this,e),Mn(this,Pn,{writable:!0,value:void 0}),Mn(this,Ln,{writable:!0,value:void 0}),Mn(this,Cn,{writable:!0,value:void 0}),Mn(this,On,{writable:!0,value:void 0}),Mn(this,Wn,{writable:!0,value:void 0}),Mn(this,An,{writable:!0,value:void 0}),Mn(this,Bn,{writable:!0,value:void 0}),this.running=!1,k(this,Ln,[]),k(this,Cn,0),k(this,On,0),k(this,Wn,-1),k(this,Bn,[])}return w(e,[{key:"running",get:function(){return b(this,Pn)},set:function(e){k(this,Pn,e)}},{key:"addPlayer",value:function(e){b(this,Ln).push(e)}},{key:"getPlayer",value:function(e){return b(this,Ln)[e]}},{key:"getPlayers",value:function(){return p(b(this,Ln))}},{key:"getPlayersCount",value:function(){return b(this,Ln).length}},{key:"increaseCurrentRound",value:function(){k(this,Cn,+b(this,Cn)+1)}},{key:"currentRound",get:function(){return b(this,Cn)}},{key:"currentPlayerIndex",get:function(){return b(this,Wn)},set:function(e){k(this,Wn,e)}},{key:"currentEnemyIndex",get:function(){return b(this,An)},set:function(e){k(this,An,e)}},{key:"getCurrentPlayer",value:function(){return b(this,Ln)[b(this,Wn)]}},{key:"getCurrentEnemy",value:function(){return b(this,Ln)[b(this,An)]}},{key:"addWinner",value:function(e){b(this,Bn).push(e)}},{key:"winners",get:function(){return p(b(this,Bn))}},{key:"getLastWinner",value:function(){return b(this,Bn)[b(this,Bn).length-1]}},{key:"increaseCurrentTurn",value:function(){k(this,On,+b(this,On)+1)}},{key:"resetCurrentTurn",value:function(){k(this,On,0)}},{key:"currentTurn",get:function(){return b(this,On)}}]),e}();function Tn(e,t,n){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.set(e,n)}var _n=new WeakMap,Vn=new WeakMap,jn=new WeakMap,Nn=new WeakMap,Hn=new WeakMap,Dn=function(){function e(t,n){m(this,e),Tn(this,_n,{writable:!0,value:void 0}),Tn(this,Vn,{writable:!0,value:void 0}),Tn(this,jn,{writable:!0,value:void 0}),Tn(this,Nn,{writable:!0,value:void 0}),Tn(this,Hn,{writable:!0,value:void 0}),this.name=t,k(this,Hn,n),k(this,jn,0),k(this,Nn,0)}return w(e,[{key:"name",get:function(){return b(this,_n)},set:function(e){k(this,_n,e)}},{key:"isBot",get:function(){return b(this,Hn)}},{key:"createBoard",value:function(e,t){k(this,Vn,Ce(e,t))}},{key:"board",get:function(){return b(this,Vn)}},{key:"increasePlayerRounds",value:function(){k(this,Nn,+b(this,Nn)+1)}},{key:"playedRounds",get:function(){return b(this,Nn)}},{key:"increaseWinRounds",value:function(){k(this,jn,+b(this,jn)+1)}},{key:"winRounds",get:function(){return b(this,jn)}}]),e}(),Rn=function(){function e(e){!1!==e.running&&(e.running=!1,e.getCurrentPlayer().increaseWinRounds(),e.getPlayers().forEach((function(e){e.increasePlayerRounds()})),e.addWinner(e.currentPlayerIndex),e.resetCurrentTurn())}function n(e,t){e.getCurrentPlayer().isBot&&(t.playersViews.forEach((function(e){e.disableBoard()})),r(e.getCurrentEnemy().board,t.getPlayerView(e.currentEnemyIndex).boardView))}function r(e,n){var r=u.getSmartTargets(e),i={};if(0===r.length){r=u.getNotDamagedSmartTargets(e);var a=Math.floor(Math.random()*r.length);i.row=r[a].row,i.col=r[a].col}else i.row=r[0].row,i.col=r[0].col;setTimeout((function(){t().publish("AttackReceived",{row:i.row,col:i.col,boardView:n})}),1e3)}return{generateGame:function(e,t){var n=new In;Rn.createGameView(n,e,t).newGame().then((function(e){for(var t=function(t){var r=e.players[t],i=new Dn(r.name,e.players[t].isBot);i.createBoard(e.boardWidth,e.boardHeight),Object.keys(r.ships).forEach((function(e){var t=r.ships[e],n=u.addShip(i.board,t.length);u.placeShip(i.board,n,t.row,t.col,t.isVertical)})),n.addPlayer(i)},r=0;r<e.players.length;r++)t(r)}))},startGame:function(e,n){if(!0!==e.running){if(e.getPlayersCount()<2)throw new Error("Too few players");e.running=!0,e.increaseCurrentRound(),function(e){var t;t=1===e.currentRound?function(e){return Math.floor(Math.random()*e.getPlayersCount())}(e):e.getLastWinner(),e.currentPlayerIndex=t}(e),e.currentEnemyIndex=(e.currentPlayerIndex+1)%e.getPlayersCount(),e.increaseCurrentTurn(),n&&t().publish("SwitchPlayerTurn",{game:e,gameView:n,firstTurn:!0})}},attack:function(r,i,a,o){r.running&&(u.receiveAttack(r.getCurrentEnemy().board,i,a,o)?(o&&t().publish("AttackSucceded",{boardView:o,row:i,col:a,isSunk:r.getCurrentEnemy().board.getShipFromCoordinate(i,a).isSunk()}),l.areAllShipsSunk(r.getCurrentEnemy().board)?(e(r),o&&t().publish("GameEnded",{gameView:o.playerView.gameView,winnerIndex:r.currentPlayerIndex})):o&&n(r,o.playerView.gameView)):(o&&t().publish("AttackFailed",{boardView:o,row:i,col:a}),function(e,n){e.currentPlayerIndex=(e.currentPlayerIndex+1)%e.getPlayersCount(),e.currentEnemyIndex=(e.currentEnemyIndex+1)%e.getPlayersCount(),e.increaseCurrentTurn(),n&&(t().publish("SwitchPlayerTurn",{game:e,gameView:n,firstTurn:!1}),t().publish("TurnIncreased",{newTurn:e.currentTurn,currentEnemyIndex:e.currentEnemyIndex,gameView:n}))}(r,void 0!==o?o.playerView.gameView:void 0)))},endGame:e,createGameView:function(e,t,n){return new xn(e,t,n)},generateNextRound:function(e,t){var n=[],r=[];e.getPlayers().forEach((function(e){r.push(e.name)})),t.newGame(!1,r).then((function(r){for(var i=function(t){var i=r.players[t],a=e.getPlayer(t);a.createBoard(r.boardWidth,r.boardHeight),Object.keys(i.ships).forEach((function(e){var t=i.ships[e],n=u.addShip(a.board,t.length);u.placeShip(a.board,n,t.row,t.col,t.isVertical)})),n.push({wins:a.winRounds,losses:a.playedRounds-a.winRounds})},a=0;a<r.players.length;a++)i(a);t.updateScores(n)}))},generateComputerPlayer:function(e,t,n){var r={name:"Computer",isBot:!0},i=Ce(e,t);Object.keys(n).forEach((function(e){for(var t=parseInt(e,10),r=n[t],a=0;a<r;a++)u.addShip(i,t)})),u.autoPlaceShips(i),r.ships={};var a=i.getShips();return Object.keys(a).forEach((function(e){r.ships[e]={},r.ships[e].length=i.getShip(e).getLength(),r.ships[e].row=a[e].row,r.ships[e].col=a[e].col,r.ships[e].isVertical=a[e].isVertical})),r},startMove:n,computerAttack:r}}();const qn=Rn;t().subscribe("AttackReceived",(function(e,t){qn.attack(t.boardView.playerView.gameView.game,t.row,t.col,t.boardView)})),t().subscribe("AttackFailed",(function(e,t){t.boardView.attackFailed(t.row,t.col)})),t().subscribe("AttackSucceded",(function(e,t){t.boardView.attackSucceded(t.row,t.col,t.isSunk)})),t().subscribe("SwitchPlayerTurn",(function(e,t){var n=t.gameView.getPlayerView(t.game.currentPlayerIndex);if(n.setTurn(),n.disableBoard(),!t.firstTurn){var r=t.gameView.getPlayerView(t.game.currentEnemyIndex);r.unsetTurn(),r.enableBoard()}qn.startMove(t.game,t.gameView)})),t().subscribe("GameEnded",(function(e,t){t.gameView.endGame(t.winnerIndex)})),t().subscribe("TurnIncreased",(function(e,t){t.gameView.changeTurn(t.newTurn,t.currentEnemyIndex)})),t().subscribe("ShipSunk",(function(e,t){t.playerView.sinkShip(t.shipLength)}));var Fn=document.getElementById("games");qn.generateGame(Fn,1)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,